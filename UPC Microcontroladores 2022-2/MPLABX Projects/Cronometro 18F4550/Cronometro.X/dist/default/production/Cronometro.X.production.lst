

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Jul 01 16:35:13 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40  0000                     
    41                           ; Version 2.40
    42                           ; Generated 17/11/2021 GMT
    43                           ; 
    44                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4550 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     _T0CONbits	set	4053
    77  0000                     _PORTAbits	set	3968
    78  0000                     _LATBbits	set	3978
    79  0000                     _TRISAbits	set	3986
    80  0000                     _ADCON1bits	set	4033
    81  0000                     _T0CON	set	4053
    82  0000                     _INTCONbits	set	4082
    83  0000                     _TRISDbits	set	3989
    84  0000                     _TRISBbits	set	3987
    85  0000                     _LATDbits	set	3980
    86  0000                     _TMR0	set	4054
    87                           
    88                           	psect	smallconst
    89  000800                     __psmallconst:
    90                           	callstack 0
    91  000800  00                 	db	0
    92  000801                     STR_2:
    93  000801  25                 	db	37
    94  000802  30                 	db	48	;'0'
    95  000803  32                 	db	50	;'2'
    96  000804  64                 	db	100	;'d'
    97  000805  3A                 	db	58	;':'
    98  000806  25                 	db	37
    99  000807  30                 	db	48	;'0'
   100  000808  32                 	db	50	;'2'
   101  000809  64                 	db	100	;'d'
   102  00080A  3A                 	db	58	;':'
   103  00080B  25                 	db	37
   104  00080C  30                 	db	48	;'0'
   105  00080D  32                 	db	50	;'2'
   106  00080E  64                 	db	100	;'d'
   107  00080F  00                 	db	0
   108  000810                     STR_1:
   109  000810  43                 	db	67	;'C'
   110  000811  52                 	db	82	;'R'
   111  000812  4F                 	db	79	;'O'
   112  000813  4E                 	db	78	;'N'
   113  000814  4F                 	db	79	;'O'
   114  000815  4D                 	db	77	;'M'
   115  000816  45                 	db	69	;'E'
   116  000817  54                 	db	84	;'T'
   117  000818  52                 	db	82	;'R'
   118  000819  4F                 	db	79	;'O'
   119  00081A  00                 	db	0
   120  00081B  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           ; #config settings
   123                           
   124                           	psect	cinit
   125  0018D6                     __pcinit:
   126                           	callstack 0
   127  0018D6                     start_initialization:
   128                           	callstack 0
   129  0018D6                     __initialization:
   130                           	callstack 0
   131                           
   132                           ; Clear objects allocated to BANK0 (67 bytes)
   133  0018D6  EE00  F060         	lfsr	0,__pbssBANK0
   134  0018DA  0E43               	movlw	67
   135  0018DC                     clear_0:
   136  0018DC  6AEE               	clrf	postinc0,c
   137  0018DE  06E8               	decf	wreg,f,c
   138  0018E0  E1FD               	bnz	clear_0
   139  0018E2                     end_of_initialization:
   140                           	callstack 0
   141  0018E2                     __end_of__initialization:
   142                           	callstack 0
   143  0018E2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   144  0018E4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   145  0018E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   146  0018E8  6EF8               	movwf	tblptru,c
   147  0018EA  0100               	movlb	0
   148  0018EC  EF0E  F004         	goto	_main	;jump to C main() function
   149                           
   150                           	psect	bssBANK0
   151  000060                     __pbssBANK0:
   152                           	callstack 0
   153  000060                     _nout:
   154                           	callstack 0
   155  000060                     	ds	2
   156  000062                     _width:
   157                           	callstack 0
   158  000062                     	ds	2
   159  000064                     _prec:
   160                           	callstack 0
   161  000064                     	ds	2
   162  000066                     _flags:
   163                           	callstack 0
   164  000066                     	ds	2
   165  000068                     _st_desc:
   166                           	callstack 0
   167  000068                     	ds	2
   168  00006A                     _st_mode:
   169                           	callstack 0
   170  00006A                     	ds	2
   171  00006C                     _modo:
   172                           	callstack 0
   173  00006C                     	ds	2
   174  00006E                     _cen:
   175                           	callstack 0
   176  00006E                     	ds	1
   177  00006F                     _seg:
   178                           	callstack 0
   179  00006F                     	ds	1
   180  000070                     _min:
   181                           	callstack 0
   182  000070                     	ds	1
   183  000071                     _dbuf:
   184                           	callstack 0
   185  000071                     	ds	32
   186  000091                     _buf_lcd:
   187                           	callstack 0
   188  000091                     	ds	18
   189                           
   190                           	psect	cstackBANK0
   191  0000A3                     __pcstackBANK0:
   192                           	callstack 0
   193  0000A3                     sprintf@ap:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x0
   197  0000A3                     	ds	1
   198  0000A4                     sprintf@f:
   199                           	callstack 0
   200                           
   201                           ; 11 bytes @ 0x1
   202  0000A4                     	ds	11
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	callstack 0
   207  000001                     ?_strlen:
   208                           	callstack 0
   209  000001                     ?_isdigit:
   210                           	callstack 0
   211  000001                     ?_isspace:
   212                           	callstack 0
   213  000001                     ?___wmul:
   214                           	callstack 0
   215  000001                     ?___aodiv:
   216                           	callstack 0
   217  000001                     ?___aomod:
   218                           	callstack 0
   219  000001                     Lcd_Send_Nibble@nibble:
   220                           	callstack 0
   221  000001                     strlen@s:
   222                           	callstack 0
   223  000001                     ___wmul@multiplier:
   224                           	callstack 0
   225  000001                     isdigit@c:
   226                           	callstack 0
   227  000001                     isspace@c:
   228                           	callstack 0
   229  000001                     fputc@c:
   230                           	callstack 0
   231  000001                     ___aodiv@dividend:
   232                           	callstack 0
   233  000001                     ___aomod@dividend:
   234                           	callstack 0
   235                           
   236                           ; 8 bytes @ 0x0
   237  000001                     	ds	1
   238  000002                     Lcd_Cmd@cmd:
   239                           	callstack 0
   240  000002                     Lcd_Write_Char@dat:
   241                           	callstack 0
   242                           
   243                           ; 1 bytes @ 0x1
   244  000002                     	ds	1
   245  000003                     ??_Lcd_Init:
   246  000003                     ??_isdigit:
   247  000003                     ??_isspace:
   248  000003                     Lcd_Set_Cursor@y:
   249                           	callstack 0
   250  000003                     fputc@fp:
   251                           	callstack 0
   252  000003                     strlen@a:
   253                           	callstack 0
   254  000003                     Lcd_Write_String@str:
   255                           	callstack 0
   256  000003                     ___wmul@multiplicand:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260  000003                     	ds	1
   261  000004                     ??_Lcd_Set_Cursor:
   262  000004                     ??_fputc:
   263                           
   264                           ; 1 bytes @ 0x3
   265  000004                     	ds	1
   266  000005                     Lcd_Init@i:
   267                           	callstack 0
   268  000005                     ___wmul@product:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x4
   272  000005                     	ds	1
   273  000006                     Lcd_Set_Cursor@x:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0x5
   277  000006                     	ds	1
   278  000007                     Lcd_Set_Cursor@address:
   279                           	callstack 0
   280  000007                     _isspace$1130:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x6
   284  000007                     	ds	1
   285  000008                     ?_atoi:
   286                           	callstack 0
   287  000008                     atoi@s:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0x7
   291  000008                     	ds	1
   292  000009                     fputs@s:
   293                           	callstack 0
   294  000009                     ___aodiv@divisor:
   295                           	callstack 0
   296  000009                     ___aomod@divisor:
   297                           	callstack 0
   298                           
   299                           ; 8 bytes @ 0x8
   300  000009                     	ds	1
   301  00000A                     ??_atoi:
   302  00000A                     fputs@fp:
   303                           	callstack 0
   304                           
   305                           ; 1 bytes @ 0x9
   306  00000A                     	ds	1
   307  00000B                     fputs@c:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0xA
   311  00000B                     	ds	1
   312  00000C                     fputs@i:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0xB
   316  00000C                     	ds	2
   317  00000E                     ?_pad:
   318                           	callstack 0
   319  00000E                     pad@fp:
   320                           	callstack 0
   321  00000E                     atoi@neg:
   322                           	callstack 0
   323                           
   324                           ; 2 bytes @ 0xD
   325  00000E                     	ds	1
   326  00000F                     pad@buf:
   327                           	callstack 0
   328                           
   329                           ; 1 bytes @ 0xE
   330  00000F                     	ds	1
   331  000010                     pad@p:
   332                           	callstack 0
   333  000010                     atoi@n:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0xF
   337  000010                     	ds	1
   338  000011                     ___aodiv@counter:
   339                           	callstack 0
   340  000011                     ___aomod@counter:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x10
   344  000011                     	ds	1
   345  000012                     ??_pad:
   346  000012                     ___aodiv@sign:
   347                           	callstack 0
   348  000012                     ___aomod@sign:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0x11
   352  000012                     	ds	1
   353  000013                     ?_abs:
   354                           	callstack 0
   355  000013                     pad@i:
   356                           	callstack 0
   357  000013                     abs@a:
   358                           	callstack 0
   359  000013                     ___aodiv@quotient:
   360                           	callstack 0
   361                           
   362                           ; 8 bytes @ 0x12
   363  000013                     	ds	2
   364  000015                     ??_abs:
   365  000015                     pad@w:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x14
   369  000015                     	ds	6
   370  00001B                     ?_dtoa:
   371                           	callstack 0
   372  00001B                     dtoa@fp:
   373                           	callstack 0
   374                           
   375                           ; 1 bytes @ 0x1A
   376  00001B                     	ds	1
   377  00001C                     dtoa@d:
   378                           	callstack 0
   379                           
   380                           ; 8 bytes @ 0x1B
   381  00001C                     	ds	8
   382  000024                     ??_dtoa:
   383                           
   384                           ; 1 bytes @ 0x23
   385  000024                     	ds	8
   386  00002C                     _dtoa$1081:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x2B
   390  00002C                     	ds	2
   391  00002E                     dtoa@p:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x2D
   395  00002E                     	ds	2
   396  000030                     dtoa@w:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x2F
   400  000030                     	ds	2
   401  000032                     dtoa@s:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x31
   405  000032                     	ds	2
   406  000034                     dtoa@n:
   407                           	callstack 0
   408                           
   409                           ; 8 bytes @ 0x33
   410  000034                     	ds	8
   411  00003C                     dtoa@i:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x3B
   415  00003C                     	ds	2
   416  00003E                     ?_vfpfcnvrt:
   417                           	callstack 0
   418  00003E                     vfpfcnvrt@fp:
   419                           	callstack 0
   420                           
   421                           ; 1 bytes @ 0x3D
   422  00003E                     	ds	1
   423  00003F                     vfpfcnvrt@fmt:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0x3E
   427  00003F                     	ds	1
   428  000040                     vfpfcnvrt@ap:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0x3F
   432  000040                     	ds	1
   433  000041                     ??_vfpfcnvrt:
   434                           
   435                           ; 1 bytes @ 0x40
   436  000041                     	ds	4
   437  000045                     vfpfcnvrt@ll:
   438                           	callstack 0
   439                           
   440                           ; 8 bytes @ 0x44
   441  000045                     	ds	8
   442  00004D                     vfpfcnvrt@done:
   443                           	callstack 0
   444                           
   445                           ; 2 bytes @ 0x4C
   446  00004D                     	ds	2
   447  00004F                     ?_vfprintf:
   448                           	callstack 0
   449  00004F                     vfprintf@fp:
   450                           	callstack 0
   451                           
   452                           ; 1 bytes @ 0x4E
   453  00004F                     	ds	1
   454  000050                     vfprintf@fmt:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x4F
   458  000050                     	ds	1
   459  000051                     vfprintf@ap:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x50
   463  000051                     	ds	1
   464  000052                     vfprintf@cfmt:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x51
   468  000052                     	ds	1
   469  000053                     ?_sprintf:
   470                           	callstack 0
   471  000053                     sprintf@s:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0x52
   475  000053                     	ds	1
   476  000054                     sprintf@fmt:
   477                           	callstack 0
   478                           
   479                           ; 1 bytes @ 0x53
   480  000054                     	ds	7
   481  00005B                     ??_main:
   482                           
   483                           ; 1 bytes @ 0x5A
   484  00005B                     	ds	2
   485  00005D                     main@i:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x5C
   489  00005D                     	ds	2
   490                           
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 28 in file "Cronometro.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  i               2   92[COMRAM] short 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : 0/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   510 ;;      Params:         0       0       0       0       0       0       0       0       0
   511 ;;      Locals:         2       0       0       0       0       0       0       0       0
   512 ;;      Temps:          2       0       0       0       0       0       0       0       0
   513 ;;      Totals:         4       0       0       0       0       0       0       0       0
   514 ;;Total ram usage:        4 bytes
   515 ;; Hardware stack levels required when called: 9
   516 ;; This function calls:
   517 ;;		_Lcd_Init
   518 ;;		_Lcd_Set_Cursor
   519 ;;		_Lcd_Write_String
   520 ;;		_sprintf
   521 ;; This function is called by:
   522 ;;		Startup code after reset
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text0
   527  00081C                     __ptext0:
   528                           	callstack 0
   529  00081C                     _main:
   530                           	callstack 22
   531                           
   532                           ;Cronometro.c: 30:     ADCON1bits.PCFG = 0x0F;
   533                           
   534                           ;incstack = 0
   535  00081C  0E0F               	movlw	15
   536  00081E  12C1               	iorwf	193,f,c	;volatile
   537                           
   538                           ;Cronometro.c: 31:     TRISAbits.RA0 = 1;
   539  000820  8092               	bsf	146,0,c	;volatile
   540                           
   541                           ;Cronometro.c: 32:     TRISAbits.RA1 = 1;
   542  000822  8292               	bsf	146,1,c	;volatile
   543                           
   544                           ;Cronometro.c: 33:     TRISAbits.RA2 = 1;
   545  000824  8492               	bsf	146,2,c	;volatile
   546                           
   547                           ;Cronometro.c: 34:     TRISBbits.RB0 = 0;
   548  000826  9093               	bcf	147,0,c	;volatile
   549                           
   550                           ;Cronometro.c: 35:     TRISBbits.RB2 = 0;
   551  000828  9493               	bcf	147,2,c	;volatile
   552                           
   553                           ;Cronometro.c: 36:     TRISBbits.RB3 = 0;
   554  00082A  9693               	bcf	147,3,c	;volatile
   555                           
   556                           ;Cronometro.c: 37:     LATBbits.LB0 = 0;
   557  00082C  908A               	bcf	138,0,c	;volatile
   558                           
   559                           ;Cronometro.c: 38:     LATBbits.LB2 = 1;
   560  00082E  848A               	bsf	138,2,c	;volatile
   561                           
   562                           ;Cronometro.c: 39:     LATBbits.LB3 = 0;
   563  000830  968A               	bcf	138,3,c	;volatile
   564                           
   565                           ;Cronometro.c: 40:     INTCONbits.GIE = 1;
   566  000832  8EF2               	bsf	242,7,c	;volatile
   567                           
   568                           ;Cronometro.c: 41:     INTCONbits.TMR0IE = 1;
   569  000834  8AF2               	bsf	242,5,c	;volatile
   570                           
   571                           ;Cronometro.c: 42:     INTCONbits.TMR0IF = 0;
   572  000836  94F2               	bcf	242,2,c	;volatile
   573                           
   574                           ;Cronometro.c: 43:     T0CON = 0x07;
   575  000838  0E07               	movlw	7
   576  00083A  6ED5               	movwf	213,c	;volatile
   577                           
   578                           ;Cronometro.c: 44:     TMR0 = 65067;
   579  00083C  0EFE               	movlw	254
   580  00083E  6ED7               	movwf	215,c	;volatile
   581  000840  0E2B               	movlw	43
   582  000842  6ED6               	movwf	214,c	;volatile
   583                           
   584                           ;Cronometro.c: 45:     Lcd_Init();
   585  000844  EC17  F00A         	call	_Lcd_Init	;wreg free
   586                           
   587                           ;Cronometro.c: 47:     Lcd_Set_Cursor(4,1);
   588  000848  0E01               	movlw	1
   589  00084A  6E03               	movwf	Lcd_Set_Cursor@y^0,c
   590  00084C  0E04               	movlw	4
   591  00084E  EC43  F00B         	call	_Lcd_Set_Cursor
   592                           
   593                           ;Cronometro.c: 48:     Lcd_Write_String("CRONOMETRO");
   594  000852  0E10               	movlw	low STR_1
   595  000854  6E03               	movwf	Lcd_Write_String@str^0,c
   596  000856  5003               	movf	Lcd_Write_String@str^0,w,c
   597  000858  A4D8               	btfss	status,2,c
   598  00085A  0E08               	movlw	high __smallconst
   599  00085C  6E04               	movwf	(Lcd_Write_String@str+1)^0,c
   600  00085E  EC1A  F00B         	call	_Lcd_Write_String	;wreg free
   601                           
   602                           ;Cronometro.c: 49:     Lcd_Set_Cursor(5,2);
   603  000862  0E02               	movlw	2
   604  000864  6E03               	movwf	Lcd_Set_Cursor@y^0,c
   605  000866  0E05               	movlw	5
   606  000868  EC43  F00B         	call	_Lcd_Set_Cursor
   607                           
   608                           ;Cronometro.c: 50:     sprintf(buf_lcd, "%02d:%02d:%02d", min, seg, cen);
   609  00086C  0E91               	movlw	low _buf_lcd
   610  00086E  6E53               	movwf	sprintf@s^0,c
   611  000870  0E01               	movlw	low STR_2
   612  000872  6E54               	movwf	sprintf@fmt^0,c
   613  000874  0100               	movlb	0	; () banked
   614  000876  5170               	movf	_min& (0+255),w,b
   615  000878  6E55               	movwf	(?_sprintf+2)^0,c
   616  00087A  6A56               	clrf	(?_sprintf+3)^0,c
   617  00087C  BE55               	btfsc	(?_sprintf+2)^0,7,c
   618  00087E  0656               	decf	(?_sprintf+3)^0,f,c
   619  000880  516F               	movf	_seg& (0+255),w,b
   620  000882  6E57               	movwf	(?_sprintf+4)^0,c
   621  000884  6A58               	clrf	(?_sprintf+5)^0,c
   622  000886  BE57               	btfsc	(?_sprintf+4)^0,7,c
   623  000888  0658               	decf	(?_sprintf+5)^0,f,c
   624  00088A  516E               	movf	_cen& (0+255),w,b
   625  00088C  6E59               	movwf	(?_sprintf+6)^0,c
   626  00088E  6A5A               	clrf	(?_sprintf+7)^0,c
   627  000890  BE59               	btfsc	(?_sprintf+6)^0,7,c
   628  000892  065A               	decf	(?_sprintf+7)^0,f,c
   629  000894  ECAA  F00B         	call	_sprintf	;wreg free
   630                           
   631                           ; BSR set to: 0
   632                           ;Cronometro.c: 51:     Lcd_Write_String(buf_lcd);
   633  000898  0E91               	movlw	low _buf_lcd
   634  00089A  6E03               	movwf	Lcd_Write_String@str^0,c
   635  00089C  6A04               	clrf	(Lcd_Write_String@str+1)^0,c
   636  00089E  EC1A  F00B         	call	_Lcd_Write_String	;wreg free
   637  0008A2                     l2204:
   638                           
   639                           ;Cronometro.c: 54:     {;Cronometro.c: 55:         if(PORTAbits.RA0 == 1 && st_mode == 0
      +                          )
   640  0008A2  A080               	btfss	128,0,c	;volatile
   641  0008A4  D067               	goto	l2236
   642  0008A6  0100               	movlb	0	; () banked
   643  0008A8  516A               	movf	_st_mode& (0+255),w,b
   644  0008AA  116B               	iorwf	(_st_mode+1)& (0+255),w,b
   645  0008AC  A4D8               	btfss	status,2,c
   646  0008AE  D062               	goto	l2236
   647                           
   648                           ; BSR set to: 0
   649                           ;Cronometro.c: 56:         {;Cronometro.c: 57:             _delay((unsigned long)((5)*(4
      +                          8000000/4000.0)));
   650  0008B0  0E4E               	movlw	78
   651  0008B2  6E5B               	movwf	??_main^0,c
   652  0008B4  0EEB               	movlw	235
   653  0008B6                     u1857:
   654  0008B6  2EE8               	decfsz	wreg,f,c
   655  0008B8  D7FE               	bra	u1857
   656  0008BA  2E5B               	decfsz	??_main^0,f,c
   657  0008BC  D7FC               	bra	u1857
   658  0008BE  F000               	nop	
   659  0008C0                     l49:
   660  0008C0  B080               	btfsc	128,0,c	;volatile
   661  0008C2  D7FE               	goto	l49
   662                           
   663                           ;Cronometro.c: 59:             _delay((unsigned long)((20)*(48000000/4000.0)));
   664  0008C4  0E02               	movlw	2
   665  0008C6  6E5C               	movwf	(??_main+1)^0,c
   666  0008C8  0E38               	movlw	56
   667  0008CA  6E5B               	movwf	??_main^0,c
   668  0008CC  0EAD               	movlw	173
   669  0008CE                     u1867:
   670  0008CE  2EE8               	decfsz	wreg,f,c
   671  0008D0  D7FE               	bra	u1867
   672  0008D2  2E5B               	decfsz	??_main^0,f,c
   673  0008D4  D7FC               	bra	u1867
   674  0008D6  2E5C               	decfsz	(??_main+1)^0,f,c
   675  0008D8  D7FA               	bra	u1867
   676  0008DA  F000               	nop	
   677                           
   678                           ;Cronometro.c: 60:             modo = !modo;
   679  0008DC  0100               	movlb	0	; () banked
   680  0008DE  516C               	movf	_modo& (0+255),w,b
   681  0008E0  116D               	iorwf	(_modo+1)& (0+255),w,b
   682  0008E2  A4D8               	btfss	status,2,c
   683  0008E4  D002               	goto	u1610
   684  0008E6  0E01               	movlw	1
   685  0008E8  D001               	goto	u1620
   686  0008EA                     u1610:
   687  0008EA  0E00               	movlw	0
   688  0008EC                     u1620:
   689  0008EC  6F6C               	movwf	_modo& (0+255),b
   690  0008EE  6B6D               	clrf	(_modo+1)& (0+255),b
   691                           
   692                           ;Cronometro.c: 62:             switch(modo)
   693  0008F0  D012               	goto	l2228
   694  0008F2                     l2214:
   695                           
   696                           ; BSR set to: 0
   697                           ;Cronometro.c: 65:                     min = 0;
   698  0008F2  0E00               	movlw	0
   699  0008F4  6F70               	movwf	_min& (0+255),b
   700                           
   701                           ;Cronometro.c: 66:                     seg = 0;
   702  0008F6  0E00               	movlw	0
   703  0008F8  6F6F               	movwf	_seg& (0+255),b
   704                           
   705                           ;Cronometro.c: 67:                     cen = 0;
   706  0008FA  0E00               	movlw	0
   707  0008FC  6F6E               	movwf	_cen& (0+255),b
   708                           
   709                           ; BSR set to: 0
   710                           ;Cronometro.c: 68:                     LATBbits.LB2 = 1;
   711  0008FE  848A               	bsf	138,2,c	;volatile
   712                           
   713                           ; BSR set to: 0
   714                           ;Cronometro.c: 69:                     LATBbits.LB3 = 0;
   715  000900  968A               	bcf	138,3,c	;volatile
   716                           
   717                           ;Cronometro.c: 70:                     break;
   718  000902  D018               	goto	l2230
   719  000904                     l2220:
   720                           
   721                           ; BSR set to: 0
   722                           ;Cronometro.c: 73:                     min = 0;
   723  000904  0E00               	movlw	0
   724  000906  6F70               	movwf	_min& (0+255),b
   725                           
   726                           ;Cronometro.c: 74:                     seg = 1;
   727  000908  0E01               	movlw	1
   728  00090A  6F6F               	movwf	_seg& (0+255),b
   729                           
   730                           ;Cronometro.c: 75:                     cen = 0;
   731  00090C  0E00               	movlw	0
   732  00090E  6F6E               	movwf	_cen& (0+255),b
   733                           
   734                           ; BSR set to: 0
   735                           ;Cronometro.c: 76:                     LATBbits.LB2 = 0;
   736  000910  948A               	bcf	138,2,c	;volatile
   737                           
   738                           ; BSR set to: 0
   739                           ;Cronometro.c: 77:                     LATBbits.LB3 = 1;
   740  000912  868A               	bsf	138,3,c	;volatile
   741                           
   742                           ;Cronometro.c: 78:                     break;
   743  000914  D00F               	goto	l2230
   744  000916                     l2228:
   745                           
   746                           ; BSR set to: 0
   747  000916  C06C  F05B         	movff	_modo,??_main
   748  00091A  C06D  F05C         	movff	_modo+1,??_main+1
   749                           
   750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   751                           ; Switch size 1, requested type "simple"
   752                           ; Number of cases is 1, Range of values is 0 to 0
   753                           ; switch strategies available:
   754                           ; Name         Instructions Cycles
   755                           ; simple_byte            4     3 (average)
   756                           ;	Chosen strategy is simple_byte
   757  00091E  505C               	movf	(??_main+1)^0,w,c
   758  000920  0A00               	xorlw	0	; case 0
   759  000922  A4D8               	btfss	status,2,c
   760  000924  D007               	goto	l2230
   761                           
   762                           ; BSR set to: 0
   763                           ; Switch size 1, requested type "simple"
   764                           ; Number of cases is 2, Range of values is 0 to 1
   765                           ; switch strategies available:
   766                           ; Name         Instructions Cycles
   767                           ; simple_byte            7     4 (average)
   768                           ;	Chosen strategy is simple_byte
   769  000926  505B               	movf	??_main^0,w,c
   770  000928  0A00               	xorlw	0	; case 0
   771  00092A  B4D8               	btfsc	status,2,c
   772  00092C  D7E2               	goto	l2214
   773  00092E  0A01               	xorlw	1	; case 1
   774  000930  B4D8               	btfsc	status,2,c
   775  000932  D7E8               	goto	l2220
   776  000934                     l2230:
   777                           
   778                           ; BSR set to: 0
   779                           ;Cronometro.c: 80:             Lcd_Set_Cursor(5,2);
   780  000934  0E02               	movlw	2
   781  000936  6E03               	movwf	Lcd_Set_Cursor@y^0,c
   782  000938  0E05               	movlw	5
   783  00093A  EC43  F00B         	call	_Lcd_Set_Cursor
   784                           
   785                           ;Cronometro.c: 81:             sprintf(buf_lcd, "%02d:%02d:%02d", min, seg, cen);
   786  00093E  0E91               	movlw	low _buf_lcd
   787  000940  6E53               	movwf	sprintf@s^0,c
   788  000942  0E01               	movlw	low STR_2
   789  000944  6E54               	movwf	sprintf@fmt^0,c
   790  000946  0100               	movlb	0	; () banked
   791  000948  5170               	movf	_min& (0+255),w,b
   792  00094A  6E55               	movwf	(?_sprintf+2)^0,c
   793  00094C  6A56               	clrf	(?_sprintf+3)^0,c
   794  00094E  BE55               	btfsc	(?_sprintf+2)^0,7,c
   795  000950  0656               	decf	(?_sprintf+3)^0,f,c
   796  000952  516F               	movf	_seg& (0+255),w,b
   797  000954  6E57               	movwf	(?_sprintf+4)^0,c
   798  000956  6A58               	clrf	(?_sprintf+5)^0,c
   799  000958  BE57               	btfsc	(?_sprintf+4)^0,7,c
   800  00095A  0658               	decf	(?_sprintf+5)^0,f,c
   801  00095C  516E               	movf	_cen& (0+255),w,b
   802  00095E  6E59               	movwf	(?_sprintf+6)^0,c
   803  000960  6A5A               	clrf	(?_sprintf+7)^0,c
   804  000962  BE59               	btfsc	(?_sprintf+6)^0,7,c
   805  000964  065A               	decf	(?_sprintf+7)^0,f,c
   806  000966  ECAA  F00B         	call	_sprintf	;wreg free
   807                           
   808                           ; BSR set to: 0
   809                           ;Cronometro.c: 82:             Lcd_Write_String(buf_lcd);
   810  00096A  0E91               	movlw	low _buf_lcd
   811  00096C  6E03               	movwf	Lcd_Write_String@str^0,c
   812  00096E  6A04               	clrf	(Lcd_Write_String@str+1)^0,c
   813  000970  EC1A  F00B         	call	_Lcd_Write_String	;wreg free
   814  000974                     l2236:
   815                           
   816                           ;Cronometro.c: 85:         if(PORTAbits.RA1 == 1)
   817  000974  A280               	btfss	128,1,c	;volatile
   818  000976  D050               	goto	l56
   819                           
   820                           ;Cronometro.c: 86:         {;Cronometro.c: 87:             _delay((unsigned long)((5)*(4
      +                          8000000/4000.0)));
   821  000978  0E4E               	movlw	78
   822  00097A  6E5B               	movwf	??_main^0,c
   823  00097C  0EEB               	movlw	235
   824  00097E                     u1877:
   825  00097E  2EE8               	decfsz	wreg,f,c
   826  000980  D7FE               	bra	u1877
   827  000982  2E5B               	decfsz	??_main^0,f,c
   828  000984  D7FC               	bra	u1877
   829  000986  F000               	nop	
   830  000988                     l57:
   831  000988  B280               	btfsc	128,1,c	;volatile
   832  00098A  D7FE               	goto	l57
   833                           
   834                           ;Cronometro.c: 89:             _delay((unsigned long)((20)*(48000000/4000.0)));
   835  00098C  0E02               	movlw	2
   836  00098E  6E5C               	movwf	(??_main+1)^0,c
   837  000990  0E38               	movlw	56
   838  000992  6E5B               	movwf	??_main^0,c
   839  000994  0EAD               	movlw	173
   840  000996                     u1887:
   841  000996  2EE8               	decfsz	wreg,f,c
   842  000998  D7FE               	bra	u1887
   843  00099A  2E5B               	decfsz	??_main^0,f,c
   844  00099C  D7FC               	bra	u1887
   845  00099E  2E5C               	decfsz	(??_main+1)^0,f,c
   846  0009A0  D7FA               	bra	u1887
   847  0009A2  F000               	nop	
   848                           
   849                           ;Cronometro.c: 90:             st_mode = !st_mode;
   850  0009A4  0100               	movlb	0	; () banked
   851  0009A6  516A               	movf	_st_mode& (0+255),w,b
   852  0009A8  116B               	iorwf	(_st_mode+1)& (0+255),w,b
   853  0009AA  A4D8               	btfss	status,2,c
   854  0009AC  D002               	goto	u1650
   855  0009AE  0E01               	movlw	1
   856  0009B0  D001               	goto	u1660
   857  0009B2                     u1650:
   858  0009B2  0E00               	movlw	0
   859  0009B4                     u1660:
   860  0009B4  6F6A               	movwf	_st_mode& (0+255),b
   861  0009B6  6B6B               	clrf	(_st_mode+1)& (0+255),b
   862                           
   863                           ;Cronometro.c: 92:             switch(st_mode)
   864  0009B8  D020               	goto	l2256
   865  0009BA                     l61:
   866                           
   867                           ; BSR set to: 0
   868                           ;Cronometro.c: 95:                     T0CONbits.TMR0ON = 0;
   869  0009BA  9ED5               	bcf	213,7,c	;volatile
   870                           
   871                           ;Cronometro.c: 96:                     LATBbits.LB0 = 1;
   872  0009BC  808A               	bsf	138,0,c	;volatile
   873                           
   874                           ; BSR set to: 0
   875                           ;Cronometro.c: 97:                     _delay((unsigned long)((150)*(48000000/4000.0)));
   876  0009BE  0E0A               	movlw	10
   877  0009C0  6E5C               	movwf	(??_main+1)^0,c
   878  0009C2  0E22               	movlw	34
   879  0009C4  6E5B               	movwf	??_main^0,c
   880  0009C6  0EA1               	movlw	161
   881  0009C8                     u1897:
   882  0009C8  2EE8               	decfsz	wreg,f,c
   883  0009CA  D7FE               	bra	u1897
   884  0009CC  2E5B               	decfsz	??_main^0,f,c
   885  0009CE  D7FC               	bra	u1897
   886  0009D0  2E5C               	decfsz	(??_main+1)^0,f,c
   887  0009D2  D7FA               	bra	u1897
   888  0009D4  F000               	nop	
   889                           
   890                           ;Cronometro.c: 98:                     LATBbits.LB0 = 0;
   891  0009D6  908A               	bcf	138,0,c	;volatile
   892                           
   893                           ;Cronometro.c: 99:                     break;
   894  0009D8  D01F               	goto	l56
   895  0009DA                     l63:
   896                           
   897                           ; BSR set to: 0
   898                           ;Cronometro.c: 102:                     LATBbits.LB0 = 1;
   899  0009DA  808A               	bsf	138,0,c	;volatile
   900                           
   901                           ; BSR set to: 0
   902                           ;Cronometro.c: 103:                     _delay((unsigned long)((150)*(48000000/4000.0)))
      +                          ;
   903  0009DC  0E0A               	movlw	10
   904  0009DE  6E5C               	movwf	(??_main+1)^0,c
   905  0009E0  0E22               	movlw	34
   906  0009E2  6E5B               	movwf	??_main^0,c
   907  0009E4  0EA1               	movlw	161
   908  0009E6                     u1907:
   909  0009E6  2EE8               	decfsz	wreg,f,c
   910  0009E8  D7FE               	bra	u1907
   911  0009EA  2E5B               	decfsz	??_main^0,f,c
   912  0009EC  D7FC               	bra	u1907
   913  0009EE  2E5C               	decfsz	(??_main+1)^0,f,c
   914  0009F0  D7FA               	bra	u1907
   915  0009F2  F000               	nop	
   916                           
   917                           ;Cronometro.c: 104:                     LATBbits.LB0 = 0;
   918  0009F4  908A               	bcf	138,0,c	;volatile
   919                           
   920                           ;Cronometro.c: 105:                     T0CONbits.TMR0ON = 1;
   921  0009F6  8ED5               	bsf	213,7,c	;volatile
   922                           
   923                           ;Cronometro.c: 106:                     break;
   924  0009F8  D00F               	goto	l56
   925  0009FA                     l2256:
   926                           
   927                           ; BSR set to: 0
   928  0009FA  C06A  F05B         	movff	_st_mode,??_main
   929  0009FE  C06B  F05C         	movff	_st_mode+1,??_main+1
   930                           
   931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   932                           ; Switch size 1, requested type "simple"
   933                           ; Number of cases is 1, Range of values is 0 to 0
   934                           ; switch strategies available:
   935                           ; Name         Instructions Cycles
   936                           ; simple_byte            4     3 (average)
   937                           ;	Chosen strategy is simple_byte
   938  000A02  505C               	movf	(??_main+1)^0,w,c
   939  000A04  0A00               	xorlw	0	; case 0
   940  000A06  A4D8               	btfss	status,2,c
   941  000A08  D007               	goto	l56
   942                           
   943                           ; BSR set to: 0
   944                           ; Switch size 1, requested type "simple"
   945                           ; Number of cases is 2, Range of values is 0 to 1
   946                           ; switch strategies available:
   947                           ; Name         Instructions Cycles
   948                           ; simple_byte            7     4 (average)
   949                           ;	Chosen strategy is simple_byte
   950  000A0A  505B               	movf	??_main^0,w,c
   951  000A0C  0A00               	xorlw	0	; case 0
   952  000A0E  B4D8               	btfsc	status,2,c
   953  000A10  D7D4               	goto	l61
   954  000A12  0A01               	xorlw	1	; case 1
   955  000A14  B4D8               	btfsc	status,2,c
   956  000A16  D7E1               	goto	l63
   957  000A18                     l56:
   958                           
   959                           ;Cronometro.c: 110:         if(PORTAbits.RA2 == 1 && st_mode == 0)
   960  000A18  A480               	btfss	128,2,c	;volatile
   961  000A1A  D070               	goto	l2288
   962  000A1C  0100               	movlb	0	; () banked
   963  000A1E  516A               	movf	_st_mode& (0+255),w,b
   964  000A20  116B               	iorwf	(_st_mode+1)& (0+255),w,b
   965  000A22  A4D8               	btfss	status,2,c
   966  000A24  D06B               	goto	l2288
   967                           
   968                           ; BSR set to: 0
   969                           ;Cronometro.c: 111:         {;Cronometro.c: 112:             _delay((unsigned long)((5)*
      +                          (48000000/4000.0)));
   970  000A26  0E4E               	movlw	78
   971  000A28  6E5B               	movwf	??_main^0,c
   972  000A2A  0EEB               	movlw	235
   973  000A2C                     u1917:
   974  000A2C  2EE8               	decfsz	wreg,f,c
   975  000A2E  D7FE               	bra	u1917
   976  000A30  2E5B               	decfsz	??_main^0,f,c
   977  000A32  D7FC               	bra	u1917
   978  000A34  F000               	nop	
   979  000A36                     l65:
   980  000A36  B480               	btfsc	128,2,c	;volatile
   981  000A38  D7FE               	goto	l65
   982                           
   983                           ;Cronometro.c: 114:             _delay((unsigned long)((20)*(48000000/4000.0)));
   984  000A3A  0E02               	movlw	2
   985  000A3C  6E5C               	movwf	(??_main+1)^0,c
   986  000A3E  0E38               	movlw	56
   987  000A40  6E5B               	movwf	??_main^0,c
   988  000A42  0EAD               	movlw	173
   989  000A44                     u1927:
   990  000A44  2EE8               	decfsz	wreg,f,c
   991  000A46  D7FE               	bra	u1927
   992  000A48  2E5B               	decfsz	??_main^0,f,c
   993  000A4A  D7FC               	bra	u1927
   994  000A4C  2E5C               	decfsz	(??_main+1)^0,f,c
   995  000A4E  D7FA               	bra	u1927
   996  000A50  F000               	nop	
   997                           
   998                           ;Cronometro.c: 116:             if(modo == 0){
   999  000A52  0100               	movlb	0	; () banked
  1000  000A54  516C               	movf	_modo& (0+255),w,b
  1001  000A56  116D               	iorwf	(_modo+1)& (0+255),w,b
  1002  000A58  A4D8               	btfss	status,2,c
  1003  000A5A  D007               	goto	l2268
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;Cronometro.c: 117:                 min = 0;
  1007  000A5C  0E00               	movlw	0
  1008  000A5E  6F70               	movwf	_min& (0+255),b
  1009                           
  1010                           ;Cronometro.c: 118:                 seg = 0;
  1011  000A60  0E00               	movlw	0
  1012  000A62  6F6F               	movwf	_seg& (0+255),b
  1013                           
  1014                           ;Cronometro.c: 119:                 cen = 0;
  1015  000A64  0E00               	movlw	0
  1016  000A66  6F6E               	movwf	_cen& (0+255),b
  1017                           
  1018                           ;Cronometro.c: 120:             }else{
  1019  000A68  D029               	goto	l2282
  1020  000A6A                     l2268:
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;Cronometro.c: 121:                 _delay((unsigned long)((5)*(48000000/4000.0)));
  1024  000A6A  0E4E               	movlw	78
  1025  000A6C  6E5B               	movwf	??_main^0,c
  1026  000A6E  0EEB               	movlw	235
  1027  000A70                     u1937:
  1028  000A70  2EE8               	decfsz	wreg,f,c
  1029  000A72  D7FE               	bra	u1937
  1030  000A74  2E5B               	decfsz	??_main^0,f,c
  1031  000A76  D7FC               	bra	u1937
  1032  000A78  F000               	nop	
  1033  000A7A                     l70:
  1034  000A7A  B480               	btfsc	128,2,c	;volatile
  1035  000A7C  D7FE               	goto	l70
  1036                           
  1037                           ;Cronometro.c: 123:                 _delay((unsigned long)((20)*(48000000/4000.0)));
  1038  000A7E  0E02               	movlw	2
  1039  000A80  6E5C               	movwf	(??_main+1)^0,c
  1040  000A82  0E38               	movlw	56
  1041  000A84  6E5B               	movwf	??_main^0,c
  1042  000A86  0EAD               	movlw	173
  1043  000A88                     u1947:
  1044  000A88  2EE8               	decfsz	wreg,f,c
  1045  000A8A  D7FE               	bra	u1947
  1046  000A8C  2E5B               	decfsz	??_main^0,f,c
  1047  000A8E  D7FC               	bra	u1947
  1048  000A90  2E5C               	decfsz	(??_main+1)^0,f,c
  1049  000A92  D7FA               	bra	u1947
  1050  000A94  F000               	nop	
  1051                           
  1052                           ;Cronometro.c: 125:                 seg++;
  1053  000A96  0100               	movlb	0	; () banked
  1054  000A98  2B6F               	incf	_seg& (0+255),f,b
  1055                           
  1056                           ;Cronometro.c: 126:                 if(seg > 59){
  1057  000A9A  516F               	movf	_seg& (0+255),w,b
  1058  000A9C  0A80               	xorlw	128
  1059  000A9E  0F44               	addlw	-188
  1060  000AA0  A0D8               	btfss	status,0,c
  1061  000AA2  D00C               	goto	l2282
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;Cronometro.c: 127:                     seg = 0;
  1065  000AA4  0E00               	movlw	0
  1066  000AA6  6F6F               	movwf	_seg& (0+255),b
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;Cronometro.c: 128:                     min++;
  1070  000AA8  2B70               	incf	_min& (0+255),f,b
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;Cronometro.c: 129:                     if(min > 59){
  1074  000AAA  5170               	movf	_min& (0+255),w,b
  1075  000AAC  0A80               	xorlw	128
  1076  000AAE  0F44               	addlw	-188
  1077  000AB0  A0D8               	btfss	status,0,c
  1078  000AB2  D004               	goto	l2282
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;Cronometro.c: 130:                         min = 0;
  1082  000AB4  0E00               	movlw	0
  1083  000AB6  6F70               	movwf	_min& (0+255),b
  1084                           
  1085                           ;Cronometro.c: 131:                         seg = 0;
  1086  000AB8  0E00               	movlw	0
  1087  000ABA  6F6F               	movwf	_seg& (0+255),b
  1088  000ABC                     l2282:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;Cronometro.c: 135:             Lcd_Set_Cursor(5,2);
  1092  000ABC  0E02               	movlw	2
  1093  000ABE  6E03               	movwf	Lcd_Set_Cursor@y^0,c
  1094  000AC0  0E05               	movlw	5
  1095  000AC2  EC43  F00B         	call	_Lcd_Set_Cursor
  1096                           
  1097                           ;Cronometro.c: 136:             sprintf(buf_lcd, "%02d:%02d:%02d", min, seg, cen);
  1098  000AC6  0E91               	movlw	low _buf_lcd
  1099  000AC8  6E53               	movwf	sprintf@s^0,c
  1100  000ACA  0E01               	movlw	low STR_2
  1101  000ACC  6E54               	movwf	sprintf@fmt^0,c
  1102  000ACE  0100               	movlb	0	; () banked
  1103  000AD0  5170               	movf	_min& (0+255),w,b
  1104  000AD2  6E55               	movwf	(?_sprintf+2)^0,c
  1105  000AD4  6A56               	clrf	(?_sprintf+3)^0,c
  1106  000AD6  BE55               	btfsc	(?_sprintf+2)^0,7,c
  1107  000AD8  0656               	decf	(?_sprintf+3)^0,f,c
  1108  000ADA  516F               	movf	_seg& (0+255),w,b
  1109  000ADC  6E57               	movwf	(?_sprintf+4)^0,c
  1110  000ADE  6A58               	clrf	(?_sprintf+5)^0,c
  1111  000AE0  BE57               	btfsc	(?_sprintf+4)^0,7,c
  1112  000AE2  0658               	decf	(?_sprintf+5)^0,f,c
  1113  000AE4  516E               	movf	_cen& (0+255),w,b
  1114  000AE6  6E59               	movwf	(?_sprintf+6)^0,c
  1115  000AE8  6A5A               	clrf	(?_sprintf+7)^0,c
  1116  000AEA  BE59               	btfsc	(?_sprintf+6)^0,7,c
  1117  000AEC  065A               	decf	(?_sprintf+7)^0,f,c
  1118  000AEE  ECAA  F00B         	call	_sprintf	;wreg free
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;Cronometro.c: 137:             Lcd_Write_String(buf_lcd);
  1122  000AF2  0E91               	movlw	low _buf_lcd
  1123  000AF4  6E03               	movwf	Lcd_Write_String@str^0,c
  1124  000AF6  6A04               	clrf	(Lcd_Write_String@str+1)^0,c
  1125  000AF8  EC1A  F00B         	call	_Lcd_Write_String	;wreg free
  1126  000AFC                     l2288:
  1127                           
  1128                           ;Cronometro.c: 140:         if(st_mode == 1)
  1129  000AFC  0100               	movlb	0	; () banked
  1130  000AFE  056A               	decf	_st_mode& (0+255),w,b
  1131  000B00  116B               	iorwf	(_st_mode+1)& (0+255),w,b
  1132  000B02  A4D8               	btfss	status,2,c
  1133  000B04  D020               	goto	l2296
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;Cronometro.c: 141:         {;Cronometro.c: 142:             Lcd_Set_Cursor(5,2);
  1137  000B06  0E02               	movlw	2
  1138  000B08  6E03               	movwf	Lcd_Set_Cursor@y^0,c
  1139  000B0A  0E05               	movlw	5
  1140  000B0C  EC43  F00B         	call	_Lcd_Set_Cursor
  1141                           
  1142                           ;Cronometro.c: 143:             sprintf(buf_lcd, "%02d:%02d:%02d", min, seg, cen);
  1143  000B10  0E91               	movlw	low _buf_lcd
  1144  000B12  6E53               	movwf	sprintf@s^0,c
  1145  000B14  0E01               	movlw	low STR_2
  1146  000B16  6E54               	movwf	sprintf@fmt^0,c
  1147  000B18  0100               	movlb	0	; () banked
  1148  000B1A  5170               	movf	_min& (0+255),w,b
  1149  000B1C  6E55               	movwf	(?_sprintf+2)^0,c
  1150  000B1E  6A56               	clrf	(?_sprintf+3)^0,c
  1151  000B20  BE55               	btfsc	(?_sprintf+2)^0,7,c
  1152  000B22  0656               	decf	(?_sprintf+3)^0,f,c
  1153  000B24  516F               	movf	_seg& (0+255),w,b
  1154  000B26  6E57               	movwf	(?_sprintf+4)^0,c
  1155  000B28  6A58               	clrf	(?_sprintf+5)^0,c
  1156  000B2A  BE57               	btfsc	(?_sprintf+4)^0,7,c
  1157  000B2C  0658               	decf	(?_sprintf+5)^0,f,c
  1158  000B2E  516E               	movf	_cen& (0+255),w,b
  1159  000B30  6E59               	movwf	(?_sprintf+6)^0,c
  1160  000B32  6A5A               	clrf	(?_sprintf+7)^0,c
  1161  000B34  BE59               	btfsc	(?_sprintf+6)^0,7,c
  1162  000B36  065A               	decf	(?_sprintf+7)^0,f,c
  1163  000B38  ECAA  F00B         	call	_sprintf	;wreg free
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;Cronometro.c: 144:             Lcd_Write_String(buf_lcd);
  1167  000B3C  0E91               	movlw	low _buf_lcd
  1168  000B3E  6E03               	movwf	Lcd_Write_String@str^0,c
  1169  000B40  6A04               	clrf	(Lcd_Write_String@str+1)^0,c
  1170  000B42  EC1A  F00B         	call	_Lcd_Write_String	;wreg free
  1171  000B46                     l2296:
  1172                           
  1173                           ;Cronometro.c: 147:         if(st_desc == 1)
  1174  000B46  0100               	movlb	0	; () banked
  1175  000B48  0568               	decf	_st_desc& (0+255),w,b
  1176  000B4A  1169               	iorwf	(_st_desc+1)& (0+255),w,b
  1177  000B4C  A4D8               	btfss	status,2,c
  1178  000B4E  D6A9               	goto	l2204
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;Cronometro.c: 148:         {;Cronometro.c: 149:             T0CONbits.TMR0ON = 0;
  1182  000B50  9ED5               	bcf	213,7,c	;volatile
  1183                           
  1184                           ;Cronometro.c: 150:             LATBbits.LB2 = 1;
  1185  000B52  848A               	bsf	138,2,c	;volatile
  1186                           
  1187                           ;Cronometro.c: 151:             LATBbits.LB3 = 0;
  1188  000B54  968A               	bcf	138,3,c	;volatile
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;Cronometro.c: 152:             modo = 0;
  1192  000B56  0E00               	movlw	0
  1193  000B58  6F6D               	movwf	(_modo+1)& (0+255),b
  1194  000B5A  0E00               	movlw	0
  1195  000B5C  6F6C               	movwf	_modo& (0+255),b
  1196                           
  1197                           ;Cronometro.c: 153:             min = 0;
  1198  000B5E  0E00               	movlw	0
  1199  000B60  6F70               	movwf	_min& (0+255),b
  1200                           
  1201                           ;Cronometro.c: 154:             seg = 0;
  1202  000B62  0E00               	movlw	0
  1203  000B64  6F6F               	movwf	_seg& (0+255),b
  1204                           
  1205                           ;Cronometro.c: 155:             cen = 0;
  1206  000B66  0E00               	movlw	0
  1207  000B68  6F6E               	movwf	_cen& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;Cronometro.c: 156:             Lcd_Set_Cursor(5,2);
  1211  000B6A  0E02               	movlw	2
  1212  000B6C  6E03               	movwf	Lcd_Set_Cursor@y^0,c
  1213  000B6E  0E05               	movlw	5
  1214  000B70  EC43  F00B         	call	_Lcd_Set_Cursor
  1215                           
  1216                           ;Cronometro.c: 157:             sprintf(buf_lcd, "%02d:%02d:%02d", min, seg, cen);
  1217  000B74  0E91               	movlw	low _buf_lcd
  1218  000B76  6E53               	movwf	sprintf@s^0,c
  1219  000B78  0E01               	movlw	low STR_2
  1220  000B7A  6E54               	movwf	sprintf@fmt^0,c
  1221  000B7C  0100               	movlb	0	; () banked
  1222  000B7E  5170               	movf	_min& (0+255),w,b
  1223  000B80  6E55               	movwf	(?_sprintf+2)^0,c
  1224  000B82  6A56               	clrf	(?_sprintf+3)^0,c
  1225  000B84  BE55               	btfsc	(?_sprintf+2)^0,7,c
  1226  000B86  0656               	decf	(?_sprintf+3)^0,f,c
  1227  000B88  516F               	movf	_seg& (0+255),w,b
  1228  000B8A  6E57               	movwf	(?_sprintf+4)^0,c
  1229  000B8C  6A58               	clrf	(?_sprintf+5)^0,c
  1230  000B8E  BE57               	btfsc	(?_sprintf+4)^0,7,c
  1231  000B90  0658               	decf	(?_sprintf+5)^0,f,c
  1232  000B92  516E               	movf	_cen& (0+255),w,b
  1233  000B94  6E59               	movwf	(?_sprintf+6)^0,c
  1234  000B96  6A5A               	clrf	(?_sprintf+7)^0,c
  1235  000B98  BE59               	btfsc	(?_sprintf+6)^0,7,c
  1236  000B9A  065A               	decf	(?_sprintf+7)^0,f,c
  1237  000B9C  ECAA  F00B         	call	_sprintf	;wreg free
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;Cronometro.c: 158:             Lcd_Write_String(buf_lcd);
  1241  000BA0  0E91               	movlw	low _buf_lcd
  1242  000BA2  6E03               	movwf	Lcd_Write_String@str^0,c
  1243  000BA4  6A04               	clrf	(Lcd_Write_String@str+1)^0,c
  1244  000BA6  EC1A  F00B         	call	_Lcd_Write_String	;wreg free
  1245                           
  1246                           ;Cronometro.c: 159:             st_mode = 0;
  1247  000BAA  0E00               	movlw	0
  1248  000BAC  0100               	movlb	0	; () banked
  1249  000BAE  6F6B               	movwf	(_st_mode+1)& (0+255),b
  1250  000BB0  0E00               	movlw	0
  1251  000BB2  6F6A               	movwf	_st_mode& (0+255),b
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;Cronometro.c: 160:             st_desc = 0;
  1255  000BB4  0E00               	movlw	0
  1256  000BB6  6F69               	movwf	(_st_desc+1)& (0+255),b
  1257  000BB8  0E00               	movlw	0
  1258  000BBA  6F68               	movwf	_st_desc& (0+255),b
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;Cronometro.c: 162:             for(short i=0; i<2; i++)
  1262  000BBC  0E00               	movlw	0
  1263  000BBE  6E5E               	movwf	(main@i+1)^0,c
  1264  000BC0  0E00               	movlw	0
  1265  000BC2  6E5D               	movwf	main@i^0,c
  1266  000BC4                     l77:
  1267                           
  1268                           ;Cronometro.c: 163:             {;Cronometro.c: 164:                 LATBbits.LB0 = 1;
  1269  000BC4  808A               	bsf	138,0,c	;volatile
  1270                           
  1271                           ;Cronometro.c: 165:                 _delay((unsigned long)((100)*(48000000/4000.0)));
  1272  000BC6  0E07               	movlw	7
  1273  000BC8  6E5C               	movwf	(??_main+1)^0,c
  1274  000BCA  0E17               	movlw	23
  1275  000BCC  6E5B               	movwf	??_main^0,c
  1276  000BCE  0E6A               	movlw	106
  1277  000BD0                     u1957:
  1278  000BD0  2EE8               	decfsz	wreg,f,c
  1279  000BD2  D7FE               	bra	u1957
  1280  000BD4  2E5B               	decfsz	??_main^0,f,c
  1281  000BD6  D7FC               	bra	u1957
  1282  000BD8  2E5C               	decfsz	(??_main+1)^0,f,c
  1283  000BDA  D7FA               	bra	u1957
  1284  000BDC  D000               	nop2	
  1285                           
  1286                           ;Cronometro.c: 166:                 LATBbits.LB0 = 0;
  1287  000BDE  908A               	bcf	138,0,c	;volatile
  1288                           
  1289                           ;Cronometro.c: 167:                 _delay((unsigned long)((100)*(48000000/4000.0)));
  1290  000BE0  0E07               	movlw	7
  1291  000BE2  6E5C               	movwf	(??_main+1)^0,c
  1292  000BE4  0E17               	movlw	23
  1293  000BE6  6E5B               	movwf	??_main^0,c
  1294  000BE8  0E6A               	movlw	106
  1295  000BEA                     u1967:
  1296  000BEA  2EE8               	decfsz	wreg,f,c
  1297  000BEC  D7FE               	bra	u1967
  1298  000BEE  2E5B               	decfsz	??_main^0,f,c
  1299  000BF0  D7FC               	bra	u1967
  1300  000BF2  2E5C               	decfsz	(??_main+1)^0,f,c
  1301  000BF4  D7FA               	bra	u1967
  1302  000BF6  D000               	nop2	
  1303                           
  1304                           ;Cronometro.c: 168:             }
  1305  000BF8  4A5D               	infsnz	main@i^0,f,c
  1306  000BFA  2A5E               	incf	(main@i+1)^0,f,c
  1307  000BFC  BE5E               	btfsc	(main@i+1)^0,7,c
  1308  000BFE  D7E2               	goto	l77
  1309  000C00  505E               	movf	(main@i+1)^0,w,c
  1310  000C02  E104               	bnz	u1760
  1311  000C04  0E02               	movlw	2
  1312  000C06  5C5D               	subwf	main@i^0,w,c
  1313  000C08  A0D8               	btfss	status,0,c
  1314  000C0A  D7DC               	goto	l77
  1315  000C0C                     u1760:
  1316                           
  1317                           ;Cronometro.c: 169:             LATBbits.LB0 = 1;
  1318  000C0C  808A               	bsf	138,0,c	;volatile
  1319                           
  1320                           ;Cronometro.c: 170:             _delay((unsigned long)((300)*(48000000/4000.0)));
  1321  000C0E  0E13               	movlw	19
  1322  000C10  6E5C               	movwf	(??_main+1)^0,c
  1323  000C12  0E44               	movlw	68
  1324  000C14  6E5B               	movwf	??_main^0,c
  1325  000C16  0E44               	movlw	68
  1326  000C18                     u1977:
  1327  000C18  2EE8               	decfsz	wreg,f,c
  1328  000C1A  D7FE               	bra	u1977
  1329  000C1C  2E5B               	decfsz	??_main^0,f,c
  1330  000C1E  D7FC               	bra	u1977
  1331  000C20  2E5C               	decfsz	(??_main+1)^0,f,c
  1332  000C22  D7FA               	bra	u1977
  1333  000C24  D000               	nop2	
  1334                           
  1335                           ;Cronometro.c: 171:             LATBbits.LB0 = 0;
  1336  000C26  908A               	bcf	138,0,c	;volatile
  1337  000C28  D63C               	goto	l2204
  1338  000C2A                     __end_of_main:
  1339                           	callstack 0
  1340                           
  1341 ;; *************** function _sprintf *****************
  1342 ;; Defined at:
  1343 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_sprintf.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  s               1   82[COMRAM] PTR unsigned char 
  1346 ;;		 -> buf_lcd(18), 
  1347 ;;  fmt             1   83[COMRAM] PTR const unsigned char 
  1348 ;;		 -> STR_6(15), STR_5(15), STR_4(15), STR_3(15), 
  1349 ;;		 -> STR_2(15), 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  f              11    1[BANK0 ] struct _IO_FILE
  1352 ;;  ret             2    0        int 
  1353 ;;  ap              1    0[BANK0 ] PTR void [1]
  1354 ;;		 -> ?_sprintf(2), 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  2   82[COMRAM] int 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 3F/0
  1361 ;;		On exit  : 3F/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1364 ;;      Params:         8       0       0       0       0       0       0       0       0
  1365 ;;      Locals:         0      12       0       0       0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1367 ;;      Totals:         8      12       0       0       0       0       0       0       0
  1368 ;;Total ram usage:       20 bytes
  1369 ;; Hardware stack levels used: 1
  1370 ;; Hardware stack levels required when called: 8
  1371 ;; This function calls:
  1372 ;;		_vfprintf
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text1
  1379  001754                     __ptext1:
  1380                           	callstack 0
  1381  001754                     _sprintf:
  1382                           	callstack 22
  1383                           
  1384                           ; BSR set to: 0
  1385                           
  1386                           ;incstack = 0
  1387  001754  0E55               	movlw	low (?_sprintf+2)
  1388  001756  6FA3               	movwf	sprintf@ap& (0+255),b
  1389  001758  C053  F0A4         	movff	sprintf@s,sprintf@f
  1390                           
  1391                           ; BSR set to: 0
  1392  00175C  0E00               	movlw	0
  1393  00175E  6FA8               	movwf	(sprintf@f+4)& (0+255),b
  1394  001760  0E00               	movlw	0
  1395  001762  6FA7               	movwf	(sprintf@f+3)& (0+255),b
  1396                           
  1397                           ; BSR set to: 0
  1398  001764  0E00               	movlw	0
  1399  001766  6FAE               	movwf	(sprintf@f+10)& (0+255),b
  1400  001768  0E00               	movlw	0
  1401  00176A  6FAD               	movwf	(sprintf@f+9)& (0+255),b
  1402                           
  1403                           ; BSR set to: 0
  1404  00176C  0EA4               	movlw	low sprintf@f
  1405  00176E  6E4F               	movwf	vfprintf@fp^0,c
  1406  001770  C054  F050         	movff	sprintf@fmt,vfprintf@fmt
  1407  001774  0EA3               	movlw	low sprintf@ap
  1408  001776  6E51               	movwf	vfprintf@ap^0,c
  1409  001778  EC69  F00B         	call	_vfprintf	;wreg free
  1410                           
  1411                           ; BSR set to: 0
  1412  00177C  5053               	movf	sprintf@s^0,w,c
  1413  00177E  25A7               	addwf	(sprintf@f+3)& (0+255),w,b
  1414  001780  6ED9               	movwf	fsr2l,c
  1415  001782  6ADA               	clrf	fsr2h,c
  1416  001784  0E00               	movlw	0
  1417  001786  6EDF               	movwf	indf2,c
  1418                           
  1419                           ; BSR set to: 0
  1420  001788  0012               	return		;funcret
  1421  00178A                     __end_of_sprintf:
  1422                           	callstack 0
  1423                           
  1424 ;; *************** function _vfprintf *****************
  1425 ;; Defined at:
  1426 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  fp              1   78[COMRAM] PTR struct _IO_FILE
  1429 ;;		 -> sprintf@f(11), 
  1430 ;;  fmt             1   79[COMRAM] PTR const unsigned char 
  1431 ;;		 -> STR_6(15), STR_5(15), STR_4(15), STR_3(15), 
  1432 ;;		 -> STR_2(15), 
  1433 ;;  ap              1   80[COMRAM] PTR PTR void 
  1434 ;;		 -> sprintf@ap(1), 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  cfmt            1   81[COMRAM] PTR unsigned char 
  1437 ;;		 -> STR_6(15), STR_5(15), STR_4(15), STR_3(15), 
  1438 ;;		 -> STR_2(15), 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  2   78[COMRAM] int 
  1441 ;; Registers used:
  1442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 3F/0
  1445 ;;		On exit  : 3F/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1448 ;;      Params:         3       0       0       0       0       0       0       0       0
  1449 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1451 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1452 ;;Total ram usage:        4 bytes
  1453 ;; Hardware stack levels used: 1
  1454 ;; Hardware stack levels required when called: 7
  1455 ;; This function calls:
  1456 ;;		_vfpfcnvrt
  1457 ;; This function is called by:
  1458 ;;		_sprintf
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text2
  1463  0016D2                     __ptext2:
  1464                           	callstack 0
  1465  0016D2                     _vfprintf:
  1466                           	callstack 22
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;incstack = 0
  1473  0016D2  C050  F052         	movff	vfprintf@fmt,vfprintf@cfmt
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  1477  0016D6  0E00               	movlw	0
  1478  0016D8  6F61               	movwf	(_nout+1)& (0+255),b
  1479  0016DA  0E00               	movlw	0
  1480  0016DC  6F60               	movwf	_nout& (0+255),b
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  1483  0016DE  D00D               	goto	l2100
  1484  0016E0                     l2098:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  1488  0016E0  C04F  F03E         	movff	vfprintf@fp,vfpfcnvrt@fp
  1489  0016E4  0E52               	movlw	low vfprintf@cfmt
  1490  0016E6  6E3F               	movwf	vfpfcnvrt@fmt^0,c
  1491  0016E8  C051  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
  1492  0016EC  EC15  F006         	call	_vfpfcnvrt	;wreg free
  1493  0016F0  503E               	movf	?_vfpfcnvrt^0,w,c
  1494  0016F2  0100               	movlb	0	; () banked
  1495  0016F4  2760               	addwf	_nout& (0+255),f,b
  1496  0016F6  503F               	movf	(?_vfpfcnvrt+1)^0,w,c
  1497  0016F8  2361               	addwfc	(_nout+1)& (0+255),f,b
  1498  0016FA                     l2100:
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  1502  0016FA  C052  FFF6         	movff	vfprintf@cfmt,tblptrl
  1503  0016FE                     	if	1	;There is more than 1 active tblptr byte
  1504  0016FE  0E08               	movlw	high __smallconst
  1505  001700  6EF7               	movwf	tblptrh,c
  1506  001702                     	endif
  1507  001702                     	if	0	;tblptru may be non-zero
  1508  001702                     	endif
  1509  001702                     	if	0	;tblptru may be non-zero
  1510  001702                     	endif
  1511  001702  0008               	tblrd		*
  1512  001704  50F5               	movf	tablat,w,c
  1513  001706  0900               	iorlw	0
  1514  001708  A4D8               	btfss	status,2,c
  1515  00170A  D7EA               	goto	l2098
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  1519  00170C  C060  F04F         	movff	_nout,?_vfprintf
  1520  001710  C061  F050         	movff	_nout+1,?_vfprintf+1
  1521                           
  1522                           ; BSR set to: 0
  1523  001714  0012               	return		;funcret
  1524  001716                     __end_of_vfprintf:
  1525                           	callstack 0
  1526                           
  1527 ;; *************** function _vfpfcnvrt *****************
  1528 ;; Defined at:
  1529 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  fp              1   61[COMRAM] PTR struct _IO_FILE
  1532 ;;		 -> sprintf@f(11), 
  1533 ;;  fmt             1   62[COMRAM] PTR PTR unsigned char 
  1534 ;;		 -> vfprintf@cfmt(1), 
  1535 ;;  ap              1   63[COMRAM] PTR PTR void 
  1536 ;;		 -> sprintf@ap(1), 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  ll              8   68[COMRAM] long long 
  1539 ;;  llu             8    0        unsigned long long 
  1540 ;;  f               4    0        unsigned long long 
  1541 ;;  vp              3    0        PTR void 
  1542 ;;  ct              3    0        unsigned char [3]
  1543 ;;  cp              3    0        PTR unsigned char 
  1544 ;;  done            2   76[COMRAM] int 
  1545 ;;  i               2    0        int 
  1546 ;;  c               1    0        unsigned char 
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  2   61[COMRAM] int 
  1549 ;; Registers used:
  1550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1551 ;; Tracked objects:
  1552 ;;		On entry : 3F/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1556 ;;      Params:         3       0       0       0       0       0       0       0       0
  1557 ;;      Locals:        10       0       0       0       0       0       0       0       0
  1558 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1559 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1560 ;;Total ram usage:       17 bytes
  1561 ;; Hardware stack levels used: 1
  1562 ;; Hardware stack levels required when called: 6
  1563 ;; This function calls:
  1564 ;;		_atoi
  1565 ;;		_dtoa
  1566 ;;		_fputc
  1567 ;;		_isdigit
  1568 ;; This function is called by:
  1569 ;;		_vfprintf
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text3
  1574  000C2A                     __ptext3:
  1575                           	callstack 0
  1576  000C2A                     _vfpfcnvrt:
  1577                           	callstack 22
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.36\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          6\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;incstack = 0
  1584  000C2A  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1585  000C2C  6ED9               	movwf	fsr2l,c
  1586  000C2E  6ADA               	clrf	fsr2h,c
  1587  000C30  CFDF FFF6          	movff	indf2,tblptrl
  1588  000C34                     	if	1	;There is more than 1 active tblptr byte
  1589  000C34  0E08               	movlw	high __smallconst
  1590  000C36  6EF7               	movwf	tblptrh,c
  1591  000C38                     	endif
  1592  000C38                     	if	0	;tblptru may be non-zero
  1593  000C38                     	endif
  1594  000C38                     	if	0	;tblptru may be non-zero
  1595  000C38                     	endif
  1596  000C38  0008               	tblrd		*
  1597  000C3A  50F5               	movf	tablat,w,c
  1598  000C3C  0A25               	xorlw	37
  1599  000C3E  A4D8               	btfss	status,2,c
  1600  000C40  D108               	goto	l2068
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  1604  000C42  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1605  000C44  6ED9               	movwf	fsr2l,c
  1606  000C46  6ADA               	clrf	fsr2h,c
  1607  000C48  2ADF               	incf	indf2,f,c
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  1611  000C4A  0E00               	movlw	0
  1612  000C4C  6F63               	movwf	(_width+1)& (0+255),b
  1613  000C4E  0E00               	movlw	0
  1614  000C50  6F62               	movwf	_width& (0+255),b
  1615  000C52  C062  F066         	movff	_width,_flags
  1616  000C56  C063  F067         	movff	_width+1,_flags+1
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  1620  000C5A  6964               	setf	_prec& (0+255),b
  1621  000C5C  6965               	setf	(_prec+1)& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
  1625  000C5E  0E00               	movlw	0
  1626  000C60  6E4E               	movwf	(vfpfcnvrt@done+1)^0,c
  1627  000C62  0E00               	movlw	0
  1628  000C64  D011               	goto	L1
  1629  000C66                     l1992:
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
  1633  000C66  8166               	bsf	_flags& (0+255),0,b
  1634  000C68                     l1994:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
  1638  000C68  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1639  000C6A  6ED9               	movwf	fsr2l,c
  1640  000C6C  6ADA               	clrf	fsr2h,c
  1641  000C6E  2ADF               	incf	indf2,f,c
  1642                           
  1643                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
  1644  000C70  D02D               	goto	l2018
  1645  000C72                     l1996:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
  1649  000C72  8366               	bsf	_flags& (0+255),1,b
  1650  000C74  D7F9               	goto	l1994
  1651  000C76                     l2000:
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
  1655  000C76  8566               	bsf	_flags& (0+255),2,b
  1656  000C78  D7F7               	goto	l1994
  1657  000C7A                     l2004:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
  1661  000C7A  8766               	bsf	_flags& (0+255),3,b
  1662  000C7C  D7F5               	goto	l1994
  1663  000C7E                     l2008:
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
  1667  000C7E  8966               	bsf	_flags& (0+255),4,b
  1668  000C80  D7F3               	goto	l1994
  1669  000C82                     l2012:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
  1673  000C82  0E00               	movlw	0
  1674  000C84  6E4E               	movwf	(vfpfcnvrt@done+1)^0,c
  1675  000C86  0E01               	movlw	1
  1676  000C88                     L1:
  1677  000C88  6E4D               	movwf	vfpfcnvrt@done^0,c
  1678                           
  1679                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
  1680  000C8A  D020               	goto	l2018
  1681  000C8C                     l2016:
  1682                           
  1683                           ; BSR set to: 0
  1684  000C8C  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1685  000C8E  6ED9               	movwf	fsr2l,c
  1686  000C90  6ADA               	clrf	fsr2h,c
  1687  000C92  CFDF FFF6          	movff	indf2,tblptrl
  1688  000C96                     	if	1	;There is more than 1 active tblptr byte
  1689  000C96  0E08               	movlw	high __smallconst
  1690  000C98  6EF7               	movwf	tblptrh,c
  1691  000C9A                     	endif
  1692  000C9A                     	if	0	;tblptru may be non-zero
  1693  000C9A                     	endif
  1694  000C9A                     	if	0	;tblptru may be non-zero
  1695  000C9A                     	endif
  1696  000C9A  0008               	tblrd		*
  1697  000C9C  50F5               	movf	tablat,w,c
  1698  000C9E  6E41               	movwf	??_vfpfcnvrt^0,c
  1699  000CA0  6A42               	clrf	(??_vfpfcnvrt+1)^0,c
  1700                           
  1701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1702                           ; Switch size 1, requested type "simple"
  1703                           ; Number of cases is 1, Range of values is 0 to 0
  1704                           ; switch strategies available:
  1705                           ; Name         Instructions Cycles
  1706                           ; simple_byte            4     3 (average)
  1707                           ;	Chosen strategy is simple_byte
  1708  000CA2  5042               	movf	(??_vfpfcnvrt+1)^0,w,c
  1709  000CA4  0A00               	xorlw	0	; case 0
  1710  000CA6  A4D8               	btfss	status,2,c
  1711  000CA8  D7EC               	goto	l2012
  1712                           
  1713                           ; BSR set to: 0
  1714                           ; Switch size 1, requested type "simple"
  1715                           ; Number of cases is 5, Range of values is 32 to 48
  1716                           ; switch strategies available:
  1717                           ; Name         Instructions Cycles
  1718                           ; simple_byte           16     9 (average)
  1719                           ;	Chosen strategy is simple_byte
  1720  000CAA  5041               	movf	??_vfpfcnvrt^0,w,c
  1721  000CAC  0A20               	xorlw	32	; case 32
  1722  000CAE  B4D8               	btfsc	status,2,c
  1723  000CB0  D7E4               	goto	l2004
  1724  000CB2  0A03               	xorlw	3	; case 35
  1725  000CB4  B4D8               	btfsc	status,2,c
  1726  000CB6  D7E3               	goto	l2008
  1727  000CB8  0A08               	xorlw	8	; case 43
  1728  000CBA  B4D8               	btfsc	status,2,c
  1729  000CBC  D7DC               	goto	l2000
  1730  000CBE  0A06               	xorlw	6	; case 45
  1731  000CC0  B4D8               	btfsc	status,2,c
  1732  000CC2  D7D1               	goto	l1992
  1733  000CC4  0A1D               	xorlw	29	; case 48
  1734  000CC6  B4D8               	btfsc	status,2,c
  1735  000CC8  D7D4               	goto	l1996
  1736  000CCA  D7DB               	goto	l2012
  1737  000CCC                     l2018:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  1741  000CCC  504D               	movf	vfpfcnvrt@done^0,w,c
  1742  000CCE  104E               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1743  000CD0  B4D8               	btfsc	status,2,c
  1744  000CD2  D7DC               	goto	l2016
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  1748  000CD4  B166               	btfsc	_flags& (0+255),0,b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  1752  000CD6  9366               	bcf	_flags& (0+255),1,b
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  1756  000CD8  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1757  000CDA  6ED9               	movwf	fsr2l,c
  1758  000CDC  6ADA               	clrf	fsr2h,c
  1759  000CDE  CFDF FFF6          	movff	indf2,tblptrl
  1760  000CE2                     	if	1	;There is more than 1 active tblptr byte
  1761  000CE2  0E08               	movlw	high __smallconst
  1762  000CE4  6EF7               	movwf	tblptrh,c
  1763  000CE6                     	endif
  1764  000CE6                     	if	0	;tblptru may be non-zero
  1765  000CE6                     	endif
  1766  000CE6                     	if	0	;tblptru may be non-zero
  1767  000CE6                     	endif
  1768  000CE6  0008               	tblrd		*
  1769  000CE8  50F5               	movf	tablat,w,c
  1770  000CEA  0A2A               	xorlw	42
  1771  000CEC  A4D8               	btfss	status,2,c
  1772  000CEE  D018               	goto	l2032
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  1776  000CF0  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1777  000CF2  6ED9               	movwf	fsr2l,c
  1778  000CF4  6ADA               	clrf	fsr2h,c
  1779  000CF6  2ADF               	incf	indf2,f,c
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1783  000CF8  5040               	movf	vfpfcnvrt@ap^0,w,c
  1784  000CFA  6ED9               	movwf	fsr2l,c
  1785  000CFC  6ADA               	clrf	fsr2h,c
  1786  000CFE  0E02               	movlw	2
  1787  000D00  26DF               	addwf	indf2,f,c
  1788  000D02  5CDF               	subwf	indf2,w,c
  1789  000D04  6ED9               	movwf	fsr2l,c
  1790  000D06  6ADA               	clrf	fsr2h,c
  1791  000D08  CFDE F062          	movff	postinc2,_width
  1792  000D0C  CFDE F063          	movff	postinc2,_width+1
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  1796  000D10  AF63               	btfss	(_width+1)& (0+255),7,b
  1797  000D12  D02F               	goto	u1490
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  1801  000D14  8166               	bsf	_flags& (0+255),0,b
  1802                           
  1803                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  1804  000D16  6D62               	negf	_width& (0+255),b
  1805  000D18  1F63               	comf	(_width+1)& (0+255),f,b
  1806  000D1A  B0D8               	btfsc	status,0,c
  1807  000D1C  2B63               	incf	(_width+1)& (0+255),f,b
  1808  000D1E  D029               	goto	u1490
  1809  000D20                     l2032:
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  1813  000D20  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1814  000D22  6ED9               	movwf	fsr2l,c
  1815  000D24  6ADA               	clrf	fsr2h,c
  1816  000D26  50DF               	movf	indf2,w,c
  1817  000D28  6E08               	movwf	atoi@s^0,c
  1818  000D2A  EC8D  F009         	call	_atoi	;wreg free
  1819  000D2E  C008  F062         	movff	?_atoi,_width
  1820  000D32  C009  F063         	movff	?_atoi+1,_width+1
  1821                           
  1822                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1823  000D36  D004               	goto	l2038
  1824  000D38                     l2034:
  1825                           
  1826                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  1827  000D38  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1828  000D3A  6ED9               	movwf	fsr2l,c
  1829  000D3C  6ADA               	clrf	fsr2h,c
  1830  000D3E  2ADF               	incf	indf2,f,c
  1831  000D40                     l2038:
  1832  000D40  0ED0               	movlw	208
  1833  000D42  6E41               	movwf	??_vfpfcnvrt^0,c
  1834  000D44  0EFF               	movlw	255
  1835  000D46  6E42               	movwf	(??_vfpfcnvrt+1)^0,c
  1836  000D48  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1837  000D4A  6ED9               	movwf	fsr2l,c
  1838  000D4C  6ADA               	clrf	fsr2h,c
  1839  000D4E  CFDF FFF6          	movff	indf2,tblptrl
  1840  000D52                     	if	1	;There is more than 1 active tblptr byte
  1841  000D52  0E08               	movlw	high __smallconst
  1842  000D54  6EF7               	movwf	tblptrh,c
  1843  000D56                     	endif
  1844  000D56                     	if	0	;tblptru may be non-zero
  1845  000D56                     	endif
  1846  000D56                     	if	0	;tblptru may be non-zero
  1847  000D56                     	endif
  1848  000D56  0008               	tblrd		*
  1849  000D58  50F5               	movf	tablat,w,c
  1850  000D5A  6E43               	movwf	(??_vfpfcnvrt+2)^0,c
  1851  000D5C  6A44               	clrf	(??_vfpfcnvrt+3)^0,c
  1852  000D5E  5041               	movf	??_vfpfcnvrt^0,w,c
  1853  000D60  2643               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1854  000D62  5042               	movf	(??_vfpfcnvrt+1)^0,w,c
  1855  000D64  2244               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1856  000D66  5044               	movf	(??_vfpfcnvrt+3)^0,w,c
  1857  000D68  E104               	bnz	u1490
  1858  000D6A  0E0A               	movlw	10
  1859  000D6C  5C43               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1860  000D6E  A0D8               	btfss	status,0,c
  1861  000D70  D7E3               	goto	l2034
  1862  000D72                     u1490:
  1863                           
  1864                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1865  000D72  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1866  000D74  6ED9               	movwf	fsr2l,c
  1867  000D76  6ADA               	clrf	fsr2h,c
  1868  000D78  CFDF FFF6          	movff	indf2,tblptrl
  1869  000D7C                     	if	1	;There is more than 1 active tblptr byte
  1870  000D7C  0E08               	movlw	high __smallconst
  1871  000D7E  6EF7               	movwf	tblptrh,c
  1872  000D80                     	endif
  1873  000D80                     	if	0	;tblptru may be non-zero
  1874  000D80                     	endif
  1875  000D80                     	if	0	;tblptru may be non-zero
  1876  000D80                     	endif
  1877  000D80  0008               	tblrd		*
  1878  000D82  50F5               	movf	tablat,w,c
  1879  000D84  0A64               	xorlw	100
  1880  000D86  B4D8               	btfsc	status,2,c
  1881  000D88  D00C               	goto	u1510
  1882  000D8A  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1883  000D8C  6ED9               	movwf	fsr2l,c
  1884  000D8E  6ADA               	clrf	fsr2h,c
  1885  000D90  CFDF FFF6          	movff	indf2,tblptrl
  1886  000D94                     	if	1	;There is more than 1 active tblptr byte
  1887  000D94  0E08               	movlw	high __smallconst
  1888  000D96  6EF7               	movwf	tblptrh,c
  1889  000D98                     	endif
  1890  000D98                     	if	0	;tblptru may be non-zero
  1891  000D98                     	endif
  1892  000D98                     	if	0	;tblptru may be non-zero
  1893  000D98                     	endif
  1894  000D98  0008               	tblrd		*
  1895  000D9A  50F5               	movf	tablat,w,c
  1896  000D9C  0A69               	xorlw	105
  1897  000D9E  A4D8               	btfss	status,2,c
  1898  000DA0  D032               	goto	l2052
  1899  000DA2                     u1510:
  1900                           
  1901                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1902  000DA2  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1903  000DA4  6ED9               	movwf	fsr2l,c
  1904  000DA6  6ADA               	clrf	fsr2h,c
  1905  000DA8  2ADF               	incf	indf2,f,c
  1906                           
  1907                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1908  000DAA  5040               	movf	vfpfcnvrt@ap^0,w,c
  1909  000DAC  6ED9               	movwf	fsr2l,c
  1910  000DAE  6ADA               	clrf	fsr2h,c
  1911  000DB0  50DF               	movf	indf2,w,c
  1912  000DB2  2ADF               	incf	indf2,f,c
  1913  000DB4  2ADF               	incf	indf2,f,c
  1914  000DB6  6ED9               	movwf	fsr2l,c
  1915  000DB8  6ADA               	clrf	fsr2h,c
  1916  000DBA  CFDE F045          	movff	postinc2,vfpfcnvrt@ll
  1917  000DBE  CFDD F046          	movff	postdec2,vfpfcnvrt@ll+1
  1918  000DC2  0E00               	movlw	0
  1919  000DC4  BE46               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1920  000DC6  0EFF               	movlw	-1
  1921  000DC8  6E47               	movwf	(vfpfcnvrt@ll+2)^0,c
  1922  000DCA  6E48               	movwf	(vfpfcnvrt@ll+3)^0,c
  1923  000DCC  6E49               	movwf	(vfpfcnvrt@ll+4)^0,c
  1924  000DCE  6E4A               	movwf	(vfpfcnvrt@ll+5)^0,c
  1925  000DD0  6E4B               	movwf	(vfpfcnvrt@ll+6)^0,c
  1926  000DD2  6E4C               	movwf	(vfpfcnvrt@ll+7)^0,c
  1927                           
  1928                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1929  000DD4  C03E  F01B         	movff	vfpfcnvrt@fp,dtoa@fp
  1930  000DD8  C045  F01C         	movff	vfpfcnvrt@ll,dtoa@d
  1931  000DDC  C046  F01D         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1932  000DE0  C047  F01E         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1933  000DE4  C048  F01F         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1934  000DE8  C049  F020         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1935  000DEC  C04A  F021         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1936  000DF0  C04B  F022         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1937  000DF4  C04C  F023         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1938  000DF8  EC3D  F007         	call	_dtoa	;wreg free
  1939  000DFC  C01B  F03E         	movff	?_dtoa,?_vfpfcnvrt
  1940  000E00  C01C  F03F         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1941  000E04  0012               	return	
  1942  000E06                     l2052:
  1943                           
  1944                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1945  000E06  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1946  000E08  6ED9               	movwf	fsr2l,c
  1947  000E0A  6ADA               	clrf	fsr2h,c
  1948  000E0C  CFDF FFF6          	movff	indf2,tblptrl
  1949  000E10                     	if	1	;There is more than 1 active tblptr byte
  1950  000E10  0E08               	movlw	high __smallconst
  1951  000E12  6EF7               	movwf	tblptrh,c
  1952  000E14                     	endif
  1953  000E14                     	if	0	;tblptru may be non-zero
  1954  000E14                     	endif
  1955  000E14                     	if	0	;tblptru may be non-zero
  1956  000E14                     	endif
  1957  000E14  0008               	tblrd		*
  1958  000E16  50F5               	movf	tablat,w,c
  1959  000E18  0A25               	xorlw	37
  1960  000E1A  A4D8               	btfss	status,2,c
  1961  000E1C  D011               	goto	l2062
  1962                           
  1963                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1964  000E1E  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1965  000E20  6ED9               	movwf	fsr2l,c
  1966  000E22  6ADA               	clrf	fsr2h,c
  1967  000E24  2ADF               	incf	indf2,f,c
  1968                           
  1969                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1970  000E26  0E00               	movlw	0
  1971  000E28  6E02               	movwf	(fputc@c+1)^0,c
  1972  000E2A  0E25               	movlw	37
  1973  000E2C  6E01               	movwf	fputc@c^0,c
  1974  000E2E  C03E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1975  000E32  EC9B  F00A         	call	_fputc	;wreg free
  1976  000E36                     l2058:
  1977                           
  1978                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1979  000E36  0E00               	movlw	0
  1980  000E38  6E3F               	movwf	(?_vfpfcnvrt+1)^0,c
  1981  000E3A  0E01               	movlw	1
  1982  000E3C  6E3E               	movwf	?_vfpfcnvrt^0,c
  1983  000E3E  0012               	return	
  1984  000E40                     l2062:
  1985                           
  1986                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1987  000E40  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1988  000E42  6ED9               	movwf	fsr2l,c
  1989  000E44  6ADA               	clrf	fsr2h,c
  1990  000E46  2ADF               	incf	indf2,f,c
  1991                           
  1992                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1993  000E48  0E00               	movlw	0
  1994  000E4A  6E3F               	movwf	(?_vfpfcnvrt+1)^0,c
  1995  000E4C  0E00               	movlw	0
  1996  000E4E  6E3E               	movwf	?_vfpfcnvrt^0,c
  1997  000E50  0012               	return	
  1998  000E52                     l2068:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  2002  000E52  503F               	movf	vfpfcnvrt@fmt^0,w,c
  2003  000E54  6ED9               	movwf	fsr2l,c
  2004  000E56  6ADA               	clrf	fsr2h,c
  2005  000E58  CFDF FFF6          	movff	indf2,tblptrl
  2006  000E5C                     	if	1	;There is more than 1 active tblptr byte
  2007  000E5C  0E08               	movlw	high __smallconst
  2008  000E5E  6EF7               	movwf	tblptrh,c
  2009  000E60                     	endif
  2010  000E60                     	if	0	;tblptru may be non-zero
  2011  000E60                     	endif
  2012  000E60                     	if	0	;tblptru may be non-zero
  2013  000E60                     	endif
  2014  000E60  0008               	tblrd		*
  2015  000E62  50F5               	movf	tablat,w,c
  2016  000E64  6E01               	movwf	fputc@c^0,c
  2017  000E66  6A02               	clrf	(fputc@c+1)^0,c
  2018  000E68  C03E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2019  000E6C  EC9B  F00A         	call	_fputc	;wreg free
  2020                           
  2021                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  2022  000E70  503F               	movf	vfpfcnvrt@fmt^0,w,c
  2023  000E72  6ED9               	movwf	fsr2l,c
  2024  000E74  6ADA               	clrf	fsr2h,c
  2025  000E76  2ADF               	incf	indf2,f,c
  2026  000E78  D7DE               	goto	l2058
  2027  000E7A                     __end_of_vfpfcnvrt:
  2028                           	callstack 0
  2029                           
  2030 ;; *************** function _dtoa *****************
  2031 ;; Defined at:
  2032 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
  2035 ;;		 -> sprintf@f(11), 
  2036 ;;  d               8   27[COMRAM] long long 
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  n               8   51[COMRAM] long long 
  2039 ;;  i               2   59[COMRAM] int 
  2040 ;;  s               2   49[COMRAM] int 
  2041 ;;  w               2   47[COMRAM] int 
  2042 ;;  p               2   45[COMRAM] int 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  2   26[COMRAM] int 
  2045 ;; Registers used:
  2046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2052 ;;      Params:         9       0       0       0       0       0       0       0       0
  2053 ;;      Locals:        18       0       0       0       0       0       0       0       0
  2054 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2055 ;;      Totals:        35       0       0       0       0       0       0       0       0
  2056 ;;Total ram usage:       35 bytes
  2057 ;; Hardware stack levels used: 1
  2058 ;; Hardware stack levels required when called: 5
  2059 ;; This function calls:
  2060 ;;		___aodiv
  2061 ;;		___aomod
  2062 ;;		_abs
  2063 ;;		_pad
  2064 ;; This function is called by:
  2065 ;;		_vfpfcnvrt
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text4
  2070  000E7A                     __ptext4:
  2071                           	callstack 0
  2072  000E7A                     _dtoa:
  2073                           	callstack 22
  2074                           
  2075                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  2076                           
  2077                           ;incstack = 0
  2078  000E7A  C01C  F034         	movff	dtoa@d,dtoa@n
  2079  000E7E  C01D  F035         	movff	dtoa@d+1,dtoa@n+1
  2080  000E82  C01E  F036         	movff	dtoa@d+2,dtoa@n+2
  2081  000E86  C01F  F037         	movff	dtoa@d+3,dtoa@n+3
  2082  000E8A  C020  F038         	movff	dtoa@d+4,dtoa@n+4
  2083  000E8E  C021  F039         	movff	dtoa@d+5,dtoa@n+5
  2084  000E92  C022  F03A         	movff	dtoa@d+6,dtoa@n+6
  2085  000E96  C023  F03B         	movff	dtoa@d+7,dtoa@n+7
  2086                           
  2087                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  2088  000E9A  AE3B               	btfss	(dtoa@n+7)^0,7,c
  2089  000E9C  D002               	goto	u1210
  2090  000E9E  0E01               	movlw	1
  2091  000EA0  D001               	goto	u1220
  2092  000EA2                     u1210:
  2093  000EA2  0E00               	movlw	0
  2094  000EA4                     u1220:
  2095  000EA4  6E32               	movwf	dtoa@s^0,c
  2096  000EA6  6A33               	clrf	(dtoa@s+1)^0,c
  2097                           
  2098                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  2099  000EA8  5032               	movf	dtoa@s^0,w,c
  2100  000EAA  1033               	iorwf	(dtoa@s+1)^0,w,c
  2101  000EAC  B4D8               	btfsc	status,2,c
  2102  000EAE  D010               	goto	l1874
  2103                           
  2104                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  2105  000EB0  1E3B               	comf	(dtoa@n+7)^0,f,c
  2106  000EB2  1E3A               	comf	(dtoa@n+6)^0,f,c
  2107  000EB4  1E39               	comf	(dtoa@n+5)^0,f,c
  2108  000EB6  1E38               	comf	(dtoa@n+4)^0,f,c
  2109  000EB8  1E37               	comf	(dtoa@n+3)^0,f,c
  2110  000EBA  1E36               	comf	(dtoa@n+2)^0,f,c
  2111  000EBC  1E35               	comf	(dtoa@n+1)^0,f,c
  2112  000EBE  6C34               	negf	dtoa@n^0,c
  2113  000EC0  0E00               	movlw	0
  2114  000EC2  2235               	addwfc	(dtoa@n+1)^0,f,c
  2115  000EC4  2236               	addwfc	(dtoa@n+2)^0,f,c
  2116  000EC6  2237               	addwfc	(dtoa@n+3)^0,f,c
  2117  000EC8  2238               	addwfc	(dtoa@n+4)^0,f,c
  2118  000ECA  2239               	addwfc	(dtoa@n+5)^0,f,c
  2119  000ECC  223A               	addwfc	(dtoa@n+6)^0,f,c
  2120  000ECE  223B               	addwfc	(dtoa@n+7)^0,f,c
  2121  000ED0                     l1874:
  2122                           
  2123                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  2124  000ED0  0100               	movlb	0	; () banked
  2125  000ED2  AF65               	btfss	(_prec+1)& (0+255),7,b
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  2129  000ED4  9366               	bcf	_flags& (0+255),1,b
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  2133  000ED6  BF65               	btfsc	(_prec+1)& (0+255),7,b
  2134  000ED8  D005               	goto	u1250
  2135  000EDA  5165               	movf	(_prec+1)& (0+255),w,b
  2136  000EDC  E108               	bnz	l889
  2137  000EDE  0564               	decf	_prec& (0+255),w,b
  2138  000EE0  B0D8               	btfsc	status,0,c
  2139  000EE2  D005               	goto	l889
  2140  000EE4                     u1250:
  2141                           
  2142                           ; BSR set to: 0
  2143  000EE4  0E00               	movlw	0
  2144  000EE6  6E2F               	movwf	(dtoa@p+1)^0,c
  2145  000EE8  0E01               	movlw	1
  2146  000EEA  6E2E               	movwf	dtoa@p^0,c
  2147  000EEC  D004               	goto	l891
  2148  000EEE                     l889:
  2149                           
  2150                           ; BSR set to: 0
  2151  000EEE  C064  F02E         	movff	_prec,dtoa@p
  2152  000EF2  C065  F02F         	movff	_prec+1,dtoa@p+1
  2153  000EF6                     l891:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  2157  000EF6  C062  F030         	movff	_width,dtoa@w
  2158  000EFA  C063  F031         	movff	_width+1,dtoa@w+1
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  2162  000EFE  5032               	movf	dtoa@s^0,w,c
  2163  000F00  1033               	iorwf	(dtoa@s+1)^0,w,c
  2164  000F02  A4D8               	btfss	status,2,c
  2165  000F04  D002               	goto	u1270
  2166                           
  2167                           ; BSR set to: 0
  2168  000F06  A566               	btfss	_flags& (0+255),2,b
  2169  000F08  D003               	goto	l1888
  2170  000F0A                     u1270:
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 306:         --w;
  2174  000F0A  0630               	decf	dtoa@w^0,f,c
  2175  000F0C  A0D8               	btfss	status,0,c
  2176  000F0E  0631               	decf	(dtoa@w+1)^0,f,c
  2177  000F10                     l1888:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  2181  000F10  0E00               	movlw	0
  2182  000F12  6E3D               	movwf	(dtoa@i+1)^0,c
  2183  000F14  0E1F               	movlw	31
  2184  000F16  6E3C               	movwf	dtoa@i^0,c
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  2188  000F18  0E00               	movlw	0
  2189  000F1A  6F90               	movwf	(_dbuf+31)& (0+255),b
  2190                           
  2191                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2192  000F1C  D07A               	goto	l1902
  2193  000F1E                     l1892:
  2194                           
  2195                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 313:         --i;
  2196  000F1E  063C               	decf	dtoa@i^0,f,c
  2197  000F20  A0D8               	btfss	status,0,c
  2198  000F22  063D               	decf	(dtoa@i+1)^0,f,c
  2199                           
  2200                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  2201  000F24  503C               	movf	dtoa@i^0,w,c
  2202  000F26  0F71               	addlw	low _dbuf
  2203  000F28  6ED9               	movwf	fsr2l,c
  2204  000F2A  6ADA               	clrf	fsr2h,c
  2205  000F2C  C034  F001         	movff	dtoa@n,___aomod@dividend
  2206  000F30  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  2207  000F34  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  2208  000F38  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  2209  000F3C  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  2210  000F40  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  2211  000F44  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  2212  000F48  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  2213  000F4C  0E0A               	movlw	10
  2214  000F4E  6E09               	movwf	___aomod@divisor^0,c
  2215  000F50  0E00               	movlw	0
  2216  000F52  6E0A               	movwf	(___aomod@divisor+1)^0,c
  2217  000F54  0E00               	movlw	0
  2218  000F56  6E0B               	movwf	(___aomod@divisor+2)^0,c
  2219  000F58  0E00               	movlw	0
  2220  000F5A  6E0C               	movwf	(___aomod@divisor+3)^0,c
  2221  000F5C  0E00               	movlw	0
  2222  000F5E  6E0D               	movwf	(___aomod@divisor+4)^0,c
  2223  000F60  0E00               	movlw	0
  2224  000F62  6E0E               	movwf	(___aomod@divisor+5)^0,c
  2225  000F64  0E00               	movlw	0
  2226  000F66  6E0F               	movwf	(___aomod@divisor+6)^0,c
  2227  000F68  0E00               	movlw	0
  2228  000F6A  6E10               	movwf	(___aomod@divisor+7)^0,c
  2229  000F6C  ECFB  F008         	call	___aomod	;wreg free
  2230  000F70  C001  F024         	movff	?___aomod,??_dtoa
  2231  000F74  C002  F025         	movff	?___aomod+1,??_dtoa+1
  2232  000F78  C003  F026         	movff	?___aomod+2,??_dtoa+2
  2233  000F7C  C004  F027         	movff	?___aomod+3,??_dtoa+3
  2234  000F80  C005  F028         	movff	?___aomod+4,??_dtoa+4
  2235  000F84  C006  F029         	movff	?___aomod+5,??_dtoa+5
  2236  000F88  C007  F02A         	movff	?___aomod+6,??_dtoa+6
  2237  000F8C  C008  F02B         	movff	?___aomod+7,??_dtoa+7
  2238  000F90  C024  F013         	movff	??_dtoa,abs@a
  2239  000F94  C026  F014         	movff	??_dtoa+2,abs@a+1
  2240  000F98  ECE0  F00B         	call	_abs	;wreg free
  2241  000F9C  5013               	movf	?_abs^0,w,c
  2242  000F9E  0F30               	addlw	48
  2243  000FA0  6EDF               	movwf	indf2,c
  2244                           
  2245                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 315:         --p;
  2246  000FA2  062E               	decf	dtoa@p^0,f,c
  2247  000FA4  A0D8               	btfss	status,0,c
  2248  000FA6  062F               	decf	(dtoa@p+1)^0,f,c
  2249                           
  2250                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 316:         --w;
  2251  000FA8  0630               	decf	dtoa@w^0,f,c
  2252  000FAA  A0D8               	btfss	status,0,c
  2253  000FAC  0631               	decf	(dtoa@w+1)^0,f,c
  2254                           
  2255                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  2256  000FAE  C034  F001         	movff	dtoa@n,___aodiv@dividend
  2257  000FB2  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2258  000FB6  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2259  000FBA  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2260  000FBE  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2261  000FC2  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2262  000FC6  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2263  000FCA  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2264  000FCE  0E0A               	movlw	10
  2265  000FD0  6E09               	movwf	___aodiv@divisor^0,c
  2266  000FD2  0E00               	movlw	0
  2267  000FD4  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  2268  000FD6  0E00               	movlw	0
  2269  000FD8  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  2270  000FDA  0E00               	movlw	0
  2271  000FDC  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  2272  000FDE  0E00               	movlw	0
  2273  000FE0  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  2274  000FE2  0E00               	movlw	0
  2275  000FE4  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  2276  000FE6  0E00               	movlw	0
  2277  000FE8  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  2278  000FEA  0E00               	movlw	0
  2279  000FEC  6E10               	movwf	(___aodiv@divisor+7)^0,c
  2280  000FEE  EC57  F008         	call	___aodiv	;wreg free
  2281  000FF2  C001  F034         	movff	?___aodiv,dtoa@n
  2282  000FF6  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  2283  000FFA  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  2284  000FFE  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  2285  001002  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  2286  001006  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  2287  00100A  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  2288  00100E  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  2289  001012                     l1902:
  2290                           
  2291                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2292  001012  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  2293  001014  D020               	goto	u1320
  2294  001016  503D               	movf	(dtoa@i+1)^0,w,c
  2295  001018  E103               	bnz	u1280
  2296  00101A  043C               	decf	dtoa@i^0,w,c
  2297  00101C  A0D8               	btfss	status,0,c
  2298  00101E  D01B               	goto	u1320
  2299  001020                     u1280:
  2300  001020  5034               	movf	dtoa@n^0,w,c
  2301  001022  1035               	iorwf	(dtoa@n+1)^0,w,c
  2302  001024  1036               	iorwf	(dtoa@n+2)^0,w,c
  2303  001026  1037               	iorwf	(dtoa@n+3)^0,w,c
  2304  001028  1038               	iorwf	(dtoa@n+4)^0,w,c
  2305  00102A  1039               	iorwf	(dtoa@n+5)^0,w,c
  2306  00102C  103A               	iorwf	(dtoa@n+6)^0,w,c
  2307  00102E  103B               	iorwf	(dtoa@n+7)^0,w,c
  2308  001030  A4D8               	btfss	status,2,c
  2309  001032  D775               	goto	l1892
  2310  001034  BE2F               	btfsc	(dtoa@p+1)^0,7,c
  2311  001036  D005               	goto	u1300
  2312  001038  502F               	movf	(dtoa@p+1)^0,w,c
  2313  00103A  E102               	bnz	u1301
  2314  00103C  042E               	decf	dtoa@p^0,w,c
  2315  00103E  B0D8               	btfsc	status,0,c
  2316  001040                     u1301:
  2317  001040  D76E               	goto	l1892
  2318  001042                     u1300:
  2319  001042  BE31               	btfsc	(dtoa@w+1)^0,7,c
  2320  001044  D008               	goto	u1320
  2321  001046  5031               	movf	(dtoa@w+1)^0,w,c
  2322  001048  E103               	bnz	u1310
  2323  00104A  0430               	decf	dtoa@w^0,w,c
  2324  00104C  A0D8               	btfss	status,0,c
  2325  00104E  D003               	goto	u1320
  2326  001050                     u1310:
  2327  001050  0100               	movlb	0	; () banked
  2328  001052  B366               	btfsc	_flags& (0+255),1,b
  2329  001054  D764               	goto	l1892
  2330  001056                     u1320:
  2331                           
  2332                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  2333  001056  5032               	movf	dtoa@s^0,w,c
  2334  001058  1033               	iorwf	(dtoa@s+1)^0,w,c
  2335  00105A  A4D8               	btfss	status,2,c
  2336  00105C  D003               	goto	u1340
  2337  00105E  0100               	movlb	0	; () banked
  2338  001060  A566               	btfss	_flags& (0+255),2,b
  2339  001062  D015               	goto	l1926
  2340  001064                     u1340:
  2341                           
  2342                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 322:         --i;
  2343  001064  063C               	decf	dtoa@i^0,f,c
  2344  001066  A0D8               	btfss	status,0,c
  2345  001068  063D               	decf	(dtoa@i+1)^0,f,c
  2346                           
  2347                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  2348  00106A  5032               	movf	dtoa@s^0,w,c
  2349  00106C  1033               	iorwf	(dtoa@s+1)^0,w,c
  2350  00106E  A4D8               	btfss	status,2,c
  2351  001070  D004               	goto	l1922
  2352  001072  0E00               	movlw	0
  2353  001074  6E2D               	movwf	(_dtoa$1081+1)^0,c
  2354  001076  0E2B               	movlw	43
  2355  001078  D003               	goto	L2
  2356  00107A                     l1922:
  2357  00107A  0E00               	movlw	0
  2358  00107C  6E2D               	movwf	(_dtoa$1081+1)^0,c
  2359  00107E  0E2D               	movlw	45
  2360  001080                     L2:
  2361  001080  6E2C               	movwf	_dtoa$1081^0,c
  2362  001082  503C               	movf	dtoa@i^0,w,c
  2363  001084  0F71               	addlw	low _dbuf
  2364  001086  6ED9               	movwf	fsr2l,c
  2365  001088  6ADA               	clrf	fsr2h,c
  2366  00108A  C02C  FFDF         	movff	_dtoa$1081,indf2
  2367  00108E                     l1926:
  2368                           
  2369                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  2370  00108E  C01B  F00E         	movff	dtoa@fp,pad@fp
  2371  001092  503C               	movf	dtoa@i^0,w,c
  2372  001094  0F71               	addlw	low _dbuf
  2373  001096  6E0F               	movwf	pad@buf^0,c
  2374  001098  C030  F010         	movff	dtoa@w,pad@p
  2375  00109C  C031  F011         	movff	dtoa@w+1,pad@p+1
  2376  0010A0  EC5A  F00A         	call	_pad	;wreg free
  2377  0010A4  C00E  F01B         	movff	?_pad,?_dtoa
  2378  0010A8  C00F  F01C         	movff	?_pad+1,?_dtoa+1
  2379  0010AC  0012               	return		;funcret
  2380  0010AE                     __end_of_dtoa:
  2381                           	callstack 0
  2382                           
  2383 ;; *************** function _pad *****************
  2384 ;; Defined at:
  2385 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2388 ;;		 -> sprintf@f(11), 
  2389 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2390 ;;		 -> dbuf(32), 
  2391 ;;  p               2   15[COMRAM] int 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  w               2   20[COMRAM] int 
  2394 ;;  i               2   18[COMRAM] int 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  2   13[COMRAM] int 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2404 ;;      Params:         4       0       0       0       0       0       0       0       0
  2405 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2406 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2407 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2408 ;;Total ram usage:        9 bytes
  2409 ;; Hardware stack levels used: 1
  2410 ;; Hardware stack levels required when called: 4
  2411 ;; This function calls:
  2412 ;;		_fputc
  2413 ;;		_fputs
  2414 ;;		_strlen
  2415 ;; This function is called by:
  2416 ;;		_dtoa
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text5
  2421  0014B4                     __ptext5:
  2422                           	callstack 0
  2423  0014B4                     _pad:
  2424                           	callstack 22
  2425                           
  2426                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  2427                           
  2428                           ;incstack = 0
  2429  0014B4  0100               	movlb	0	; () banked
  2430  0014B6  A166               	btfss	_flags& (0+255),0,b
  2431  0014B8  D006               	goto	l1830
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  2435  0014BA  C00F  F009         	movff	pad@buf,fputs@s
  2436  0014BE  C00E  F00A         	movff	pad@fp,fputs@fp
  2437  0014C2  ECF9  F00B         	call	_fputs	;wreg free
  2438  0014C6                     l1830:
  2439                           
  2440                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  2441  0014C6  BE11               	btfsc	(pad@p+1)^0,7,c
  2442  0014C8  D005               	goto	l1834
  2443  0014CA  C010  F015         	movff	pad@p,pad@w
  2444  0014CE  C011  F016         	movff	pad@p+1,pad@w+1
  2445  0014D2  D004               	goto	l878
  2446  0014D4                     l1834:
  2447  0014D4  0E00               	movlw	0
  2448  0014D6  6E16               	movwf	(pad@w+1)^0,c
  2449  0014D8  0E00               	movlw	0
  2450  0014DA  6E15               	movwf	pad@w^0,c
  2451  0014DC                     l878:
  2452                           
  2453                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  2454  0014DC  0E00               	movlw	0
  2455  0014DE  6E14               	movwf	(pad@i+1)^0,c
  2456  0014E0  0E00               	movlw	0
  2457  0014E2  6E13               	movwf	pad@i^0,c
  2458                           
  2459                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  2460  0014E4  D00A               	goto	l1840
  2461  0014E6                     l1836:
  2462                           
  2463                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  2464  0014E6  0E00               	movlw	0
  2465  0014E8  6E02               	movwf	(fputc@c+1)^0,c
  2466  0014EA  0E20               	movlw	32
  2467  0014EC  6E01               	movwf	fputc@c^0,c
  2468  0014EE  C00E  F003         	movff	pad@fp,fputc@fp
  2469  0014F2  EC9B  F00A         	call	_fputc	;wreg free
  2470                           
  2471                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 86:         ++i;
  2472  0014F6  4A13               	infsnz	pad@i^0,f,c
  2473  0014F8  2A14               	incf	(pad@i+1)^0,f,c
  2474  0014FA                     l1840:
  2475                           
  2476                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  2477  0014FA  5015               	movf	pad@w^0,w,c
  2478  0014FC  5C13               	subwf	pad@i^0,w,c
  2479  0014FE  5014               	movf	(pad@i+1)^0,w,c
  2480  001500  0A80               	xorlw	128
  2481  001502  6E12               	movwf	??_pad^0,c
  2482  001504  5016               	movf	(pad@w+1)^0,w,c
  2483  001506  0A80               	xorlw	128
  2484  001508  5812               	subwfb	??_pad^0,w,c
  2485  00150A  A0D8               	btfss	status,0,c
  2486  00150C  D7EC               	goto	l1836
  2487                           
  2488                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  2489  00150E  0100               	movlb	0	; () banked
  2490  001510  B166               	btfsc	_flags& (0+255),0,b
  2491  001512  D006               	goto	l1844
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  2495  001514  C00F  F009         	movff	pad@buf,fputs@s
  2496  001518  C00E  F00A         	movff	pad@fp,fputs@fp
  2497  00151C  ECF9  F00B         	call	_fputs	;wreg free
  2498  001520                     l1844:
  2499                           
  2500                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  2501  001520  C00F  F001         	movff	pad@buf,strlen@s
  2502  001524  EC3C  F00C         	call	_strlen	;wreg free
  2503  001528  5015               	movf	pad@w^0,w,c
  2504  00152A  2401               	addwf	?_strlen^0,w,c
  2505  00152C  6E0E               	movwf	?_pad^0,c
  2506  00152E  5016               	movf	(pad@w+1)^0,w,c
  2507  001530  2002               	addwfc	(?_strlen+1)^0,w,c
  2508  001532  6E0F               	movwf	(?_pad+1)^0,c
  2509  001534  0012               	return		;funcret
  2510  001536                     __end_of_pad:
  2511                           	callstack 0
  2512                           
  2513 ;; *************** function _strlen *****************
  2514 ;; Defined at:
  2515 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  s               1    0[COMRAM] PTR const unsigned char 
  2518 ;;		 -> dbuf(32), 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  a               1    2[COMRAM] PTR const unsigned char 
  2521 ;;		 -> dbuf(32), 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  2    0[COMRAM] unsigned int 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2531 ;;      Params:         2       0       0       0       0       0       0       0       0
  2532 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2534 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2535 ;;Total ram usage:        3 bytes
  2536 ;; Hardware stack levels used: 1
  2537 ;; Hardware stack levels required when called: 1
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_pad
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text6
  2546  001878                     __ptext6:
  2547                           	callstack 0
  2548  001878                     _strlen:
  2549                           	callstack 24
  2550                           
  2551                           ;incstack = 0
  2552  001878  C001  F003         	movff	strlen@s,strlen@a
  2553  00187C  D001               	goto	l1734
  2554  00187E                     l1732:
  2555  00187E  2A01               	incf	strlen@s^0,f,c
  2556  001880                     l1734:
  2557  001880  5001               	movf	strlen@s^0,w,c
  2558  001882  6ED9               	movwf	fsr2l,c
  2559  001884  6ADA               	clrf	fsr2h,c
  2560  001886  50DF               	movf	indf2,w,c
  2561  001888  A4D8               	btfss	status,2,c
  2562  00188A  D7F9               	goto	l1732
  2563  00188C  5003               	movf	strlen@a^0,w,c
  2564  00188E  5C01               	subwf	strlen@s^0,w,c
  2565  001890  6E01               	movwf	?_strlen^0,c
  2566  001892  6A02               	clrf	(?_strlen+1)^0,c
  2567  001894  BE01               	btfsc	?_strlen^0,7,c
  2568  001896  0602               	decf	(?_strlen+1)^0,f,c
  2569  001898  0012               	return		;funcret
  2570  00189A                     __end_of_strlen:
  2571                           	callstack 0
  2572                           
  2573 ;; *************** function _fputs *****************
  2574 ;; Defined at:
  2575 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputs.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2578 ;;		 -> dbuf(32), 
  2579 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2580 ;;		 -> sprintf@f(11), 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  i               2   11[COMRAM] int 
  2583 ;;  c               1   10[COMRAM] unsigned char 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  2    8[COMRAM] int 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 3F/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2593 ;;      Params:         2       0       0       0       0       0       0       0       0
  2594 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2596 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2597 ;;Total ram usage:        5 bytes
  2598 ;; Hardware stack levels used: 1
  2599 ;; Hardware stack levels required when called: 3
  2600 ;; This function calls:
  2601 ;;		_fputc
  2602 ;; This function is called by:
  2603 ;;		_pad
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text7
  2608  0017F2                     __ptext7:
  2609                           	callstack 0
  2610  0017F2                     _fputs:
  2611                           	callstack 22
  2612                           
  2613                           ; BSR set to: 0
  2614                           
  2615                           ;incstack = 0
  2616  0017F2  0E00               	movlw	0
  2617  0017F4  6E0D               	movwf	(fputs@i+1)^0,c
  2618  0017F6  0E00               	movlw	0
  2619  0017F8  6E0C               	movwf	fputs@i^0,c
  2620  0017FA  D009               	goto	l1728
  2621  0017FC                     l1724:
  2622  0017FC  C00B  F001         	movff	fputs@c,fputc@c
  2623  001800  6A02               	clrf	(fputc@c+1)^0,c
  2624  001802  C00A  F003         	movff	fputs@fp,fputc@fp
  2625  001806  EC9B  F00A         	call	_fputc	;wreg free
  2626  00180A  4A0C               	infsnz	fputs@i^0,f,c
  2627  00180C  2A0D               	incf	(fputs@i+1)^0,f,c
  2628  00180E                     l1728:
  2629  00180E  5009               	movf	fputs@s^0,w,c
  2630  001810  240C               	addwf	fputs@i^0,w,c
  2631  001812  6ED9               	movwf	fsr2l,c
  2632  001814  6ADA               	clrf	fsr2h,c
  2633  001816  50DF               	movf	indf2,w,c
  2634  001818  6E0B               	movwf	fputs@c^0,c
  2635  00181A  500B               	movf	fputs@c^0,w,c
  2636  00181C  B4D8               	btfsc	status,2,c
  2637  00181E  0012               	return	
  2638  001820  D7ED               	goto	l1724
  2639  001822                     __end_of_fputs:
  2640                           	callstack 0
  2641                           
  2642 ;; *************** function _fputc *****************
  2643 ;; Defined at:
  2644 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputc.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  c               2    0[COMRAM] int 
  2647 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2648 ;;		 -> sprintf@f(11), 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  2    0[COMRAM] int 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2660 ;;      Params:         3       0       0       0       0       0       0       0       0
  2661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2662 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2663 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2664 ;;Total ram usage:        8 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 2
  2667 ;; This function calls:
  2668 ;;		_putch
  2669 ;; This function is called by:
  2670 ;;		_pad
  2671 ;;		_vfpfcnvrt
  2672 ;;		_fputs
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text8
  2677  001536                     __ptext8:
  2678                           	callstack 0
  2679  001536                     _fputc:
  2680                           	callstack 25
  2681                           
  2682                           ;incstack = 0
  2683  001536  5003               	movf	fputc@fp^0,w,c
  2684  001538  B4D8               	btfsc	status,2,c
  2685  00153A  D003               	goto	u940
  2686  00153C  5003               	movf	fputc@fp^0,w,c
  2687  00153E  A4D8               	btfss	status,2,c
  2688  001540  D004               	goto	l1714
  2689  001542                     u940:
  2690  001542  5001               	movf	fputc@c^0,w,c
  2691  001544  EC78  F00C         	call	_putch
  2692  001548  0012               	return	
  2693  00154A                     l1714:
  2694  00154A  5003               	movf	fputc@fp^0,w,c
  2695  00154C  6ED9               	movwf	fsr2l,c
  2696  00154E  6ADA               	clrf	fsr2h,c
  2697  001550  0E09               	movlw	9
  2698  001552  26D9               	addwf	fsr2l,f,c
  2699  001554  50DE               	movf	postinc2,w,c
  2700  001556  10DE               	iorwf	postinc2,w,c
  2701  001558  B4D8               	btfsc	status,2,c
  2702  00155A  D014               	goto	u960
  2703  00155C  5003               	movf	fputc@fp^0,w,c
  2704  00155E  6ED9               	movwf	fsr2l,c
  2705  001560  6ADA               	clrf	fsr2h,c
  2706  001562  0E09               	movlw	9
  2707  001564  26D9               	addwf	fsr2l,f,c
  2708  001566  5003               	movf	fputc@fp^0,w,c
  2709  001568  6EE1               	movwf	fsr1l,c
  2710  00156A  6AE2               	clrf	fsr1h,c
  2711  00156C  0E03               	movlw	3
  2712  00156E  26E1               	addwf	fsr1l,f,c
  2713  001570  50DE               	movf	postinc2,w,c
  2714  001572  5CE6               	subwf	postinc1,w,c
  2715  001574  50E6               	movf	postinc1,w,c
  2716  001576  0A80               	xorlw	128
  2717  001578  6E08               	movwf	(??_fputc+4)^0,c
  2718  00157A  50DE               	movf	postinc2,w,c
  2719  00157C  0A80               	xorlw	128
  2720  00157E  5808               	subwfb	(??_fputc+4)^0,w,c
  2721  001580  B0D8               	btfsc	status,0,c
  2722  001582  0012               	return	
  2723  001584                     u960:
  2724  001584  5003               	movf	fputc@fp^0,w,c
  2725  001586  6ED9               	movwf	fsr2l,c
  2726  001588  6ADA               	clrf	fsr2h,c
  2727  00158A  0E03               	movlw	3
  2728  00158C  26D9               	addwf	fsr2l,f,c
  2729  00158E  50DF               	movf	indf2,w,c
  2730  001590  6E04               	movwf	??_fputc^0,c
  2731  001592  5003               	movf	fputc@fp^0,w,c
  2732  001594  6ED9               	movwf	fsr2l,c
  2733  001596  6ADA               	clrf	fsr2h,c
  2734  001598  50DF               	movf	indf2,w,c
  2735  00159A  2404               	addwf	??_fputc^0,w,c
  2736  00159C  6ED9               	movwf	fsr2l,c
  2737  00159E  6ADA               	clrf	fsr2h,c
  2738  0015A0  C001  FFDF         	movff	fputc@c,indf2
  2739  0015A4  5003               	movf	fputc@fp^0,w,c
  2740  0015A6  6ED9               	movwf	fsr2l,c
  2741  0015A8  6ADA               	clrf	fsr2h,c
  2742  0015AA  0E03               	movlw	3
  2743  0015AC  26D9               	addwf	fsr2l,f,c
  2744  0015AE  2ADE               	incf	postinc2,f,c
  2745  0015B0  0E00               	movlw	0
  2746  0015B2  22DD               	addwfc	postdec2,f,c
  2747  0015B4  0012               	return		;funcret
  2748  0015B6                     __end_of_fputc:
  2749                           	callstack 0
  2750                           
  2751 ;; *************** function _putch *****************
  2752 ;; Defined at:
  2753 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\putch.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  c               1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  c               1    0[COMRAM] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2770 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used: 1
  2773 ;; Hardware stack levels required when called: 1
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_fputc
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text9
  2782  0018F0                     __ptext9:
  2783                           	callstack 0
  2784  0018F0                     _putch:
  2785                           	callstack 25
  2786                           
  2787                           ;incstack = 0
  2788  0018F0  0012               	return		;funcret
  2789  0018F2                     __end_of_putch:
  2790                           	callstack 0
  2791                           
  2792 ;; *************** function _abs *****************
  2793 ;; Defined at:
  2794 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  a               2   18[COMRAM] int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  2   18[COMRAM] int 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2808 ;;      Params:         2       0       0       0       0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2810 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2811 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2812 ;;Total ram usage:        4 bytes
  2813 ;; Hardware stack levels used: 1
  2814 ;; Hardware stack levels required when called: 1
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_dtoa
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text10
  2823  0017C0                     __ptext10:
  2824                           	callstack 0
  2825  0017C0                     _abs:
  2826                           	callstack 25
  2827                           
  2828                           ;incstack = 0
  2829  0017C0  BE14               	btfsc	(abs@a+1)^0,7,c
  2830  0017C2  D005               	goto	u1160
  2831  0017C4  5014               	movf	(abs@a+1)^0,w,c
  2832  0017C6  E110               	bnz	l947
  2833  0017C8  0413               	decf	abs@a^0,w,c
  2834  0017CA  B0D8               	btfsc	status,0,c
  2835  0017CC  D00D               	goto	l947
  2836  0017CE                     u1160:
  2837  0017CE  C013  F015         	movff	abs@a,??_abs
  2838  0017D2  C014  F016         	movff	abs@a+1,??_abs+1
  2839  0017D6  1E15               	comf	??_abs^0,f,c
  2840  0017D8  1E16               	comf	(??_abs+1)^0,f,c
  2841  0017DA  4A15               	infsnz	??_abs^0,f,c
  2842  0017DC  2A16               	incf	(??_abs+1)^0,f,c
  2843  0017DE  C015  F013         	movff	??_abs,?_abs
  2844  0017E2  C016  F014         	movff	??_abs+1,?_abs+1
  2845  0017E6  0012               	return	
  2846  0017E8                     l947:
  2847  0017E8  C013  F013         	movff	abs@a,?_abs
  2848  0017EC  C014  F014         	movff	abs@a+1,?_abs+1
  2849  0017F0  0012               	return		;funcret
  2850  0017F2                     __end_of_abs:
  2851                           	callstack 0
  2852                           
  2853 ;; *************** function ___aomod *****************
  2854 ;; Defined at:
  2855 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aomod.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  dividend        8    0[COMRAM] long long 
  2858 ;;  divisor         8    8[COMRAM] long long 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  sign            1   17[COMRAM] unsigned char 
  2861 ;;  counter         1   16[COMRAM] unsigned char 
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  8    0[COMRAM] long long 
  2864 ;; Registers used:
  2865 ;;		wreg, status,2, status,0
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2871 ;;      Params:        16       0       0       0       0       0       0       0       0
  2872 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2874 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2875 ;;Total ram usage:       18 bytes
  2876 ;; Hardware stack levels used: 1
  2877 ;; Hardware stack levels required when called: 1
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_dtoa
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text11
  2886  0011F6                     __ptext11:
  2887                           	callstack 0
  2888  0011F6                     ___aomod:
  2889                           	callstack 25
  2890                           
  2891                           ;incstack = 0
  2892  0011F6  0E00               	movlw	0
  2893  0011F8  6E12               	movwf	___aomod@sign^0,c
  2894  0011FA  AE08               	btfss	(___aomod@dividend+7)^0,7,c
  2895  0011FC  D012               	goto	l1798
  2896  0011FE  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2897  001200  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2898  001202  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2899  001204  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2900  001206  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2901  001208  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2902  00120A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2903  00120C  6C01               	negf	___aomod@dividend^0,c
  2904  00120E  0E00               	movlw	0
  2905  001210  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2906  001212  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2907  001214  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2908  001216  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2909  001218  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2910  00121A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2911  00121C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2912  00121E  0E01               	movlw	1
  2913  001220  6E12               	movwf	___aomod@sign^0,c
  2914  001222                     l1798:
  2915  001222  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2916  001224  D010               	goto	l1802
  2917  001226  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2918  001228  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2919  00122A  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2920  00122C  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2921  00122E  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2922  001230  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2923  001232  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2924  001234  6C09               	negf	___aomod@divisor^0,c
  2925  001236  0E00               	movlw	0
  2926  001238  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2927  00123A  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2928  00123C  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2929  00123E  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2930  001240  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2931  001242  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2932  001244  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2933  001246                     l1802:
  2934  001246  5009               	movf	___aomod@divisor^0,w,c
  2935  001248  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2936  00124A  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2937  00124C  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2938  00124E  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2939  001250  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2940  001252  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2941  001254  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2942  001256  B4D8               	btfsc	status,2,c
  2943  001258  D03C               	goto	l1818
  2944  00125A  0E01               	movlw	1
  2945  00125C  6E11               	movwf	___aomod@counter^0,c
  2946  00125E  D00A               	goto	l1808
  2947  001260                     l1806:
  2948  001260  90D8               	bcf	status,0,c
  2949  001262  3609               	rlcf	___aomod@divisor^0,f,c
  2950  001264  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2951  001266  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2952  001268  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2953  00126A  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2954  00126C  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2955  00126E  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2956  001270  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2957  001272  2A11               	incf	___aomod@counter^0,f,c
  2958  001274                     l1808:
  2959  001274  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2960  001276  D7F4               	goto	l1806
  2961  001278                     u1090:
  2962  001278  5009               	movf	___aomod@divisor^0,w,c
  2963  00127A  5C01               	subwf	___aomod@dividend^0,w,c
  2964  00127C  500A               	movf	(___aomod@divisor+1)^0,w,c
  2965  00127E  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2966  001280  500B               	movf	(___aomod@divisor+2)^0,w,c
  2967  001282  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2968  001284  500C               	movf	(___aomod@divisor+3)^0,w,c
  2969  001286  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2970  001288  500D               	movf	(___aomod@divisor+4)^0,w,c
  2971  00128A  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2972  00128C  500E               	movf	(___aomod@divisor+5)^0,w,c
  2973  00128E  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2974  001290  500F               	movf	(___aomod@divisor+6)^0,w,c
  2975  001292  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2976  001294  5010               	movf	(___aomod@divisor+7)^0,w,c
  2977  001296  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2978  001298  A0D8               	btfss	status,0,c
  2979  00129A  D010               	goto	l1814
  2980  00129C  5009               	movf	___aomod@divisor^0,w,c
  2981  00129E  5E01               	subwf	___aomod@dividend^0,f,c
  2982  0012A0  500A               	movf	(___aomod@divisor+1)^0,w,c
  2983  0012A2  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2984  0012A4  500B               	movf	(___aomod@divisor+2)^0,w,c
  2985  0012A6  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2986  0012A8  500C               	movf	(___aomod@divisor+3)^0,w,c
  2987  0012AA  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2988  0012AC  500D               	movf	(___aomod@divisor+4)^0,w,c
  2989  0012AE  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2990  0012B0  500E               	movf	(___aomod@divisor+5)^0,w,c
  2991  0012B2  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2992  0012B4  500F               	movf	(___aomod@divisor+6)^0,w,c
  2993  0012B6  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2994  0012B8  5010               	movf	(___aomod@divisor+7)^0,w,c
  2995  0012BA  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2996  0012BC                     l1814:
  2997  0012BC  90D8               	bcf	status,0,c
  2998  0012BE  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2999  0012C0  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  3000  0012C2  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  3001  0012C4  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  3002  0012C6  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  3003  0012C8  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  3004  0012CA  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  3005  0012CC  3209               	rrcf	___aomod@divisor^0,f,c
  3006  0012CE  2E11               	decfsz	___aomod@counter^0,f,c
  3007  0012D0  D7D3               	goto	u1090
  3008  0012D2                     l1818:
  3009  0012D2  5012               	movf	___aomod@sign^0,w,c
  3010  0012D4  B4D8               	btfsc	status,2,c
  3011  0012D6  D010               	goto	l1822
  3012  0012D8  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3013  0012DA  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3014  0012DC  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3015  0012DE  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3016  0012E0  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3017  0012E2  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3018  0012E4  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3019  0012E6  6C01               	negf	___aomod@dividend^0,c
  3020  0012E8  0E00               	movlw	0
  3021  0012EA  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3022  0012EC  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3023  0012EE  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3024  0012F0  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3025  0012F2  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3026  0012F4  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3027  0012F6  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3028  0012F8                     l1822:
  3029  0012F8  C001  F001         	movff	___aomod@dividend,?___aomod
  3030  0012FC  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  3031  001300  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  3032  001304  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  3033  001308  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  3034  00130C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  3035  001310  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  3036  001314  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  3037  001318  0012               	return		;funcret
  3038  00131A                     __end_of___aomod:
  3039                           	callstack 0
  3040                           
  3041 ;; *************** function ___aodiv *****************
  3042 ;; Defined at:
  3043 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aodiv.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  dividend        8    0[COMRAM] long long 
  3046 ;;  divisor         8    8[COMRAM] long long 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  quotient        8   18[COMRAM] long long 
  3049 ;;  sign            1   17[COMRAM] unsigned char 
  3050 ;;  counter         1   16[COMRAM] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  8    0[COMRAM] long long 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3060 ;;      Params:        16       0       0       0       0       0       0       0       0
  3061 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3063 ;;      Totals:        26       0       0       0       0       0       0       0       0
  3064 ;;Total ram usage:       26 bytes
  3065 ;; Hardware stack levels used: 1
  3066 ;; Hardware stack levels required when called: 1
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		_dtoa
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text12
  3075  0010AE                     __ptext12:
  3076                           	callstack 0
  3077  0010AE                     ___aodiv:
  3078                           	callstack 25
  3079                           
  3080                           ;incstack = 0
  3081  0010AE  0E00               	movlw	0
  3082  0010B0  6E12               	movwf	___aodiv@sign^0,c
  3083  0010B2  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3084  0010B4  D012               	goto	l1754
  3085  0010B6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  3086  0010B8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  3087  0010BA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  3088  0010BC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  3089  0010BE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  3090  0010C0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  3091  0010C2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  3092  0010C4  6C09               	negf	___aodiv@divisor^0,c
  3093  0010C6  0E00               	movlw	0
  3094  0010C8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  3095  0010CA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  3096  0010CC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  3097  0010CE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  3098  0010D0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  3099  0010D2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  3100  0010D4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  3101  0010D6  0E01               	movlw	1
  3102  0010D8  6E12               	movwf	___aodiv@sign^0,c
  3103  0010DA                     l1754:
  3104  0010DA  AE08               	btfss	(___aodiv@dividend+7)^0,7,c
  3105  0010DC  D012               	goto	l1760
  3106  0010DE  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  3107  0010E0  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  3108  0010E2  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  3109  0010E4  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  3110  0010E6  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  3111  0010E8  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  3112  0010EA  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  3113  0010EC  6C01               	negf	___aodiv@dividend^0,c
  3114  0010EE  0E00               	movlw	0
  3115  0010F0  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  3116  0010F2  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  3117  0010F4  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  3118  0010F6  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  3119  0010F8  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  3120  0010FA  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  3121  0010FC  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  3122  0010FE  0E01               	movlw	1
  3123  001100  1A12               	xorwf	___aodiv@sign^0,f,c
  3124  001102                     l1760:
  3125  001102  EE20  F013         	lfsr	2,___aodiv@quotient
  3126  001106  0E07               	movlw	7
  3127  001108                     u1011:
  3128  001108  6ADE               	clrf	postinc2,c
  3129  00110A  06E8               	decf	wreg,f,c
  3130  00110C  E2FD               	bc	u1011
  3131  00110E  5009               	movf	___aodiv@divisor^0,w,c
  3132  001110  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  3133  001112  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  3134  001114  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  3135  001116  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  3136  001118  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  3137  00111A  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  3138  00111C  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  3139  00111E  B4D8               	btfsc	status,2,c
  3140  001120  D046               	goto	l1782
  3141  001122  0E01               	movlw	1
  3142  001124  6E11               	movwf	___aodiv@counter^0,c
  3143  001126  D00A               	goto	l1768
  3144  001128                     l1766:
  3145  001128  90D8               	bcf	status,0,c
  3146  00112A  3609               	rlcf	___aodiv@divisor^0,f,c
  3147  00112C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  3148  00112E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  3149  001130  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  3150  001132  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  3151  001134  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  3152  001136  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  3153  001138  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  3154  00113A  2A11               	incf	___aodiv@counter^0,f,c
  3155  00113C                     l1768:
  3156  00113C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  3157  00113E  D7F4               	goto	l1766
  3158  001140                     u1030:
  3159  001140  90D8               	bcf	status,0,c
  3160  001142  3613               	rlcf	___aodiv@quotient^0,f,c
  3161  001144  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  3162  001146  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  3163  001148  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  3164  00114A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  3165  00114C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  3166  00114E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  3167  001150  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  3168  001152  5009               	movf	___aodiv@divisor^0,w,c
  3169  001154  5C01               	subwf	___aodiv@dividend^0,w,c
  3170  001156  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3171  001158  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  3172  00115A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3173  00115C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  3174  00115E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3175  001160  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  3176  001162  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3177  001164  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  3178  001166  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3179  001168  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  3180  00116A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3181  00116C  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  3182  00116E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3183  001170  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  3184  001172  A0D8               	btfss	status,0,c
  3185  001174  D011               	goto	l1778
  3186  001176  5009               	movf	___aodiv@divisor^0,w,c
  3187  001178  5E01               	subwf	___aodiv@dividend^0,f,c
  3188  00117A  500A               	movf	(___aodiv@divisor+1)^0,w,c
  3189  00117C  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  3190  00117E  500B               	movf	(___aodiv@divisor+2)^0,w,c
  3191  001180  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  3192  001182  500C               	movf	(___aodiv@divisor+3)^0,w,c
  3193  001184  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  3194  001186  500D               	movf	(___aodiv@divisor+4)^0,w,c
  3195  001188  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  3196  00118A  500E               	movf	(___aodiv@divisor+5)^0,w,c
  3197  00118C  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  3198  00118E  500F               	movf	(___aodiv@divisor+6)^0,w,c
  3199  001190  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  3200  001192  5010               	movf	(___aodiv@divisor+7)^0,w,c
  3201  001194  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  3202  001196  8013               	bsf	___aodiv@quotient^0,0,c
  3203  001198                     l1778:
  3204  001198  90D8               	bcf	status,0,c
  3205  00119A  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  3206  00119C  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  3207  00119E  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  3208  0011A0  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  3209  0011A2  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  3210  0011A4  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  3211  0011A6  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  3212  0011A8  3209               	rrcf	___aodiv@divisor^0,f,c
  3213  0011AA  2E11               	decfsz	___aodiv@counter^0,f,c
  3214  0011AC  D7C9               	goto	u1030
  3215  0011AE                     l1782:
  3216  0011AE  5012               	movf	___aodiv@sign^0,w,c
  3217  0011B0  B4D8               	btfsc	status,2,c
  3218  0011B2  D010               	goto	l1786
  3219  0011B4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  3220  0011B6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  3221  0011B8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  3222  0011BA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  3223  0011BC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  3224  0011BE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  3225  0011C0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  3226  0011C2  6C13               	negf	___aodiv@quotient^0,c
  3227  0011C4  0E00               	movlw	0
  3228  0011C6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  3229  0011C8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  3230  0011CA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  3231  0011CC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  3232  0011CE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  3233  0011D0  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  3234  0011D2  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  3235  0011D4                     l1786:
  3236  0011D4  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3237  0011D8  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3238  0011DC  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3239  0011E0  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3240  0011E4  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3241  0011E8  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3242  0011EC  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3243  0011F0  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3244  0011F4  0012               	return		;funcret
  3245  0011F6                     __end_of___aodiv:
  3246                           	callstack 0
  3247                           
  3248 ;; *************** function _atoi *****************
  3249 ;; Defined at:
  3250 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\atoi.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  s               1    7[COMRAM] PTR const unsigned char 
  3253 ;;		 -> STR_6(15), STR_5(15), STR_4(15), STR_3(15), 
  3254 ;;		 -> STR_2(15), 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  n               2   15[COMRAM] int 
  3257 ;;  neg             2   13[COMRAM] int 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  2    7[COMRAM] int 
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 3F/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3267 ;;      Params:         2       0       0       0       0       0       0       0       0
  3268 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3269 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3270 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3271 ;;Total ram usage:       10 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; Hardware stack levels required when called: 2
  3274 ;; This function calls:
  3275 ;;		___wmul
  3276 ;;		_isdigit
  3277 ;;		_isspace
  3278 ;; This function is called by:
  3279 ;;		_vfpfcnvrt
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text13
  3284  00131A                     __ptext13:
  3285                           	callstack 0
  3286  00131A                     _atoi:
  3287                           	callstack 25
  3288                           
  3289                           ; BSR set to: 0
  3290                           
  3291                           ;incstack = 0
  3292  00131A  0E00               	movlw	0
  3293  00131C  6E11               	movwf	(atoi@n+1)^0,c
  3294  00131E  0E00               	movlw	0
  3295  001320  6E10               	movwf	atoi@n^0,c
  3296  001322  0E00               	movlw	0
  3297  001324  6E0F               	movwf	(atoi@neg+1)^0,c
  3298  001326  0E00               	movlw	0
  3299  001328  6E0E               	movwf	atoi@neg^0,c
  3300  00132A  D001               	goto	l1936
  3301  00132C                     l1932:
  3302                           
  3303                           ; BSR set to: 0
  3304  00132C  2A08               	incf	atoi@s^0,f,c
  3305  00132E                     l1936:
  3306                           
  3307                           ; BSR set to: 0
  3308  00132E  C008  FFF6         	movff	atoi@s,tblptrl
  3309  001332                     	if	1	;There is more than 1 active tblptr byte
  3310  001332  0E08               	movlw	high __smallconst
  3311  001334  6EF7               	movwf	tblptrh,c
  3312  001336                     	endif
  3313  001336                     	if	0	;tblptru may be non-zero
  3314  001336                     	endif
  3315  001336                     	if	0	;tblptru may be non-zero
  3316  001336                     	endif
  3317  001336  0008               	tblrd		*
  3318  001338  50F5               	movf	tablat,w,c
  3319  00133A  0A20               	xorlw	32
  3320  00133C  B4D8               	btfsc	status,2,c
  3321  00133E  D7F6               	goto	l1932
  3322                           
  3323                           ; BSR set to: 0
  3324  001340  0EF7               	movlw	247
  3325  001342  6E0A               	movwf	??_atoi^0,c
  3326  001344  0EFF               	movlw	255
  3327  001346  6E0B               	movwf	(??_atoi+1)^0,c
  3328  001348  C008  FFF6         	movff	atoi@s,tblptrl
  3329  00134C                     	if	1	;There is more than 1 active tblptr byte
  3330  00134C  0E08               	movlw	high __smallconst
  3331  00134E  6EF7               	movwf	tblptrh,c
  3332  001350                     	endif
  3333  001350                     	if	0	;tblptru may be non-zero
  3334  001350                     	endif
  3335  001350                     	if	0	;tblptru may be non-zero
  3336  001350                     	endif
  3337  001350  0008               	tblrd		*
  3338  001352  50F5               	movf	tablat,w,c
  3339  001354  6E0C               	movwf	(??_atoi+2)^0,c
  3340  001356  6A0D               	clrf	(??_atoi+3)^0,c
  3341  001358  500A               	movf	??_atoi^0,w,c
  3342  00135A  260C               	addwf	(??_atoi+2)^0,f,c
  3343  00135C  500B               	movf	(??_atoi+1)^0,w,c
  3344  00135E  220D               	addwfc	(??_atoi+3)^0,f,c
  3345  001360  500D               	movf	(??_atoi+3)^0,w,c
  3346  001362  E10B               	bnz	l1944
  3347  001364  0E05               	movlw	5
  3348  001366  5C0C               	subwf	(??_atoi+2)^0,w,c
  3349  001368  B0D8               	btfsc	status,0,c
  3350  00136A  D007               	goto	l1944
  3351  00136C  D7DF               	goto	l1932
  3352  00136E                     l1940:
  3353                           
  3354                           ; BSR set to: 0
  3355  00136E  0E00               	movlw	0
  3356  001370  6E0F               	movwf	(atoi@neg+1)^0,c
  3357  001372  0E01               	movlw	1
  3358  001374  6E0E               	movwf	atoi@neg^0,c
  3359  001376                     l1942:
  3360  001376  2A08               	incf	atoi@s^0,f,c
  3361  001378  D02E               	goto	l1952
  3362  00137A                     l1944:
  3363                           
  3364                           ; BSR set to: 0
  3365  00137A  C008  FFF6         	movff	atoi@s,tblptrl
  3366  00137E                     	if	1	;There is more than 1 active tblptr byte
  3367  00137E  0E08               	movlw	high __smallconst
  3368  001380  6EF7               	movwf	tblptrh,c
  3369  001382                     	endif
  3370  001382                     	if	0	;tblptru may be non-zero
  3371  001382                     	endif
  3372  001382                     	if	0	;tblptru may be non-zero
  3373  001382                     	endif
  3374  001382  0008               	tblrd		*
  3375  001384  50F5               	movf	tablat,w,c
  3376  001386  6E0A               	movwf	??_atoi^0,c
  3377  001388  6A0B               	clrf	(??_atoi+1)^0,c
  3378                           
  3379                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3380                           ; Switch size 1, requested type "simple"
  3381                           ; Number of cases is 1, Range of values is 0 to 0
  3382                           ; switch strategies available:
  3383                           ; Name         Instructions Cycles
  3384                           ; simple_byte            4     3 (average)
  3385                           ;	Chosen strategy is simple_byte
  3386  00138A  500B               	movf	(??_atoi+1)^0,w,c
  3387  00138C  0A00               	xorlw	0	; case 0
  3388  00138E  A4D8               	btfss	status,2,c
  3389  001390  D022               	goto	l1952
  3390                           
  3391                           ; BSR set to: 0
  3392                           ; Switch size 1, requested type "simple"
  3393                           ; Number of cases is 2, Range of values is 43 to 45
  3394                           ; switch strategies available:
  3395                           ; Name         Instructions Cycles
  3396                           ; simple_byte            7     4 (average)
  3397                           ;	Chosen strategy is simple_byte
  3398  001392  500A               	movf	??_atoi^0,w,c
  3399  001394  0A2B               	xorlw	43	; case 43
  3400  001396  B4D8               	btfsc	status,2,c
  3401  001398  D7EE               	goto	l1942
  3402  00139A  0A06               	xorlw	6	; case 45
  3403  00139C  B4D8               	btfsc	status,2,c
  3404  00139E  D7E7               	goto	l1940
  3405  0013A0  D01A               	goto	l1952
  3406  0013A2                     l1946:
  3407  0013A2  C010  F001         	movff	atoi@n,___wmul@multiplier
  3408  0013A6  C011  F002         	movff	atoi@n+1,___wmul@multiplier+1
  3409  0013AA  0E00               	movlw	0
  3410  0013AC  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  3411  0013AE  0E0A               	movlw	10
  3412  0013B0  6E03               	movwf	___wmul@multiplicand^0,c
  3413  0013B2  EC29  F00C         	call	___wmul	;wreg free
  3414  0013B6  C008  FFF6         	movff	atoi@s,tblptrl
  3415  0013BA                     	if	1	;There is more than 1 active tblptr byte
  3416  0013BA  0E08               	movlw	high __smallconst
  3417  0013BC  6EF7               	movwf	tblptrh,c
  3418  0013BE                     	endif
  3419  0013BE                     	if	0	;tblptru may be non-zero
  3420  0013BE                     	endif
  3421  0013BE                     	if	0	;tblptru may be non-zero
  3422  0013BE                     	endif
  3423  0013BE  0008               	tblrd		*
  3424  0013C0  50F5               	movf	tablat,w,c
  3425  0013C2  5E01               	subwf	?___wmul^0,f,c
  3426  0013C4  0E00               	movlw	0
  3427  0013C6  5A02               	subwfb	(?___wmul+1)^0,f,c
  3428  0013C8  0E30               	movlw	48
  3429  0013CA  2401               	addwf	?___wmul^0,w,c
  3430  0013CC  6E10               	movwf	atoi@n^0,c
  3431  0013CE  0E00               	movlw	0
  3432  0013D0  2002               	addwfc	(?___wmul+1)^0,w,c
  3433  0013D2  6E11               	movwf	(atoi@n+1)^0,c
  3434  0013D4  D7D0               	goto	l1942
  3435  0013D6                     l1952:
  3436  0013D6  0ED0               	movlw	208
  3437  0013D8  6E0A               	movwf	??_atoi^0,c
  3438  0013DA  0EFF               	movlw	255
  3439  0013DC  6E0B               	movwf	(??_atoi+1)^0,c
  3440  0013DE  C008  FFF6         	movff	atoi@s,tblptrl
  3441  0013E2                     	if	1	;There is more than 1 active tblptr byte
  3442  0013E2  0E08               	movlw	high __smallconst
  3443  0013E4  6EF7               	movwf	tblptrh,c
  3444  0013E6                     	endif
  3445  0013E6                     	if	0	;tblptru may be non-zero
  3446  0013E6                     	endif
  3447  0013E6                     	if	0	;tblptru may be non-zero
  3448  0013E6                     	endif
  3449  0013E6  0008               	tblrd		*
  3450  0013E8  50F5               	movf	tablat,w,c
  3451  0013EA  6E0C               	movwf	(??_atoi+2)^0,c
  3452  0013EC  6A0D               	clrf	(??_atoi+3)^0,c
  3453  0013EE  500A               	movf	??_atoi^0,w,c
  3454  0013F0  260C               	addwf	(??_atoi+2)^0,f,c
  3455  0013F2  500B               	movf	(??_atoi+1)^0,w,c
  3456  0013F4  220D               	addwfc	(??_atoi+3)^0,f,c
  3457  0013F6  500D               	movf	(??_atoi+3)^0,w,c
  3458  0013F8  E104               	bnz	u1380
  3459  0013FA  0E0A               	movlw	10
  3460  0013FC  5C0C               	subwf	(??_atoi+2)^0,w,c
  3461  0013FE  A0D8               	btfss	status,0,c
  3462  001400  D7D0               	goto	l1946
  3463  001402                     u1380:
  3464  001402  500E               	movf	atoi@neg^0,w,c
  3465  001404  100F               	iorwf	(atoi@neg+1)^0,w,c
  3466  001406  A4D8               	btfss	status,2,c
  3467  001408  D00D               	goto	l972
  3468  00140A  C010  F00A         	movff	atoi@n,??_atoi
  3469  00140E  C011  F00B         	movff	atoi@n+1,??_atoi+1
  3470  001412  1E0A               	comf	??_atoi^0,f,c
  3471  001414  1E0B               	comf	(??_atoi+1)^0,f,c
  3472  001416  4A0A               	infsnz	??_atoi^0,f,c
  3473  001418  2A0B               	incf	(??_atoi+1)^0,f,c
  3474  00141A  C00A  F008         	movff	??_atoi,?_atoi
  3475  00141E  C00B  F009         	movff	??_atoi+1,?_atoi+1
  3476  001422  0012               	return	
  3477  001424                     l972:
  3478  001424  C010  F008         	movff	atoi@n,?_atoi
  3479  001428  C011  F009         	movff	atoi@n+1,?_atoi+1
  3480  00142C  0012               	return		;funcret
  3481  00142E                     __end_of_atoi:
  3482                           	callstack 0
  3483                           
  3484 ;; *************** function _isspace *****************
  3485 ;; Defined at:
  3486 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isspace.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  c               2    0[COMRAM] int 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  2    0[COMRAM] int 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3500 ;;      Params:         2       0       0       0       0       0       0       0       0
  3501 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3502 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3503 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3504 ;;Total ram usage:        7 bytes
  3505 ;; Hardware stack levels used: 1
  3506 ;; Hardware stack levels required when called: 1
  3507 ;; This function calls:
  3508 ;;		Nothing
  3509 ;; This function is called by:
  3510 ;;		_atoi
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text14
  3515  001716                     __ptext14:
  3516                           	callstack 0
  3517  001716                     _isspace:
  3518                           	callstack 25
  3519                           
  3520                           ;incstack = 0
  3521  001716  0E01               	movlw	1
  3522  001718  6E07               	movwf	_isspace$1130^0,c
  3523  00171A  0E20               	movlw	32
  3524  00171C  1801               	xorwf	isspace@c^0,w,c
  3525  00171E  1002               	iorwf	(isspace@c+1)^0,w,c
  3526  001720  B4D8               	btfsc	status,2,c
  3527  001722  D014               	goto	l1864
  3528  001724  0EF7               	movlw	247
  3529  001726  6E03               	movwf	??_isspace^0,c
  3530  001728  0EFF               	movlw	255
  3531  00172A  6E04               	movwf	(??_isspace+1)^0,c
  3532  00172C  C001  F005         	movff	isspace@c,??_isspace+2
  3533  001730  C002  F006         	movff	isspace@c+1,??_isspace+3
  3534  001734  5003               	movf	??_isspace^0,w,c
  3535  001736  2605               	addwf	(??_isspace+2)^0,f,c
  3536  001738  5004               	movf	(??_isspace+1)^0,w,c
  3537  00173A  2206               	addwfc	(??_isspace+3)^0,f,c
  3538  00173C  5006               	movf	(??_isspace+3)^0,w,c
  3539  00173E  E104               	bnz	u1200
  3540  001740  0E05               	movlw	5
  3541  001742  5C05               	subwf	(??_isspace+2)^0,w,c
  3542  001744  A0D8               	btfss	status,0,c
  3543  001746  D002               	goto	l1864
  3544  001748                     u1200:
  3545  001748  0E00               	movlw	0
  3546  00174A  6E07               	movwf	_isspace$1130^0,c
  3547  00174C                     l1864:
  3548  00174C  C007  F001         	movff	_isspace$1130,?_isspace
  3549  001750  6A02               	clrf	(?_isspace+1)^0,c
  3550  001752  0012               	return		;funcret
  3551  001754                     __end_of_isspace:
  3552                           	callstack 0
  3553                           
  3554 ;; *************** function _isdigit *****************
  3555 ;; Defined at:
  3556 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isdigit.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  c               2    0[COMRAM] int 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  2    0[COMRAM] int 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3570 ;;      Params:         2       0       0       0       0       0       0       0       0
  3571 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3572 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3573 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3574 ;;Total ram usage:        6 bytes
  3575 ;; Hardware stack levels used: 1
  3576 ;; Hardware stack levels required when called: 1
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_vfpfcnvrt
  3581 ;;		_atoi
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text15
  3586  001822                     __ptext15:
  3587                           	callstack 0
  3588  001822                     _isdigit:
  3589                           	callstack 26
  3590                           
  3591                           ;incstack = 0
  3592  001822  0ED0               	movlw	208
  3593  001824  6E03               	movwf	??_isdigit^0,c
  3594  001826  0EFF               	movlw	255
  3595  001828  6E04               	movwf	(??_isdigit+1)^0,c
  3596  00182A  C001  F005         	movff	isdigit@c,??_isdigit+2
  3597  00182E  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  3598  001832  5003               	movf	??_isdigit^0,w,c
  3599  001834  2605               	addwf	(??_isdigit+2)^0,f,c
  3600  001836  5004               	movf	(??_isdigit+1)^0,w,c
  3601  001838  2206               	addwfc	(??_isdigit+3)^0,f,c
  3602  00183A  5006               	movf	(??_isdigit+3)^0,w,c
  3603  00183C  E106               	bnz	u1170
  3604  00183E  0E0A               	movlw	10
  3605  001840  5C05               	subwf	(??_isdigit+2)^0,w,c
  3606  001842  B0D8               	btfsc	status,0,c
  3607  001844  D002               	goto	u1170
  3608  001846  0E01               	movlw	1
  3609  001848  D001               	goto	u1180
  3610  00184A                     u1170:
  3611  00184A  0E00               	movlw	0
  3612  00184C                     u1180:
  3613  00184C  6E01               	movwf	?_isdigit^0,c
  3614  00184E  6A02               	clrf	(?_isdigit+1)^0,c
  3615  001850  0012               	return		;funcret
  3616  001852                     __end_of_isdigit:
  3617                           	callstack 0
  3618                           
  3619 ;; *************** function ___wmul *****************
  3620 ;; Defined at:
  3621 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  multiplier      2    0[COMRAM] unsigned int 
  3624 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  product         2    4[COMRAM] unsigned int 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  2    0[COMRAM] unsigned int 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0, prodl, prodh
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3636 ;;      Params:         4       0       0       0       0       0       0       0       0
  3637 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3639 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3640 ;;Total ram usage:        6 bytes
  3641 ;; Hardware stack levels used: 1
  3642 ;; Hardware stack levels required when called: 1
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_atoi
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text16
  3651  001852                     __ptext16:
  3652                           	callstack 0
  3653  001852                     ___wmul:
  3654                           	callstack 25
  3655                           
  3656                           ;incstack = 0
  3657  001852  5001               	movf	___wmul@multiplier^0,w,c
  3658  001854  0203               	mulwf	___wmul@multiplicand^0,c
  3659  001856  CFF3 F005          	movff	prodl,___wmul@product
  3660  00185A  CFF4 F006          	movff	prodh,___wmul@product+1
  3661  00185E  5001               	movf	___wmul@multiplier^0,w,c
  3662  001860  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3663  001862  50F3               	movf	243,w,c
  3664  001864  2606               	addwf	(___wmul@product+1)^0,f,c
  3665  001866  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3666  001868  0203               	mulwf	___wmul@multiplicand^0,c
  3667  00186A  50F3               	movf	243,w,c
  3668  00186C  2606               	addwf	(___wmul@product+1)^0,f,c
  3669  00186E  C005  F001         	movff	___wmul@product,?___wmul
  3670  001872  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3671  001876  0012               	return		;funcret
  3672  001878                     __end_of___wmul:
  3673                           	callstack 0
  3674                           
  3675 ;; *************** function _Lcd_Write_String *****************
  3676 ;; Defined at:
  3677 ;;		line 85 in file "lcd.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  str             2    2[COMRAM] PTR const unsigned char 
  3680 ;;		 -> buf_lcd(18), STR_1(11), 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3692 ;;      Params:         2       0       0       0       0       0       0       0       0
  3693 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3695 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3696 ;;Total ram usage:        2 bytes
  3697 ;; Hardware stack levels used: 1
  3698 ;; Hardware stack levels required when called: 3
  3699 ;; This function calls:
  3700 ;;		_Lcd_Write_Char
  3701 ;; This function is called by:
  3702 ;;		_main
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text17
  3707  001634                     __ptext17:
  3708                           	callstack 0
  3709  001634                     _Lcd_Write_String:
  3710                           	callstack 27
  3711                           
  3712                           ;lcd.c: 85: void Lcd_Write_String(const char *str);lcd.c: 86: {;lcd.c: 87:     while(*st
      +                          r != '\0')
  3713                           
  3714                           ;incstack = 0
  3715  001634  D014               	goto	l2152
  3716  001636                     l2148:
  3717                           
  3718                           ;lcd.c: 88:     {;lcd.c: 89:         Lcd_Write_Char(*str++);
  3719  001636  C003  FFF6         	movff	Lcd_Write_String@str,tblptrl
  3720  00163A  C004  FFF7         	movff	Lcd_Write_String@str+1,tblptrh
  3721  00163E  6AF8               	clrf	tblptru,c
  3722  001640  0E07               	movlw	(high __ramtop+-1)
  3723  001642  64F7               	cpfsgt	tblptrh,c
  3724  001644  D003               	bra	u1557
  3725  001646  0008               	tblrd		*
  3726  001648  50F5               	movf	tablat,w,c
  3727  00164A  D005               	bra	u1550
  3728  00164C                     u1557:
  3729  00164C  CFF6 FFE1          	movff	tblptrl,fsr1l
  3730  001650  CFF7 FFE2          	movff	tblptrh,fsr1h
  3731  001654  50E7               	movf	indf1,w,c
  3732  001656                     u1550:
  3733  001656  EC4D  F00C         	call	_Lcd_Write_Char
  3734  00165A  4A03               	infsnz	Lcd_Write_String@str^0,f,c
  3735  00165C  2A04               	incf	(Lcd_Write_String@str+1)^0,f,c
  3736  00165E                     l2152:
  3737                           
  3738                           ;lcd.c: 87:     while(*str != '\0')
  3739  00165E  C003  FFF6         	movff	Lcd_Write_String@str,tblptrl
  3740  001662  C004  FFF7         	movff	Lcd_Write_String@str+1,tblptrh
  3741  001666  6AF8               	clrf	tblptru,c
  3742  001668  0E07               	movlw	(high __ramtop+-1)
  3743  00166A  64F7               	cpfsgt	tblptrh,c
  3744  00166C  D003               	bra	u1567
  3745  00166E  0008               	tblrd		*
  3746  001670  50F5               	movf	tablat,w,c
  3747  001672  D005               	bra	u1560
  3748  001674                     u1567:
  3749  001674  CFF6 FFE1          	movff	tblptrl,fsr1l
  3750  001678  CFF7 FFE2          	movff	tblptrh,fsr1h
  3751  00167C  50E7               	movf	indf1,w,c
  3752  00167E                     u1560:
  3753  00167E  0900               	iorlw	0
  3754  001680  B4D8               	btfsc	status,2,c
  3755  001682  0012               	return	
  3756  001684  D7D8               	goto	l2148
  3757  001686                     __end_of_Lcd_Write_String:
  3758                           	callstack 0
  3759                           
  3760 ;; *************** function _Lcd_Write_Char *****************
  3761 ;; Defined at:
  3762 ;;		line 55 in file "lcd.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;  dat             1    wreg     unsigned char 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  dat             1    1[COMRAM] unsigned char 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3776 ;;      Params:         0       0       0       0       0       0       0       0       0
  3777 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3779 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3780 ;;Total ram usage:        1 bytes
  3781 ;; Hardware stack levels used: 1
  3782 ;; Hardware stack levels required when called: 2
  3783 ;; This function calls:
  3784 ;;		_Lcd_Send_Nibble
  3785 ;; This function is called by:
  3786 ;;		_Lcd_Write_String
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text18
  3791  00189A                     __ptext18:
  3792                           	callstack 0
  3793  00189A                     _Lcd_Write_Char:
  3794                           	callstack 27
  3795                           
  3796                           ;incstack = 0
  3797                           ;Lcd_Write_Char@dat stored from wreg
  3798  00189A  6E02               	movwf	Lcd_Write_Char@dat^0,c
  3799                           
  3800                           ;lcd.c: 55: void Lcd_Write_Char(char dat);lcd.c: 56: {;lcd.c: 57:     LATDbits.LD2 = 1;
  3801  00189C  848C               	bsf	140,2,c	;volatile
  3802                           
  3803                           ;lcd.c: 58:     Lcd_Send_Nibble(dat >> 4);
  3804  00189E  3802               	swapf	Lcd_Write_Char@dat^0,w,c
  3805  0018A0  0B0F               	andlw	15
  3806  0018A2  ECC5  F00B         	call	_Lcd_Send_Nibble
  3807                           
  3808                           ;lcd.c: 59:     Lcd_Send_Nibble(dat & 0x0F);
  3809  0018A6  5002               	movf	Lcd_Write_Char@dat^0,w,c
  3810  0018A8  0B0F               	andlw	15
  3811  0018AA  ECC5  F00B         	call	_Lcd_Send_Nibble
  3812                           
  3813                           ;lcd.c: 60:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  3814  0018AE  0EF0               	movlw	240
  3815  0018B0                     u1987:
  3816  0018B0  D000               	nop2	
  3817  0018B2  2EE8               	decfsz	wreg,f,c
  3818  0018B4  D7FD               	bra	u1987
  3819  0018B6  0012               	return		;funcret
  3820  0018B8                     __end_of_Lcd_Write_Char:
  3821                           	callstack 0
  3822                           
  3823 ;; *************** function _Lcd_Set_Cursor *****************
  3824 ;; Defined at:
  3825 ;;		line 63 in file "lcd.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  x               1    wreg     unsigned char 
  3828 ;;  y               1    2[COMRAM] unsigned char 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  x               1    5[COMRAM] unsigned char 
  3831 ;;  address         1    6[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3841 ;;      Params:         1       0       0       0       0       0       0       0       0
  3842 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3843 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3844 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3845 ;;Total ram usage:        5 bytes
  3846 ;; Hardware stack levels used: 1
  3847 ;; Hardware stack levels required when called: 3
  3848 ;; This function calls:
  3849 ;;		_Lcd_Cmd
  3850 ;; This function is called by:
  3851 ;;		_main
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text19
  3856  001686                     __ptext19:
  3857                           	callstack 0
  3858  001686                     _Lcd_Set_Cursor:
  3859                           	callstack 27
  3860                           
  3861                           ;incstack = 0
  3862                           ;Lcd_Set_Cursor@x stored from wreg
  3863  001686  6E06               	movwf	Lcd_Set_Cursor@x^0,c
  3864                           
  3865                           ;lcd.c: 63: void Lcd_Set_Cursor(unsigned char x, unsigned char y);lcd.c: 64: {;lcd.c: 65
      +                          :     unsigned char address;;lcd.c: 66:     switch(y)
  3866  001688  D009               	goto	l2136
  3867  00168A                     l2126:
  3868                           
  3869                           ;lcd.c: 69:             address = 0x00;
  3870  00168A  0E00               	movlw	0
  3871  00168C  D005               	goto	L5
  3872  00168E                     l2128:
  3873                           
  3874                           ;lcd.c: 72:             address = 0x40;
  3875  00168E  0E40               	movlw	64
  3876  001690  D003               	goto	L5
  3877  001692                     l2130:
  3878                           
  3879                           ;lcd.c: 75:             address = 0x14;
  3880  001692  0E14               	movlw	20
  3881  001694  D001               	goto	L5
  3882  001696                     l2132:
  3883                           
  3884                           ;lcd.c: 78:             address = 0x54;
  3885  001696  0E54               	movlw	84
  3886  001698                     L5:
  3887  001698  6E07               	movwf	Lcd_Set_Cursor@address^0,c
  3888                           
  3889                           ;lcd.c: 79:             break;
  3890  00169A  D014               	goto	l2138
  3891  00169C                     l2136:
  3892  00169C  5003               	movf	Lcd_Set_Cursor@y^0,w,c
  3893  00169E  6E04               	movwf	??_Lcd_Set_Cursor^0,c
  3894  0016A0  6A05               	clrf	(??_Lcd_Set_Cursor+1)^0,c
  3895                           
  3896                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3897                           ; Switch size 1, requested type "simple"
  3898                           ; Number of cases is 1, Range of values is 0 to 0
  3899                           ; switch strategies available:
  3900                           ; Name         Instructions Cycles
  3901                           ; simple_byte            4     3 (average)
  3902                           ;	Chosen strategy is simple_byte
  3903  0016A2  5005               	movf	(??_Lcd_Set_Cursor+1)^0,w,c
  3904  0016A4  0A00               	xorlw	0	; case 0
  3905  0016A6  A4D8               	btfss	status,2,c
  3906  0016A8  D00D               	goto	l2138
  3907                           
  3908                           ; Switch size 1, requested type "simple"
  3909                           ; Number of cases is 4, Range of values is 1 to 4
  3910                           ; switch strategies available:
  3911                           ; Name         Instructions Cycles
  3912                           ; simple_byte           13     7 (average)
  3913                           ;	Chosen strategy is simple_byte
  3914  0016AA  5004               	movf	??_Lcd_Set_Cursor^0,w,c
  3915  0016AC  0A01               	xorlw	1	; case 1
  3916  0016AE  B4D8               	btfsc	status,2,c
  3917  0016B0  D7EC               	goto	l2126
  3918  0016B2  0A03               	xorlw	3	; case 2
  3919  0016B4  B4D8               	btfsc	status,2,c
  3920  0016B6  D7EB               	goto	l2128
  3921  0016B8  0A01               	xorlw	1	; case 3
  3922  0016BA  B4D8               	btfsc	status,2,c
  3923  0016BC  D7EA               	goto	l2130
  3924  0016BE  0A07               	xorlw	7	; case 4
  3925  0016C0  B4D8               	btfsc	status,2,c
  3926  0016C2  D7E9               	goto	l2132
  3927  0016C4                     l2138:
  3928                           
  3929                           ;lcd.c: 81:     address += x - 1;
  3930  0016C4  0406               	decf	Lcd_Set_Cursor@x^0,w,c
  3931  0016C6  2607               	addwf	Lcd_Set_Cursor@address^0,f,c
  3932                           
  3933                           ;lcd.c: 82:     Lcd_Cmd(0x80 | address);
  3934  0016C8  5007               	movf	Lcd_Set_Cursor@address^0,w,c
  3935  0016CA  0980               	iorlw	128
  3936  0016CC  EC5C  F00C         	call	_Lcd_Cmd
  3937  0016D0  0012               	return		;funcret
  3938  0016D2                     __end_of_Lcd_Set_Cursor:
  3939                           	callstack 0
  3940                           
  3941 ;; *************** function _Lcd_Init *****************
  3942 ;; Defined at:
  3943 ;;		line 5 in file "lcd.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  i               1    4[COMRAM] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3957 ;;      Params:         0       0       0       0       0       0       0       0       0
  3958 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3959 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3960 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3961 ;;Total ram usage:        3 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 3
  3964 ;; This function calls:
  3965 ;;		_Lcd_Cmd
  3966 ;;		_Lcd_Send_Nibble
  3967 ;; This function is called by:
  3968 ;;		_main
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text20
  3973  00142E                     __ptext20:
  3974                           	callstack 0
  3975  00142E                     _Lcd_Init:
  3976                           	callstack 27
  3977                           
  3978                           ;lcd.c: 7:     TRISDbits.TRISD2 = 0;
  3979                           
  3980                           ;incstack = 0
  3981  00142E  9495               	bcf	149,2,c	;volatile
  3982                           
  3983                           ;lcd.c: 8:     TRISDbits.TRISD3 = 0;
  3984  001430  9695               	bcf	149,3,c	;volatile
  3985                           
  3986                           ;lcd.c: 9:     TRISDbits.TRISD4 = 0;
  3987  001432  9895               	bcf	149,4,c	;volatile
  3988                           
  3989                           ;lcd.c: 10:     TRISDbits.TRISD5 = 0;
  3990  001434  9A95               	bcf	149,5,c	;volatile
  3991                           
  3992                           ;lcd.c: 11:     TRISDbits.TRISD6 = 0;
  3993  001436  9C95               	bcf	149,6,c	;volatile
  3994                           
  3995                           ;lcd.c: 12:     TRISDbits.TRISD7 = 0;
  3996  001438  9E95               	bcf	149,7,c	;volatile
  3997                           
  3998                           ;lcd.c: 13:     LATDbits.LD2 = 0;
  3999  00143A  948C               	bcf	140,2,c	;volatile
  4000                           
  4001                           ;lcd.c: 14:     LATDbits.LD3 = 0;
  4002  00143C  968C               	bcf	140,3,c	;volatile
  4003                           
  4004                           ;lcd.c: 15:     LATDbits.LD4 = 0;
  4005  00143E  988C               	bcf	140,4,c	;volatile
  4006                           
  4007                           ;lcd.c: 16:     LATDbits.LD5 = 0;
  4008  001440  9A8C               	bcf	140,5,c	;volatile
  4009                           
  4010                           ;lcd.c: 17:     LATDbits.LD6 = 0;
  4011  001442  9C8C               	bcf	140,6,c	;volatile
  4012                           
  4013                           ;lcd.c: 18:     LATDbits.LD7 = 0;
  4014  001444  9E8C               	bcf	140,7,c	;volatile
  4015                           
  4016                           ;lcd.c: 19:     _delay((unsigned long)((20)*(48000000/4000.0)));
  4017  001446  0E02               	movlw	2
  4018  001448  6E04               	movwf	(??_Lcd_Init+1)^0,c
  4019  00144A  0E38               	movlw	56
  4020  00144C  6E03               	movwf	??_Lcd_Init^0,c
  4021  00144E  0EAD               	movlw	173
  4022  001450                     u1997:
  4023  001450  2EE8               	decfsz	wreg,f,c
  4024  001452  D7FE               	bra	u1997
  4025  001454  2E03               	decfsz	??_Lcd_Init^0,f,c
  4026  001456  D7FC               	bra	u1997
  4027  001458  2E04               	decfsz	(??_Lcd_Init+1)^0,f,c
  4028  00145A  D7FA               	bra	u1997
  4029  00145C  F000               	nop	
  4030                           
  4031                           ;lcd.c: 21:     for(unsigned char i=0; i<3; i++)
  4032  00145E  0E00               	movlw	0
  4033  001460  6E05               	movwf	Lcd_Init@i^0,c
  4034  001462                     l2112:
  4035                           
  4036                           ;lcd.c: 22:     {;lcd.c: 23:         Lcd_Send_Nibble(0x03);
  4037  001462  0E03               	movlw	3
  4038  001464  ECC5  F00B         	call	_Lcd_Send_Nibble
  4039                           
  4040                           ;lcd.c: 24:         _delay((unsigned long)((5)*(48000000/4000.0)));
  4041  001468  0E4E               	movlw	78
  4042  00146A  6E03               	movwf	??_Lcd_Init^0,c
  4043  00146C  0EEB               	movlw	235
  4044  00146E                     u2007:
  4045  00146E  2EE8               	decfsz	wreg,f,c
  4046  001470  D7FE               	bra	u2007
  4047  001472  2E03               	decfsz	??_Lcd_Init^0,f,c
  4048  001474  D7FC               	bra	u2007
  4049  001476  F000               	nop	
  4050                           
  4051                           ;lcd.c: 25:     }
  4052  001478  2A05               	incf	Lcd_Init@i^0,f,c
  4053  00147A  0E02               	movlw	2
  4054  00147C  6405               	cpfsgt	Lcd_Init@i^0,c
  4055  00147E  D7F1               	goto	l2112
  4056                           
  4057                           ;lcd.c: 26:     Lcd_Cmd(0x33);
  4058  001480  0E33               	movlw	51
  4059  001482  EC5C  F00C         	call	_Lcd_Cmd
  4060                           
  4061                           ;lcd.c: 27:     Lcd_Cmd(0x32);
  4062  001486  0E32               	movlw	50
  4063  001488  EC5C  F00C         	call	_Lcd_Cmd
  4064                           
  4065                           ;lcd.c: 28:     Lcd_Cmd(0x28);
  4066  00148C  0E28               	movlw	40
  4067  00148E  EC5C  F00C         	call	_Lcd_Cmd
  4068                           
  4069                           ;lcd.c: 29:     Lcd_Cmd(0x0C);
  4070  001492  0E0C               	movlw	12
  4071  001494  EC5C  F00C         	call	_Lcd_Cmd
  4072                           
  4073                           ;lcd.c: 30:     Lcd_Cmd(0x06);
  4074  001498  0E06               	movlw	6
  4075  00149A  EC5C  F00C         	call	_Lcd_Cmd
  4076                           
  4077                           ;lcd.c: 31:  Lcd_Cmd(0x01);
  4078  00149E  0E01               	movlw	1
  4079  0014A0  EC5C  F00C         	call	_Lcd_Cmd
  4080                           
  4081                           ;lcd.c: 32:     _delay((unsigned long)((3)*(48000000/4000.0)));
  4082  0014A4  0E2F               	movlw	47
  4083  0014A6  6E03               	movwf	??_Lcd_Init^0,c
  4084  0014A8  0EC0               	movlw	192
  4085  0014AA                     u2017:
  4086  0014AA  2EE8               	decfsz	wreg,f,c
  4087  0014AC  D7FE               	bra	u2017
  4088  0014AE  2E03               	decfsz	??_Lcd_Init^0,f,c
  4089  0014B0  D7FC               	bra	u2017
  4090  0014B2  0012               	return		;funcret
  4091  0014B4                     __end_of_Lcd_Init:
  4092                           	callstack 0
  4093                           
  4094 ;; *************** function _Lcd_Cmd *****************
  4095 ;; Defined at:
  4096 ;;		line 47 in file "lcd.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  cmd             1    wreg     unsigned char 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  cmd             1    1[COMRAM] unsigned char 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      void 
  4103 ;; Registers used:
  4104 ;;		wreg, status,2, status,0, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4110 ;;      Params:         0       0       0       0       0       0       0       0       0
  4111 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4113 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4114 ;;Total ram usage:        1 bytes
  4115 ;; Hardware stack levels used: 1
  4116 ;; Hardware stack levels required when called: 2
  4117 ;; This function calls:
  4118 ;;		_Lcd_Send_Nibble
  4119 ;; This function is called by:
  4120 ;;		_Lcd_Init
  4121 ;;		_Lcd_Set_Cursor
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text21
  4126  0018B8                     __ptext21:
  4127                           	callstack 0
  4128  0018B8                     _Lcd_Cmd:
  4129                           	callstack 27
  4130                           
  4131                           ;incstack = 0
  4132                           ;Lcd_Cmd@cmd stored from wreg
  4133  0018B8  6E02               	movwf	Lcd_Cmd@cmd^0,c
  4134                           
  4135                           ;lcd.c: 47: void Lcd_Cmd(unsigned char cmd);lcd.c: 48: {;lcd.c: 49:     LATDbits.LD2 = 0
      +                          ;
  4136  0018BA  948C               	bcf	140,2,c	;volatile
  4137                           
  4138                           ;lcd.c: 50:     Lcd_Send_Nibble(cmd >> 4);
  4139  0018BC  3802               	swapf	Lcd_Cmd@cmd^0,w,c
  4140  0018BE  0B0F               	andlw	15
  4141  0018C0  ECC5  F00B         	call	_Lcd_Send_Nibble
  4142                           
  4143                           ;lcd.c: 51:     Lcd_Send_Nibble(cmd & 0x0F);
  4144  0018C4  5002               	movf	Lcd_Cmd@cmd^0,w,c
  4145  0018C6  0B0F               	andlw	15
  4146  0018C8  ECC5  F00B         	call	_Lcd_Send_Nibble
  4147                           
  4148                           ;lcd.c: 52:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  4149  0018CC  0EF0               	movlw	240
  4150  0018CE                     u2027:
  4151  0018CE  D000               	nop2	
  4152  0018D0  2EE8               	decfsz	wreg,f,c
  4153  0018D2  D7FD               	bra	u2027
  4154  0018D4  0012               	return		;funcret
  4155  0018D6                     __end_of_Lcd_Cmd:
  4156                           	callstack 0
  4157                           
  4158 ;; *************** function _Lcd_Send_Nibble *****************
  4159 ;; Defined at:
  4160 ;;		line 35 in file "lcd.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  nibble          1    wreg     unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  nibble          1    0[COMRAM] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4174 ;;      Params:         0       0       0       0       0       0       0       0       0
  4175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4177 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4178 ;;Total ram usage:        1 bytes
  4179 ;; Hardware stack levels used: 1
  4180 ;; Hardware stack levels required when called: 1
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_Lcd_Init
  4185 ;;		_Lcd_Cmd
  4186 ;;		_Lcd_Write_Char
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text22
  4191  00178A                     __ptext22:
  4192                           	callstack 0
  4193  00178A                     _Lcd_Send_Nibble:
  4194                           	callstack 27
  4195                           
  4196                           ;incstack = 0
  4197                           ;Lcd_Send_Nibble@nibble stored from wreg
  4198  00178A  6E01               	movwf	Lcd_Send_Nibble@nibble^0,c
  4199                           
  4200                           ;lcd.c: 35: void Lcd_Send_Nibble(unsigned char nibble);lcd.c: 36: {;lcd.c: 37:     if((n
      +                          ibble & 1)==1) LATDbits.LD4 = 1; else LATDbits.LD4 = 0;
  4201  00178C  A001               	btfss	Lcd_Send_Nibble@nibble^0,0,c
  4202  00178E  D002               	goto	l113
  4203  001790  888C               	bsf	140,4,c	;volatile
  4204  001792  D001               	goto	l1966
  4205  001794                     l113:
  4206  001794  988C               	bcf	140,4,c	;volatile
  4207  001796                     l1966:
  4208                           
  4209                           ;lcd.c: 38:     if((nibble & 2)==2) LATDbits.LD5 = 1; else LATDbits.LD5 = 0;
  4210  001796  A201               	btfss	Lcd_Send_Nibble@nibble^0,1,c
  4211  001798  D002               	goto	l115
  4212  00179A  8A8C               	bsf	140,5,c	;volatile
  4213  00179C  D001               	goto	l1970
  4214  00179E                     l115:
  4215  00179E  9A8C               	bcf	140,5,c	;volatile
  4216  0017A0                     l1970:
  4217                           
  4218                           ;lcd.c: 39:     if((nibble & 4)==4) LATDbits.LD6 = 1; else LATDbits.LD6 = 0;
  4219  0017A0  A401               	btfss	Lcd_Send_Nibble@nibble^0,2,c
  4220  0017A2  D002               	goto	l117
  4221  0017A4  8C8C               	bsf	140,6,c	;volatile
  4222  0017A6  D001               	goto	l1974
  4223  0017A8                     l117:
  4224  0017A8  9C8C               	bcf	140,6,c	;volatile
  4225  0017AA                     l1974:
  4226                           
  4227                           ;lcd.c: 40:     if((nibble & 8)==8) LATDbits.LD7 = 1; else LATDbits.LD7 = 0;
  4228  0017AA  A601               	btfss	Lcd_Send_Nibble@nibble^0,3,c
  4229  0017AC  D002               	goto	l119
  4230  0017AE  8E8C               	bsf	140,7,c	;volatile
  4231  0017B0  D001               	goto	l120
  4232  0017B2                     l119:
  4233  0017B2  9E8C               	bcf	140,7,c	;volatile
  4234  0017B4                     l120:
  4235                           
  4236                           ;lcd.c: 42:     LATDbits.LD3 = 1;
  4237  0017B4  868C               	bsf	140,3,c	;volatile
  4238                           
  4239                           ;lcd.c: 43:     _delay((unsigned long)((50)*(48000000/4000000.0)));
  4240  0017B6  0EC8               	movlw	200
  4241  0017B8                     u2037:
  4242  0017B8  2EE8               	decfsz	wreg,f,c
  4243  0017BA  D7FE               	bra	u2037
  4244                           
  4245                           ;lcd.c: 44:     LATDbits.LD3 = 0;
  4246  0017BC  968C               	bcf	140,3,c	;volatile
  4247  0017BE  0012               	return		;funcret
  4248  0017C0                     __end_of_Lcd_Send_Nibble:
  4249                           	callstack 0
  4250                           
  4251 ;; *************** function _INT_TMR0 *****************
  4252 ;; Defined at:
  4253 ;;		line 176 in file "Cronometro.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;		None
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2, status,0
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4271 ;;Total ram usage:        0 bytes
  4272 ;; Hardware stack levels used: 1
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		Interrupt level 2
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	intcode
  4281  000008                     __pintcode:
  4282                           	callstack 0
  4283  000008                     _INT_TMR0:
  4284                           	callstack 22
  4285                           
  4286                           ;incstack = 0
  4287  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4288  00000A  EDDB  F00A         	call	int_func,f	;refresh shadow registers
  4289                           
  4290                           	psect	intcode_body
  4291  0015B6                     __pintcode_body:
  4292                           	callstack 22
  4293  0015B6                     int_func:
  4294                           	callstack 22
  4295  0015B6  0006               	pop		; remove dummy address from shadow register refresh
  4296                           
  4297                           ;Cronometro.c: 178:     if(INTCONbits.TMR0IF == 1)
  4298  0015B8  A4F2               	btfss	242,2,c	;volatile
  4299  0015BA  D03A               	goto	i2l95
  4300                           
  4301                           ;Cronometro.c: 179:     {;Cronometro.c: 180:         if(modo == 0)
  4302  0015BC  0100               	movlb	0	; () banked
  4303  0015BE  516C               	movf	_modo& (0+255),w,b
  4304  0015C0  116D               	iorwf	(_modo+1)& (0+255),w,b
  4305  0015C2  A4D8               	btfss	status,2,c
  4306  0015C4  D019               	goto	i2l2362
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;Cronometro.c: 181:         {;Cronometro.c: 182:             cen++;
  4310  0015C6  2B6E               	incf	_cen& (0+255),f,b
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;Cronometro.c: 183:             if(cen > 99){
  4314  0015C8  516E               	movf	_cen& (0+255),w,b
  4315  0015CA  0A80               	xorlw	128
  4316  0015CC  0F1C               	addlw	-228
  4317  0015CE  A0D8               	btfss	status,0,c
  4318  0015D0  D02A               	goto	i2l91
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;Cronometro.c: 184:                 cen = 0;
  4322  0015D2  0E00               	movlw	0
  4323  0015D4  6F6E               	movwf	_cen& (0+255),b
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;Cronometro.c: 185:                 seg++;
  4327  0015D6  2B6F               	incf	_seg& (0+255),f,b
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;Cronometro.c: 186:                 if(seg > 59){
  4331  0015D8  516F               	movf	_seg& (0+255),w,b
  4332  0015DA  0A80               	xorlw	128
  4333  0015DC  0F44               	addlw	-188
  4334  0015DE  A0D8               	btfss	status,0,c
  4335  0015E0  D022               	goto	i2l91
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;Cronometro.c: 187:                     seg = 0;
  4339  0015E2  0E00               	movlw	0
  4340  0015E4  6F6F               	movwf	_seg& (0+255),b
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;Cronometro.c: 188:                     min++;
  4344  0015E6  2B70               	incf	_min& (0+255),f,b
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;Cronometro.c: 189:                     if(min > 59){
  4348  0015E8  5170               	movf	_min& (0+255),w,b
  4349  0015EA  0A80               	xorlw	128
  4350  0015EC  0F44               	addlw	-188
  4351  0015EE  A0D8               	btfss	status,0,c
  4352  0015F0  D01A               	goto	i2l91
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;Cronometro.c: 190:                         min = 0;
  4356  0015F2  0E00               	movlw	0
  4357  0015F4  6F70               	movwf	_min& (0+255),b
  4358  0015F6  D017               	goto	i2l91
  4359  0015F8                     i2l2362:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;Cronometro.c: 196:         {;Cronometro.c: 197:             cen--;
  4363  0015F8  076E               	decf	_cen& (0+255),f,b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;Cronometro.c: 198:             if(cen <= -1){
  4367  0015FA  AF6E               	btfss	_cen& (0+255),7,b
  4368  0015FC  D014               	goto	i2l91
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;Cronometro.c: 199:                 cen = 99;
  4372  0015FE  0E63               	movlw	99
  4373  001600  6F6E               	movwf	_cen& (0+255),b
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;Cronometro.c: 200:                 seg--;
  4377  001602  076F               	decf	_seg& (0+255),f,b
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;Cronometro.c: 201:                 if(seg <= -1){
  4381  001604  AF6F               	btfss	_seg& (0+255),7,b
  4382  001606  D00F               	goto	i2l91
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;Cronometro.c: 202:                     seg = 59;
  4386  001608  0E3B               	movlw	59
  4387  00160A  6F6F               	movwf	_seg& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;Cronometro.c: 203:                     min--;
  4391  00160C  0770               	decf	_min& (0+255),f,b
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;Cronometro.c: 204:                     if(min <= -1){
  4395  00160E  AF70               	btfss	_min& (0+255),7,b
  4396  001610  D00A               	goto	i2l91
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;Cronometro.c: 205:                         min = 0;
  4400  001612  0E00               	movlw	0
  4401  001614  6F70               	movwf	_min& (0+255),b
  4402                           
  4403                           ;Cronometro.c: 206:                         seg = 0;
  4404  001616  0E00               	movlw	0
  4405  001618  6F6F               	movwf	_seg& (0+255),b
  4406                           
  4407                           ;Cronometro.c: 207:                         cen = 0;
  4408  00161A  0E00               	movlw	0
  4409  00161C  6F6E               	movwf	_cen& (0+255),b
  4410                           
  4411                           ;Cronometro.c: 208:                         st_desc = 1;
  4412  00161E  0E00               	movlw	0
  4413  001620  6F69               	movwf	(_st_desc+1)& (0+255),b
  4414  001622  0E01               	movlw	1
  4415  001624  6F68               	movwf	_st_desc& (0+255),b
  4416  001626                     i2l91:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;Cronometro.c: 213:         TMR0 = 65067;
  4420  001626  0EFE               	movlw	254
  4421  001628  6ED7               	movwf	215,c	;volatile
  4422  00162A  0E2B               	movlw	43
  4423  00162C  6ED6               	movwf	214,c	;volatile
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;Cronometro.c: 214:         INTCONbits.TMR0IF = 0;
  4427  00162E  94F2               	bcf	242,2,c	;volatile
  4428  001630                     i2l95:
  4429  001630  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4430  001632  0011               	retfie		f
  4431  001634                     __end_of_INT_TMR0:
  4432                           	callstack 0
  4433                           
  4434                           	psect	rparam
  4435  0000                     
  4436                           	psect	temp
  4437  00005F                     btemp:
  4438                           	callstack 0
  4439  00005F                     	ds	1
  4440  0000                     int$flags	set	btemp
  4441  0000                     wtemp8	set	btemp+1
  4442  0000                     ttemp5	set	btemp+1
  4443  0000                     ttemp6	set	btemp+4
  4444  0000                     ttemp7	set	btemp+8
  4445                           
  4446                           	psect	idloc
  4447                           
  4448                           ;Config register IDLOC0 @ 0x200000
  4449                           ;	unspecified, using default values
  4450  200000                     	org	2097152
  4451  200000  FF                 	db	255
  4452                           
  4453                           ;Config register IDLOC1 @ 0x200001
  4454                           ;	unspecified, using default values
  4455  200001                     	org	2097153
  4456  200001  FF                 	db	255
  4457                           
  4458                           ;Config register IDLOC2 @ 0x200002
  4459                           ;	unspecified, using default values
  4460  200002                     	org	2097154
  4461  200002  FF                 	db	255
  4462                           
  4463                           ;Config register IDLOC3 @ 0x200003
  4464                           ;	unspecified, using default values
  4465  200003                     	org	2097155
  4466  200003  FF                 	db	255
  4467                           
  4468                           ;Config register IDLOC4 @ 0x200004
  4469                           ;	unspecified, using default values
  4470  200004                     	org	2097156
  4471  200004  FF                 	db	255
  4472                           
  4473                           ;Config register IDLOC5 @ 0x200005
  4474                           ;	unspecified, using default values
  4475  200005                     	org	2097157
  4476  200005  FF                 	db	255
  4477                           
  4478                           ;Config register IDLOC6 @ 0x200006
  4479                           ;	unspecified, using default values
  4480  200006                     	org	2097158
  4481  200006  FF                 	db	255
  4482                           
  4483                           ;Config register IDLOC7 @ 0x200007
  4484                           ;	unspecified, using default values
  4485  200007                     	org	2097159
  4486  200007  FF                 	db	255
  4487                           
  4488                           	psect	config
  4489                           
  4490                           ;Config register CONFIG1L @ 0x300000
  4491                           ;	PLL Prescaler Selection bits
  4492                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  4493                           ;	System Clock Postscaler Selection bits
  4494                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  4495                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  4496                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  4497  300000                     	org	3145728
  4498  300000  21                 	db	33
  4499                           
  4500                           ;Config register CONFIG1H @ 0x300001
  4501                           ;	Oscillator Selection bits
  4502                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  4503                           ;	Fail-Safe Clock Monitor Enable bit
  4504                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4505                           ;	Internal/External Oscillator Switchover bit
  4506                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4507  300001                     	org	3145729
  4508  300001  0E                 	db	14
  4509                           
  4510                           ;Config register CONFIG2L @ 0x300002
  4511                           ;	Power-up Timer Enable bit
  4512                           ;	PWRT = OFF, PWRT disabled
  4513                           ;	Brown-out Reset Enable bits
  4514                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  4515                           ;	Brown-out Reset Voltage bits
  4516                           ;	BORV = 3, Minimum setting 2.05V
  4517                           ;	USB Voltage Regulator Enable bit
  4518                           ;	VREGEN = OFF, USB voltage regulator disabled
  4519  300002                     	org	3145730
  4520  300002  19                 	db	25
  4521                           
  4522                           ;Config register CONFIG2H @ 0x300003
  4523                           ;	Watchdog Timer Enable bit
  4524                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4525                           ;	Watchdog Timer Postscale Select bits
  4526                           ;	WDTPS = 32768, 1:32768
  4527  300003                     	org	3145731
  4528  300003  1E                 	db	30
  4529                           
  4530                           ; Padding undefined space
  4531  300004                     	org	3145732
  4532  300004  FF                 	db	255
  4533                           
  4534                           ;Config register CONFIG3H @ 0x300005
  4535                           ;	CCP2 MUX bit
  4536                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  4537                           ;	PORTB A/D Enable bit
  4538                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4539                           ;	Low-Power Timer 1 Oscillator Enable bit
  4540                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4541                           ;	MCLR Pin Enable bit
  4542                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  4543  300005                     	org	3145733
  4544  300005  81                 	db	129
  4545                           
  4546                           ;Config register CONFIG4L @ 0x300006
  4547                           ;	Stack Full/Underflow Reset Enable bit
  4548                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4549                           ;	Single-Supply ICSP Enable bit
  4550                           ;	LVP = OFF, Single-Supply ICSP disabled
  4551                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  4552                           ;	ICPRT = OFF, ICPORT disabled
  4553                           ;	Extended Instruction Set Enable bit
  4554                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4555                           ;	Background Debugger Enable bit
  4556                           ;	DEBUG = 0x1, unprogrammed default
  4557  300006                     	org	3145734
  4558  300006  81                 	db	129
  4559                           
  4560                           ; Padding undefined space
  4561  300007                     	org	3145735
  4562  300007  FF                 	db	255
  4563                           
  4564                           ;Config register CONFIG5L @ 0x300008
  4565                           ;	Code Protection bit
  4566                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  4567                           ;	Code Protection bit
  4568                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  4569                           ;	Code Protection bit
  4570                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  4571                           ;	Code Protection bit
  4572                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  4573  300008                     	org	3145736
  4574  300008  0F                 	db	15
  4575                           
  4576                           ;Config register CONFIG5H @ 0x300009
  4577                           ;	Boot Block Code Protection bit
  4578                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  4579                           ;	Data EEPROM Code Protection bit
  4580                           ;	CPD = OFF, Data EEPROM is not code-protected
  4581  300009                     	org	3145737
  4582  300009  C0                 	db	192
  4583                           
  4584                           ;Config register CONFIG6L @ 0x30000A
  4585                           ;	Write Protection bit
  4586                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  4587                           ;	Write Protection bit
  4588                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  4589                           ;	Write Protection bit
  4590                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  4591                           ;	Write Protection bit
  4592                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  4593  30000A                     	org	3145738
  4594  30000A  0F                 	db	15
  4595                           
  4596                           ;Config register CONFIG6H @ 0x30000B
  4597                           ;	Configuration Register Write Protection bit
  4598                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  4599                           ;	Boot Block Write Protection bit
  4600                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  4601                           ;	Data EEPROM Write Protection bit
  4602                           ;	WRTD = OFF, Data EEPROM is not write-protected
  4603  30000B                     	org	3145739
  4604  30000B  E0                 	db	224
  4605                           
  4606                           ;Config register CONFIG7L @ 0x30000C
  4607                           ;	Table Read Protection bit
  4608                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4609                           ;	Table Read Protection bit
  4610                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4611                           ;	Table Read Protection bit
  4612                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4613                           ;	Table Read Protection bit
  4614                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4615  30000C                     	org	3145740
  4616  30000C  0F                 	db	15
  4617                           
  4618                           ;Config register CONFIG7H @ 0x30000D
  4619                           ;	Boot Block Table Read Protection bit
  4620                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  4621  30000D                     	org	3145741
  4622  30000D  40                 	db	64
  4623                           tosu	equ	0xFFF
  4624                           tosh	equ	0xFFE
  4625                           tosl	equ	0xFFD
  4626                           stkptr	equ	0xFFC
  4627                           pclatu	equ	0xFFB
  4628                           pclath	equ	0xFFA
  4629                           pcl	equ	0xFF9
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           indf0	equ	0xFEF
  4637                           postinc0	equ	0xFEE
  4638                           postdec0	equ	0xFED
  4639                           preinc0	equ	0xFEC
  4640                           plusw0	equ	0xFEB
  4641                           fsr0h	equ	0xFEA
  4642                           fsr0l	equ	0xFE9
  4643                           wreg	equ	0xFE8
  4644                           indf1	equ	0xFE7
  4645                           postinc1	equ	0xFE6
  4646                           postdec1	equ	0xFE5
  4647                           preinc1	equ	0xFE4
  4648                           plusw1	equ	0xFE3
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           bsr	equ	0xFE0
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           preinc2	equ	0xFDC
  4656                           plusw2	equ	0xFDB
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     12      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[15]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[15]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 15
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[15]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[15]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 18
		 -> buf_lcd(BANK0[18]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S989$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S989$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    Lcd_Write_String@str	PTR const unsigned char  size(2) Largest target is 18
		 -> buf_lcd(BANK0[18]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Send_Nibble
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Send_Nibble

Critical Paths under _INT_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _INT_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_TMR0 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_TMR0 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_TMR0 in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10408
                                             90 COMRAM     4     4      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    14      8    8804
                                             82 COMRAM     8     0      8
                                              0 BANK0     12    12      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    7843
                                             78 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           41    38      3    7470
                                             61 COMRAM    17    14      3
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    26      9    4358
                                             26 COMRAM    35    26      9
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     5      4    2709
                                             13 COMRAM     9     5      4
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               3     1      2     166
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1235
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                10     8      2    1172
                                              7 COMRAM    10     8      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     2     0      2     633
                                              2 COMRAM     2     0      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       1     1      0     132
                                              1 COMRAM     1     1      0
                    _Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     659
                                              2 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     266
                                              2 COMRAM     3     3      0
                            _Lcd_Cmd
                    _Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              1     1      0     132
                                              1 COMRAM     1     1      0
                    _Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (3) _Lcd_Send_Nibble                                      1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INT_TMR0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Send_Nibble
     _Lcd_Send_Nibble
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Send_Nibble
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc
         _isdigit

 _INT_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      C      4F       5       49.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBIGSFRlhh        2B      0       0      23        0.0%
BITBIGSFRllll       20      0       0      28        0.0%
BITBIGSFRhlh        1A      0       0      21        0.0%
BITBIGSFRhll        13      0       0      22        0.0%
BITBIGSFRhh          D      0       0      20        0.0%
BITBIGSFRlllh        9      0       0      27        0.0%
BITBIGSFRllhh        5      0       0      25        0.0%
BITBIGSFRllhl        1      0       0      26        0.0%
BITBIGSFRlhl         1      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      29        0.0%
DATA                 0      0      AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Jul 01 16:35:13 2022

                      l61 09BA                        l70 0A7A                        l63 09DA  
                      l56 0A18                        l65 0A36                        l57 0988  
                      l49 08C0                        l77 0BC4       ___wmul@multiplicand 0003  
                     l120 17B4                       l113 1794                       l115 179E  
                     l117 17A8                       l119 17B2                       l947 17E8  
                     l891 0EF6                       l972 1424                       l878 14DC  
                     l889 0EEE                       u940 1542                       u960 1584  
                     _abs 17C0                       _cen 006E                       _pad 14B4  
                     _min 0070                       _seg 006F                       wreg 000FE8  
                    l2000 0C76                      ?_abs 0013                      l2012 0C82  
                    l2004 0C7A                      l2100 16FA                      l2112 1462  
                    l2032 0D20                      l2016 0C8C                      l2008 0C7E  
                    l2130 1692                      l2034 0D38                      l2018 0CCC  
                    l2132 1696                      l2052 0E06                      l2220 0904  
                    l2204 08A2                      l2126 168A                      l2062 0E40  
                    l2038 0D40                      l2230 0934                      l2214 08F2  
                    l2128 168E                      l2136 169C                      l2152 165E  
                    l2138 16C4                      l2058 0E36                      l2148 1636  
                    l2068 0E52                      l2228 0916                      l2236 0974  
                    l2256 09FA                      l1802 1246                      l1714 154A  
                    l2098 16E0                      l2282 0ABC                      l1724 17FC  
                    l1732 187E                      l2268 0A6A                      l1822 12F8  
                    l1814 12BC                      l1806 1260                      l1734 1880  
                    l1830 14C6                      l1902 1012                      l1760 1102  
                    l1808 1274                      l1728 180E                      l1840 14FA  
                    l2296 0B46                      l2288 0AFC                      l1754 10DA  
                    l1818 12D2                      l1834 14D4                      l1922 107A  
                    l1940 136E                      l1932 132C                      l1844 1520  
                    l1836 14E6                      l1942 1376                      l1766 1128  
                    l1782 11AE                      l1926 108E                      l1864 174C  
                    l1952 13D6                      l1944 137A                      l1936 132E  
                    l1768 113C                      l1970 17A0                      l1946 13A2  
                    l1786 11D4                      l1778 1198                      l1874 0ED0  
                    l1892 0F1E                      l1974 17AA                      l1966 1796  
                    l1798 1222                      ?_pad 000E                      l1888 0F10  
                    l1992 0C66                      l1994 0C68                      l1996 0C72  
                    STR_1 0810                      STR_2 0801                      STR_3 0801  
                    STR_4 0801                      STR_5 0801                      STR_6 0801  
                    u1011 1108                      u1030 1140                      u1200 1748  
                    u1210 0EA2                      u1300 1042                      u1220 0EA4  
                    u1301 1040                      u1310 1050                      u2007 146E  
                    u1160 17CE                      u1320 1056                      u2017 14AA  
                    u1170 184A                      u1090 1278                      u1250 0EE4  
                    u2027 18CE                      u1180 184C                      u1340 1064  
                    u2037 17B8                      u1270 0F0A                      u1510 0DA2  
                    u1280 1020                      u1610 08EA                      u1380 1402  
                    u1620 08EC                      u1550 1656                      u1560 167E  
                    u1490 0D72                      u1650 09B2                      u1660 09B4  
                    u1557 164C                      u1567 1674                      u1760 0C0C  
                    u1907 09E6                      u1917 0A2C                      u1927 0A44  
                    u1937 0A70                      u1857 08B6                      u1947 0A88  
                    u1867 08CE                      u1957 0BD0                      u1877 097E  
                    u1967 0BEA                      u1887 0996                      u1977 0C18  
                    u1897 09C8                      u1987 18B0                      u1997 1450  
                    i2l91 1626                      i2l95 1630                      _TMR0 000FD6  
     Lcd_Write_String@str 0003                      abs@a 0013         ?_Lcd_Write_String 0003  
                    _dbuf 0071                      _atoi 131A                      _main 081C  
                    _dtoa 0E7A                      _modo 006C                      _prec 0064  
                    _nout 0060                      pad@i 0013                      pad@p 0010  
                    fsr1h 000FE2                      fsr2h 000FDA                      indf1 000FE7  
                    indf2 000FDF                      fsr1l 000FE1                      pad@w 0015  
                    fsr2l 000FD9                      btemp 005F                      prodh 000FF4  
                    prodl 000FF3                      start 000E        ??_Lcd_Write_String 0005  
         __end_of_Lcd_Cmd 18D6              ___param_bank 000000                     ??_abs 0015  
                   ??_pad 0012           __end_of___aodiv 11F6                     ?_atoi 0008  
                   ?_main 0001                     ?_dtoa 001B           __end_of___aomod 131A  
                   _T0CON 000FD5          __end_of_INT_TMR0 1634              vfpfcnvrt@fmt 003F  
                   _flags 0066                     _fputc 1536                     _fputs 17F2  
         __end_of_isdigit 1852                     atoi@n 0010                     pad@fp 000E  
                   atoi@s 0008                     _width 0062                     _putch 18F0  
                   main@i 005D                     dtoa@d 001C                     dtoa@i 003C  
                   dtoa@n 0034                     dtoa@p 002E                     dtoa@s 0032  
                   dtoa@w 0030           __end_of_isspace 1754                     tablat 000FF5  
                   ttemp5 0060                     ttemp6 0063                     ttemp7 0067  
                   status 000FD8                     wtemp8 0060           __end_of_sprintf 178A  
        __end_of_Lcd_Init 14B4     Lcd_Send_Nibble@nibble 0001           __initialization 18D6  
            __end_of_atoi 142E              __end_of_main 0C2A              __end_of_dtoa 10AE  
                  ??_atoi 000A                    ??_main 005B                    ??_dtoa 0024  
           __activetblptr 000002                    ?_fputc 0001                    ?_fputs 0009  
                  ?_putch 0001                    i2l2362 15F8                 ??_Lcd_Cmd 0002  
           vfpfcnvrt@done 004D              vfprintf@cfmt 0052                 ??___aodiv 0011  
               ??___aomod 0011                    ___wmul 1852                    clear_0 18DC  
                  isa$std 000001                    pad@buf 000F                    dtoa@fp 001B  
                  _strlen 1878                    fputc@c 0001                    fputs@c 000B  
                  fputs@i 000C                    fputs@s 0009                 ??_isdigit 0003  
            __mediumconst 0000                 ??_isspace 0003                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                    putch@c 0001  
        __end_of_vfprintf 1716                 ??_sprintf 005B           Lcd_Set_Cursor@x 0006  
         Lcd_Set_Cursor@y 0003                __accesstop 0060   __end_of__initialization 18E2  
           ___rparam_used 000001                 ?_INT_TMR0 0001            __pcstackCOMRAM 0001  
           __end_of_fputc 15B6             __end_of_fputs 1822             __end_of_putch 18F2  
          _Lcd_Set_Cursor 1686                 ?_Lcd_Init 0001                   ??_fputc 0004  
                 ??_fputs 000B                   ??_putch 0001                __pbssBANK0 0060  
       ??_Lcd_Send_Nibble 0001                ??_INT_TMR0 0001                   ?___wmul 0001  
  __end_of_Lcd_Set_Cursor 16D2                   ?_strlen 0001                ??_Lcd_Init 0003  
          _Lcd_Write_Char 189A                   _Lcd_Cmd 18B8                   __Hparam 0000  
                 __Lparam 0000                   ___aodiv 10AE                   ___aomod 11F6  
               ?_vfprintf 004F              __psmallconst 0800                   __pcinit 18D6  
                 __ramtop 0800           ?_Lcd_Set_Cursor 0003                   __ptext0 081C  
                 __ptext1 1754                   __ptext2 16D2                   __ptext3 0C2A  
                 __ptext4 0E7A                   __ptext5 14B4                   __ptext6 1878  
                 __ptext7 17F2                   __ptext8 1536                   __ptext9 18F0  
                 _buf_lcd 0091                 _T0CONbits 000FD5                   _isdigit 1822  
                 _isspace 1716                   _st_desc 0068                   atoi@neg 000E  
                 _st_mode 006A                   _sprintf 1754    __end_of_Lcd_Write_Char 18B8  
          __pintcode_body 15B6      end_of_initialization 18E2                   fputc@fp 0003  
           __Lmediumconst 0000                   int_func 15B6                   fputs@fp 000A  
       Lcd_Write_Char@dat 0002         __end_of_vfpfcnvrt 0E7A                 Lcd_Init@i 0005  
                 postdec2 000FDD                   postinc0 000FEE                   postinc1 000FE6  
                 postinc2 000FDE                ??_vfprintf 0052                   strlen@a 0003  
                 strlen@s 0001                 _PORTAbits 000F80                 _TRISAbits 000F92  
               _TRISBbits 000F93                 _TRISDbits 000F95           ?_Lcd_Write_Char 0001  
             vfpfcnvrt@ap 0040               vfpfcnvrt@fp 003E               vfpfcnvrt@ll 0045  
          __end_of___wmul 1878          _Lcd_Write_String 1634     Lcd_Set_Cursor@address 0007  
          __end_of_strlen 189A       start_initialization 18D6               __end_of_abs 17F2  
             __end_of_pad 1536           _Lcd_Send_Nibble 178A               vfprintf@fmt 0050  
                ??___wmul 0005                  ??_strlen 0003             __pcstackBANK0 00A3  
        ___aodiv@dividend 0001                  ?_Lcd_Cmd 0001                 _dtoa$1081 002C  
        ??_Lcd_Set_Cursor 0004                 __pintcode 0008                  ?___aodiv 0001  
                ?___aomod 0001          ___aodiv@quotient 0013   __end_of_Lcd_Send_Nibble 17C0  
             __smallconst 0800                  ?_isdigit 0001                  ?_isspace 0001  
                ?_sprintf 0053            ___wmul@product 0005                  _LATBbits 000F8A  
                _LATDbits 000F8C                  _INT_TMR0 0008                 _vfpfcnvrt 0C2A  
              _ADCON1bits 000FC1         ___wmul@multiplier 0001          ??_Lcd_Write_Char 0002  
            _isspace$1130 0007                  _Lcd_Init 142E  __end_of_Lcd_Write_String 1686  
                __Hrparam 0000                vfprintf@ap 0051                  __Lrparam 0000  
              vfprintf@fp 004F                ?_vfpfcnvrt 003E           ___aodiv@divisor 0009  
         ___aodiv@counter 0011          ?_Lcd_Send_Nibble 0001                sprintf@fmt 0054  
                __ptext10 17C0                  __ptext11 11F6                  __ptext20 142E  
                __ptext12 10AE                  __ptext21 18B8                  __ptext13 131A  
                __ptext22 178A                  __ptext14 1716                  __ptext15 1822  
                __ptext16 1852                  __ptext17 1634                  __ptext18 189A  
                __ptext19 1686                  isa$xinst 000000                  int$flags 005F  
                _vfprintf 16D2          ___aomod@dividend 0001                _INTCONbits 000FF2  
                isdigit@c 0001                  intlevel2 0000                 sprintf@ap 00A3  
                isspace@c 0001                Lcd_Cmd@cmd 0002           ___aomod@divisor 0009  
             ??_vfpfcnvrt 0041           ___aomod@counter 0011                  sprintf@f 00A4  
                sprintf@s 0053              ___aodiv@sign 0012              ___aomod@sign 0012  
