

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Oct 12 19:38:08 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.40
    33                           ; Generated 17/11/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  000CA8                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _menestron
    73  000CA8  A7                 	db	167
    74  0000                     _LATD	set	3980
    75  0000                     _PORTD	set	3971
    76  0000                     _LATDbits	set	3980
    77  0000                     _TRISD	set	3989
    78                           
    79                           	psect	smallconst
    80  000800                     __psmallconst:
    81                           	callstack 0
    82  000800  00                 	db	0
    83  000801                     STR_2:
    84  000801  4D                 	db	77	;'M'
    85  000802  65                 	db	101	;'e'
    86  000803  6E                 	db	110	;'n'
    87  000804  65                 	db	101	;'e'
    88  000805  73                 	db	115	;'s'
    89  000806  74                 	db	116	;'t'
    90  000807  72                 	db	114	;'r'
    91  000808  6F                 	db	111	;'o'
    92  000809  6E                 	db	110	;'n'
    93  00080A  3A                 	db	58	;':'
    94  00080B  20                 	db	32
    95  00080C  00                 	db	0
    96  00080D                     STR_1:
    97  00080D  48                 	db	72	;'H'
    98  00080E  6F                 	db	111	;'o'
    99  00080F  6C                 	db	108	;'l'
   100  000810  61                 	db	97	;'a'
   101  000811  20                 	db	32
   102  000812  55                 	db	85	;'U'
   103  000813  50                 	db	80	;'P'
   104  000814  43                 	db	67	;'C'
   105  000815  69                 	db	105	;'i'
   106  000816  6E                 	db	110	;'n'
   107  000817  6F                 	db	111	;'o'
   108  000818  00                 	db	0
   109  000819  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           ; #config settings
   112                           
   113                           	psect	cinit
   114  000C54                     __pcinit:
   115                           	callstack 0
   116  000C54                     start_initialization:
   117                           	callstack 0
   118  000C54                     __initialization:
   119                           	callstack 0
   120                           
   121                           ; Initialize objects allocated to COMRAM (1 bytes)
   122                           ; load TBLPTR registers with __pidataCOMRAM
   123  000C54  0EA8               	movlw	low __pidataCOMRAM
   124  000C56  6EF6               	movwf	tblptrl,c
   125  000C58  0E0C               	movlw	high __pidataCOMRAM
   126  000C5A  6EF7               	movwf	tblptrh,c
   127  000C5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   128  000C5E  6EF8               	movwf	tblptru,c
   129  000C60  0009               	tblrd		*+	;fetch initializer
   130  000C62  CFF5 F013          	movff	tablat,__pdataCOMRAM
   131                           
   132                           ; Clear objects allocated to COMRAM (3 bytes)
   133  000C66  6A12               	clrf	(__pbssCOMRAM+2)& (0+255),c
   134  000C68  6A11               	clrf	(__pbssCOMRAM+1)& (0+255),c
   135  000C6A  6A10               	clrf	__pbssCOMRAM& (0+255),c
   136  000C6C                     end_of_initialization:
   137                           	callstack 0
   138  000C6C                     __end_of__initialization:
   139                           	callstack 0
   140  000C6C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   141  000C6E  6EF8               	movwf	tblptru,c
   142  000C70  0E08               	movlw	high __Lsmallconst
   143  000C72  6EF7               	movwf	tblptrh,c
   144  000C74  0100               	movlb	0
   145  000C76  EF00  F005         	goto	_main	;jump to C main() function
   146                           
   147                           	psect	bssCOMRAM
   148  000010                     __pbssCOMRAM:
   149                           	callstack 0
   150  000010                     _unidad:
   151                           	callstack 0
   152  000010                     	ds	1
   153  000011                     _decena:
   154                           	callstack 0
   155  000011                     	ds	1
   156  000012                     _centena:
   157                           	callstack 0
   158  000012                     	ds	1
   159                           
   160                           	psect	dataCOMRAM
   161  000013                     __pdataCOMRAM:
   162                           	callstack 0
   163  000013                     _menestron:
   164                           	callstack 0
   165  000013                     	ds	1
   166                           
   167                           	psect	cstackCOMRAM
   168  000001                     __pcstackCOMRAM:
   169                           	callstack 0
   170  000001                     ?___awmod:
   171                           	callstack 0
   172  000001                     ENVIA_NIBBLE@dato:
   173                           	callstack 0
   174  000001                     LEER_LCD@aux:
   175                           	callstack 0
   176  000001                     ___awmod@dividend:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x0
   180  000001                     	ds	1
   181  000002                     ENVIA_CHAR@dato:
   182                           	callstack 0
   183  000002                     ENVIA_LCD_CMD@dato:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x1
   187  000002                     	ds	1
   188  000003                     ENVIA_CHAR@aux:
   189                           	callstack 0
   190  000003                     ENVIA_LCD_CMD@aux:
   191                           	callstack 0
   192  000003                     ___awmod@divisor:
   193                           	callstack 0
   194                           
   195                           ; 2 bytes @ 0x2
   196  000003                     	ds	1
   197  000004                     ??_LCD_CONFIG:
   198  000004                     POS_CURSOR@columna:
   199                           	callstack 0
   200  000004                     CURSOR_ONOFF@estado:
   201                           	callstack 0
   202  000004                     ESCRIBE_MENSAJE@cadena:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x3
   206  000004                     	ds	1
   207  000005                     ??_lcd_init:
   208  000005                     POS_CURSOR@fila:
   209                           	callstack 0
   210  000005                     ___awmod@counter:
   211                           	callstack 0
   212                           
   213                           ; 1 bytes @ 0x4
   214  000005                     	ds	1
   215  000006                     ESCRIBE_MENSAJE@tam:
   216                           	callstack 0
   217  000006                     ___awmod@sign:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x5
   221  000006                     	ds	1
   222  000007                     ??_ESCRIBE_MENSAJE:
   223  000007                     ?___awdiv:
   224                           	callstack 0
   225  000007                     ___awdiv@dividend:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0x6
   229  000007                     	ds	2
   230  000009                     ESCRIBE_MENSAJE@i:
   231                           	callstack 0
   232  000009                     ___awdiv@divisor:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0x8
   236  000009                     	ds	2
   237  00000B                     ___awdiv@counter:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0xA
   241  00000B                     	ds	1
   242  00000C                     ___awdiv@sign:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0xB
   246  00000C                     	ds	1
   247  00000D                     ___awdiv@quotient:
   248                           	callstack 0
   249                           
   250                           ; 2 bytes @ 0xC
   251  00000D                     	ds	2
   252  00000F                     digitos_individuales@numero:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0xE
   256  00000F                     	ds	1
   257  000010                     
   258                           ; 1 bytes @ 0xF
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 29 in file "maincode2.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : 0/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   278 ;;      Params:         0       0       0       0       0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0       0       0       0       0
   280 ;;      Temps:          0       0       0       0       0       0       0       0       0
   281 ;;      Totals:         0       0       0       0       0       0       0       0       0
   282 ;;Total ram usage:        0 bytes
   283 ;; Hardware stack levels required when called: 4
   284 ;; This function calls:
   285 ;;		_ENVIA_CHAR
   286 ;;		_ESCRIBE_MENSAJE
   287 ;;		_POS_CURSOR
   288 ;;		_configuro
   289 ;;		_digitos_individuales
   290 ;;		_lcd_init
   291 ;; This function is called by:
   292 ;;		Startup code after reset
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           	psect	text0
   297  000A00                     __ptext0:
   298                           	callstack 0
   299  000A00                     _main:
   300                           	callstack 27
   301  000A00                     
   302                           ;maincode2.c: 30:     configuro();
   303  000A00  EC53  F006         	call	_configuro	;wreg free
   304  000A04                     
   305                           ;maincode2.c: 31:     lcd_init();
   306  000A04  EC16  F006         	call	_lcd_init	;wreg free
   307  000A08                     l1183:
   308                           
   309                           ;maincode2.c: 33:         POS_CURSOR(1,0);
   310  000A08  0E00               	movlw	0
   311  000A0A  6E04               	movwf	POS_CURSOR@columna^0,c
   312  000A0C  0E01               	movlw	1
   313  000A0E  ECAD  F005         	call	_POS_CURSOR
   314  000A12                     
   315                           ;maincode2.c: 34:         ESCRIBE_MENSAJE("Hola UPCino", 11);
   316  000A12  0E0D               	movlw	low STR_1
   317  000A14  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   318  000A16  0E08               	movlw	high STR_1
   319  000A18  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   320  000A1A  0E0B               	movlw	11
   321  000A1C  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   322  000A1E  EC8E  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   323  000A22                     
   324                           ;maincode2.c: 35:         POS_CURSOR(2,0);
   325  000A22  0E00               	movlw	0
   326  000A24  6E04               	movwf	POS_CURSOR@columna^0,c
   327  000A26  0E02               	movlw	2
   328  000A28  ECAD  F005         	call	_POS_CURSOR
   329  000A2C                     
   330                           ;maincode2.c: 36:         ESCRIBE_MENSAJE("Menestron: ", 11);
   331  000A2C  0E01               	movlw	low STR_2
   332  000A2E  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   333  000A30  0E08               	movlw	high STR_2
   334  000A32  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   335  000A34  0E0B               	movlw	11
   336  000A36  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   337  000A38  EC8E  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   338  000A3C                     
   339                           ;maincode2.c: 37:         digitos_individuales(menestron);
   340  000A3C  0EA7               	movlw	167
   341  000A3E  EC61  F005         	call	_digitos_individuales
   342  000A42                     
   343                           ;maincode2.c: 38:         ENVIA_CHAR(centena + 0x30);
   344  000A42  5012               	movf	_centena^0,w,c
   345  000A44  0F30               	addlw	48
   346  000A46  ECE4  F005         	call	_ENVIA_CHAR
   347  000A4A                     
   348                           ;maincode2.c: 39:         ENVIA_CHAR(decena + 0x30);
   349  000A4A  5011               	movf	_decena^0,w,c
   350  000A4C  0F30               	addlw	48
   351  000A4E  ECE4  F005         	call	_ENVIA_CHAR
   352  000A52                     
   353                           ;maincode2.c: 40:         ENVIA_CHAR(unidad + 0x30);
   354  000A52  5010               	movf	_unidad^0,w,c
   355  000A54  0F30               	addlw	48
   356  000A56  ECE4  F005         	call	_ENVIA_CHAR
   357  000A5A  EF04  F005         	goto	l1183
   358  000A5E  EF00  F000         	goto	start
   359  000A62                     __end_of_main:
   360                           	callstack 0
   361                           
   362 ;; *************** function _lcd_init *****************
   363 ;; Defined at:
   364 ;;		line 14 in file "maincode2.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;		None
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   378 ;;      Params:         0       0       0       0       0       0       0       0       0
   379 ;;      Locals:         0       0       0       0       0       0       0       0       0
   380 ;;      Temps:          1       0       0       0       0       0       0       0       0
   381 ;;      Totals:         1       0       0       0       0       0       0       0       0
   382 ;;Total ram usage:        1 bytes
   383 ;; Hardware stack levels used: 1
   384 ;; Hardware stack levels required when called: 3
   385 ;; This function calls:
   386 ;;		_BORRAR_LCD
   387 ;;		_CURSOR_HOME
   388 ;;		_CURSOR_ONOFF
   389 ;;		_LCD_CONFIG
   390 ;; This function is called by:
   391 ;;		_main
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395                           	psect	text1
   396  000C2C                     __ptext1:
   397                           	callstack 0
   398  000C2C                     _lcd_init:
   399                           	callstack 27
   400  000C2C                     
   401                           ;maincode2.c: 15:     TRISD = 0x00;
   402  000C2C  0E00               	movlw	0
   403  000C2E  6E95               	movwf	149,c	;volatile
   404  000C30                     
   405                           ;maincode2.c: 16:     LCD_CONFIG();
   406  000C30  EC31  F005         	call	_LCD_CONFIG	;wreg free
   407  000C34                     
   408                           ;maincode2.c: 17:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   409  000C34  0EEA               	movlw	234
   410  000C36  6E05               	movwf	??_lcd_init^0,c
   411  000C38  0EC3               	movlw	195
   412  000C3A                     u397:
   413  000C3A  2EE8               	decfsz	wreg,f,c
   414  000C3C  D7FE               	bra	u397
   415  000C3E  2E05               	decfsz	??_lcd_init^0,f,c
   416  000C40  D7FC               	bra	u397
   417  000C42  F000               	nop	
   418  000C44                     
   419                           ;maincode2.c: 18:     BORRAR_LCD();
   420  000C44  EC4F  F006         	call	_BORRAR_LCD	;wreg free
   421  000C48                     
   422                           ;maincode2.c: 19:     CURSOR_HOME();
   423  000C48  EC4B  F006         	call	_CURSOR_HOME	;wreg free
   424  000C4C                     
   425                           ;maincode2.c: 20:     CURSOR_ONOFF(1);
   426  000C4C  0E01               	movlw	1
   427  000C4E  ECFE  F005         	call	_CURSOR_ONOFF
   428  000C52  0012               	return		;funcret
   429  000C54                     __end_of_lcd_init:
   430                           	callstack 0
   431                           
   432 ;; *************** function _LCD_CONFIG *****************
   433 ;; Defined at:
   434 ;;		line 72 in file "LCD.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, status,2, status,0, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : 0/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   448 ;;      Params:         0       0       0       0       0       0       0       0       0
   449 ;;      Locals:         0       0       0       0       0       0       0       0       0
   450 ;;      Temps:          1       0       0       0       0       0       0       0       0
   451 ;;      Totals:         1       0       0       0       0       0       0       0       0
   452 ;;Total ram usage:        1 bytes
   453 ;; Hardware stack levels used: 1
   454 ;; Hardware stack levels required when called: 2
   455 ;; This function calls:
   456 ;;		_ENVIA_LCD_CMD
   457 ;;		_ENVIA_NIBBLE
   458 ;; This function is called by:
   459 ;;		_lcd_init
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text2
   464  000A62                     __ptext2:
   465                           	callstack 0
   466  000A62                     _LCD_CONFIG:
   467                           	callstack 27
   468  000A62                     
   469                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   470  000A62  908C               	bcf	140,0,c	;volatile
   471                           
   472                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   473  000A64  928C               	bcf	140,1,c	;volatile
   474  000A66                     
   475                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   476  000A66  0E30               	movlw	48
   477  000A68  EC3D  F006         	call	_ENVIA_NIBBLE
   478  000A6C                     
   479                           ;LCD.c: 77:         _delay(24000);
   480  000A6C  0E20               	movlw	32
   481  000A6E  6E04               	movwf	??_LCD_CONFIG^0,c
   482  000A70  0E2A               	movlw	42
   483  000A72                     u407:
   484  000A72  2EE8               	decfsz	wreg,f,c
   485  000A74  D7FE               	bra	u407
   486  000A76  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   487  000A78  D7FC               	bra	u407
   488  000A7A                     
   489                           ;LCD.c: 78:         _delay(24000);
   490  000A7A  0E20               	movlw	32
   491  000A7C  6E04               	movwf	??_LCD_CONFIG^0,c
   492  000A7E  0E2A               	movlw	42
   493  000A80                     u417:
   494  000A80  2EE8               	decfsz	wreg,f,c
   495  000A82  D7FE               	bra	u417
   496  000A84  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   497  000A86  D7FC               	bra	u417
   498                           
   499                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   500  000A88  0E30               	movlw	48
   501  000A8A  EC3D  F006         	call	_ENVIA_NIBBLE
   502  000A8E                     
   503                           ;LCD.c: 83:  _delay(1200);
   504  000A8E  0EF0               	movlw	240
   505  000A90                     u427:
   506  000A90  D000               	nop2	
   507  000A92  2EE8               	decfsz	wreg,f,c
   508  000A94  D7FD               	bra	u427
   509  000A96                     
   510                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   511  000A96  0E30               	movlw	48
   512  000A98  EC3D  F006         	call	_ENVIA_NIBBLE
   513  000A9C                     
   514                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   515  000A9C  0E20               	movlw	32
   516  000A9E  EC3D  F006         	call	_ENVIA_NIBBLE
   517  000AA2                     
   518                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   519  000AA2  0E01               	movlw	1
   520  000AA4  ECCA  F005         	call	_ENVIA_LCD_CMD
   521  000AA8                     
   522                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   523  000AA8  0E28               	movlw	40
   524  000AAA  ECCA  F005         	call	_ENVIA_LCD_CMD
   525  000AAE                     
   526                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   527  000AAE  0E0F               	movlw	15
   528  000AB0  ECCA  F005         	call	_ENVIA_LCD_CMD
   529  000AB4                     
   530                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   531  000AB4  0E06               	movlw	6
   532  000AB6  ECCA  F005         	call	_ENVIA_LCD_CMD
   533  000ABA                     
   534                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   535  000ABA  0E01               	movlw	1
   536  000ABC  ECCA  F005         	call	_ENVIA_LCD_CMD
   537  000AC0  0012               	return		;funcret
   538  000AC2                     __end_of_LCD_CONFIG:
   539                           	callstack 0
   540                           
   541 ;; *************** function _CURSOR_ONOFF *****************
   542 ;; Defined at:
   543 ;;		line 35 in file "LCD.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;  estado          1    wreg     unsigned char 
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  estado          1    3[COMRAM] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, status,2, status,0, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   557 ;;      Params:         0       0       0       0       0       0       0       0       0
   558 ;;      Locals:         1       0       0       0       0       0       0       0       0
   559 ;;      Temps:          0       0       0       0       0       0       0       0       0
   560 ;;      Totals:         1       0       0       0       0       0       0       0       0
   561 ;;Total ram usage:        1 bytes
   562 ;; Hardware stack levels used: 1
   563 ;; Hardware stack levels required when called: 2
   564 ;; This function calls:
   565 ;;		_ENVIA_LCD_CMD
   566 ;; This function is called by:
   567 ;;		_lcd_init
   568 ;; This function uses a non-reentrant model
   569 ;;
   570                           
   571                           	psect	text3
   572  000BFC                     __ptext3:
   573                           	callstack 0
   574  000BFC                     _CURSOR_ONOFF:
   575                           	callstack 27
   576                           
   577                           ;incstack = 0
   578                           ;CURSOR_ONOFF@estado stored from wreg
   579  000BFC  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   580  000BFE                     
   581                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   582  000BFE  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   583  000C00  A4D8               	btfss	status,2,c
   584  000C02  EF05  F006         	goto	u21
   585  000C06  EF07  F006         	goto	u20
   586  000C0A                     u21:
   587  000C0A  EF0A  F006         	goto	l867
   588  000C0E                     u20:
   589  000C0E  0E0E               	movlw	14
   590  000C10  ECCA  F005         	call	_ENVIA_LCD_CMD
   591  000C14                     l867:
   592                           
   593                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   594  000C14  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   595  000C16  A4D8               	btfss	status,2,c
   596  000C18  EF10  F006         	goto	u31
   597  000C1C  EF12  F006         	goto	u30
   598  000C20                     u31:
   599  000C20  EF15  F006         	goto	l42
   600  000C24                     u30:
   601  000C24  0E0C               	movlw	12
   602  000C26  ECCA  F005         	call	_ENVIA_LCD_CMD
   603  000C2A                     l42:
   604  000C2A  0012               	return		;funcret
   605  000C2C                     __end_of_CURSOR_ONOFF:
   606                           	callstack 0
   607                           
   608 ;; *************** function _CURSOR_HOME *****************
   609 ;; Defined at:
   610 ;;		line 30 in file "LCD.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      void 
   617 ;; Registers used:
   618 ;;		wreg, status,2, status,0, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   624 ;;      Params:         0       0       0       0       0       0       0       0       0
   625 ;;      Locals:         0       0       0       0       0       0       0       0       0
   626 ;;      Temps:          0       0       0       0       0       0       0       0       0
   627 ;;      Totals:         0       0       0       0       0       0       0       0       0
   628 ;;Total ram usage:        0 bytes
   629 ;; Hardware stack levels used: 1
   630 ;; Hardware stack levels required when called: 2
   631 ;; This function calls:
   632 ;;		_ENVIA_LCD_CMD
   633 ;; This function is called by:
   634 ;;		_lcd_init
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text4
   639  000C96                     __ptext4:
   640                           	callstack 0
   641  000C96                     _CURSOR_HOME:
   642                           	callstack 27
   643  000C96                     
   644                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   645  000C96  0E02               	movlw	2
   646  000C98  ECCA  F005         	call	_ENVIA_LCD_CMD
   647  000C9C  0012               	return		;funcret
   648  000C9E                     __end_of_CURSOR_HOME:
   649                           	callstack 0
   650                           
   651 ;; *************** function _BORRAR_LCD *****************
   652 ;; Defined at:
   653 ;;		line 67 in file "LCD.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2, status,0, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         0       0       0       0       0       0       0       0       0
   668 ;;      Locals:         0       0       0       0       0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0       0       0
   670 ;;      Totals:         0       0       0       0       0       0       0       0       0
   671 ;;Total ram usage:        0 bytes
   672 ;; Hardware stack levels used: 1
   673 ;; Hardware stack levels required when called: 2
   674 ;; This function calls:
   675 ;;		_ENVIA_LCD_CMD
   676 ;; This function is called by:
   677 ;;		_lcd_init
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text5
   682  000C9E                     __ptext5:
   683                           	callstack 0
   684  000C9E                     _BORRAR_LCD:
   685                           	callstack 27
   686  000C9E                     
   687                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   688  000C9E  0E01               	movlw	1
   689  000CA0  ECCA  F005         	call	_ENVIA_LCD_CMD
   690  000CA4  0012               	return		;funcret
   691  000CA6                     __end_of_BORRAR_LCD:
   692                           	callstack 0
   693                           
   694 ;; *************** function _digitos_individuales *****************
   695 ;; Defined at:
   696 ;;		line 23 in file "maincode2.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  numero          1    wreg     unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  numero          1   14[COMRAM] unsigned char 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg, status,2, status,0, cstack
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   710 ;;      Params:         0       0       0       0       0       0       0       0       0
   711 ;;      Locals:         1       0       0       0       0       0       0       0       0
   712 ;;      Temps:          0       0       0       0       0       0       0       0       0
   713 ;;      Totals:         1       0       0       0       0       0       0       0       0
   714 ;;Total ram usage:        1 bytes
   715 ;; Hardware stack levels used: 1
   716 ;; Hardware stack levels required when called: 1
   717 ;; This function calls:
   718 ;;		___awdiv
   719 ;;		___awmod
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text6
   726  000AC2                     __ptext6:
   727                           	callstack 0
   728  000AC2                     _digitos_individuales:
   729                           	callstack 29
   730                           
   731                           ;incstack = 0
   732                           ;digitos_individuales@numero stored from wreg
   733  000AC2  6E0F               	movwf	digitos_individuales@numero^0,c
   734  000AC4                     
   735                           ;maincode2.c: 24:     centena = numero / 100;
   736  000AC4  C00F  F007         	movff	digitos_individuales@numero,___awdiv@dividend
   737  000AC8  6A08               	clrf	(___awdiv@dividend+1)^0,c
   738  000ACA  0E00               	movlw	0
   739  000ACC  6E0A               	movwf	(___awdiv@divisor+1)^0,c
   740  000ACE  0E64               	movlw	100
   741  000AD0  6E09               	movwf	___awdiv@divisor^0,c
   742  000AD2  EC0D  F004         	call	___awdiv	;wreg free
   743  000AD6  5007               	movf	?___awdiv^0,w,c
   744  000AD8  6E12               	movwf	_centena^0,c
   745                           
   746                           ;maincode2.c: 25:     decena = (numero % 100) / 10;
   747  000ADA  0E00               	movlw	0
   748  000ADC  6E04               	movwf	(___awmod@divisor+1)^0,c
   749  000ADE  0E64               	movlw	100
   750  000AE0  6E03               	movwf	___awmod@divisor^0,c
   751  000AE2  C00F  F001         	movff	digitos_individuales@numero,___awmod@dividend
   752  000AE6  6A02               	clrf	(___awmod@dividend+1)^0,c
   753  000AE8  EC6F  F004         	call	___awmod	;wreg free
   754  000AEC  C001  F007         	movff	?___awmod,___awdiv@dividend
   755  000AF0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
   756  000AF4  0E00               	movlw	0
   757  000AF6  6E0A               	movwf	(___awdiv@divisor+1)^0,c
   758  000AF8  0E0A               	movlw	10
   759  000AFA  6E09               	movwf	___awdiv@divisor^0,c
   760  000AFC  EC0D  F004         	call	___awdiv	;wreg free
   761  000B00  5007               	movf	?___awdiv^0,w,c
   762  000B02  6E11               	movwf	_decena^0,c
   763                           
   764                           ;maincode2.c: 26:     unidad = numero % 10;
   765  000B04  C00F  F001         	movff	digitos_individuales@numero,___awmod@dividend
   766  000B08  6A02               	clrf	(___awmod@dividend+1)^0,c
   767  000B0A  0E00               	movlw	0
   768  000B0C  6E04               	movwf	(___awmod@divisor+1)^0,c
   769  000B0E  0E0A               	movlw	10
   770  000B10  6E03               	movwf	___awmod@divisor^0,c
   771  000B12  EC6F  F004         	call	___awmod	;wreg free
   772  000B16  5001               	movf	?___awmod^0,w,c
   773  000B18  6E10               	movwf	_unidad^0,c
   774  000B1A  0012               	return		;funcret
   775  000B1C                     __end_of_digitos_individuales:
   776                           	callstack 0
   777                           
   778 ;; *************** function ___awmod *****************
   779 ;; Defined at:
   780 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  dividend        2    0[COMRAM] int 
   783 ;;  divisor         2    2[COMRAM] int 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  sign            1    5[COMRAM] unsigned char 
   786 ;;  counter         1    4[COMRAM] unsigned char 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  2    0[COMRAM] int 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   796 ;;      Params:         4       0       0       0       0       0       0       0       0
   797 ;;      Locals:         2       0       0       0       0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0
   799 ;;      Totals:         6       0       0       0       0       0       0       0       0
   800 ;;Total ram usage:        6 bytes
   801 ;; Hardware stack levels used: 1
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_digitos_individuales
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text7
   810  0008DE                     __ptext7:
   811                           	callstack 0
   812  0008DE                     ___awmod:
   813                           	callstack 29
   814  0008DE  0E00               	movlw	0
   815  0008E0  6E06               	movwf	___awmod@sign^0,c
   816  0008E2  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   817  0008E4  EF78  F004         	goto	u300
   818  0008E8  EF76  F004         	goto	u301
   819  0008EC                     u301:
   820  0008EC  EF7E  F004         	goto	l1133
   821  0008F0                     u300:
   822  0008F0  6C01               	negf	___awmod@dividend^0,c
   823  0008F2  1E02               	comf	(___awmod@dividend+1)^0,f,c
   824  0008F4  B0D8               	btfsc	status,0,c
   825  0008F6  2A02               	incf	(___awmod@dividend+1)^0,f,c
   826  0008F8  0E01               	movlw	1
   827  0008FA  6E06               	movwf	___awmod@sign^0,c
   828  0008FC                     l1133:
   829  0008FC  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   830  0008FE  EF85  F004         	goto	u310
   831  000902  EF83  F004         	goto	u311
   832  000906                     u311:
   833  000906  EF89  F004         	goto	l1137
   834  00090A                     u310:
   835  00090A  6C03               	negf	___awmod@divisor^0,c
   836  00090C  1E04               	comf	(___awmod@divisor+1)^0,f,c
   837  00090E  B0D8               	btfsc	status,0,c
   838  000910  2A04               	incf	(___awmod@divisor+1)^0,f,c
   839  000912                     l1137:
   840  000912  5003               	movf	___awmod@divisor^0,w,c
   841  000914  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   842  000916  B4D8               	btfsc	status,2,c
   843  000918  EF90  F004         	goto	u321
   844  00091C  EF92  F004         	goto	u320
   845  000920                     u321:
   846  000920  EFB6  F004         	goto	l1153
   847  000924                     u320:
   848  000924  0E01               	movlw	1
   849  000926  6E05               	movwf	___awmod@counter^0,c
   850  000928  EF9A  F004         	goto	l1143
   851  00092C                     l1141:
   852  00092C  90D8               	bcf	status,0,c
   853  00092E  3603               	rlcf	___awmod@divisor^0,f,c
   854  000930  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   855  000932  2A05               	incf	___awmod@counter^0,f,c
   856  000934                     l1143:
   857  000934  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   858  000936  EF9F  F004         	goto	u331
   859  00093A  EFA1  F004         	goto	u330
   860  00093E                     u331:
   861  00093E  EF96  F004         	goto	l1141
   862  000942                     u330:
   863  000942                     l1145:
   864  000942  5003               	movf	___awmod@divisor^0,w,c
   865  000944  5C01               	subwf	___awmod@dividend^0,w,c
   866  000946  5004               	movf	(___awmod@divisor+1)^0,w,c
   867  000948  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   868  00094A  A0D8               	btfss	status,0,c
   869  00094C  EFAA  F004         	goto	u341
   870  000950  EFAC  F004         	goto	u340
   871  000954                     u341:
   872  000954  EFB0  F004         	goto	l1149
   873  000958                     u340:
   874  000958  5003               	movf	___awmod@divisor^0,w,c
   875  00095A  5E01               	subwf	___awmod@dividend^0,f,c
   876  00095C  5004               	movf	(___awmod@divisor+1)^0,w,c
   877  00095E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   878  000960                     l1149:
   879  000960  90D8               	bcf	status,0,c
   880  000962  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   881  000964  3203               	rrcf	___awmod@divisor^0,f,c
   882  000966  2E05               	decfsz	___awmod@counter^0,f,c
   883  000968  EFA1  F004         	goto	l1145
   884  00096C                     l1153:
   885  00096C  5006               	movf	___awmod@sign^0,w,c
   886  00096E  B4D8               	btfsc	status,2,c
   887  000970  EFBC  F004         	goto	u351
   888  000974  EFBE  F004         	goto	u350
   889  000978                     u351:
   890  000978  EFC2  F004         	goto	l1157
   891  00097C                     u350:
   892  00097C  6C01               	negf	___awmod@dividend^0,c
   893  00097E  1E02               	comf	(___awmod@dividend+1)^0,f,c
   894  000980  B0D8               	btfsc	status,0,c
   895  000982  2A02               	incf	(___awmod@dividend+1)^0,f,c
   896  000984                     l1157:
   897  000984  C001  F001         	movff	___awmod@dividend,?___awmod
   898  000988  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   899  00098C  0012               	return		;funcret
   900  00098E                     __end_of___awmod:
   901                           	callstack 0
   902                           
   903 ;; *************** function ___awdiv *****************
   904 ;; Defined at:
   905 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  dividend        2    6[COMRAM] int 
   908 ;;  divisor         2    8[COMRAM] int 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  quotient        2   12[COMRAM] int 
   911 ;;  sign            1   11[COMRAM] unsigned char 
   912 ;;  counter         1   10[COMRAM] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  2    6[COMRAM] int 
   915 ;; Registers used:
   916 ;;		wreg, status,2, status,0
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   922 ;;      Params:         4       0       0       0       0       0       0       0       0
   923 ;;      Locals:         4       0       0       0       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0       0       0
   925 ;;      Totals:         8       0       0       0       0       0       0       0       0
   926 ;;Total ram usage:        8 bytes
   927 ;; Hardware stack levels used: 1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_digitos_individuales
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text8
   936  00081A                     __ptext8:
   937                           	callstack 0
   938  00081A                     ___awdiv:
   939                           	callstack 29
   940  00081A  0E00               	movlw	0
   941  00081C  6E0C               	movwf	___awdiv@sign^0,c
   942  00081E  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
   943  000820  EF16  F004         	goto	u240
   944  000824  EF14  F004         	goto	u241
   945  000828                     u241:
   946  000828  EF1C  F004         	goto	l1089
   947  00082C                     u240:
   948  00082C  6C09               	negf	___awdiv@divisor^0,c
   949  00082E  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
   950  000830  B0D8               	btfsc	status,0,c
   951  000832  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
   952  000834  0E01               	movlw	1
   953  000836  6E0C               	movwf	___awdiv@sign^0,c
   954  000838                     l1089:
   955  000838  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
   956  00083A  EF23  F004         	goto	u250
   957  00083E  EF21  F004         	goto	u251
   958  000842                     u251:
   959  000842  EF29  F004         	goto	l1095
   960  000846                     u250:
   961  000846  6C07               	negf	___awdiv@dividend^0,c
   962  000848  1E08               	comf	(___awdiv@dividend+1)^0,f,c
   963  00084A  B0D8               	btfsc	status,0,c
   964  00084C  2A08               	incf	(___awdiv@dividend+1)^0,f,c
   965  00084E  0E01               	movlw	1
   966  000850  1A0C               	xorwf	___awdiv@sign^0,f,c
   967  000852                     l1095:
   968  000852  0E00               	movlw	0
   969  000854  6E0E               	movwf	(___awdiv@quotient+1)^0,c
   970  000856  0E00               	movlw	0
   971  000858  6E0D               	movwf	___awdiv@quotient^0,c
   972  00085A  5009               	movf	___awdiv@divisor^0,w,c
   973  00085C  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
   974  00085E  B4D8               	btfsc	status,2,c
   975  000860  EF34  F004         	goto	u261
   976  000864  EF36  F004         	goto	u260
   977  000868                     u261:
   978  000868  EF5E  F004         	goto	l1117
   979  00086C                     u260:
   980  00086C  0E01               	movlw	1
   981  00086E  6E0B               	movwf	___awdiv@counter^0,c
   982  000870  EF3E  F004         	goto	l1103
   983  000874                     l1101:
   984  000874  90D8               	bcf	status,0,c
   985  000876  3609               	rlcf	___awdiv@divisor^0,f,c
   986  000878  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
   987  00087A  2A0B               	incf	___awdiv@counter^0,f,c
   988  00087C                     l1103:
   989  00087C  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
   990  00087E  EF43  F004         	goto	u271
   991  000882  EF45  F004         	goto	u270
   992  000886                     u271:
   993  000886  EF3A  F004         	goto	l1101
   994  00088A                     u270:
   995  00088A                     l1105:
   996  00088A  90D8               	bcf	status,0,c
   997  00088C  360D               	rlcf	___awdiv@quotient^0,f,c
   998  00088E  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
   999  000890  5009               	movf	___awdiv@divisor^0,w,c
  1000  000892  5C07               	subwf	___awdiv@dividend^0,w,c
  1001  000894  500A               	movf	(___awdiv@divisor+1)^0,w,c
  1002  000896  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  1003  000898  A0D8               	btfss	status,0,c
  1004  00089A  EF51  F004         	goto	u281
  1005  00089E  EF53  F004         	goto	u280
  1006  0008A2                     u281:
  1007  0008A2  EF58  F004         	goto	l1113
  1008  0008A6                     u280:
  1009  0008A6  5009               	movf	___awdiv@divisor^0,w,c
  1010  0008A8  5E07               	subwf	___awdiv@dividend^0,f,c
  1011  0008AA  500A               	movf	(___awdiv@divisor+1)^0,w,c
  1012  0008AC  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  1013  0008AE  800D               	bsf	___awdiv@quotient^0,0,c
  1014  0008B0                     l1113:
  1015  0008B0  90D8               	bcf	status,0,c
  1016  0008B2  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  1017  0008B4  3209               	rrcf	___awdiv@divisor^0,f,c
  1018  0008B6  2E0B               	decfsz	___awdiv@counter^0,f,c
  1019  0008B8  EF45  F004         	goto	l1105
  1020  0008BC                     l1117:
  1021  0008BC  500C               	movf	___awdiv@sign^0,w,c
  1022  0008BE  B4D8               	btfsc	status,2,c
  1023  0008C0  EF64  F004         	goto	u291
  1024  0008C4  EF66  F004         	goto	u290
  1025  0008C8                     u291:
  1026  0008C8  EF6A  F004         	goto	l1121
  1027  0008CC                     u290:
  1028  0008CC  6C0D               	negf	___awdiv@quotient^0,c
  1029  0008CE  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  1030  0008D0  B0D8               	btfsc	status,0,c
  1031  0008D2  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  1032  0008D4                     l1121:
  1033  0008D4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1034  0008D8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1035  0008DC  0012               	return		;funcret
  1036  0008DE                     __end_of___awdiv:
  1037                           	callstack 0
  1038                           
  1039 ;; *************** function _configuro *****************
  1040 ;; Defined at:
  1041 ;;		line 12 in file "maincode2.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		None
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1055 ;;      Params:         0       0       0       0       0       0       0       0       0
  1056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1058 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1059 ;;Total ram usage:        0 bytes
  1060 ;; Hardware stack levels used: 1
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text9
  1069  000CA6                     __ptext9:
  1070                           	callstack 0
  1071  000CA6                     _configuro:
  1072                           	callstack 30
  1073  000CA6  0012               	return		;funcret
  1074  000CA8                     __end_of_configuro:
  1075                           	callstack 0
  1076                           
  1077 ;; *************** function _POS_CURSOR *****************
  1078 ;; Defined at:
  1079 ;;		line 6 in file "LCD.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  fila            1    wreg     unsigned char 
  1082 ;;  columna         1    3[COMRAM] unsigned char 
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;  fila            1    4[COMRAM] unsigned char 
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  1    wreg      void 
  1087 ;; Registers used:
  1088 ;;		wreg, status,2, status,0, cstack
  1089 ;; Tracked objects:
  1090 ;;		On entry : 0/0
  1091 ;;		On exit  : 0/0
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1094 ;;      Params:         1       0       0       0       0       0       0       0       0
  1095 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1097 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1098 ;;Total ram usage:        2 bytes
  1099 ;; Hardware stack levels used: 1
  1100 ;; Hardware stack levels required when called: 2
  1101 ;; This function calls:
  1102 ;;		_ENVIA_LCD_CMD
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text10
  1109  000B5A                     __ptext10:
  1110                           	callstack 0
  1111  000B5A                     _POS_CURSOR:
  1112                           	callstack 28
  1113                           
  1114                           ;incstack = 0
  1115                           ;POS_CURSOR@fila stored from wreg
  1116  000B5A  6E05               	movwf	POS_CURSOR@fila^0,c
  1117  000B5C                     
  1118                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1119  000B5C  0405               	decf	POS_CURSOR@fila^0,w,c
  1120  000B5E  A4D8               	btfss	status,2,c
  1121  000B60  EFB4  F005         	goto	u361
  1122  000B64  EFB6  F005         	goto	u360
  1123  000B68                     u361:
  1124  000B68  EFBC  F005         	goto	l1165
  1125  000B6C                     u360:
  1126  000B6C                     
  1127                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1128  000B6C  5004               	movf	POS_CURSOR@columna^0,w,c
  1129  000B6E  0F80               	addlw	128
  1130  000B70  ECCA  F005         	call	_ENVIA_LCD_CMD
  1131                           
  1132                           ;LCD.c: 11:  }
  1133  000B74  EFC9  F005         	goto	l24
  1134  000B78                     l1165:
  1135  000B78  0E02               	movlw	2
  1136  000B7A  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1137  000B7C  A4D8               	btfss	status,2,c
  1138  000B7E  EFC3  F005         	goto	u371
  1139  000B82  EFC5  F005         	goto	u370
  1140  000B86                     u371:
  1141  000B86  EFC9  F005         	goto	l24
  1142  000B8A                     u370:
  1143  000B8A                     
  1144                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1145  000B8A  5004               	movf	POS_CURSOR@columna^0,w,c
  1146  000B8C  0FC0               	addlw	192
  1147  000B8E  ECCA  F005         	call	_ENVIA_LCD_CMD
  1148  000B92                     l24:
  1149  000B92  0012               	return		;funcret
  1150  000B94                     __end_of_POS_CURSOR:
  1151                           	callstack 0
  1152                           
  1153 ;; *************** function _ENVIA_LCD_CMD *****************
  1154 ;; Defined at:
  1155 ;;		line 104 in file "LCD.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  dato            1    wreg     unsigned char 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;  dato            1    1[COMRAM] unsigned char 
  1160 ;;  aux             1    2[COMRAM] unsigned char 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1170 ;;      Params:         0       0       0       0       0       0       0       0       0
  1171 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1173 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1174 ;;Total ram usage:        2 bytes
  1175 ;; Hardware stack levels used: 1
  1176 ;; Hardware stack levels required when called: 1
  1177 ;; This function calls:
  1178 ;;		_ENVIA_NIBBLE
  1179 ;;		_LEER_LCD
  1180 ;; This function is called by:
  1181 ;;		_POS_CURSOR
  1182 ;;		_CURSOR_HOME
  1183 ;;		_CURSOR_ONOFF
  1184 ;;		_BORRAR_LCD
  1185 ;;		_LCD_CONFIG
  1186 ;;		_BLINK_CURSOR
  1187 ;;		_DISPLAY_ONOFF
  1188 ;;		_GENERACARACTER
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text11
  1193  000B94                     __ptext11:
  1194                           	callstack 0
  1195  000B94                     _ENVIA_LCD_CMD:
  1196                           	callstack 27
  1197                           
  1198                           ;incstack = 0
  1199                           ;ENVIA_LCD_CMD@dato stored from wreg
  1200  000B94  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1201  000B96                     
  1202                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1203  000B96  908C               	bcf	140,0,c	;volatile
  1204  000B98                     
  1205                           ;LCD.c: 108:  LEER_LCD();
  1206  000B98  ECC7  F004         	call	_LEER_LCD	;wreg free
  1207  000B9C                     
  1208                           ;LCD.c: 109:  TRISD = 0b00000000;
  1209  000B9C  0E00               	movlw	0
  1210  000B9E  6E95               	movwf	149,c	;volatile
  1211  000BA0                     
  1212                           ;LCD.c: 111:         _delay(1200);
  1213  000BA0  0EF0               	movlw	240
  1214  000BA2                     u437:
  1215  000BA2  D000               	nop2	
  1216  000BA4  2EE8               	decfsz	wreg,f,c
  1217  000BA6  D7FD               	bra	u437
  1218  000BA8                     
  1219                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1220  000BA8  928C               	bcf	140,1,c	;volatile
  1221  000BAA                     
  1222                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1223  000BAA  948C               	bcf	140,2,c	;volatile
  1224  000BAC                     
  1225                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1226  000BAC  908C               	bcf	140,0,c	;volatile
  1227  000BAE                     
  1228                           ;LCD.c: 115:  aux = dato & 0xF0;
  1229  000BAE  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1230  000BB0  0BF0               	andlw	240
  1231  000BB2  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1232  000BB4                     
  1233                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1234  000BB4  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1235  000BB6  EC3D  F006         	call	_ENVIA_NIBBLE
  1236  000BBA                     
  1237                           ;LCD.c: 117:  aux = dato<<4;
  1238  000BBA  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1239  000BBC  0BF0               	andlw	240
  1240  000BBE  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1241  000BC0                     
  1242                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1243  000BC0  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1244  000BC2  EC3D  F006         	call	_ENVIA_NIBBLE
  1245  000BC6  0012               	return		;funcret
  1246  000BC8                     __end_of_ENVIA_LCD_CMD:
  1247                           	callstack 0
  1248                           
  1249 ;; *************** function _ESCRIBE_MENSAJE *****************
  1250 ;; Defined at:
  1251 ;;		line 41 in file "LCD.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1254 ;;		 -> STR_2(12), STR_1(12), 
  1255 ;;  tam             1    5[COMRAM] unsigned char 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  i               1    8[COMRAM] unsigned char 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1267 ;;      Params:         3       0       0       0       0       0       0       0       0
  1268 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1269 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1270 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1271 ;;Total ram usage:        6 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 2
  1274 ;; This function calls:
  1275 ;;		_ENVIA_CHAR
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text12
  1282  000B1C                     __ptext12:
  1283                           	callstack 0
  1284  000B1C                     _ESCRIBE_MENSAJE:
  1285                           	callstack 28
  1286  000B1C                     
  1287                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1288  000B1C  0E00               	movlw	0
  1289  000B1E  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1290                           
  1291                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1292  000B20  0E00               	movlw	0
  1293  000B22  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1294  000B24  EFA3  F005         	goto	l1175
  1295  000B28                     l1171:
  1296                           
  1297                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1298  000B28  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1299  000B2A  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1300  000B2C  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1301  000B2E  0E00               	movlw	0
  1302  000B30  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1303  000B32  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1304  000B34  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1305  000B38  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1306  000B3C                     	if	0	;tblptru may be non-zero
  1307  000B3C                     	endif
  1308  000B3C                     	if	0	;tblptru may be non-zero
  1309  000B3C                     	endif
  1310  000B3C  0008               	tblrd		*
  1311  000B3E  50F5               	movf	tablat,w,c
  1312  000B40  ECE4  F005         	call	_ENVIA_CHAR
  1313  000B44                     
  1314                           ;LCD.c: 47:  }
  1315  000B44  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1316  000B46                     l1175:
  1317  000B46  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1318  000B48  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1319  000B4A  A0D8               	btfss	status,0,c
  1320  000B4C  EFAA  F005         	goto	u381
  1321  000B50  EFAC  F005         	goto	u380
  1322  000B54                     u381:
  1323  000B54  EF94  F005         	goto	l1171
  1324  000B58                     u380:
  1325  000B58  0012               	return		;funcret
  1326  000B5A                     __end_of_ESCRIBE_MENSAJE:
  1327                           	callstack 0
  1328                           
  1329 ;; *************** function _ENVIA_CHAR *****************
  1330 ;; Defined at:
  1331 ;;		line 50 in file "LCD.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  dato            1    wreg     unsigned char 
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  dato            1    1[COMRAM] unsigned char 
  1336 ;;  aux             1    2[COMRAM] unsigned char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1346 ;;      Params:         0       0       0       0       0       0       0       0       0
  1347 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1349 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1350 ;;Total ram usage:        2 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 1
  1353 ;; This function calls:
  1354 ;;		_ENVIA_NIBBLE
  1355 ;;		_LEER_LCD
  1356 ;; This function is called by:
  1357 ;;		_ESCRIBE_MENSAJE
  1358 ;;		_main
  1359 ;;		_GENERACARACTER
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text13
  1364  000BC8                     __ptext13:
  1365                           	callstack 0
  1366  000BC8                     _ENVIA_CHAR:
  1367                           	callstack 28
  1368                           
  1369                           ;incstack = 0
  1370                           ;ENVIA_CHAR@dato stored from wreg
  1371  000BC8  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1372  000BCA                     
  1373                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1374  000BCA  808C               	bsf	140,0,c	;volatile
  1375  000BCC                     
  1376                           ;LCD.c: 54:  LEER_LCD();
  1377  000BCC  ECC7  F004         	call	_LEER_LCD	;wreg free
  1378  000BD0                     
  1379                           ;LCD.c: 55:  TRISD = 0x00;
  1380  000BD0  0E00               	movlw	0
  1381  000BD2  6E95               	movwf	149,c	;volatile
  1382  000BD4                     
  1383                           ;LCD.c: 56:         _delay(1200);
  1384  000BD4  0EF0               	movlw	240
  1385  000BD6                     u447:
  1386  000BD6  D000               	nop2	
  1387  000BD8  2EE8               	decfsz	wreg,f,c
  1388  000BDA  D7FD               	bra	u447
  1389  000BDC                     
  1390                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1391  000BDC  928C               	bcf	140,1,c	;volatile
  1392  000BDE                     
  1393                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1394  000BDE  948C               	bcf	140,2,c	;volatile
  1395  000BE0                     
  1396                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1397  000BE0  808C               	bsf	140,0,c	;volatile
  1398  000BE2                     
  1399                           ;LCD.c: 61:  aux = dato & 0xF0;
  1400  000BE2  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1401  000BE4  0BF0               	andlw	240
  1402  000BE6  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1403  000BE8                     
  1404                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1405  000BE8  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1406  000BEA  EC3D  F006         	call	_ENVIA_NIBBLE
  1407  000BEE                     
  1408                           ;LCD.c: 63:  aux = dato << 4;
  1409  000BEE  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1410  000BF0  0BF0               	andlw	240
  1411  000BF2  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1412  000BF4                     
  1413                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1414  000BF4  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1415  000BF6  EC3D  F006         	call	_ENVIA_NIBBLE
  1416  000BFA  0012               	return		;funcret
  1417  000BFC                     __end_of_ENVIA_CHAR:
  1418                           	callstack 0
  1419                           
  1420 ;; *************** function _LEER_LCD *****************
  1421 ;; Defined at:
  1422 ;;		line 121 in file "LCD.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  aux             1    0[COMRAM] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      void 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0
  1437 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1439 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1440 ;;Total ram usage:        1 bytes
  1441 ;; Hardware stack levels used: 1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_ENVIA_CHAR
  1446 ;;		_ENVIA_LCD_CMD
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           	psect	text14
  1451  00098E                     __ptext14:
  1452                           	callstack 0
  1453  00098E                     _LEER_LCD:
  1454                           	callstack 27
  1455  00098E                     
  1456                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1457  00098E  0EF8               	movlw	248
  1458  000990  6E95               	movwf	149,c	;volatile
  1459  000992                     
  1460                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1461  000992  908C               	bcf	140,0,c	;volatile
  1462  000994                     
  1463                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1464  000994  828C               	bsf	140,1,c	;volatile
  1465  000996                     
  1466                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1467  000996  848C               	bsf	140,2,c	;volatile
  1468  000998                     
  1469                           ;LCD.c: 128:         _delay(1200);
  1470  000998  0EF0               	movlw	240
  1471  00099A                     u457:
  1472  00099A  D000               	nop2	
  1473  00099C  2EE8               	decfsz	wreg,f,c
  1474  00099E  D7FD               	bra	u457
  1475  0009A0                     
  1476                           ;LCD.c: 130:  aux = PORTD;
  1477  0009A0  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1478  0009A4                     
  1479                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1480  0009A4  948C               	bcf	140,2,c	;volatile
  1481  0009A6                     
  1482                           ;LCD.c: 132:         _delay(1200);
  1483  0009A6  0EF0               	movlw	240
  1484  0009A8                     u467:
  1485  0009A8  D000               	nop2	
  1486  0009AA  2EE8               	decfsz	wreg,f,c
  1487  0009AC  D7FD               	bra	u467
  1488  0009AE                     
  1489                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1490  0009AE  848C               	bsf	140,2,c	;volatile
  1491  0009B0                     
  1492                           ;LCD.c: 135:         _delay(1200);
  1493  0009B0  0EF0               	movlw	240
  1494  0009B2                     u477:
  1495  0009B2  D000               	nop2	
  1496  0009B4  2EE8               	decfsz	wreg,f,c
  1497  0009B6  D7FD               	bra	u477
  1498  0009B8                     
  1499                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1500  0009B8  948C               	bcf	140,2,c	;volatile
  1501  0009BA                     l815:
  1502                           
  1503                           ;LCD.c: 138:  aux = aux & 0x80;
  1504  0009BA  5001               	movf	LEER_LCD@aux^0,w,c
  1505  0009BC  0B80               	andlw	128
  1506  0009BE  6E01               	movwf	LEER_LCD@aux^0,c
  1507                           
  1508                           ;LCD.c: 139:  while(aux == 0x80)
  1509  0009C0  EFF6  F004         	goto	l829
  1510  0009C4                     l67:
  1511                           
  1512                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1513  0009C4  848C               	bsf	140,2,c	;volatile
  1514  0009C6                     
  1515                           ;LCD.c: 142:             _delay(1200);
  1516  0009C6  0EF0               	movlw	240
  1517  0009C8                     u487:
  1518  0009C8  D000               	nop2	
  1519  0009CA  2EE8               	decfsz	wreg,f,c
  1520  0009CC  D7FD               	bra	u487
  1521  0009CE                     
  1522                           ;LCD.c: 143:             aux = PORTD;
  1523  0009CE  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1524  0009D2                     
  1525                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1526  0009D2  948C               	bcf	140,2,c	;volatile
  1527                           
  1528                           ;LCD.c: 145:             _delay(1200);
  1529  0009D4  0EF0               	movlw	240
  1530  0009D6                     u497:
  1531  0009D6  D000               	nop2	
  1532  0009D8  2EE8               	decfsz	wreg,f,c
  1533  0009DA  D7FD               	bra	u497
  1534  0009DC                     
  1535                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1536  0009DC  848C               	bsf	140,2,c	;volatile
  1537                           
  1538                           ;LCD.c: 147:             _delay(1200);
  1539  0009DE  0EF0               	movlw	240
  1540  0009E0                     u507:
  1541  0009E0  D000               	nop2	
  1542  0009E2  2EE8               	decfsz	wreg,f,c
  1543  0009E4  D7FD               	bra	u507
  1544  0009E6                     
  1545                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1546  0009E6  948C               	bcf	140,2,c	;volatile
  1547  0009E8  EFDD  F004         	goto	l815
  1548  0009EC                     l829:
  1549                           
  1550                           ;LCD.c: 139:  while(aux == 0x80)
  1551  0009EC  0E80               	movlw	128
  1552  0009EE  1801               	xorwf	LEER_LCD@aux^0,w,c
  1553  0009F0  B4D8               	btfsc	status,2,c
  1554  0009F2  EFFD  F004         	goto	u11
  1555  0009F6  EFFF  F004         	goto	u10
  1556  0009FA                     u11:
  1557  0009FA  EFE2  F004         	goto	l67
  1558  0009FE                     u10:
  1559  0009FE  0012               	return		;funcret
  1560  000A00                     __end_of_LEER_LCD:
  1561                           	callstack 0
  1562                           
  1563 ;; *************** function _ENVIA_NIBBLE *****************
  1564 ;; Defined at:
  1565 ;;		line 93 in file "LCD.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  dato            1    wreg     unsigned char 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  dato            1    0[COMRAM] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1579 ;;      Params:         0       0       0       0       0       0       0       0       0
  1580 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1582 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1583 ;;Total ram usage:        1 bytes
  1584 ;; Hardware stack levels used: 1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_ENVIA_CHAR
  1589 ;;		_LCD_CONFIG
  1590 ;;		_ENVIA_LCD_CMD
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text15
  1595  000C7A                     __ptext15:
  1596                           	callstack 0
  1597  000C7A                     _ENVIA_NIBBLE:
  1598                           	callstack 28
  1599                           
  1600                           ;incstack = 0
  1601                           ;ENVIA_NIBBLE@dato stored from wreg
  1602  000C7A  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1603  000C7C                     
  1604                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1605  000C7C  0E0F               	movlw	15
  1606  000C7E  168C               	andwf	140,f,c	;volatile
  1607                           
  1608                           ;LCD.c: 96:  dato &= 0xF0;
  1609  000C80  0EF0               	movlw	240
  1610  000C82  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1611                           
  1612                           ;LCD.c: 97:  LATD|= dato;
  1613  000C84  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1614  000C86  128C               	iorwf	140,f,c	;volatile
  1615  000C88                     
  1616                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1617  000C88  848C               	bsf	140,2,c	;volatile
  1618  000C8A                     
  1619                           ;LCD.c: 100:         _delay(1200);
  1620  000C8A  0EF0               	movlw	240
  1621  000C8C                     u517:
  1622  000C8C  D000               	nop2	
  1623  000C8E  2EE8               	decfsz	wreg,f,c
  1624  000C90  D7FD               	bra	u517
  1625  000C92                     
  1626                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1627  000C92  948C               	bcf	140,2,c	;volatile
  1628  000C94  0012               	return		;funcret
  1629  000C96                     __end_of_ENVIA_NIBBLE:
  1630                           	callstack 0
  1631                           
  1632                           	psect	rparam
  1633  0000                     
  1634                           	psect	idloc
  1635                           
  1636                           ;Config register IDLOC0 @ 0x200000
  1637                           ;	unspecified, using default values
  1638  200000                     	org	2097152
  1639  200000  FF                 	db	255
  1640                           
  1641                           ;Config register IDLOC1 @ 0x200001
  1642                           ;	unspecified, using default values
  1643  200001                     	org	2097153
  1644  200001  FF                 	db	255
  1645                           
  1646                           ;Config register IDLOC2 @ 0x200002
  1647                           ;	unspecified, using default values
  1648  200002                     	org	2097154
  1649  200002  FF                 	db	255
  1650                           
  1651                           ;Config register IDLOC3 @ 0x200003
  1652                           ;	unspecified, using default values
  1653  200003                     	org	2097155
  1654  200003  FF                 	db	255
  1655                           
  1656                           ;Config register IDLOC4 @ 0x200004
  1657                           ;	unspecified, using default values
  1658  200004                     	org	2097156
  1659  200004  FF                 	db	255
  1660                           
  1661                           ;Config register IDLOC5 @ 0x200005
  1662                           ;	unspecified, using default values
  1663  200005                     	org	2097157
  1664  200005  FF                 	db	255
  1665                           
  1666                           ;Config register IDLOC6 @ 0x200006
  1667                           ;	unspecified, using default values
  1668  200006                     	org	2097158
  1669  200006  FF                 	db	255
  1670                           
  1671                           ;Config register IDLOC7 @ 0x200007
  1672                           ;	unspecified, using default values
  1673  200007                     	org	2097159
  1674  200007  FF                 	db	255
  1675                           
  1676                           	psect	config
  1677                           
  1678                           ;Config register CONFIG1L @ 0x300000
  1679                           ;	PLL Prescaler Selection bits
  1680                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1681                           ;	System Clock Postscaler Selection bits
  1682                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1683                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1684                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1685  300000                     	org	3145728
  1686  300000  00                 	db	0
  1687                           
  1688                           ;Config register CONFIG1H @ 0x300001
  1689                           ;	Oscillator Selection bits
  1690                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1691                           ;	Fail-Safe Clock Monitor Enable bit
  1692                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1693                           ;	Internal/External Oscillator Switchover bit
  1694                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1695  300001                     	org	3145729
  1696  300001  02                 	db	2
  1697                           
  1698                           ;Config register CONFIG2L @ 0x300002
  1699                           ;	Power-up Timer Enable bit
  1700                           ;	PWRT = ON, PWRT enabled
  1701                           ;	Brown-out Reset Enable bits
  1702                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1703                           ;	Brown-out Reset Voltage bits
  1704                           ;	BORV = 3, Minimum setting 2.05V
  1705                           ;	USB Voltage Regulator Enable bit
  1706                           ;	VREGEN = OFF, USB voltage regulator disabled
  1707  300002                     	org	3145730
  1708  300002  18                 	db	24
  1709                           
  1710                           ;Config register CONFIG2H @ 0x300003
  1711                           ;	Watchdog Timer Enable bit
  1712                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1713                           ;	Watchdog Timer Postscale Select bits
  1714                           ;	WDTPS = 32768, 1:32768
  1715  300003                     	org	3145731
  1716  300003  1E                 	db	30
  1717                           
  1718                           ; Padding undefined space
  1719  300004                     	org	3145732
  1720  300004  FF                 	db	255
  1721                           
  1722                           ;Config register CONFIG3H @ 0x300005
  1723                           ;	CCP2 MUX bit
  1724                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1725                           ;	PORTB A/D Enable bit
  1726                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1727                           ;	Low-Power Timer 1 Oscillator Enable bit
  1728                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1729                           ;	MCLR Pin Enable bit
  1730                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1731  300005                     	org	3145733
  1732  300005  81                 	db	129
  1733                           
  1734                           ;Config register CONFIG4L @ 0x300006
  1735                           ;	Stack Full/Underflow Reset Enable bit
  1736                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1737                           ;	Single-Supply ICSP Enable bit
  1738                           ;	LVP = OFF, Single-Supply ICSP disabled
  1739                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1740                           ;	ICPRT = OFF, ICPORT disabled
  1741                           ;	Extended Instruction Set Enable bit
  1742                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1743                           ;	Background Debugger Enable bit
  1744                           ;	DEBUG = 0x1, unprogrammed default
  1745  300006                     	org	3145734
  1746  300006  81                 	db	129
  1747                           
  1748                           ; Padding undefined space
  1749  300007                     	org	3145735
  1750  300007  FF                 	db	255
  1751                           
  1752                           ;Config register CONFIG5L @ 0x300008
  1753                           ;	Code Protection bit
  1754                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1755                           ;	Code Protection bit
  1756                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1757                           ;	Code Protection bit
  1758                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1759                           ;	Code Protection bit
  1760                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1761  300008                     	org	3145736
  1762  300008  0F                 	db	15
  1763                           
  1764                           ;Config register CONFIG5H @ 0x300009
  1765                           ;	Boot Block Code Protection bit
  1766                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1767                           ;	Data EEPROM Code Protection bit
  1768                           ;	CPD = OFF, Data EEPROM is not code-protected
  1769  300009                     	org	3145737
  1770  300009  C0                 	db	192
  1771                           
  1772                           ;Config register CONFIG6L @ 0x30000A
  1773                           ;	Write Protection bit
  1774                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1775                           ;	Write Protection bit
  1776                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1777                           ;	Write Protection bit
  1778                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1779                           ;	Write Protection bit
  1780                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1781  30000A                     	org	3145738
  1782  30000A  0F                 	db	15
  1783                           
  1784                           ;Config register CONFIG6H @ 0x30000B
  1785                           ;	Configuration Register Write Protection bit
  1786                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1787                           ;	Boot Block Write Protection bit
  1788                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1789                           ;	Data EEPROM Write Protection bit
  1790                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1791  30000B                     	org	3145739
  1792  30000B  E0                 	db	224
  1793                           
  1794                           ;Config register CONFIG7L @ 0x30000C
  1795                           ;	Table Read Protection bit
  1796                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1797                           ;	Table Read Protection bit
  1798                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1799                           ;	Table Read Protection bit
  1800                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1801                           ;	Table Read Protection bit
  1802                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1803  30000C                     	org	3145740
  1804  30000C  0F                 	db	15
  1805                           
  1806                           ;Config register CONFIG7H @ 0x30000D
  1807                           ;	Boot Block Table Read Protection bit
  1808                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1809  30000D                     	org	3145741
  1810  30000D  40                 	db	64
  1811                           tosu	equ	0xFFF
  1812                           tosh	equ	0xFFE
  1813                           tosl	equ	0xFFD
  1814                           stkptr	equ	0xFFC
  1815                           pclatu	equ	0xFFB
  1816                           pclath	equ	0xFFA
  1817                           pcl	equ	0xFF9
  1818                           tblptru	equ	0xFF8
  1819                           tblptrh	equ	0xFF7
  1820                           tblptrl	equ	0xFF6
  1821                           tablat	equ	0xFF5
  1822                           prodh	equ	0xFF4
  1823                           prodl	equ	0xFF3
  1824                           indf0	equ	0xFEF
  1825                           postinc0	equ	0xFEE
  1826                           postdec0	equ	0xFED
  1827                           preinc0	equ	0xFEC
  1828                           plusw0	equ	0xFEB
  1829                           fsr0h	equ	0xFEA
  1830                           fsr0l	equ	0xFE9
  1831                           wreg	equ	0xFE8
  1832                           indf1	equ	0xFE7
  1833                           postinc1	equ	0xFE6
  1834                           postdec1	equ	0xFE5
  1835                           preinc1	equ	0xFE4
  1836                           plusw1	equ	0xFE3
  1837                           fsr1h	equ	0xFE2
  1838                           fsr1l	equ	0xFE1
  1839                           bsr	equ	0xFE0
  1840                           indf2	equ	0xFDF
  1841                           postinc2	equ	0xFDE
  1842                           postdec2	equ	0xFDD
  1843                           preinc2	equ	0xFDC
  1844                           plusw2	equ	0xFDB
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    0
    Data        1
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      19
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_digitos_individuales
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _digitos_individuales->___awdiv
    ___awdiv->___awmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2790
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                          _configuro
               _digitos_individuales
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _digitos_individuales                                 1     1      0    1270
                                             14 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuro
   _digitos_individuales
     ___awdiv
       ___awmod (ARG)
     ___awmod
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRhh         6A      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      F      13       1       20.0%
BITBIGSFRll         23      0       0      23        0.0%
BITBIGSFRlh          8      0       0      22        0.0%
BITBIGSFRhl          8      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      13      24        0.0%
DATA                 0      0      13       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Oct 12 19:38:08 2022

                          l24 0B92                            l42 0C2A                            l51 0BFA  
                          l60 0C94                            l37 0C9C                            l54 0CA4  
                          l63 0BC6                            l48 0B58                            l57 0AC0  
                          l67 09C4                            l69 09FE                            u10 09FE  
                          u11 09FA                            u20 0C0E                            u21 0C0A  
                          u30 0C24                            u31 0C20                  ___awdiv@sign 000C  
               ENVIA_CHAR@aux 0003                           l103 0CA6                           l106 0C52  
                         l109 0B1A                           l351 08DC                           l364 098C  
                         l801 0998                           l811 09B0                           l803 09A0  
                         l821 09D2                           l813 09B8                           l805 09A4  
                         l901 0A7A                           l831 0C7C                           l823 09DC  
                         l815 09BA                           l807 09A6                           l911 0AA8  
                         l903 0A8E                           l833 0C88                           l825 09E6  
                         l817 09C6                           l809 09AE                           l841 0B98  
                         l913 0AAE                           l905 0A96                           l835 0C8A  
                         l819 09CE                           l851 0BAC                           l843 0B9C  
                         l915 0AB4                           l907 0A9C                           l837 0C92  
                         l829 09EC                           l853 0BAE                           l845 0BA0  
                         l861 0C96                           l917 0ABA                           l909 0AA2  
                         l871 0BCA                           l855 0BB4                           l847 0BA8  
                         l839 0B96                           l863 0BFE                           l793 098E  
                         l881 0BDE                           l873 0BCC                           l857 0BBA  
                         l849 0BAA                           l865 0C0E                           l795 0992  
                         l891 0BF4                           l883 0BE0                           l875 0BD0  
                         l859 0BC0                           l867 0C14                           l797 0994  
                         l885 0BE2                           l877 0BD4                           l893 0C9E  
                         l869 0C24                           l799 0996                           l887 0BE8  
                         l879 0BDC                           l895 0A62                           l889 0BEE  
                         l897 0A66                           l899 0A6C                           u300 08F0  
                         u301 08EC                           u310 090A                           u311 0906  
                         u240 082C                           u320 0924                           u241 0828  
                         u321 0920                           u250 0846                           u330 0942  
                         u251 0842                           u331 093E                           u260 086C  
                         u340 0958                           u261 0868                           u341 0954  
                         u270 088A                           u350 097C                           u271 0886  
                         u351 0978                           u407 0A72                           u360 0B6C  
                         u280 08A6                           u361 0B68                           u281 08A2  
                         u417 0A80                           u370 0B8A                           u290 08CC  
                         u507 09E0                           u371 0B86                           u291 08C8  
                         u427 0A90                           u380 0B58                           u517 0C8C  
                         u381 0B54                           u437 0BA2                           u447 0BD6  
                         u457 099A                           u467 09A8                           u477 09B2  
                         u397 0C3A                           u487 09C8                           u497 09D6  
                ___awmod@sign 0006                   LEER_LCD@aux 0001                           wreg 000FE8  
                ?_CURSOR_HOME 0001                ??_ENVIA_NIBBLE 0001                ENVIA_CHAR@dato 0002  
                        l1101 0874                          l1021 0C44                          l1111 08AE  
                        l1103 087C                          l1023 0C48                          l1015 0C2C  
                        l1121 08D4                          l1113 08B0                          l1105 088A  
                        l1025 0C4C                          l1017 0C30                          l1115 08B6  
                        l1107 0890                          l1131 08F8                          l1019 0C34  
                        l1109 08A6                          l1117 08BC                          l1141 092C  
                        l1133 08FC                          l1125 08DE                          l1119 08CC  
                        l1151 0966                          l1143 0934                          l1135 090A  
                        l1127 08E2                          l1161 0B5C                          l1081 081A  
                        l1145 0942                          l1153 096C                          l1137 0912  
                        l1129 08F0                          l1171 0B28                          l1163 0B6C  
                        l1091 0846                          l1083 081E                          l1155 097C  
                        l1147 0958                          l1139 0924                          l1173 0B44  
                        l1165 0B78                          l1093 084E                          l1085 082C  
                        l1157 0984                          l1149 0960                          l1181 0A04  
                        l1175 0B46                          l1167 0B8A                          l1095 0852  
                        l1087 0834                          l1191 0A3C                          l1183 0A08  
                        l1169 0B1C                          l1097 085A                          l1089 0838  
                        l1177 0AC4                          l1193 0A42                          l1185 0A12  
                        l1099 086C                          l1195 0A4A                          l1187 0A22  
                        l1179 0A00                          l1197 0A52                          l1189 0A2C  
                        STR_1 080D                          STR_2 0801                          _LATD 000F8C  
                        _main 0A00                          start 0000                 ?_CURSOR_ONOFF 0001  
                ___param_bank 000000               ??_ENVIA_LCD_CMD 0002              __end_of_LEER_LCD 0A00  
                       ?_main 0001               __end_of___awdiv 08DE               __end_of___awmod 098E  
             ___awdiv@divisor 0009               ___awdiv@counter 000B                         _PORTD 000F83  
                       _TRISD 000F95                   ?_POS_CURSOR 0004                         tablat 000FF5  
                       status 000FD8                ??_CURSOR_ONOFF 0004               __initialization 0C54  
                __end_of_main 0A62               _ESCRIBE_MENSAJE 0B1C                        ??_main 0010  
               __activetblptr 000001              ___awdiv@dividend 0007              __end_of_lcd_init 0C54  
                   ??___awdiv 000B                        _decena 0011                     ??___awmod 0005  
        __end_of_ENVIA_NIBBLE 0C96              ___awdiv@quotient 000D               ___awmod@divisor 0003  
                      isa$std 000001               ___awmod@counter 0005                        _unidad 0010  
                __pdataCOMRAM 0013                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                  ??_BORRAR_LCD 0004  
                   ?_LEER_LCD 0001                    __accesstop 0060       __end_of__initialization 0C6C  
                ??_LCD_CONFIG 0004                 ___rparam_used 000001                  ??_ENVIA_CHAR 0002  
__end_of_digitos_individuales 0B1C       __end_of_ESCRIBE_MENSAJE 0B5A                __pcstackCOMRAM 0001  
          __end_of_BORRAR_LCD 0CA6              ENVIA_LCD_CMD@aux 0003          __end_of_CURSOR_ONOFF 0C2C  
          __end_of_LCD_CONFIG 0AC2    digitos_individuales@numero 000F            __end_of_ENVIA_CHAR 0BFC  
                  ??_LEER_LCD 0001              ENVIA_NIBBLE@dato 0001                  ??_POS_CURSOR 0005  
                   ?_lcd_init 0001                       __Hparam 0000                       __Lparam 0000  
            ?_ESCRIBE_MENSAJE 0004             __end_of_configuro 0CA8                       ___awdiv 081A  
                     ___awmod 08DE                  __psmallconst 0800         __end_of_ENVIA_LCD_CMD 0BC8  
                     __pcinit 0C54            __end_of_POS_CURSOR 0B94                       __ramtop 0800  
                     _centena 0012                       __ptext0 0A00                       __ptext1 0C2C  
                     __ptext2 0A62                       __ptext3 0BFC                       __ptext4 0C96  
                     __ptext5 0C9E                       __ptext6 0AC2                       __ptext7 08DE  
                     __ptext8 081A                       __ptext9 0CA6              ___awmod@dividend 0001  
        _digitos_individuales 0AC2                    ??_lcd_init 0005                  _ENVIA_NIBBLE 0C7A  
        end_of_initialization 0C6C         ?_digitos_individuales 0001                  _CURSOR_ONOFF 0BFC  
          CURSOR_ONOFF@estado 0004                 __pidataCOMRAM 0CA8                 ??_CURSOR_HOME 0004  
         start_initialization 0C54             ENVIA_LCD_CMD@dato 0002        ??_digitos_individuales 000F  
                 __pbssCOMRAM 0010           __end_of_CURSOR_HOME 0C9E                      ?___awdiv 0007  
                    ?___awmod 0001                     _configuro 0CA6                   __smallconst 0800  
                   _menestron 0013                      _LEER_LCD 098E                      _LATDbits 000F8C  
            ESCRIBE_MENSAJE@i 0009                POS_CURSOR@fila 0005                    ?_configuro 0001  
                 _CURSOR_HOME 0C96                      __Hrparam 0000                      __Lrparam 0000  
                __Lsmallconst 0800                      __ptext10 0B5A                      __ptext11 0B94  
                    __ptext12 0B1C                      __ptext13 0BC8                      __ptext14 098E  
                    __ptext15 0C7A                    _BORRAR_LCD 0C9E                      _lcd_init 0C2C  
                  _LCD_CONFIG 0A62                    _ENVIA_CHAR 0BC8                      isa$xinst 000000  
               _ENVIA_LCD_CMD 0B94                   ??_configuro 0001             ??_ESCRIBE_MENSAJE 0007  
       ESCRIBE_MENSAJE@cadena 0004                ?_ENVIA_LCD_CMD 0001                   ?_BORRAR_LCD 0001  
               ?_ENVIA_NIBBLE 0001                    _POS_CURSOR 0B5A                   ?_LCD_CONFIG 0001  
          ESCRIBE_MENSAJE@tam 0006                   ?_ENVIA_CHAR 0001             POS_CURSOR@columna 0004  
