

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Oct 19 21:30:15 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.40
    37                           ; Generated 17/11/2021 GMT
    38                           ; 
    39                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  000DDE                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _segundos
    77  000DDE  37                 	db	55
    78                           
    79                           ;initializer for _minutos
    80  000DDF  3B                 	db	59
    81                           
    82                           ;initializer for _horas
    83  000DE0  0C                 	db	12
    84  0000                     _CCPR1L	set	4030
    85  0000                     _CCPR1H	set	4031
    86  0000                     _ADCON0bits	set	4034
    87  0000                     _LATD	set	3980
    88  0000                     _PORTD	set	3971
    89  0000                     _LATDbits	set	3980
    90  0000                     _TRISD	set	3989
    91  0000                     _PIE1bits	set	3997
    92  0000                     _CCP1CON	set	4029
    93  0000                     _ADCON2	set	4032
    94  0000                     _ADRESH	set	4036
    95  0000                     _T1CON	set	4045
    96  0000                     _ADCON0	set	4034
    97  0000                     _ADCON1	set	4033
    98  0000                     _RCONbits	set	4048
    99  0000                     _INTCON3bits	set	4080
   100  0000                     _INTCONbits	set	4082
   101  0000                     _PIR1bits	set	3998
   102                           
   103                           	psect	smallconst
   104  000800                     __psmallconst:
   105                           	callstack 0
   106  000800  00                 	db	0
   107  000801                     STR_1:
   108  000801  20                 	db	32
   109  000802  54                 	db	84	;'T'
   110  000803  65                 	db	101	;'e'
   111  000804  72                 	db	114	;'r'
   112  000805  6D                 	db	109	;'m'
   113  000806  6F                 	db	111	;'o'
   114  000807  6D                 	db	109	;'m'
   115  000808  65                 	db	101	;'e'
   116  000809  74                 	db	116	;'t'
   117  00080A  72                 	db	114	;'r'
   118  00080B  6F                 	db	111	;'o'
   119  00080C  20                 	db	32
   120  00080D  55                 	db	85	;'U'
   121  00080E  50                 	db	80	;'P'
   122  00080F  43                 	db	67	;'C'
   123  000810  00                 	db	0
   124  000811                     STR_2:
   125  000811  43                 	db	67	;'C'
   126  000812  20                 	db	32
   127  000813  00                 	db	0
   128  000814                     STR_4:
   129  000814  41                 	db	65	;'A'
   130  000815  4D                 	db	77	;'M'
   131  000816  00                 	db	0
   132  000817  50                 	db	80	;'P'
   133  000818  4D                 	db	77	;'M'
   134  000819  00                 	db	0
   135  00081A  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           ; #config settings
   138                           
   139                           	psect	cinit
   140  000C50                     __pcinit:
   141                           	callstack 0
   142  000C50                     start_initialization:
   143                           	callstack 0
   144  000C50                     __initialization:
   145                           	callstack 0
   146                           
   147                           ; Initialize objects allocated to COMRAM (3 bytes)
   148                           ; load TBLPTR registers with __pidataCOMRAM
   149  000C50  0EDE               	movlw	low __pidataCOMRAM
   150  000C52  6EF6               	movwf	tblptrl,c
   151  000C54  0E0D               	movlw	high __pidataCOMRAM
   152  000C56  6EF7               	movwf	tblptrh,c
   153  000C58  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   154  000C5A  6EF8               	movwf	tblptru,c
   155  000C5C  0009               	tblrd		*+	;fetch initializer
   156  000C5E  CFF5 F019          	movff	tablat,__pdataCOMRAM
   157  000C62  0009               	tblrd		*+	;fetch initializer
   158  000C64  CFF5 F01A          	movff	tablat,__pdataCOMRAM+1
   159  000C68  0009               	tblrd		*+	;fetch initializer
   160  000C6A  CFF5 F01B          	movff	tablat,__pdataCOMRAM+2
   161                           
   162                           ; Clear objects allocated to COMRAM (6 bytes)
   163  000C6E  6A18               	clrf	(__pbssCOMRAM+5)& (0+255),c
   164  000C70  6A17               	clrf	(__pbssCOMRAM+4)& (0+255),c
   165  000C72  6A16               	clrf	(__pbssCOMRAM+3)& (0+255),c
   166  000C74  6A15               	clrf	(__pbssCOMRAM+2)& (0+255),c
   167  000C76  6A14               	clrf	(__pbssCOMRAM+1)& (0+255),c
   168  000C78  6A13               	clrf	__pbssCOMRAM& (0+255),c
   169  000C7A                     end_of_initialization:
   170                           	callstack 0
   171  000C7A                     __end_of__initialization:
   172                           	callstack 0
   173  000C7A  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   174  000C7C  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   175  000C7E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   176  000C80  6EF8               	movwf	tblptru,c
   177  000C82  0E08               	movlw	high __Lsmallconst
   178  000C84  6EF7               	movwf	tblptrh,c
   179  000C86  0100               	movlb	0
   180  000C88  EF0E  F004         	goto	_main	;jump to C main() function
   181                           
   182                           	psect	bssCOMRAM
   183  000013                     __pbssCOMRAM:
   184                           	callstack 0
   185  000013                     _am_pm:
   186                           	callstack 0
   187  000013                     	ds	1
   188  000014                     _ticks:
   189                           	callstack 0
   190  000014                     	ds	1
   191  000015                     _res_adc:
   192                           	callstack 0
   193  000015                     	ds	1
   194  000016                     _unidades:
   195                           	callstack 0
   196  000016                     	ds	1
   197  000017                     _decenas:
   198                           	callstack 0
   199  000017                     	ds	1
   200  000018                     _centenas:
   201                           	callstack 0
   202  000018                     	ds	1
   203                           
   204                           	psect	dataCOMRAM
   205  000019                     __pdataCOMRAM:
   206                           	callstack 0
   207  000019                     _segundos:
   208                           	callstack 0
   209  000019                     	ds	1
   210  00001A                     _minutos:
   211                           	callstack 0
   212  00001A                     	ds	1
   213  00001B                     _horas:
   214                           	callstack 0
   215  00001B                     	ds	1
   216                           
   217                           	psect	cstackCOMRAM
   218  000001                     __pcstackCOMRAM:
   219                           	callstack 0
   220  000001                     ??_INTs_ISR:
   221                           
   222                           ; 1 bytes @ 0x0
   223  000001                     	ds	3
   224  000004                     ?___awmod:
   225                           	callstack 0
   226  000004                     ENVIA_NIBBLE@dato:
   227                           	callstack 0
   228  000004                     LEER_LCD@aux:
   229                           	callstack 0
   230  000004                     ___awmod@dividend:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x3
   234  000004                     	ds	1
   235  000005                     ENVIA_CHAR@dato:
   236                           	callstack 0
   237  000005                     ENVIA_LCD_CMD@dato:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x4
   241  000005                     	ds	1
   242  000006                     ENVIA_CHAR@aux:
   243                           	callstack 0
   244  000006                     ENVIA_LCD_CMD@aux:
   245                           	callstack 0
   246  000006                     ___awmod@divisor:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x5
   250  000006                     	ds	1
   251  000007                     ??_LCD_CONFIG:
   252  000007                     POS_CURSOR@columna:
   253                           	callstack 0
   254  000007                     CURSOR_ONOFF@estado:
   255                           	callstack 0
   256  000007                     ESCRIBE_MENSAJE@cadena:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x6
   260  000007                     	ds	1
   261  000008                     ??_arranca_LCD:
   262  000008                     POS_CURSOR@fila:
   263                           	callstack 0
   264  000008                     ___awmod@counter:
   265                           	callstack 0
   266                           
   267                           ; 1 bytes @ 0x7
   268  000008                     	ds	1
   269  000009                     ESCRIBE_MENSAJE@tam:
   270                           	callstack 0
   271  000009                     ___awmod@sign:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x8
   275  000009                     	ds	1
   276  00000A                     ??_ESCRIBE_MENSAJE:
   277  00000A                     ?___awdiv:
   278                           	callstack 0
   279  00000A                     ___awdiv@dividend:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0x9
   283  00000A                     	ds	2
   284  00000C                     ESCRIBE_MENSAJE@i:
   285                           	callstack 0
   286  00000C                     ___awdiv@divisor:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0xB
   290  00000C                     	ds	2
   291  00000E                     ___awdiv@counter:
   292                           	callstack 0
   293                           
   294                           ; 1 bytes @ 0xD
   295  00000E                     	ds	1
   296  00000F                     ___awdiv@sign:
   297                           	callstack 0
   298                           
   299                           ; 1 bytes @ 0xE
   300  00000F                     	ds	1
   301  000010                     ___awdiv@quotient:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0xF
   305  000010                     	ds	2
   306  000012                     convierte_digitos@numero:
   307                           	callstack 0
   308                           
   309                           ; 1 bytes @ 0x11
   310  000012                     	ds	1
   311  000013                     
   312                           ; 1 bytes @ 0x12
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 50 in file "maincode3.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;		None
   323 ;; Return value:  Size  Location     Type
   324 ;;                  1    wreg      void 
   325 ;; Registers used:
   326 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 0/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   332 ;;      Params:         0       0       0       0       0       0       0       0       0
   333 ;;      Locals:         0       0       0       0       0       0       0       0       0
   334 ;;      Temps:          0       0       0       0       0       0       0       0       0
   335 ;;      Totals:         0       0       0       0       0       0       0       0       0
   336 ;;Total ram usage:        0 bytes
   337 ;; Hardware stack levels required when called: 6
   338 ;; This function calls:
   339 ;;		_ENVIA_CHAR
   340 ;;		_ESCRIBE_MENSAJE
   341 ;;		_POS_CURSOR
   342 ;;		_arranca_LCD
   343 ;;		_configuro
   344 ;;		_convierte_digitos
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  00081C                     __ptext0:
   352                           	callstack 0
   353  00081C                     _main:
   354                           	callstack 25
   355  00081C                     
   356                           ;maincode3.c: 51:     configuro();
   357  00081C  ECAF  F006         	call	_configuro	;wreg free
   358  000820                     
   359                           ;maincode3.c: 52:     arranca_LCD();
   360  000820  ECC6  F006         	call	_arranca_LCD	;wreg free
   361  000824                     
   362                           ;maincode3.c: 53:     POS_CURSOR(1,0);
   363  000824  0E00               	movlw	0
   364  000826  6E07               	movwf	POS_CURSOR@columna^0,c
   365  000828  0E01               	movlw	1
   366  00082A  EC46  F006         	call	_POS_CURSOR
   367  00082E                     
   368                           ;maincode3.c: 54:     ESCRIBE_MENSAJE(" Termometro UPC",15);
   369  00082E  0E01               	movlw	low STR_1
   370  000830  6E07               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   371  000832  0E08               	movlw	high STR_1
   372  000834  6E08               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   373  000836  0E0F               	movlw	15
   374  000838  6E09               	movwf	ESCRIBE_MENSAJE@tam^0,c
   375  00083A  EC09  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   376  00083E                     l1350:
   377                           
   378                           ;maincode3.c: 56:         ADCON0bits.GO_DONE = 1;
   379  00083E  82C2               	bsf	194,1,c	;volatile
   380  000840                     l153:
   381  000840  B2C2               	btfsc	194,1,c	;volatile
   382  000842  EF25  F004         	goto	u481
   383  000846  EF27  F004         	goto	u480
   384  00084A                     u481:
   385  00084A  EF20  F004         	goto	l153
   386  00084E                     u480:
   387  00084E                     
   388                           ;maincode3.c: 59:         res_adc = (ADRESH >> 1) & 0x7F;
   389  00084E  90D8               	bcf	status,0,c
   390  000850  30C4               	rrcf	196,w,c	;volatile
   391  000852  0B7F               	andlw	127
   392  000854  6E15               	movwf	_res_adc^0,c
   393  000856                     
   394                           ;maincode3.c: 60:         convierte_digitos(res_adc);
   395  000856  5015               	movf	_res_adc^0,w,c
   396  000858  ECDC  F005         	call	_convierte_digitos
   397  00085C                     
   398                           ;maincode3.c: 61:         POS_CURSOR(2,0);
   399  00085C  0E00               	movlw	0
   400  00085E  6E07               	movwf	POS_CURSOR@columna^0,c
   401  000860  0E02               	movlw	2
   402  000862  EC46  F006         	call	_POS_CURSOR
   403  000866                     
   404                           ;maincode3.c: 62:         ENVIA_CHAR(centenas + 0x30);
   405  000866  5018               	movf	_centenas^0,w,c
   406  000868  0F30               	addlw	48
   407  00086A  EC7D  F006         	call	_ENVIA_CHAR
   408  00086E                     
   409                           ;maincode3.c: 63:         ENVIA_CHAR(decenas + 0x30);
   410  00086E  5017               	movf	_decenas^0,w,c
   411  000870  0F30               	addlw	48
   412  000872  EC7D  F006         	call	_ENVIA_CHAR
   413  000876                     
   414                           ;maincode3.c: 64:         ENVIA_CHAR(unidades + 0x30);
   415  000876  5016               	movf	_unidades^0,w,c
   416  000878  0F30               	addlw	48
   417  00087A  EC7D  F006         	call	_ENVIA_CHAR
   418  00087E                     
   419                           ;maincode3.c: 65:         ENVIA_CHAR(0xDF);
   420  00087E  0EDF               	movlw	223
   421  000880  EC7D  F006         	call	_ENVIA_CHAR
   422  000884                     
   423                           ;maincode3.c: 66:         ESCRIBE_MENSAJE("C ",2);
   424  000884  0E11               	movlw	low STR_2
   425  000886  6E07               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   426  000888  0E08               	movlw	high STR_2
   427  00088A  6E08               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   428  00088C  0E02               	movlw	2
   429  00088E  6E09               	movwf	ESCRIBE_MENSAJE@tam^0,c
   430  000890  EC09  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   431  000894                     
   432                           ;maincode3.c: 67:         convierte_digitos(horas);
   433  000894  501B               	movf	_horas^0,w,c
   434  000896  ECDC  F005         	call	_convierte_digitos
   435  00089A                     
   436                           ;maincode3.c: 68:         ENVIA_CHAR(decenas + 0x30);
   437  00089A  5017               	movf	_decenas^0,w,c
   438  00089C  0F30               	addlw	48
   439  00089E  EC7D  F006         	call	_ENVIA_CHAR
   440  0008A2                     
   441                           ;maincode3.c: 69:         ENVIA_CHAR(unidades + 0x30);
   442  0008A2  5016               	movf	_unidades^0,w,c
   443  0008A4  0F30               	addlw	48
   444  0008A6  EC7D  F006         	call	_ENVIA_CHAR
   445  0008AA                     
   446                           ;maincode3.c: 70:         ENVIA_CHAR(':');
   447  0008AA  0E3A               	movlw	58
   448  0008AC  EC7D  F006         	call	_ENVIA_CHAR
   449  0008B0                     
   450                           ;maincode3.c: 71:         convierte_digitos(minutos);
   451  0008B0  501A               	movf	_minutos^0,w,c
   452  0008B2  ECDC  F005         	call	_convierte_digitos
   453  0008B6                     
   454                           ;maincode3.c: 72:         ENVIA_CHAR(decenas + 0x30);
   455  0008B6  5017               	movf	_decenas^0,w,c
   456  0008B8  0F30               	addlw	48
   457  0008BA  EC7D  F006         	call	_ENVIA_CHAR
   458  0008BE                     
   459                           ;maincode3.c: 73:         ENVIA_CHAR(unidades + 0x30);
   460  0008BE  5016               	movf	_unidades^0,w,c
   461  0008C0  0F30               	addlw	48
   462  0008C2  EC7D  F006         	call	_ENVIA_CHAR
   463  0008C6                     
   464                           ;maincode3.c: 74:         ENVIA_CHAR(':');
   465  0008C6  0E3A               	movlw	58
   466  0008C8  EC7D  F006         	call	_ENVIA_CHAR
   467  0008CC                     
   468                           ;maincode3.c: 75:         convierte_digitos(segundos);
   469  0008CC  5019               	movf	_segundos^0,w,c
   470  0008CE  ECDC  F005         	call	_convierte_digitos
   471  0008D2                     
   472                           ;maincode3.c: 76:         ENVIA_CHAR(decenas + 0x30);
   473  0008D2  5017               	movf	_decenas^0,w,c
   474  0008D4  0F30               	addlw	48
   475  0008D6  EC7D  F006         	call	_ENVIA_CHAR
   476  0008DA                     
   477                           ;maincode3.c: 77:         ENVIA_CHAR(unidades + 0x30);
   478  0008DA  5016               	movf	_unidades^0,w,c
   479  0008DC  0F30               	addlw	48
   480  0008DE  EC7D  F006         	call	_ENVIA_CHAR
   481  0008E2                     
   482                           ;maincode3.c: 82:             ESCRIBE_MENSAJE("AM", 2);
   483  0008E2  0E14               	movlw	low STR_4
   484  0008E4  6E07               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   485  0008E6  0E08               	movlw	high STR_4
   486  0008E8  6E08               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   487  0008EA  0E02               	movlw	2
   488  0008EC  6E09               	movwf	ESCRIBE_MENSAJE@tam^0,c
   489  0008EE  EC09  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   490  0008F2  EF1F  F004         	goto	l1350
   491  0008F6  EF47  F000         	goto	start
   492  0008FA                     __end_of_main:
   493                           	callstack 0
   494                           
   495 ;; *************** function _convierte_digitos *****************
   496 ;; Defined at:
   497 ;;		line 44 in file "maincode3.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  numero          1    wreg     unsigned char 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  numero          1   17[COMRAM] unsigned char 
   502 ;; Return value:  Size  Location     Type
   503 ;;                  1    wreg      void 
   504 ;; Registers used:
   505 ;;		wreg, status,2, status,0, cstack
   506 ;; Tracked objects:
   507 ;;		On entry : 0/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   511 ;;      Params:         0       0       0       0       0       0       0       0       0
   512 ;;      Locals:         1       0       0       0       0       0       0       0       0
   513 ;;      Temps:          0       0       0       0       0       0       0       0       0
   514 ;;      Totals:         1       0       0       0       0       0       0       0       0
   515 ;;Total ram usage:        1 bytes
   516 ;; Hardware stack levels used: 1
   517 ;; Hardware stack levels required when called: 3
   518 ;; This function calls:
   519 ;;		___awdiv
   520 ;;		___awmod
   521 ;; This function is called by:
   522 ;;		_main
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text1
   527  000BB8                     __ptext1:
   528                           	callstack 0
   529  000BB8                     _convierte_digitos:
   530                           	callstack 27
   531                           
   532                           ;incstack = 0
   533                           ;convierte_digitos@numero stored from wreg
   534  000BB8  6E12               	movwf	convierte_digitos@numero^0,c
   535  000BBA                     
   536                           ;maincode3.c: 45:     centenas = numero / 100;
   537  000BBA  C012  F00A         	movff	convierte_digitos@numero,___awdiv@dividend
   538  000BBE  6A0B               	clrf	(___awdiv@dividend+1)^0,c
   539  000BC0  0E00               	movlw	0
   540  000BC2  6E0D               	movwf	(___awdiv@divisor+1)^0,c
   541  000BC4  0E64               	movlw	100
   542  000BC6  6E0C               	movwf	___awdiv@divisor^0,c
   543  000BC8  EC7D  F004         	call	___awdiv	;wreg free
   544  000BCC  500A               	movf	?___awdiv^0,w,c
   545  000BCE  6E18               	movwf	_centenas^0,c
   546                           
   547                           ;maincode3.c: 46:     decenas = (numero % 100) / 10;
   548  000BD0  0E00               	movlw	0
   549  000BD2  6E07               	movwf	(___awmod@divisor+1)^0,c
   550  000BD4  0E64               	movlw	100
   551  000BD6  6E06               	movwf	___awmod@divisor^0,c
   552  000BD8  C012  F004         	movff	convierte_digitos@numero,___awmod@dividend
   553  000BDC  6A05               	clrf	(___awmod@dividend+1)^0,c
   554  000BDE  ECDF  F004         	call	___awmod	;wreg free
   555  000BE2  C004  F00A         	movff	?___awmod,___awdiv@dividend
   556  000BE6  C005  F00B         	movff	?___awmod+1,___awdiv@dividend+1
   557  000BEA  0E00               	movlw	0
   558  000BEC  6E0D               	movwf	(___awdiv@divisor+1)^0,c
   559  000BEE  0E0A               	movlw	10
   560  000BF0  6E0C               	movwf	___awdiv@divisor^0,c
   561  000BF2  EC7D  F004         	call	___awdiv	;wreg free
   562  000BF6  500A               	movf	?___awdiv^0,w,c
   563  000BF8  6E17               	movwf	_decenas^0,c
   564                           
   565                           ;maincode3.c: 47:     unidades = numero % 10;
   566  000BFA  C012  F004         	movff	convierte_digitos@numero,___awmod@dividend
   567  000BFE  6A05               	clrf	(___awmod@dividend+1)^0,c
   568  000C00  0E00               	movlw	0
   569  000C02  6E07               	movwf	(___awmod@divisor+1)^0,c
   570  000C04  0E0A               	movlw	10
   571  000C06  6E06               	movwf	___awmod@divisor^0,c
   572  000C08  ECDF  F004         	call	___awmod	;wreg free
   573  000C0C  5004               	movf	?___awmod^0,w,c
   574  000C0E  6E16               	movwf	_unidades^0,c
   575  000C10  0012               	return		;funcret
   576  000C12                     __end_of_convierte_digitos:
   577                           	callstack 0
   578                           
   579 ;; *************** function ___awmod *****************
   580 ;; Defined at:
   581 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;  dividend        2    3[COMRAM] int 
   584 ;;  divisor         2    5[COMRAM] int 
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  sign            1    8[COMRAM] unsigned char 
   587 ;;  counter         1    7[COMRAM] unsigned char 
   588 ;; Return value:  Size  Location     Type
   589 ;;                  2    3[COMRAM] int 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   597 ;;      Params:         4       0       0       0       0       0       0       0       0
   598 ;;      Locals:         2       0       0       0       0       0       0       0       0
   599 ;;      Temps:          0       0       0       0       0       0       0       0       0
   600 ;;      Totals:         6       0       0       0       0       0       0       0       0
   601 ;;Total ram usage:        6 bytes
   602 ;; Hardware stack levels used: 1
   603 ;; Hardware stack levels required when called: 2
   604 ;; This function calls:
   605 ;;		Nothing
   606 ;; This function is called by:
   607 ;;		_convierte_digitos
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text2
   612  0009BE                     __ptext2:
   613                           	callstack 0
   614  0009BE                     ___awmod:
   615                           	callstack 27
   616  0009BE  0E00               	movlw	0
   617  0009C0  6E09               	movwf	___awmod@sign^0,c
   618  0009C2  BE05               	btfsc	(___awmod@dividend+1)^0,7,c
   619  0009C4  EFE8  F004         	goto	u390
   620  0009C8  EFE6  F004         	goto	u391
   621  0009CC                     u391:
   622  0009CC  EFEE  F004         	goto	l1296
   623  0009D0                     u390:
   624  0009D0  6C04               	negf	___awmod@dividend^0,c
   625  0009D2  1E05               	comf	(___awmod@dividend+1)^0,f,c
   626  0009D4  B0D8               	btfsc	status,0,c
   627  0009D6  2A05               	incf	(___awmod@dividend+1)^0,f,c
   628  0009D8  0E01               	movlw	1
   629  0009DA  6E09               	movwf	___awmod@sign^0,c
   630  0009DC                     l1296:
   631  0009DC  BE07               	btfsc	(___awmod@divisor+1)^0,7,c
   632  0009DE  EFF5  F004         	goto	u400
   633  0009E2  EFF3  F004         	goto	u401
   634  0009E6                     u401:
   635  0009E6  EFF9  F004         	goto	l1300
   636  0009EA                     u400:
   637  0009EA  6C06               	negf	___awmod@divisor^0,c
   638  0009EC  1E07               	comf	(___awmod@divisor+1)^0,f,c
   639  0009EE  B0D8               	btfsc	status,0,c
   640  0009F0  2A07               	incf	(___awmod@divisor+1)^0,f,c
   641  0009F2                     l1300:
   642  0009F2  5006               	movf	___awmod@divisor^0,w,c
   643  0009F4  1007               	iorwf	(___awmod@divisor+1)^0,w,c
   644  0009F6  B4D8               	btfsc	status,2,c
   645  0009F8  EF00  F005         	goto	u411
   646  0009FC  EF02  F005         	goto	u410
   647  000A00                     u411:
   648  000A00  EF26  F005         	goto	l1316
   649  000A04                     u410:
   650  000A04  0E01               	movlw	1
   651  000A06  6E08               	movwf	___awmod@counter^0,c
   652  000A08  EF0A  F005         	goto	l1306
   653  000A0C                     l1304:
   654  000A0C  90D8               	bcf	status,0,c
   655  000A0E  3606               	rlcf	___awmod@divisor^0,f,c
   656  000A10  3607               	rlcf	(___awmod@divisor+1)^0,f,c
   657  000A12  2A08               	incf	___awmod@counter^0,f,c
   658  000A14                     l1306:
   659  000A14  AE07               	btfss	(___awmod@divisor+1)^0,7,c
   660  000A16  EF0F  F005         	goto	u421
   661  000A1A  EF11  F005         	goto	u420
   662  000A1E                     u421:
   663  000A1E  EF06  F005         	goto	l1304
   664  000A22                     u420:
   665  000A22                     l1308:
   666  000A22  5006               	movf	___awmod@divisor^0,w,c
   667  000A24  5C04               	subwf	___awmod@dividend^0,w,c
   668  000A26  5007               	movf	(___awmod@divisor+1)^0,w,c
   669  000A28  5805               	subwfb	(___awmod@dividend+1)^0,w,c
   670  000A2A  A0D8               	btfss	status,0,c
   671  000A2C  EF1A  F005         	goto	u431
   672  000A30  EF1C  F005         	goto	u430
   673  000A34                     u431:
   674  000A34  EF20  F005         	goto	l1312
   675  000A38                     u430:
   676  000A38  5006               	movf	___awmod@divisor^0,w,c
   677  000A3A  5E04               	subwf	___awmod@dividend^0,f,c
   678  000A3C  5007               	movf	(___awmod@divisor+1)^0,w,c
   679  000A3E  5A05               	subwfb	(___awmod@dividend+1)^0,f,c
   680  000A40                     l1312:
   681  000A40  90D8               	bcf	status,0,c
   682  000A42  3207               	rrcf	(___awmod@divisor+1)^0,f,c
   683  000A44  3206               	rrcf	___awmod@divisor^0,f,c
   684  000A46  2E08               	decfsz	___awmod@counter^0,f,c
   685  000A48  EF11  F005         	goto	l1308
   686  000A4C                     l1316:
   687  000A4C  5009               	movf	___awmod@sign^0,w,c
   688  000A4E  B4D8               	btfsc	status,2,c
   689  000A50  EF2C  F005         	goto	u441
   690  000A54  EF2E  F005         	goto	u440
   691  000A58                     u441:
   692  000A58  EF32  F005         	goto	l1320
   693  000A5C                     u440:
   694  000A5C  6C04               	negf	___awmod@dividend^0,c
   695  000A5E  1E05               	comf	(___awmod@dividend+1)^0,f,c
   696  000A60  B0D8               	btfsc	status,0,c
   697  000A62  2A05               	incf	(___awmod@dividend+1)^0,f,c
   698  000A64                     l1320:
   699  000A64  C004  F004         	movff	___awmod@dividend,?___awmod
   700  000A68  C005  F005         	movff	___awmod@dividend+1,?___awmod+1
   701  000A6C  0012               	return		;funcret
   702  000A6E                     __end_of___awmod:
   703                           	callstack 0
   704                           
   705 ;; *************** function ___awdiv *****************
   706 ;; Defined at:
   707 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  dividend        2    9[COMRAM] int 
   710 ;;  divisor         2   11[COMRAM] int 
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  quotient        2   15[COMRAM] int 
   713 ;;  sign            1   14[COMRAM] unsigned char 
   714 ;;  counter         1   13[COMRAM] unsigned char 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  2    9[COMRAM] int 
   717 ;; Registers used:
   718 ;;		wreg, status,2, status,0
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   724 ;;      Params:         4       0       0       0       0       0       0       0       0
   725 ;;      Locals:         4       0       0       0       0       0       0       0       0
   726 ;;      Temps:          0       0       0       0       0       0       0       0       0
   727 ;;      Totals:         8       0       0       0       0       0       0       0       0
   728 ;;Total ram usage:        8 bytes
   729 ;; Hardware stack levels used: 1
   730 ;; Hardware stack levels required when called: 2
   731 ;; This function calls:
   732 ;;		Nothing
   733 ;; This function is called by:
   734 ;;		_convierte_digitos
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text3
   739  0008FA                     __ptext3:
   740                           	callstack 0
   741  0008FA                     ___awdiv:
   742                           	callstack 27
   743  0008FA  0E00               	movlw	0
   744  0008FC  6E0F               	movwf	___awdiv@sign^0,c
   745  0008FE  BE0D               	btfsc	(___awdiv@divisor+1)^0,7,c
   746  000900  EF86  F004         	goto	u330
   747  000904  EF84  F004         	goto	u331
   748  000908                     u331:
   749  000908  EF8C  F004         	goto	l1252
   750  00090C                     u330:
   751  00090C  6C0C               	negf	___awdiv@divisor^0,c
   752  00090E  1E0D               	comf	(___awdiv@divisor+1)^0,f,c
   753  000910  B0D8               	btfsc	status,0,c
   754  000912  2A0D               	incf	(___awdiv@divisor+1)^0,f,c
   755  000914  0E01               	movlw	1
   756  000916  6E0F               	movwf	___awdiv@sign^0,c
   757  000918                     l1252:
   758  000918  BE0B               	btfsc	(___awdiv@dividend+1)^0,7,c
   759  00091A  EF93  F004         	goto	u340
   760  00091E  EF91  F004         	goto	u341
   761  000922                     u341:
   762  000922  EF99  F004         	goto	l1258
   763  000926                     u340:
   764  000926  6C0A               	negf	___awdiv@dividend^0,c
   765  000928  1E0B               	comf	(___awdiv@dividend+1)^0,f,c
   766  00092A  B0D8               	btfsc	status,0,c
   767  00092C  2A0B               	incf	(___awdiv@dividend+1)^0,f,c
   768  00092E  0E01               	movlw	1
   769  000930  1A0F               	xorwf	___awdiv@sign^0,f,c
   770  000932                     l1258:
   771  000932  0E00               	movlw	0
   772  000934  6E11               	movwf	(___awdiv@quotient+1)^0,c
   773  000936  0E00               	movlw	0
   774  000938  6E10               	movwf	___awdiv@quotient^0,c
   775  00093A  500C               	movf	___awdiv@divisor^0,w,c
   776  00093C  100D               	iorwf	(___awdiv@divisor+1)^0,w,c
   777  00093E  B4D8               	btfsc	status,2,c
   778  000940  EFA4  F004         	goto	u351
   779  000944  EFA6  F004         	goto	u350
   780  000948                     u351:
   781  000948  EFCE  F004         	goto	l1280
   782  00094C                     u350:
   783  00094C  0E01               	movlw	1
   784  00094E  6E0E               	movwf	___awdiv@counter^0,c
   785  000950  EFAE  F004         	goto	l1266
   786  000954                     l1264:
   787  000954  90D8               	bcf	status,0,c
   788  000956  360C               	rlcf	___awdiv@divisor^0,f,c
   789  000958  360D               	rlcf	(___awdiv@divisor+1)^0,f,c
   790  00095A  2A0E               	incf	___awdiv@counter^0,f,c
   791  00095C                     l1266:
   792  00095C  AE0D               	btfss	(___awdiv@divisor+1)^0,7,c
   793  00095E  EFB3  F004         	goto	u361
   794  000962  EFB5  F004         	goto	u360
   795  000966                     u361:
   796  000966  EFAA  F004         	goto	l1264
   797  00096A                     u360:
   798  00096A                     l1268:
   799  00096A  90D8               	bcf	status,0,c
   800  00096C  3610               	rlcf	___awdiv@quotient^0,f,c
   801  00096E  3611               	rlcf	(___awdiv@quotient+1)^0,f,c
   802  000970  500C               	movf	___awdiv@divisor^0,w,c
   803  000972  5C0A               	subwf	___awdiv@dividend^0,w,c
   804  000974  500D               	movf	(___awdiv@divisor+1)^0,w,c
   805  000976  580B               	subwfb	(___awdiv@dividend+1)^0,w,c
   806  000978  A0D8               	btfss	status,0,c
   807  00097A  EFC1  F004         	goto	u371
   808  00097E  EFC3  F004         	goto	u370
   809  000982                     u371:
   810  000982  EFC8  F004         	goto	l1276
   811  000986                     u370:
   812  000986  500C               	movf	___awdiv@divisor^0,w,c
   813  000988  5E0A               	subwf	___awdiv@dividend^0,f,c
   814  00098A  500D               	movf	(___awdiv@divisor+1)^0,w,c
   815  00098C  5A0B               	subwfb	(___awdiv@dividend+1)^0,f,c
   816  00098E  8010               	bsf	___awdiv@quotient^0,0,c
   817  000990                     l1276:
   818  000990  90D8               	bcf	status,0,c
   819  000992  320D               	rrcf	(___awdiv@divisor+1)^0,f,c
   820  000994  320C               	rrcf	___awdiv@divisor^0,f,c
   821  000996  2E0E               	decfsz	___awdiv@counter^0,f,c
   822  000998  EFB5  F004         	goto	l1268
   823  00099C                     l1280:
   824  00099C  500F               	movf	___awdiv@sign^0,w,c
   825  00099E  B4D8               	btfsc	status,2,c
   826  0009A0  EFD4  F004         	goto	u381
   827  0009A4  EFD6  F004         	goto	u380
   828  0009A8                     u381:
   829  0009A8  EFDA  F004         	goto	l1284
   830  0009AC                     u380:
   831  0009AC  6C10               	negf	___awdiv@quotient^0,c
   832  0009AE  1E11               	comf	(___awdiv@quotient+1)^0,f,c
   833  0009B0  B0D8               	btfsc	status,0,c
   834  0009B2  2A11               	incf	(___awdiv@quotient+1)^0,f,c
   835  0009B4                     l1284:
   836  0009B4  C010  F00A         	movff	___awdiv@quotient,?___awdiv
   837  0009B8  C011  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
   838  0009BC  0012               	return		;funcret
   839  0009BE                     __end_of___awdiv:
   840                           	callstack 0
   841                           
   842 ;; *************** function _configuro *****************
   843 ;; Defined at:
   844 ;;		line 16 in file "maincode3.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:         0       0       0       0       0       0       0       0       0
   859 ;;      Locals:         0       0       0       0       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0
   861 ;;      Totals:         0       0       0       0       0       0       0       0       0
   862 ;;Total ram usage:        0 bytes
   863 ;; Hardware stack levels used: 1
   864 ;; Hardware stack levels required when called: 2
   865 ;; This function calls:
   866 ;;		Nothing
   867 ;; This function is called by:
   868 ;;		_main
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text4
   873  000D5E                     __ptext4:
   874                           	callstack 0
   875  000D5E                     _configuro:
   876                           	callstack 28
   877  000D5E                     
   878                           ;maincode3.c: 17:     ADCON2 = 0x24;
   879  000D5E  0E24               	movlw	36
   880  000D60  6EC0               	movwf	192,c	;volatile
   881                           
   882                           ;maincode3.c: 18:     ADCON1 = 0x1B;
   883  000D62  0E1B               	movlw	27
   884  000D64  6EC1               	movwf	193,c	;volatile
   885                           
   886                           ;maincode3.c: 19:     ADCON0 = 0x01;
   887  000D66  0E01               	movlw	1
   888  000D68  6EC2               	movwf	194,c	;volatile
   889                           
   890                           ;maincode3.c: 20:     T1CON = 0x35;
   891  000D6A  0E35               	movlw	53
   892  000D6C  6ECD               	movwf	205,c	;volatile
   893                           
   894                           ;maincode3.c: 21:     CCP1CON = 0x0B;
   895  000D6E  0E0B               	movlw	11
   896  000D70  6EBD               	movwf	189,c	;volatile
   897                           
   898                           ;maincode3.c: 22:     CCPR1H = 0xF4;
   899  000D72  0EF4               	movlw	244
   900  000D74  6EBF               	movwf	191,c	;volatile
   901                           
   902                           ;maincode3.c: 23:     CCPR1L = 0x24;
   903  000D76  0E24               	movlw	36
   904  000D78  6EBE               	movwf	190,c	;volatile
   905  000D7A                     
   906                           ;maincode3.c: 24:     RCONbits.IPEN = 1;
   907  000D7A  8ED0               	bsf	208,7,c	;volatile
   908  000D7C                     
   909                           ;maincode3.c: 25:     INTCONbits.GIEH = 1;
   910  000D7C  8EF2               	bsf	242,7,c	;volatile
   911  000D7E                     
   912                           ;maincode3.c: 26:     INTCONbits.GIEL = 1;
   913  000D7E  8CF2               	bsf	242,6,c	;volatile
   914  000D80                     
   915                           ;maincode3.c: 27:     PIE1bits.CCP1IE = 1;
   916  000D80  849D               	bsf	157,2,c	;volatile
   917  000D82                     
   918                           ;maincode3.c: 28:     INTCON3bits.INT1IP = 0;
   919  000D82  9CF0               	bcf	240,6,c	;volatile
   920  000D84                     
   921                           ;maincode3.c: 29:     INTCON3bits.INT2IP = 0;
   922  000D84  9EF0               	bcf	240,7,c	;volatile
   923  000D86                     
   924                           ;maincode3.c: 30:     INTCON3bits.INT1IE = 1;
   925  000D86  86F0               	bsf	240,3,c	;volatile
   926  000D88                     
   927                           ;maincode3.c: 31:     INTCON3bits.INT2IE = 1;
   928  000D88  88F0               	bsf	240,4,c	;volatile
   929  000D8A  0012               	return		;funcret
   930  000D8C                     __end_of_configuro:
   931                           	callstack 0
   932                           
   933 ;; *************** function _arranca_LCD *****************
   934 ;; Defined at:
   935 ;;		line 35 in file "maincode3.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;		None
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, status,2, status,0, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   949 ;;      Params:         0       0       0       0       0       0       0       0       0
   950 ;;      Locals:         0       0       0       0       0       0       0       0       0
   951 ;;      Temps:          1       0       0       0       0       0       0       0       0
   952 ;;      Totals:         1       0       0       0       0       0       0       0       0
   953 ;;Total ram usage:        1 bytes
   954 ;; Hardware stack levels used: 1
   955 ;; Hardware stack levels required when called: 5
   956 ;; This function calls:
   957 ;;		_BORRAR_LCD
   958 ;;		_CURSOR_HOME
   959 ;;		_CURSOR_ONOFF
   960 ;;		_LCD_CONFIG
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text5
   967  000D8C                     __ptext5:
   968                           	callstack 0
   969  000D8C                     _arranca_LCD:
   970                           	callstack 25
   971  000D8C                     
   972                           ;maincode3.c: 36:     TRISD = 0x00;
   973  000D8C  0E00               	movlw	0
   974  000D8E  6E95               	movwf	149,c	;volatile
   975  000D90                     
   976                           ;maincode3.c: 37:     LCD_CONFIG();
   977  000D90  ECAC  F005         	call	_LCD_CONFIG	;wreg free
   978  000D94                     
   979                           ;maincode3.c: 38:     _delay((unsigned long)((19)*(32000000UL/4000.0)));
   980  000D94  0EC6               	movlw	198
   981  000D96  6E08               	movwf	??_arranca_LCD^0,c
   982  000D98  0E66               	movlw	102
   983  000D9A                     u497:
   984  000D9A  2EE8               	decfsz	wreg,f,c
   985  000D9C  D7FE               	bra	u497
   986  000D9E  2E08               	decfsz	??_arranca_LCD^0,f,c
   987  000DA0  D7FC               	bra	u497
   988  000DA2                     
   989                           ;maincode3.c: 39:     BORRAR_LCD();
   990  000DA2  ECEB  F006         	call	_BORRAR_LCD	;wreg free
   991  000DA6                     
   992                           ;maincode3.c: 40:     CURSOR_HOME();
   993  000DA6  ECE7  F006         	call	_CURSOR_HOME	;wreg free
   994  000DAA                     
   995                           ;maincode3.c: 41:     CURSOR_ONOFF(1);
   996  000DAA  0E01               	movlw	1
   997  000DAC  EC97  F006         	call	_CURSOR_ONOFF
   998  000DB0  0012               	return		;funcret
   999  000DB2                     __end_of_arranca_LCD:
  1000                           	callstack 0
  1001                           
  1002 ;; *************** function _LCD_CONFIG *****************
  1003 ;; Defined at:
  1004 ;;		line 72 in file "LCD.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;		None
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1018 ;;      Params:         0       0       0       0       0       0       0       0       0
  1019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1020 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1021 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1022 ;;Total ram usage:        1 bytes
  1023 ;; Hardware stack levels used: 1
  1024 ;; Hardware stack levels required when called: 4
  1025 ;; This function calls:
  1026 ;;		_ENVIA_LCD_CMD
  1027 ;;		_ENVIA_NIBBLE
  1028 ;; This function is called by:
  1029 ;;		_arranca_LCD
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text6
  1034  000B58                     __ptext6:
  1035                           	callstack 0
  1036  000B58                     _LCD_CONFIG:
  1037                           	callstack 25
  1038  000B58                     
  1039                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
  1040  000B58  908C               	bcf	140,0,c	;volatile
  1041                           
  1042                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
  1043  000B5A  928C               	bcf	140,1,c	;volatile
  1044  000B5C                     
  1045                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
  1046  000B5C  0E30               	movlw	48
  1047  000B5E  ECD9  F006         	call	_ENVIA_NIBBLE
  1048  000B62                     
  1049                           ;LCD.c: 77:         _delay(24000);
  1050  000B62  0E20               	movlw	32
  1051  000B64  6E07               	movwf	??_LCD_CONFIG^0,c
  1052  000B66  0E2A               	movlw	42
  1053  000B68                     u507:
  1054  000B68  2EE8               	decfsz	wreg,f,c
  1055  000B6A  D7FE               	bra	u507
  1056  000B6C  2E07               	decfsz	??_LCD_CONFIG^0,f,c
  1057  000B6E  D7FC               	bra	u507
  1058  000B70                     
  1059                           ;LCD.c: 78:         _delay(24000);
  1060  000B70  0E20               	movlw	32
  1061  000B72  6E07               	movwf	??_LCD_CONFIG^0,c
  1062  000B74  0E2A               	movlw	42
  1063  000B76                     u517:
  1064  000B76  2EE8               	decfsz	wreg,f,c
  1065  000B78  D7FE               	bra	u517
  1066  000B7A  2E07               	decfsz	??_LCD_CONFIG^0,f,c
  1067  000B7C  D7FC               	bra	u517
  1068                           
  1069                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
  1070  000B7E  0E30               	movlw	48
  1071  000B80  ECD9  F006         	call	_ENVIA_NIBBLE
  1072  000B84                     
  1073                           ;LCD.c: 83:  _delay(1200);
  1074  000B84  0EF0               	movlw	240
  1075  000B86                     u527:
  1076  000B86  D000               	nop2	
  1077  000B88  2EE8               	decfsz	wreg,f,c
  1078  000B8A  D7FD               	bra	u527
  1079  000B8C                     
  1080                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
  1081  000B8C  0E30               	movlw	48
  1082  000B8E  ECD9  F006         	call	_ENVIA_NIBBLE
  1083  000B92                     
  1084                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
  1085  000B92  0E20               	movlw	32
  1086  000B94  ECD9  F006         	call	_ENVIA_NIBBLE
  1087  000B98                     
  1088                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
  1089  000B98  0E01               	movlw	1
  1090  000B9A  EC63  F006         	call	_ENVIA_LCD_CMD
  1091  000B9E                     
  1092                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
  1093  000B9E  0E28               	movlw	40
  1094  000BA0  EC63  F006         	call	_ENVIA_LCD_CMD
  1095  000BA4                     
  1096                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
  1097  000BA4  0E0F               	movlw	15
  1098  000BA6  EC63  F006         	call	_ENVIA_LCD_CMD
  1099  000BAA                     
  1100                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
  1101  000BAA  0E06               	movlw	6
  1102  000BAC  EC63  F006         	call	_ENVIA_LCD_CMD
  1103  000BB0                     
  1104                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1105  000BB0  0E01               	movlw	1
  1106  000BB2  EC63  F006         	call	_ENVIA_LCD_CMD
  1107  000BB6  0012               	return		;funcret
  1108  000BB8                     __end_of_LCD_CONFIG:
  1109                           	callstack 0
  1110                           
  1111 ;; *************** function _CURSOR_ONOFF *****************
  1112 ;; Defined at:
  1113 ;;		line 35 in file "LCD.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  estado          1    wreg     unsigned char 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  estado          1    6[COMRAM] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, status,2, status,0, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1127 ;;      Params:         0       0       0       0       0       0       0       0       0
  1128 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1130 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1131 ;;Total ram usage:        1 bytes
  1132 ;; Hardware stack levels used: 1
  1133 ;; Hardware stack levels required when called: 4
  1134 ;; This function calls:
  1135 ;;		_ENVIA_LCD_CMD
  1136 ;; This function is called by:
  1137 ;;		_arranca_LCD
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           	psect	text7
  1142  000D2E                     __ptext7:
  1143                           	callstack 0
  1144  000D2E                     _CURSOR_ONOFF:
  1145                           	callstack 25
  1146                           
  1147                           ;incstack = 0
  1148                           ;CURSOR_ONOFF@estado stored from wreg
  1149  000D2E  6E07               	movwf	CURSOR_ONOFF@estado^0,c
  1150  000D30                     
  1151                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1152  000D30  5007               	movf	CURSOR_ONOFF@estado^0,w,c
  1153  000D32  A4D8               	btfss	status,2,c
  1154  000D34  EF9E  F006         	goto	u21
  1155  000D38  EFA0  F006         	goto	u20
  1156  000D3C                     u21:
  1157  000D3C  EFA3  F006         	goto	l934
  1158  000D40                     u20:
  1159  000D40  0E0E               	movlw	14
  1160  000D42  EC63  F006         	call	_ENVIA_LCD_CMD
  1161  000D46                     l934:
  1162                           
  1163                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1164  000D46  0407               	decf	CURSOR_ONOFF@estado^0,w,c
  1165  000D48  A4D8               	btfss	status,2,c
  1166  000D4A  EFA9  F006         	goto	u31
  1167  000D4E  EFAB  F006         	goto	u30
  1168  000D52                     u31:
  1169  000D52  EFAE  F006         	goto	l42
  1170  000D56                     u30:
  1171  000D56  0E0C               	movlw	12
  1172  000D58  EC63  F006         	call	_ENVIA_LCD_CMD
  1173  000D5C                     l42:
  1174  000D5C  0012               	return		;funcret
  1175  000D5E                     __end_of_CURSOR_ONOFF:
  1176                           	callstack 0
  1177                           
  1178 ;; *************** function _CURSOR_HOME *****************
  1179 ;; Defined at:
  1180 ;;		line 30 in file "LCD.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;		None
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;		None
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1194 ;;      Params:         0       0       0       0       0       0       0       0       0
  1195 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1197 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1198 ;;Total ram usage:        0 bytes
  1199 ;; Hardware stack levels used: 1
  1200 ;; Hardware stack levels required when called: 4
  1201 ;; This function calls:
  1202 ;;		_ENVIA_LCD_CMD
  1203 ;; This function is called by:
  1204 ;;		_arranca_LCD
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text8
  1209  000DCE                     __ptext8:
  1210                           	callstack 0
  1211  000DCE                     _CURSOR_HOME:
  1212                           	callstack 25
  1213  000DCE                     
  1214                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1215  000DCE  0E02               	movlw	2
  1216  000DD0  EC63  F006         	call	_ENVIA_LCD_CMD
  1217  000DD4  0012               	return		;funcret
  1218  000DD6                     __end_of_CURSOR_HOME:
  1219                           	callstack 0
  1220                           
  1221 ;; *************** function _BORRAR_LCD *****************
  1222 ;; Defined at:
  1223 ;;		line 67 in file "LCD.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2, status,0, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1237 ;;      Params:         0       0       0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; Hardware stack levels required when called: 4
  1244 ;; This function calls:
  1245 ;;		_ENVIA_LCD_CMD
  1246 ;; This function is called by:
  1247 ;;		_arranca_LCD
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text9
  1252  000DD6                     __ptext9:
  1253                           	callstack 0
  1254  000DD6                     _BORRAR_LCD:
  1255                           	callstack 25
  1256  000DD6                     
  1257                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1258  000DD6  0E01               	movlw	1
  1259  000DD8  EC63  F006         	call	_ENVIA_LCD_CMD
  1260  000DDC  0012               	return		;funcret
  1261  000DDE                     __end_of_BORRAR_LCD:
  1262                           	callstack 0
  1263                           
  1264 ;; *************** function _POS_CURSOR *****************
  1265 ;; Defined at:
  1266 ;;		line 6 in file "LCD.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  fila            1    wreg     unsigned char 
  1269 ;;  columna         1    6[COMRAM] unsigned char 
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  fila            1    7[COMRAM] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1281 ;;      Params:         1       0       0       0       0       0       0       0       0
  1282 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1284 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1285 ;;Total ram usage:        2 bytes
  1286 ;; Hardware stack levels used: 1
  1287 ;; Hardware stack levels required when called: 4
  1288 ;; This function calls:
  1289 ;;		_ENVIA_LCD_CMD
  1290 ;; This function is called by:
  1291 ;;		_main
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text10
  1296  000C8C                     __ptext10:
  1297                           	callstack 0
  1298  000C8C                     _POS_CURSOR:
  1299                           	callstack 26
  1300                           
  1301                           ;incstack = 0
  1302                           ;POS_CURSOR@fila stored from wreg
  1303  000C8C  6E08               	movwf	POS_CURSOR@fila^0,c
  1304  000C8E                     
  1305                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1306  000C8E  0408               	decf	POS_CURSOR@fila^0,w,c
  1307  000C90  A4D8               	btfss	status,2,c
  1308  000C92  EF4D  F006         	goto	u451
  1309  000C96  EF4F  F006         	goto	u450
  1310  000C9A                     u451:
  1311  000C9A  EF55  F006         	goto	l1328
  1312  000C9E                     u450:
  1313  000C9E                     
  1314                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1315  000C9E  5007               	movf	POS_CURSOR@columna^0,w,c
  1316  000CA0  0F80               	addlw	128
  1317  000CA2  EC63  F006         	call	_ENVIA_LCD_CMD
  1318                           
  1319                           ;LCD.c: 11:  }
  1320  000CA6  EF62  F006         	goto	l24
  1321  000CAA                     l1328:
  1322  000CAA  0E02               	movlw	2
  1323  000CAC  1808               	xorwf	POS_CURSOR@fila^0,w,c
  1324  000CAE  A4D8               	btfss	status,2,c
  1325  000CB0  EF5C  F006         	goto	u461
  1326  000CB4  EF5E  F006         	goto	u460
  1327  000CB8                     u461:
  1328  000CB8  EF62  F006         	goto	l24
  1329  000CBC                     u460:
  1330  000CBC                     
  1331                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1332  000CBC  5007               	movf	POS_CURSOR@columna^0,w,c
  1333  000CBE  0FC0               	addlw	192
  1334  000CC0  EC63  F006         	call	_ENVIA_LCD_CMD
  1335  000CC4                     l24:
  1336  000CC4  0012               	return		;funcret
  1337  000CC6                     __end_of_POS_CURSOR:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _ENVIA_LCD_CMD *****************
  1341 ;; Defined at:
  1342 ;;		line 104 in file "LCD.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  dato            1    wreg     unsigned char 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  dato            1    4[COMRAM] unsigned char 
  1347 ;;  aux             1    5[COMRAM] unsigned char 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1357 ;;      Params:         0       0       0       0       0       0       0       0       0
  1358 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1360 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1361 ;;Total ram usage:        2 bytes
  1362 ;; Hardware stack levels used: 1
  1363 ;; Hardware stack levels required when called: 3
  1364 ;; This function calls:
  1365 ;;		_ENVIA_NIBBLE
  1366 ;;		_LEER_LCD
  1367 ;; This function is called by:
  1368 ;;		_POS_CURSOR
  1369 ;;		_CURSOR_HOME
  1370 ;;		_CURSOR_ONOFF
  1371 ;;		_BORRAR_LCD
  1372 ;;		_LCD_CONFIG
  1373 ;;		_BLINK_CURSOR
  1374 ;;		_DISPLAY_ONOFF
  1375 ;;		_GENERACARACTER
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text11
  1380  000CC6                     __ptext11:
  1381                           	callstack 0
  1382  000CC6                     _ENVIA_LCD_CMD:
  1383                           	callstack 25
  1384                           
  1385                           ;incstack = 0
  1386                           ;ENVIA_LCD_CMD@dato stored from wreg
  1387  000CC6  6E05               	movwf	ENVIA_LCD_CMD@dato^0,c
  1388  000CC8                     
  1389                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1390  000CC8  908C               	bcf	140,0,c	;volatile
  1391  000CCA                     
  1392                           ;LCD.c: 108:  LEER_LCD();
  1393  000CCA  EC73  F005         	call	_LEER_LCD	;wreg free
  1394  000CCE                     
  1395                           ;LCD.c: 109:  TRISD = 0b00000000;
  1396  000CCE  0E00               	movlw	0
  1397  000CD0  6E95               	movwf	149,c	;volatile
  1398  000CD2                     
  1399                           ;LCD.c: 111:         _delay(1200);
  1400  000CD2  0EF0               	movlw	240
  1401  000CD4                     u537:
  1402  000CD4  D000               	nop2	
  1403  000CD6  2EE8               	decfsz	wreg,f,c
  1404  000CD8  D7FD               	bra	u537
  1405  000CDA                     
  1406                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1407  000CDA  928C               	bcf	140,1,c	;volatile
  1408  000CDC                     
  1409                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1410  000CDC  948C               	bcf	140,2,c	;volatile
  1411  000CDE                     
  1412                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1413  000CDE  908C               	bcf	140,0,c	;volatile
  1414  000CE0                     
  1415                           ;LCD.c: 115:  aux = dato & 0xF0;
  1416  000CE0  5005               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1417  000CE2  0BF0               	andlw	240
  1418  000CE4  6E06               	movwf	ENVIA_LCD_CMD@aux^0,c
  1419  000CE6                     
  1420                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1421  000CE6  5006               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1422  000CE8  ECD9  F006         	call	_ENVIA_NIBBLE
  1423  000CEC                     
  1424                           ;LCD.c: 117:  aux = dato<<4;
  1425  000CEC  3805               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1426  000CEE  0BF0               	andlw	240
  1427  000CF0  6E06               	movwf	ENVIA_LCD_CMD@aux^0,c
  1428  000CF2                     
  1429                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1430  000CF2  5006               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1431  000CF4  ECD9  F006         	call	_ENVIA_NIBBLE
  1432  000CF8  0012               	return		;funcret
  1433  000CFA                     __end_of_ENVIA_LCD_CMD:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _ESCRIBE_MENSAJE *****************
  1437 ;; Defined at:
  1438 ;;		line 41 in file "LCD.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  cadena          2    6[COMRAM] PTR const unsigned char 
  1441 ;;		 -> STR_4(3), STR_3(3), STR_2(3), STR_1(16), 
  1442 ;;  tam             1    8[COMRAM] unsigned char 
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;  i               1   11[COMRAM] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1454 ;;      Params:         3       0       0       0       0       0       0       0       0
  1455 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1456 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1457 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1458 ;;Total ram usage:        6 bytes
  1459 ;; Hardware stack levels used: 1
  1460 ;; Hardware stack levels required when called: 4
  1461 ;; This function calls:
  1462 ;;		_ENVIA_CHAR
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text12
  1469  000C12                     __ptext12:
  1470                           	callstack 0
  1471  000C12                     _ESCRIBE_MENSAJE:
  1472                           	callstack 26
  1473  000C12                     
  1474                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1475  000C12  0E00               	movlw	0
  1476  000C14  6E0C               	movwf	ESCRIBE_MENSAJE@i^0,c
  1477                           
  1478                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1479  000C16  0E00               	movlw	0
  1480  000C18  6E0C               	movwf	ESCRIBE_MENSAJE@i^0,c
  1481  000C1A  EF1E  F006         	goto	l1338
  1482  000C1E                     l1334:
  1483                           
  1484                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1485  000C1E  500C               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1486  000C20  2407               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1487  000C22  6E0A               	movwf	??_ESCRIBE_MENSAJE^0,c
  1488  000C24  0E00               	movlw	0
  1489  000C26  2008               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1490  000C28  6E0B               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1491  000C2A  C00A  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1492  000C2E  C00B  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1493  000C32                     	if	0	;tblptru may be non-zero
  1494  000C32                     	endif
  1495  000C32                     	if	0	;tblptru may be non-zero
  1496  000C32                     	endif
  1497  000C32  0008               	tblrd		*
  1498  000C34  50F5               	movf	tablat,w,c
  1499  000C36  EC7D  F006         	call	_ENVIA_CHAR
  1500  000C3A                     
  1501                           ;LCD.c: 47:  }
  1502  000C3A  2A0C               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1503  000C3C                     l1338:
  1504  000C3C  5009               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1505  000C3E  5C0C               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1506  000C40  A0D8               	btfss	status,0,c
  1507  000C42  EF25  F006         	goto	u471
  1508  000C46  EF27  F006         	goto	u470
  1509  000C4A                     u471:
  1510  000C4A  EF0F  F006         	goto	l1334
  1511  000C4E                     u470:
  1512  000C4E  0012               	return		;funcret
  1513  000C50                     __end_of_ESCRIBE_MENSAJE:
  1514                           	callstack 0
  1515                           
  1516 ;; *************** function _ENVIA_CHAR *****************
  1517 ;; Defined at:
  1518 ;;		line 50 in file "LCD.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;  dato            1    wreg     unsigned char 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  dato            1    4[COMRAM] unsigned char 
  1523 ;;  aux             1    5[COMRAM] unsigned char 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1533 ;;      Params:         0       0       0       0       0       0       0       0       0
  1534 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1536 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1537 ;;Total ram usage:        2 bytes
  1538 ;; Hardware stack levels used: 1
  1539 ;; Hardware stack levels required when called: 3
  1540 ;; This function calls:
  1541 ;;		_ENVIA_NIBBLE
  1542 ;;		_LEER_LCD
  1543 ;; This function is called by:
  1544 ;;		_ESCRIBE_MENSAJE
  1545 ;;		_main
  1546 ;;		_GENERACARACTER
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text13
  1551  000CFA                     __ptext13:
  1552                           	callstack 0
  1553  000CFA                     _ENVIA_CHAR:
  1554                           	callstack 26
  1555                           
  1556                           ;incstack = 0
  1557                           ;ENVIA_CHAR@dato stored from wreg
  1558  000CFA  6E05               	movwf	ENVIA_CHAR@dato^0,c
  1559  000CFC                     
  1560                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1561  000CFC  808C               	bsf	140,0,c	;volatile
  1562  000CFE                     
  1563                           ;LCD.c: 54:  LEER_LCD();
  1564  000CFE  EC73  F005         	call	_LEER_LCD	;wreg free
  1565  000D02                     
  1566                           ;LCD.c: 55:  TRISD = 0x00;
  1567  000D02  0E00               	movlw	0
  1568  000D04  6E95               	movwf	149,c	;volatile
  1569  000D06                     
  1570                           ;LCD.c: 56:         _delay(1200);
  1571  000D06  0EF0               	movlw	240
  1572  000D08                     u547:
  1573  000D08  D000               	nop2	
  1574  000D0A  2EE8               	decfsz	wreg,f,c
  1575  000D0C  D7FD               	bra	u547
  1576  000D0E                     
  1577                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1578  000D0E  928C               	bcf	140,1,c	;volatile
  1579  000D10                     
  1580                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1581  000D10  948C               	bcf	140,2,c	;volatile
  1582  000D12                     
  1583                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1584  000D12  808C               	bsf	140,0,c	;volatile
  1585  000D14                     
  1586                           ;LCD.c: 61:  aux = dato & 0xF0;
  1587  000D14  5005               	movf	ENVIA_CHAR@dato^0,w,c
  1588  000D16  0BF0               	andlw	240
  1589  000D18  6E06               	movwf	ENVIA_CHAR@aux^0,c
  1590  000D1A                     
  1591                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1592  000D1A  5006               	movf	ENVIA_CHAR@aux^0,w,c
  1593  000D1C  ECD9  F006         	call	_ENVIA_NIBBLE
  1594  000D20                     
  1595                           ;LCD.c: 63:  aux = dato << 4;
  1596  000D20  3805               	swapf	ENVIA_CHAR@dato^0,w,c
  1597  000D22  0BF0               	andlw	240
  1598  000D24  6E06               	movwf	ENVIA_CHAR@aux^0,c
  1599  000D26                     
  1600                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1601  000D26  5006               	movf	ENVIA_CHAR@aux^0,w,c
  1602  000D28  ECD9  F006         	call	_ENVIA_NIBBLE
  1603  000D2C  0012               	return		;funcret
  1604  000D2E                     __end_of_ENVIA_CHAR:
  1605                           	callstack 0
  1606                           
  1607 ;; *************** function _LEER_LCD *****************
  1608 ;; Defined at:
  1609 ;;		line 121 in file "LCD.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  aux             1    3[COMRAM] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1623 ;;      Params:         0       0       0       0       0       0       0       0       0
  1624 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1626 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1627 ;;Total ram usage:        1 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; Hardware stack levels required when called: 2
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_ENVIA_CHAR
  1634 ;;		_ENVIA_LCD_CMD
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text14
  1639  000AE6                     __ptext14:
  1640                           	callstack 0
  1641  000AE6                     _LEER_LCD:
  1642                           	callstack 25
  1643  000AE6                     
  1644                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1645  000AE6  0EF8               	movlw	248
  1646  000AE8  6E95               	movwf	149,c	;volatile
  1647  000AEA                     
  1648                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1649  000AEA  908C               	bcf	140,0,c	;volatile
  1650  000AEC                     
  1651                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1652  000AEC  828C               	bsf	140,1,c	;volatile
  1653  000AEE                     
  1654                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1655  000AEE  848C               	bsf	140,2,c	;volatile
  1656  000AF0                     
  1657                           ;LCD.c: 128:         _delay(1200);
  1658  000AF0  0EF0               	movlw	240
  1659  000AF2                     u557:
  1660  000AF2  D000               	nop2	
  1661  000AF4  2EE8               	decfsz	wreg,f,c
  1662  000AF6  D7FD               	bra	u557
  1663  000AF8                     
  1664                           ;LCD.c: 130:  aux = PORTD;
  1665  000AF8  CF83 F004          	movff	3971,LEER_LCD@aux	;volatile
  1666  000AFC                     
  1667                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1668  000AFC  948C               	bcf	140,2,c	;volatile
  1669  000AFE                     
  1670                           ;LCD.c: 132:         _delay(1200);
  1671  000AFE  0EF0               	movlw	240
  1672  000B00                     u567:
  1673  000B00  D000               	nop2	
  1674  000B02  2EE8               	decfsz	wreg,f,c
  1675  000B04  D7FD               	bra	u567
  1676  000B06                     
  1677                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1678  000B06  848C               	bsf	140,2,c	;volatile
  1679  000B08                     
  1680                           ;LCD.c: 135:         _delay(1200);
  1681  000B08  0EF0               	movlw	240
  1682  000B0A                     u577:
  1683  000B0A  D000               	nop2	
  1684  000B0C  2EE8               	decfsz	wreg,f,c
  1685  000B0E  D7FD               	bra	u577
  1686  000B10                     
  1687                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1688  000B10  948C               	bcf	140,2,c	;volatile
  1689  000B12                     l882:
  1690                           
  1691                           ;LCD.c: 138:  aux = aux & 0x80;
  1692  000B12  5004               	movf	LEER_LCD@aux^0,w,c
  1693  000B14  0B80               	andlw	128
  1694  000B16  6E04               	movwf	LEER_LCD@aux^0,c
  1695                           
  1696                           ;LCD.c: 139:  while(aux == 0x80)
  1697  000B18  EFA2  F005         	goto	l896
  1698  000B1C                     l67:
  1699                           
  1700                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1701  000B1C  848C               	bsf	140,2,c	;volatile
  1702  000B1E                     
  1703                           ;LCD.c: 142:             _delay(1200);
  1704  000B1E  0EF0               	movlw	240
  1705  000B20                     u587:
  1706  000B20  D000               	nop2	
  1707  000B22  2EE8               	decfsz	wreg,f,c
  1708  000B24  D7FD               	bra	u587
  1709  000B26                     
  1710                           ;LCD.c: 143:             aux = PORTD;
  1711  000B26  CF83 F004          	movff	3971,LEER_LCD@aux	;volatile
  1712  000B2A                     
  1713                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1714  000B2A  948C               	bcf	140,2,c	;volatile
  1715                           
  1716                           ;LCD.c: 145:             _delay(1200);
  1717  000B2C  0EF0               	movlw	240
  1718  000B2E                     u597:
  1719  000B2E  D000               	nop2	
  1720  000B30  2EE8               	decfsz	wreg,f,c
  1721  000B32  D7FD               	bra	u597
  1722  000B34                     
  1723                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1724  000B34  848C               	bsf	140,2,c	;volatile
  1725                           
  1726                           ;LCD.c: 147:             _delay(1200);
  1727  000B36  0EF0               	movlw	240
  1728  000B38                     u607:
  1729  000B38  D000               	nop2	
  1730  000B3A  2EE8               	decfsz	wreg,f,c
  1731  000B3C  D7FD               	bra	u607
  1732  000B3E                     
  1733                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1734  000B3E  948C               	bcf	140,2,c	;volatile
  1735  000B40  EF89  F005         	goto	l882
  1736  000B44                     l896:
  1737                           
  1738                           ;LCD.c: 139:  while(aux == 0x80)
  1739  000B44  0E80               	movlw	128
  1740  000B46  1804               	xorwf	LEER_LCD@aux^0,w,c
  1741  000B48  B4D8               	btfsc	status,2,c
  1742  000B4A  EFA9  F005         	goto	u11
  1743  000B4E  EFAB  F005         	goto	u10
  1744  000B52                     u11:
  1745  000B52  EF8E  F005         	goto	l67
  1746  000B56                     u10:
  1747  000B56  0012               	return		;funcret
  1748  000B58                     __end_of_LEER_LCD:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function _ENVIA_NIBBLE *****************
  1752 ;; Defined at:
  1753 ;;		line 93 in file "LCD.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  dato            1    wreg     unsigned char 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  dato            1    3[COMRAM] unsigned char 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1767 ;;      Params:         0       0       0       0       0       0       0       0       0
  1768 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1770 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1771 ;;Total ram usage:        1 bytes
  1772 ;; Hardware stack levels used: 1
  1773 ;; Hardware stack levels required when called: 2
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_ENVIA_CHAR
  1778 ;;		_LCD_CONFIG
  1779 ;;		_ENVIA_LCD_CMD
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text15
  1784  000DB2                     __ptext15:
  1785                           	callstack 0
  1786  000DB2                     _ENVIA_NIBBLE:
  1787                           	callstack 26
  1788                           
  1789                           ;incstack = 0
  1790                           ;ENVIA_NIBBLE@dato stored from wreg
  1791  000DB2  6E04               	movwf	ENVIA_NIBBLE@dato^0,c
  1792  000DB4                     
  1793                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1794  000DB4  0E0F               	movlw	15
  1795  000DB6  168C               	andwf	140,f,c	;volatile
  1796                           
  1797                           ;LCD.c: 96:  dato &= 0xF0;
  1798  000DB8  0EF0               	movlw	240
  1799  000DBA  1604               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1800                           
  1801                           ;LCD.c: 97:  LATD|= dato;
  1802  000DBC  5004               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1803  000DBE  128C               	iorwf	140,f,c	;volatile
  1804  000DC0                     
  1805                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1806  000DC0  848C               	bsf	140,2,c	;volatile
  1807  000DC2                     
  1808                           ;LCD.c: 100:         _delay(1200);
  1809  000DC2  0EF0               	movlw	240
  1810  000DC4                     u617:
  1811  000DC4  D000               	nop2	
  1812  000DC6  2EE8               	decfsz	wreg,f,c
  1813  000DC8  D7FD               	bra	u617
  1814  000DCA                     
  1815                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1816  000DCA  948C               	bcf	140,2,c	;volatile
  1817  000DCC  0012               	return		;funcret
  1818  000DCE                     __end_of_ENVIA_NIBBLE:
  1819                           	callstack 0
  1820                           
  1821 ;; *************** function _INTs_ISR *****************
  1822 ;; Defined at:
  1823 ;;		line 116 in file "maincode3.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, status,2, status,0
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1837 ;;      Params:         0       0       0       0       0       0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1839 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1840 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1841 ;;Total ram usage:        3 bytes
  1842 ;; Hardware stack levels used: 1
  1843 ;; Hardware stack levels required when called: 1
  1844 ;; This function calls:
  1845 ;;		Nothing
  1846 ;; This function is called by:
  1847 ;;		Interrupt level 1
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	intcodelo
  1852  000018                     __pintcodelo:
  1853                           	callstack 0
  1854  000018                     _INTs_ISR:
  1855                           	callstack 25
  1856                           
  1857                           ;incstack = 0
  1858  000018  801C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1859  00001A  CFD8 F001          	movff	status,??_INTs_ISR
  1860  00001E  CFE8 F002          	movff	wreg,??_INTs_ISR+1
  1861  000022  CFE0 F003          	movff	bsr,??_INTs_ISR+2
  1862  000026                     
  1863                           ;maincode3.c: 117:     if(INTCON3bits.INT1IF == 1){
  1864  000026  A0F0               	btfss	240,0,c	;volatile
  1865  000028  EF18  F000         	goto	i1u29_21
  1866  00002C  EF1A  F000         	goto	i1u29_20
  1867  000030                     i1u29_21:
  1868  000030  EF29  F000         	goto	i1l1234
  1869  000034                     i1u29_20:
  1870  000034                     
  1871                           ;maincode3.c: 118:         INTCON3bits.INT1IF = 0;
  1872  000034  90F0               	bcf	240,0,c	;volatile
  1873  000036                     
  1874                           ;maincode3.c: 119:         if(horas == 12){
  1875  000036  0E0C               	movlw	12
  1876  000038  181B               	xorwf	_horas^0,w,c
  1877  00003A  A4D8               	btfss	status,2,c
  1878  00003C  EF22  F000         	goto	i1u30_21
  1879  000040  EF24  F000         	goto	i1u30_20
  1880  000044                     i1u30_21:
  1881  000044  EF28  F000         	goto	i1l1232
  1882  000048                     i1u30_20:
  1883  000048                     
  1884                           ;maincode3.c: 120:             horas = 1;
  1885  000048  0E01               	movlw	1
  1886  00004A  6E1B               	movwf	_horas^0,c
  1887                           
  1888                           ;maincode3.c: 121:         }
  1889  00004C  EF29  F000         	goto	i1l1234
  1890  000050                     i1l1232:
  1891                           
  1892                           ;maincode3.c: 123:             horas++;
  1893  000050  2A1B               	incf	_horas^0,f,c
  1894  000052                     i1l1234:
  1895                           
  1896                           ;maincode3.c: 127:     if(INTCON3bits.INT2IF == 1){
  1897  000052  A2F0               	btfss	240,1,c	;volatile
  1898  000054  EF2E  F000         	goto	i1u31_21
  1899  000058  EF30  F000         	goto	i1u31_20
  1900  00005C                     i1u31_21:
  1901  00005C  EF3F  F000         	goto	i1l184
  1902  000060                     i1u31_20:
  1903  000060                     
  1904                           ;maincode3.c: 128:         INTCON3bits.INT2IF = 0;
  1905  000060  92F0               	bcf	240,1,c	;volatile
  1906  000062                     
  1907                           ;maincode3.c: 129:         if(minutos == 59){
  1908  000062  0E3B               	movlw	59
  1909  000064  181A               	xorwf	_minutos^0,w,c
  1910  000066  A4D8               	btfss	status,2,c
  1911  000068  EF38  F000         	goto	i1u32_21
  1912  00006C  EF3A  F000         	goto	i1u32_20
  1913  000070                     i1u32_21:
  1914  000070  EF3E  F000         	goto	i1l1242
  1915  000074                     i1u32_20:
  1916  000074                     
  1917                           ;maincode3.c: 130:             minutos = 0;
  1918  000074  0E00               	movlw	0
  1919  000076  6E1A               	movwf	_minutos^0,c
  1920                           
  1921                           ;maincode3.c: 131:         }
  1922  000078  EF3F  F000         	goto	i1l184
  1923  00007C                     i1l1242:
  1924                           
  1925                           ;maincode3.c: 133:             minutos++;
  1926  00007C  2A1A               	incf	_minutos^0,f,c
  1927  00007E                     i1l184:
  1928  00007E  C003  FFE0         	movff	??_INTs_ISR+2,bsr
  1929  000082  C002  FFE8         	movff	??_INTs_ISR+1,wreg
  1930  000086  C001  FFD8         	movff	??_INTs_ISR,status
  1931  00008A  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1932  00008C  0010               	retfie	
  1933  00008E                     __end_of_INTs_ISR:
  1934                           	callstack 0
  1935                           
  1936 ;; *************** function _CCP1_ISR *****************
  1937 ;; Defined at:
  1938 ;;		line 87 in file "maincode3.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1952 ;;      Params:         0       0       0       0       0       0       0       0       0
  1953 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1954 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1955 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used: 1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		Interrupt level 2
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	intcode
  1966  000008                     __pintcode:
  1967                           	callstack 0
  1968  000008                     _CCP1_ISR:
  1969                           	callstack 25
  1970                           
  1971                           ;incstack = 0
  1972  000008  821C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1973  00000A  ED37  F005         	call	int_func,f	;refresh shadow registers
  1974                           
  1975                           	psect	intcode_body
  1976  000A6E                     __pintcode_body:
  1977                           	callstack 25
  1978  000A6E                     int_func:
  1979                           	callstack 25
  1980  000A6E  0006               	pop		; remove dummy address from shadow register refresh
  1981  000A70                     
  1982                           ;maincode3.c: 88:     PIR1bits.CCP1IF = 0;
  1983  000A70  949E               	bcf	158,2,c	;volatile
  1984  000A72                     
  1985                           ;maincode3.c: 89:     if(ticks == 15){
  1986  000A72  0E0F               	movlw	15
  1987  000A74  1814               	xorwf	_ticks^0,w,c
  1988  000A76  A4D8               	btfss	status,2,c
  1989  000A78  EF40  F005         	goto	i2u25_41
  1990  000A7C  EF42  F005         	goto	i2u25_40
  1991  000A80                     i2u25_41:
  1992  000A80  EF70  F005         	goto	i2l1222
  1993  000A84                     i2u25_40:
  1994  000A84                     
  1995                           ;maincode3.c: 90:         ticks = 0;
  1996  000A84  0E00               	movlw	0
  1997  000A86  6E14               	movwf	_ticks^0,c
  1998  000A88                     
  1999                           ;maincode3.c: 91:         if(segundos == 59){
  2000  000A88  0E3B               	movlw	59
  2001  000A8A  1819               	xorwf	_segundos^0,w,c
  2002  000A8C  A4D8               	btfss	status,2,c
  2003  000A8E  EF4B  F005         	goto	i2u26_41
  2004  000A92  EF4D  F005         	goto	i2u26_40
  2005  000A96                     i2u26_41:
  2006  000A96  EF6D  F005         	goto	i2l1220
  2007  000A9A                     i2u26_40:
  2008  000A9A                     
  2009                           ;maincode3.c: 92:             segundos = 0;
  2010  000A9A  0E00               	movlw	0
  2011  000A9C  6E19               	movwf	_segundos^0,c
  2012  000A9E                     
  2013                           ;maincode3.c: 93:             if(minutos == 59){
  2014  000A9E  0E3B               	movlw	59
  2015  000AA0  181A               	xorwf	_minutos^0,w,c
  2016  000AA2  A4D8               	btfss	status,2,c
  2017  000AA4  EF56  F005         	goto	i2u27_41
  2018  000AA8  EF58  F005         	goto	i2u27_40
  2019  000AAC                     i2u27_41:
  2020  000AAC  EF6A  F005         	goto	i2l1218
  2021  000AB0                     i2u27_40:
  2022  000AB0                     
  2023                           ;maincode3.c: 94:                 minutos = 0;
  2024  000AB0  0E00               	movlw	0
  2025  000AB2  6E1A               	movwf	_minutos^0,c
  2026  000AB4                     
  2027                           ;maincode3.c: 95:                 if(horas == 12){
  2028  000AB4  0E0C               	movlw	12
  2029  000AB6  181B               	xorwf	_horas^0,w,c
  2030  000AB8  A4D8               	btfss	status,2,c
  2031  000ABA  EF61  F005         	goto	i2u28_41
  2032  000ABE  EF63  F005         	goto	i2u28_40
  2033  000AC2                     i2u28_41:
  2034  000AC2  EF67  F005         	goto	i2l1216
  2035  000AC6                     i2u28_40:
  2036  000AC6                     
  2037                           ;maincode3.c: 96:                     horas = 1;
  2038  000AC6  0E01               	movlw	1
  2039  000AC8  6E1B               	movwf	_horas^0,c
  2040                           
  2041                           ;maincode3.c: 97:                 }
  2042  000ACA  EF71  F005         	goto	i2l173
  2043  000ACE                     i2l1216:
  2044                           
  2045                           ;maincode3.c: 99:                     horas++;
  2046  000ACE  2A1B               	incf	_horas^0,f,c
  2047  000AD0  EF71  F005         	goto	i2l173
  2048  000AD4                     i2l1218:
  2049                           
  2050                           ;maincode3.c: 104:                 minutos++;
  2051  000AD4  2A1A               	incf	_minutos^0,f,c
  2052  000AD6  EF71  F005         	goto	i2l173
  2053  000ADA                     i2l1220:
  2054                           
  2055                           ;maincode3.c: 108:             segundos++;
  2056  000ADA  2A19               	incf	_segundos^0,f,c
  2057  000ADC  EF71  F005         	goto	i2l173
  2058  000AE0                     i2l1222:
  2059                           
  2060                           ;maincode3.c: 112:         ticks++;
  2061  000AE0  2A14               	incf	_ticks^0,f,c
  2062  000AE2                     i2l173:
  2063  000AE2  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2064  000AE4  0011               	retfie		f
  2065  000AE6                     __end_of_CCP1_ISR:
  2066                           	callstack 0
  2067                           
  2068                           	psect	rparam
  2069  0000                     
  2070                           	psect	temp
  2071  00001C                     btemp:
  2072                           	callstack 0
  2073  00001C                     	ds	1
  2074  0000                     int$flags	set	btemp
  2075  0000                     wtemp8	set	btemp+1
  2076  0000                     ttemp5	set	btemp+1
  2077  0000                     ttemp6	set	btemp+4
  2078  0000                     ttemp7	set	btemp+8
  2079                           
  2080                           	psect	idloc
  2081                           
  2082                           ;Config register IDLOC0 @ 0x200000
  2083                           ;	unspecified, using default values
  2084  200000                     	org	2097152
  2085  200000  FF                 	db	255
  2086                           
  2087                           ;Config register IDLOC1 @ 0x200001
  2088                           ;	unspecified, using default values
  2089  200001                     	org	2097153
  2090  200001  FF                 	db	255
  2091                           
  2092                           ;Config register IDLOC2 @ 0x200002
  2093                           ;	unspecified, using default values
  2094  200002                     	org	2097154
  2095  200002  FF                 	db	255
  2096                           
  2097                           ;Config register IDLOC3 @ 0x200003
  2098                           ;	unspecified, using default values
  2099  200003                     	org	2097155
  2100  200003  FF                 	db	255
  2101                           
  2102                           ;Config register IDLOC4 @ 0x200004
  2103                           ;	unspecified, using default values
  2104  200004                     	org	2097156
  2105  200004  FF                 	db	255
  2106                           
  2107                           ;Config register IDLOC5 @ 0x200005
  2108                           ;	unspecified, using default values
  2109  200005                     	org	2097157
  2110  200005  FF                 	db	255
  2111                           
  2112                           ;Config register IDLOC6 @ 0x200006
  2113                           ;	unspecified, using default values
  2114  200006                     	org	2097158
  2115  200006  FF                 	db	255
  2116                           
  2117                           ;Config register IDLOC7 @ 0x200007
  2118                           ;	unspecified, using default values
  2119  200007                     	org	2097159
  2120  200007  FF                 	db	255
  2121                           
  2122                           	psect	config
  2123                           
  2124                           ;Config register CONFIG1L @ 0x300000
  2125                           ;	PLL Prescaler Selection bits
  2126                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  2127                           ;	System Clock Postscaler Selection bits
  2128                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  2129                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2130                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  2131  300000                     	org	3145728
  2132  300000  08                 	db	8
  2133                           
  2134                           ;Config register CONFIG1H @ 0x300001
  2135                           ;	Oscillator Selection bits
  2136                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  2137                           ;	Fail-Safe Clock Monitor Enable bit
  2138                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2139                           ;	Internal/External Oscillator Switchover bit
  2140                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2141  300001                     	org	3145729
  2142  300001  02                 	db	2
  2143                           
  2144                           ;Config register CONFIG2L @ 0x300002
  2145                           ;	Power-up Timer Enable bit
  2146                           ;	PWRT = ON, PWRT enabled
  2147                           ;	Brown-out Reset Enable bits
  2148                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  2149                           ;	Brown-out Reset Voltage bits
  2150                           ;	BORV = 3, Minimum setting 2.05V
  2151                           ;	USB Voltage Regulator Enable bit
  2152                           ;	VREGEN = OFF, USB voltage regulator disabled
  2153  300002                     	org	3145730
  2154  300002  18                 	db	24
  2155                           
  2156                           ;Config register CONFIG2H @ 0x300003
  2157                           ;	Watchdog Timer Enable bit
  2158                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2159                           ;	Watchdog Timer Postscale Select bits
  2160                           ;	WDTPS = 32768, 1:32768
  2161  300003                     	org	3145731
  2162  300003  1E                 	db	30
  2163                           
  2164                           ; Padding undefined space
  2165  300004                     	org	3145732
  2166  300004  FF                 	db	255
  2167                           
  2168                           ;Config register CONFIG3H @ 0x300005
  2169                           ;	CCP2 MUX bit
  2170                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  2171                           ;	PORTB A/D Enable bit
  2172                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2173                           ;	Low-Power Timer 1 Oscillator Enable bit
  2174                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2175                           ;	MCLR Pin Enable bit
  2176                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2177  300005                     	org	3145733
  2178  300005  81                 	db	129
  2179                           
  2180                           ;Config register CONFIG4L @ 0x300006
  2181                           ;	Stack Full/Underflow Reset Enable bit
  2182                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2183                           ;	Single-Supply ICSP Enable bit
  2184                           ;	LVP = OFF, Single-Supply ICSP disabled
  2185                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2186                           ;	ICPRT = OFF, ICPORT disabled
  2187                           ;	Extended Instruction Set Enable bit
  2188                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2189                           ;	Background Debugger Enable bit
  2190                           ;	DEBUG = 0x1, unprogrammed default
  2191  300006                     	org	3145734
  2192  300006  81                 	db	129
  2193                           
  2194                           ; Padding undefined space
  2195  300007                     	org	3145735
  2196  300007  FF                 	db	255
  2197                           
  2198                           ;Config register CONFIG5L @ 0x300008
  2199                           ;	Code Protection bit
  2200                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  2201                           ;	Code Protection bit
  2202                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  2203                           ;	Code Protection bit
  2204                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  2205                           ;	Code Protection bit
  2206                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  2207  300008                     	org	3145736
  2208  300008  0F                 	db	15
  2209                           
  2210                           ;Config register CONFIG5H @ 0x300009
  2211                           ;	Boot Block Code Protection bit
  2212                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  2213                           ;	Data EEPROM Code Protection bit
  2214                           ;	CPD = OFF, Data EEPROM is not code-protected
  2215  300009                     	org	3145737
  2216  300009  C0                 	db	192
  2217                           
  2218                           ;Config register CONFIG6L @ 0x30000A
  2219                           ;	Write Protection bit
  2220                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  2221                           ;	Write Protection bit
  2222                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  2223                           ;	Write Protection bit
  2224                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  2225                           ;	Write Protection bit
  2226                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  2227  30000A                     	org	3145738
  2228  30000A  0F                 	db	15
  2229                           
  2230                           ;Config register CONFIG6H @ 0x30000B
  2231                           ;	Configuration Register Write Protection bit
  2232                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2233                           ;	Boot Block Write Protection bit
  2234                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2235                           ;	Data EEPROM Write Protection bit
  2236                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2237  30000B                     	org	3145739
  2238  30000B  E0                 	db	224
  2239                           
  2240                           ;Config register CONFIG7L @ 0x30000C
  2241                           ;	Table Read Protection bit
  2242                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2243                           ;	Table Read Protection bit
  2244                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2245                           ;	Table Read Protection bit
  2246                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2247                           ;	Table Read Protection bit
  2248                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2249  30000C                     	org	3145740
  2250  30000C  0F                 	db	15
  2251                           
  2252                           ;Config register CONFIG7H @ 0x30000D
  2253                           ;	Boot Block Table Read Protection bit
  2254                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2255  30000D                     	org	3145741
  2256  30000D  40                 	db	64
  2257                           tosu	equ	0xFFF
  2258                           tosh	equ	0xFFE
  2259                           tosl	equ	0xFFD
  2260                           stkptr	equ	0xFFC
  2261                           pclatu	equ	0xFFB
  2262                           pclath	equ	0xFFA
  2263                           pcl	equ	0xFF9
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           prodh	equ	0xFF4
  2269                           prodl	equ	0xFF3
  2270                           indf0	equ	0xFEF
  2271                           postinc0	equ	0xFEE
  2272                           postdec0	equ	0xFED
  2273                           preinc0	equ	0xFEC
  2274                           plusw0	equ	0xFEB
  2275                           fsr0h	equ	0xFEA
  2276                           fsr0l	equ	0xFE9
  2277                           wreg	equ	0xFE8
  2278                           indf1	equ	0xFE7
  2279                           postinc1	equ	0xFE6
  2280                           postdec1	equ	0xFE5
  2281                           preinc1	equ	0xFE4
  2282                           plusw1	equ	0xFE3
  2283                           fsr1h	equ	0xFE2
  2284                           fsr1l	equ	0xFE1
  2285                           bsr	equ	0xFE0
  2286                           indf2	equ	0xFDF
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           preinc2	equ	0xFDC
  2290                           plusw2	equ	0xFDB
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8

Data Sizes:
    Strings     25
    Constant    0
    Data        3
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      27
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_convierte_digitos
    _convierte_digitos->___awdiv
    ___awdiv->___awmod
    _arranca_LCD->_CURSOR_ONOFF
    _arranca_LCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _INTs_ISR in COMRAM

    None.

Critical Paths under _CCP1_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTs_ISR in BANK0

    None.

Critical Paths under _CCP1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTs_ISR in BANK1

    None.

Critical Paths under _CCP1_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTs_ISR in BANK2

    None.

Critical Paths under _CCP1_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTs_ISR in BANK3

    None.

Critical Paths under _CCP1_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTs_ISR in BANK4

    None.

Critical Paths under _CCP1_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTs_ISR in BANK5

    None.

Critical Paths under _CCP1_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTs_ISR in BANK6

    None.

Critical Paths under _CCP1_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTs_ISR in BANK7

    None.

Critical Paths under _CCP1_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3094
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                        _arranca_LCD
                          _configuro
                  _convierte_digitos
 ---------------------------------------------------------------------------------
 (1) _convierte_digitos                                    1     1      0    1270
                                             17 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              9 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _arranca_LCD                                          1     1      0     525
                                              7 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              6 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              6 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              6 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              4 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     819
                                              6 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              4 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTs_ISR                                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _CCP1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arranca_LCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
   _configuro
   _convierte_digitos
     ___awdiv
       ___awmod (ARG)
     ___awmod

 _INTs_ISR (ROOT)

 _CCP1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      32        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      1B       1       28.7%
BITBIGSFRll         23      0       0      30        0.0%
BITBIGSFRhhhhhl     1F      0       0      22        0.0%
BITBIGSFRhhllh      1E      0       0      26        0.0%
BITBIGSFRhhhhhh      D      0       0      20        0.0%
BITBIGSFRhhhlh       8      0       0      24        0.0%
BITBIGSFRlh          8      0       0      29        0.0%
BITBIGSFRhl          8      0       0      28        0.0%
BITBIGSFRhhlll       7      0       0      27        0.0%
BITBIGSFRhhhhl       2      0       0      23        0.0%
BITBIGSFRhhhhhl      1      0       0      21        0.0%
BITBIGSFRhhhll       1      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1B      31        0.0%
DATA                 0      0      1B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Oct 19 21:30:15 2022

                       l24 0CC4                         l42 0D5C                         l51 0D2C  
                       l60 0DCC                         l37 0DD4                         l54 0DDC  
                       l63 0CF8                         l48 0C4E                         l57 0BB6  
                       l67 0B1C                         l69 0B56                         u10 0B56  
                       u11 0B52                         u20 0D40                         u21 0D3C  
                       u30 0D56                         u31 0D52               ___awdiv@sign 000F  
                       bsr 000FE0              ENVIA_CHAR@aux 0006                        l141 0D8A  
                      l144 0DB0                        l153 0840                        l147 0C10  
                      l431 0A6C                        l418 09BC                        l900 0DC0  
                      l902 0DC2                        l910 0CCE                        l904 0DCA  
                      l920 0CE0                        l912 0CD2                        l922 0CE6  
                      l914 0CDA                        l906 0CC8                        l930 0D30  
                      l860 0AE6                        l940 0CFE                        l924 0CEC  
                      l916 0CDC                        l908 0CCA                        l932 0D40  
                      l870 0AF8                        l862 0AEA                        l950 0D12  
                      l942 0D02                        l926 0CF2                        l918 0CDE  
                      l934 0D46                        l880 0B10                        l872 0AFC  
                      l864 0AEC                        l952 0D14                        l944 0D06  
                      l960 0DD6                        l928 0DCE                        l936 0D56  
                      l890 0B34                        l882 0B12                        l874 0AFE  
                      l866 0AEE                        l954 0D1A                        l946 0D0E  
                      l938 0CFC                        l970 0B84                        l962 0B58  
                      l892 0B3E                        l884 0B1E                        l876 0B06  
                      l868 0AF0                        l956 0D20                        l948 0D10  
                      l980 0BA4                        l972 0B8C                        l964 0B5C  
                      l886 0B26                        l878 0B08                        l958 0D26  
                      l982 0BAA                        l974 0B92                        l966 0B62  
                      l888 0B2A                        l896 0B44                        l984 0BB0  
                      l976 0B98                        l968 0B70                        l898 0DB4  
                      l978 0B9E                        u400 09EA                        u401 09E6  
                      u330 090C                        u410 0A04                        u331 0908  
                      u411 0A00                        u340 0926                        u420 0A22  
                      u341 0922                        u421 0A1E                        u350 094C  
                      u430 0A38                        u351 0948                        u431 0A34  
                      u360 096A                        u440 0A5C                        u361 0966  
                      u441 0A58                        u450 0C9E                        u370 0986  
                      u451 0C9A                        u507 0B68                        u371 0982  
                      u460 0CBC                        u380 09AC                        u461 0CB8  
                      u517 0B76                        u381 09A8                        u470 0C4E  
                      u390 09D0                        u607 0B38                        u471 0C4A  
                      u527 0B86                        u391 09CC                        u480 084E  
                      u617 0DC4                        u537 0CD4                        u481 084A  
                      u547 0D08                        u557 0AF2                        u567 0B00  
                      u577 0B0A                        u497 0D9A                        u587 0B20  
                      u597 0B2E               ___awmod@sign 0009                LEER_LCD@aux 0004  
                      wreg 000FE8               ?_CURSOR_HOME 0001             ??_ENVIA_NIBBLE 0004  
           ENVIA_CHAR@dato 0005                       l1100 0D8C                       l1110 0DAA  
                     l1102 0D90                       l1104 0D94                       l1106 0DA2  
                     l1108 0DA6                       l1300 09F2                       l1310 0A38  
                     l1302 0A04                       l1320 0A64                       l1312 0A40  
                     l1304 0A0C                       l1330 0CBC                       l1090 0D80  
                     l1082 0D5E                       l1250 0914                       l1314 0A46  
                     l1306 0A14                       l1332 0C12                       l1324 0C8E  
                     l1092 0D82                       l1084 0D7A                       l1260 093A  
                     l1252 0918                       l1244 08FA                       l1308 0A22  
                     l1316 0A4C                       l1340 0BBA                       l1334 0C1E  
                     l1326 0C9E                       l1094 0D84                       l1086 0D7C  
                     l1270 0970                       l1262 094C                       l1254 0926  
                     l1246 08FE                       l1318 0A5C                       l1350 083E  
                     l1342 081C                       l1336 0C3A                       l1328 0CAA  
                     l1096 0D86                       l1088 0D7E                       l1272 0986  
                     l1264 0954                       l1280 099C                       l1256 092E  
                     l1248 090C                       l1360 086E                       l1352 084E  
                     l1344 0820                       l1338 0C3C                       l1098 0D88  
                     l1282 09AC                       l1274 098E                       l1266 095C  
                     l1258 0932                       l1290 09C2                       l1370 089A  
                     l1362 0876                       l1354 0856                       l1346 0824  
                     l1284 09B4                       l1276 0990                       l1268 096A  
                     l1292 09D0                       l1380 08BE                       l1372 08A2  
                     l1364 087E                       l1356 085C                       l1348 082E  
                     l1278 0996                       l1294 09D8                       l1382 08C6  
                     l1374 08AA                       l1366 0884                       l1358 0866  
                     l1296 09DC                       l1288 09BE                       l1392 08E2  
                     l1384 08CC                       l1376 08B0                       l1368 0894  
                     l1298 09EA                       l1386 08D2                       l1378 08B6  
                     l1388 08DA                       STR_1 0801                       STR_2 0811  
                     STR_3 0817                       STR_4 0814                       _LATD 000F8C  
                     _main 081C           __end_of_CCP1_ISR 0AE6                       btemp 001C  
                     start 008E              ?_CURSOR_ONOFF 0001               ___param_bank 000000  
          ??_ENVIA_LCD_CMD 0005           __end_of_LEER_LCD 0B58    convierte_digitos@numero 0012  
                    ?_main 0001            __end_of___awdiv 09BE            __end_of___awmod 0A6E  
          ___awdiv@divisor 000C                      _T1CON 000FCD                      i1l184 007E  
                    i2l173 0AE2            ___awdiv@counter 000E                      _PORTD 000F83  
                    _TRISD 000F95           __end_of_INTs_ISR 008E                      _am_pm 0013  
                    _horas 001B                ?_POS_CURSOR 0007                      _ticks 0014  
                    tablat 000FF5                      ttemp5 001D                      ttemp6 0020  
                    ttemp7 0024                      status 000FD8                      wtemp8 001D  
           ??_CURSOR_ONOFF 0007            __initialization 0C50               __end_of_main 08FA  
          _ESCRIBE_MENSAJE 0C12                     ??_main 0013              __activetblptr 000001  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADCON2 000FC0  
                   _ADRESH 000FC4                     _CCPR1H 000FBF                     _CCPR1L 000FBE  
         ___awdiv@dividend 000A                     i1l1230 0048                     i1l1240 0074  
                   i1l1232 0050                     i1l1224 0026                     i1l1242 007C  
                   i1l1226 0034                     i1l1234 0052                     i1l1236 0060  
                   i1l1228 0036                     i1l1238 0062                     i2l1200 0A72  
                   i2l1210 0AB0                     i2l1202 0A84                     i2l1212 0AB4  
                   i2l1220 0ADA                     i2l1204 0A88                     i2l1214 0AC6  
                   i2l1206 0A9A                     i2l1222 0AE0                     i2l1216 0ACE  
                   i2l1208 0A9E                     i2l1218 0AD4                     i2l1198 0A70  
                ??___awdiv 000E                  ??___awmod 0008       __end_of_ENVIA_NIBBLE 0DCE  
         ___awdiv@quotient 0010            ___awmod@divisor 0006                     isa$std 000001  
          ___awmod@counter 0008                  ?_CCP1_ISR 0001               __pdataCOMRAM 0019  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8               ??_BORRAR_LCD 0007                  ?_LEER_LCD 0001  
               __accesstop 0060    __end_of__initialization 0C7A               ??_LCD_CONFIG 0007  
            ___rparam_used 000001               ??_ENVIA_CHAR 0005    __end_of_ESCRIBE_MENSAJE 0C50  
           __pcstackCOMRAM 0001                  ?_INTs_ISR 0001          _convierte_digitos 0BB8  
       __end_of_BORRAR_LCD 0DDE         ?_convierte_digitos 0001                 ??_CCP1_ISR 0001  
         ENVIA_LCD_CMD@aux 0006       __end_of_CURSOR_ONOFF 0D5E         __end_of_LCD_CONFIG 0BB8  
       __end_of_ENVIA_CHAR 0D2E        ??_convierte_digitos 0012                 ??_LEER_LCD 0004  
         ENVIA_NIBBLE@dato 0004  __end_of_convierte_digitos 0C12                 ??_INTs_ISR 0001  
                  _CCP1CON 000FBD                    i1u30_20 0048                    i1u30_21 0044  
                  i1u31_20 0060                    i1u31_21 005C                    i1u32_20 0074  
                  i1u32_21 0070                    i1u29_20 0034                    i1u29_21 0030  
                  i2u25_40 0A84                    i2u25_41 0A80                    i2u26_40 0A9A  
                  i2u26_41 0A96                    i2u27_40 0AB0                    i2u27_41 0AAC  
                  i2u28_40 0AC6                    i2u28_41 0AC2               ??_POS_CURSOR 0008  
                  __Hparam 0000                    __Lparam 0000           ?_ESCRIBE_MENSAJE 0007  
        __end_of_configuro 0D8C                    ___awdiv 08FA                    ___awmod 09BE  
             __psmallconst 0800      __end_of_ENVIA_LCD_CMD 0CFA                    _decenas 0017  
                  __pcinit 0C50         __end_of_POS_CURSOR 0CC6                    __ramtop 0800  
                  __ptext0 081C                    __ptext1 0BB8                    __ptext2 09BE  
                  __ptext3 08FA                    __ptext4 0D5E                    __ptext5 0D8C  
                  __ptext6 0B58                    __ptext7 0D2E                    __ptext8 0DCE  
                  __ptext9 0DD6           ___awmod@dividend 0004                    _res_adc 0015  
                  _minutos 001A             __pintcode_body 0A6E               _ENVIA_NIBBLE 0DB2  
     end_of_initialization 0C7A                    int_func 0A6E              ??_arranca_LCD 0008  
             _CURSOR_ONOFF 0D2E         CURSOR_ONOFF@estado 0007              __pidataCOMRAM 0DDE  
            ??_CURSOR_HOME 0007        start_initialization 0C50          ENVIA_LCD_CMD@dato 0005  
      __end_of_arranca_LCD 0DB2                __pbssCOMRAM 0013        __end_of_CURSOR_HOME 0DD6  
                __pintcode 0008                   ?___awdiv 000A                   ?___awmod 0004  
              __pintcodelo 0018                  _configuro 0D5E                __smallconst 0800  
                 _CCP1_ISR 0008                   _LEER_LCD 0AE6                   _LATDbits 000F8C  
                 _PIE1bits 000F9D                _arranca_LCD 0D8C                   _PIR1bits 000F9E  
                 _RCONbits 000FD0                   _INTs_ISR 0018           ESCRIBE_MENSAJE@i 000C  
           POS_CURSOR@fila 0008                 ?_configuro 0001                 _ADCON0bits 000FC2  
              _CURSOR_HOME 0DCE                _INTCON3bits 000FF0                   __Hrparam 0000  
                 __Lrparam 0000               __Lsmallconst 0800                   _centenas 0018  
                 __ptext10 0C8C                   __ptext11 0CC6                   __ptext12 0C12  
                 __ptext13 0CFA                   __ptext14 0AE6                   __ptext15 0DB2  
               _BORRAR_LCD 0DD6                 _LCD_CONFIG 0B58                 _ENVIA_CHAR 0CFA  
                 _segundos 0019                   isa$xinst 000000                   int$flags 001C  
                 _unidades 0016              _ENVIA_LCD_CMD 0CC6                ??_configuro 0004  
               _INTCONbits 000FF2          ??_ESCRIBE_MENSAJE 000A                   intlevel1 0000  
                 intlevel2 0000      ESCRIBE_MENSAJE@cadena 0007             ?_ENVIA_LCD_CMD 0001  
              ?_BORRAR_LCD 0001              ?_ENVIA_NIBBLE 0001                 _POS_CURSOR 0C8C  
              ?_LCD_CONFIG 0001         ESCRIBE_MENSAJE@tam 0009                ?_ENVIA_CHAR 0001  
             ?_arranca_LCD 0001          POS_CURSOR@columna 0007  
