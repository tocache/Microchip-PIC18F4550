

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Oct 14 18:09:58 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.40
    36                           ; Generated 17/11/2021 GMT
    37                           ; 
    38                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataCOMRAM
    72  000D64                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for _segundos
    76  000D64  34                 	db	52
    77                           
    78                           ;initializer for _minutos
    79  000D65  04                 	db	4
    80                           
    81                           ;initializer for _horas
    82  000D66  12                 	db	18
    83  0000                     _TMR1L	set	4046
    84  0000                     _TMR1H	set	4047
    85  0000                     _INTCONbits	set	4082
    86  0000                     _LATD	set	3980
    87  0000                     _PORTD	set	3971
    88  0000                     _LATBbits	set	3978
    89  0000                     _TRISBbits	set	3987
    90  0000                     _TRISD	set	3989
    91  0000                     _PIE1bits	set	3997
    92  0000                     _T1CON	set	4045
    93  0000                     _PIR1bits	set	3998
    94  0000                     _LATDbits	set	3980
    95                           
    96                           	psect	smallconst
    97  000800                     __psmallconst:
    98                           	callstack 0
    99  000800  00                 	db	0
   100  000801                     STR_1:
   101  000801  48                 	db	72	;'H'
   102  000802  6F                 	db	111	;'o'
   103  000803  6C                 	db	108	;'l'
   104  000804  61                 	db	97	;'a'
   105  000805  20                 	db	32
   106  000806  55                 	db	85	;'U'
   107  000807  50                 	db	80	;'P'
   108  000808  43                 	db	67	;'C'
   109  000809  69                 	db	105	;'i'
   110  00080A  6E                 	db	110	;'n'
   111  00080B  6F                 	db	111	;'o'
   112  00080C  21                 	db	33
   113  00080D  00                 	db	0
   114  00080E                     STR_2:
   115  00080E  52                 	db	82	;'R'
   116  00080F  65                 	db	101	;'e'
   117  000810  6C                 	db	108	;'l'
   118  000811  6F                 	db	111	;'o'
   119  000812  6A                 	db	106	;'j'
   120  000813  20                 	db	32
   121  000814  00                 	db	0
   122  000815  00                 	db	0	; dummy byte at the end
   123  0000                     
   124                           ; #config settings
   125                           
   126                           	psect	cinit
   127  000BFE                     __pcinit:
   128                           	callstack 0
   129  000BFE                     start_initialization:
   130                           	callstack 0
   131  000BFE                     __initialization:
   132                           	callstack 0
   133                           
   134                           ; Initialize objects allocated to COMRAM (3 bytes)
   135                           ; load TBLPTR registers with __pidataCOMRAM
   136  000BFE  0E64               	movlw	low __pidataCOMRAM
   137  000C00  6EF6               	movwf	tblptrl,c
   138  000C02  0E0D               	movlw	high __pidataCOMRAM
   139  000C04  6EF7               	movwf	tblptrh,c
   140  000C06  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   141  000C08  6EF8               	movwf	tblptru,c
   142  000C0A  0009               	tblrd		*+	;fetch initializer
   143  000C0C  CFF5 F00C          	movff	tablat,__pdataCOMRAM
   144  000C10  0009               	tblrd		*+	;fetch initializer
   145  000C12  CFF5 F00D          	movff	tablat,__pdataCOMRAM+1
   146  000C16  0009               	tblrd		*+	;fetch initializer
   147  000C18  CFF5 F00E          	movff	tablat,__pdataCOMRAM+2
   148                           
   149                           ; Clear objects allocated to COMRAM (2 bytes)
   150  000C1C  6A10               	clrf	(__pbssCOMRAM+1)& (0+255),c
   151  000C1E  6A0F               	clrf	__pbssCOMRAM& (0+255),c
   152  000C20                     end_of_initialization:
   153                           	callstack 0
   154  000C20                     __end_of__initialization:
   155                           	callstack 0
   156  000C20  9011               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   157  000C22  9211               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   158  000C24  0E00               	movlw	low (__Lsmallconst shr (0+16))
   159  000C26  6EF8               	movwf	tblptru,c
   160  000C28  0E08               	movlw	high __Lsmallconst
   161  000C2A  6EF7               	movwf	tblptrh,c
   162  000C2C  0100               	movlb	0
   163  000C2E  EF0B  F004         	goto	_main	;jump to C main() function
   164                           
   165                           	psect	bssCOMRAM
   166  00000F                     __pbssCOMRAM:
   167                           	callstack 0
   168  00000F                     _unidad:
   169                           	callstack 0
   170  00000F                     	ds	1
   171  000010                     _decena:
   172                           	callstack 0
   173  000010                     	ds	1
   174                           
   175                           	psect	dataCOMRAM
   176  00000C                     __pdataCOMRAM:
   177                           	callstack 0
   178  00000C                     _segundos:
   179                           	callstack 0
   180  00000C                     	ds	1
   181  00000D                     _minutos:
   182                           	callstack 0
   183  00000D                     	ds	1
   184  00000E                     _horas:
   185                           	callstack 0
   186  00000E                     	ds	1
   187                           
   188                           	psect	cstackCOMRAM
   189  000001                     __pcstackCOMRAM:
   190                           	callstack 0
   191  000001                     ?___awdiv:
   192                           	callstack 0
   193  000001                     ?___awmod:
   194                           	callstack 0
   195  000001                     ENVIA_NIBBLE@dato:
   196                           	callstack 0
   197  000001                     LEER_LCD@aux:
   198                           	callstack 0
   199  000001                     ___awdiv@dividend:
   200                           	callstack 0
   201  000001                     ___awmod@dividend:
   202                           	callstack 0
   203                           
   204                           ; 2 bytes @ 0x0
   205  000001                     	ds	1
   206  000002                     ENVIA_CHAR@dato:
   207                           	callstack 0
   208  000002                     ENVIA_LCD_CMD@dato:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x1
   212  000002                     	ds	1
   213  000003                     ENVIA_CHAR@aux:
   214                           	callstack 0
   215  000003                     ENVIA_LCD_CMD@aux:
   216                           	callstack 0
   217  000003                     ___awdiv@divisor:
   218                           	callstack 0
   219  000003                     ___awmod@divisor:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000003                     	ds	1
   224  000004                     ??_LCD_CONFIG:
   225  000004                     POS_CURSOR@columna:
   226                           	callstack 0
   227  000004                     CURSOR_ONOFF@estado:
   228                           	callstack 0
   229  000004                     ESCRIBE_MENSAJE@cadena:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x3
   233  000004                     	ds	1
   234  000005                     ??_arranque_LCD:
   235  000005                     POS_CURSOR@fila:
   236                           	callstack 0
   237  000005                     ___awdiv@counter:
   238                           	callstack 0
   239  000005                     ___awmod@counter:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x4
   243  000005                     	ds	1
   244  000006                     ESCRIBE_MENSAJE@tam:
   245                           	callstack 0
   246  000006                     ___awdiv@sign:
   247                           	callstack 0
   248  000006                     ___awmod@sign:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x5
   252  000006                     	ds	1
   253  000007                     ??_ESCRIBE_MENSAJE:
   254  000007                     ___awdiv@quotient:
   255                           	callstack 0
   256                           
   257                           ; 2 bytes @ 0x6
   258  000007                     	ds	2
   259  000009                     individualizacion_digitos@numero:
   260                           	callstack 0
   261  000009                     ESCRIBE_MENSAJE@i:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x8
   265  000009                     	ds	1
   266  00000A                     ??_main:
   267                           
   268                           ; 1 bytes @ 0x9
   269  00000A                     	ds	2
   270                           
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 36 in file "maincode02.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;		None
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         0       0       0       0       0       0       0       0       0
   291 ;;      Locals:         0       0       0       0       0       0       0       0       0
   292 ;;      Temps:          2       0       0       0       0       0       0       0       0
   293 ;;      Totals:         2       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:        2 bytes
   295 ;; Hardware stack levels required when called: 5
   296 ;; This function calls:
   297 ;;		_ENVIA_CHAR
   298 ;;		_ESCRIBE_MENSAJE
   299 ;;		_POS_CURSOR
   300 ;;		_arranque_LCD
   301 ;;		_configuro
   302 ;;		_individualizacion_digitos
   303 ;; This function is called by:
   304 ;;		Startup code after reset
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308                           	psect	text0
   309  000816                     __ptext0:
   310                           	callstack 0
   311  000816                     _main:
   312                           	callstack 26
   313  000816                     
   314                           ;maincode02.c: 37:     configuro();
   315  000816  ECA3  F006         	call	_configuro	;wreg free
   316  00081A                     
   317                           ;maincode02.c: 38:     arranque_LCD();
   318  00081A  EC65  F006         	call	_arranque_LCD	;wreg free
   319  00081E                     l1266:
   320                           
   321                           ;maincode02.c: 40:         LATBbits.LB0 = 1;
   322  00081E  808A               	bsf	138,0,c	;volatile
   323  000820                     
   324                           ;maincode02.c: 41:         _delay((unsigned long)((100)*(48000000UL/4000.0)));
   325  000820  0E07               	movlw	7
   326  000822  6E0B               	movwf	(??_main+1)^0,c
   327  000824  0E17               	movlw	23
   328  000826  6E0A               	movwf	??_main^0,c
   329  000828  0E6A               	movlw	106
   330  00082A                     u427:
   331  00082A  2EE8               	decfsz	wreg,f,c
   332  00082C  D7FE               	bra	u427
   333  00082E  2E0A               	decfsz	??_main^0,f,c
   334  000830  D7FC               	bra	u427
   335  000832  2E0B               	decfsz	(??_main+1)^0,f,c
   336  000834  D7FA               	bra	u427
   337  000836  D000               	nop2	
   338  000838                     
   339                           ;maincode02.c: 42:         LATBbits.LB0 = 0;
   340  000838  908A               	bcf	138,0,c	;volatile
   341  00083A                     
   342                           ;maincode02.c: 43:         _delay((unsigned long)((100)*(48000000UL/4000.0)));
   343  00083A  0E07               	movlw	7
   344  00083C  6E0B               	movwf	(??_main+1)^0,c
   345  00083E  0E17               	movlw	23
   346  000840  6E0A               	movwf	??_main^0,c
   347  000842  0E6A               	movlw	106
   348  000844                     u437:
   349  000844  2EE8               	decfsz	wreg,f,c
   350  000846  D7FE               	bra	u437
   351  000848  2E0A               	decfsz	??_main^0,f,c
   352  00084A  D7FC               	bra	u437
   353  00084C  2E0B               	decfsz	(??_main+1)^0,f,c
   354  00084E  D7FA               	bra	u437
   355  000850  D000               	nop2	
   356  000852                     
   357                           ;maincode02.c: 44:         POS_CURSOR(1,0);
   358  000852  0E00               	movlw	0
   359  000854  6E04               	movwf	POS_CURSOR@columna^0,c
   360  000856  0E01               	movlw	1
   361  000858  ECE2  F005         	call	_POS_CURSOR
   362  00085C                     
   363                           ;maincode02.c: 45:         ESCRIBE_MENSAJE("Hola UPCino!",12);
   364  00085C  0E01               	movlw	low STR_1
   365  00085E  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   366  000860  0E08               	movlw	high STR_1
   367  000862  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   368  000864  0E0C               	movlw	12
   369  000866  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   370  000868  ECC3  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   371  00086C                     
   372                           ;maincode02.c: 46:         POS_CURSOR(2,0);
   373  00086C  0E00               	movlw	0
   374  00086E  6E04               	movwf	POS_CURSOR@columna^0,c
   375  000870  0E02               	movlw	2
   376  000872  ECE2  F005         	call	_POS_CURSOR
   377  000876                     
   378                           ;maincode02.c: 47:         ESCRIBE_MENSAJE("Reloj ",6);
   379  000876  0E0E               	movlw	low STR_2
   380  000878  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   381  00087A  0E08               	movlw	high STR_2
   382  00087C  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   383  00087E  0E06               	movlw	6
   384  000880  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   385  000882  ECC3  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   386  000886                     
   387                           ;maincode02.c: 48:         individualizacion_digitos(horas);
   388  000886  500E               	movf	_horas^0,w,c
   389  000888  EC4D  F006         	call	_individualizacion_digitos
   390  00088C                     
   391                           ;maincode02.c: 49:         ENVIA_CHAR(decena + 0x30);
   392  00088C  5010               	movf	_decena^0,w,c
   393  00088E  0F30               	addlw	48
   394  000890  EC33  F006         	call	_ENVIA_CHAR
   395  000894                     
   396                           ;maincode02.c: 50:         ENVIA_CHAR(unidad + 0x30);
   397  000894  500F               	movf	_unidad^0,w,c
   398  000896  0F30               	addlw	48
   399  000898  EC33  F006         	call	_ENVIA_CHAR
   400  00089C                     
   401                           ;maincode02.c: 51:         ENVIA_CHAR(':');
   402  00089C  0E3A               	movlw	58
   403  00089E  EC33  F006         	call	_ENVIA_CHAR
   404  0008A2                     
   405                           ;maincode02.c: 52:         individualizacion_digitos(minutos);
   406  0008A2  500D               	movf	_minutos^0,w,c
   407  0008A4  EC4D  F006         	call	_individualizacion_digitos
   408  0008A8                     
   409                           ;maincode02.c: 53:         ENVIA_CHAR(decena + 0x30);
   410  0008A8  5010               	movf	_decena^0,w,c
   411  0008AA  0F30               	addlw	48
   412  0008AC  EC33  F006         	call	_ENVIA_CHAR
   413  0008B0                     
   414                           ;maincode02.c: 54:         ENVIA_CHAR(unidad + 0x30);
   415  0008B0  500F               	movf	_unidad^0,w,c
   416  0008B2  0F30               	addlw	48
   417  0008B4  EC33  F006         	call	_ENVIA_CHAR
   418  0008B8                     
   419                           ;maincode02.c: 55:         ENVIA_CHAR(':');
   420  0008B8  0E3A               	movlw	58
   421  0008BA  EC33  F006         	call	_ENVIA_CHAR
   422  0008BE                     
   423                           ;maincode02.c: 56:         individualizacion_digitos(segundos);
   424  0008BE  500C               	movf	_segundos^0,w,c
   425  0008C0  EC4D  F006         	call	_individualizacion_digitos
   426  0008C4                     
   427                           ;maincode02.c: 57:         ENVIA_CHAR(decena + 0x30);
   428  0008C4  5010               	movf	_decena^0,w,c
   429  0008C6  0F30               	addlw	48
   430  0008C8  EC33  F006         	call	_ENVIA_CHAR
   431  0008CC                     
   432                           ;maincode02.c: 58:         ENVIA_CHAR(unidad + 0x30);
   433  0008CC  500F               	movf	_unidad^0,w,c
   434  0008CE  0F30               	addlw	48
   435  0008D0  EC33  F006         	call	_ENVIA_CHAR
   436  0008D4  EF0F  F004         	goto	l1266
   437  0008D8  EF07  F000         	goto	start
   438  0008DC                     __end_of_main:
   439                           	callstack 0
   440                           
   441 ;; *************** function _individualizacion_digitos *****************
   442 ;; Defined at:
   443 ;;		line 22 in file "maincode02.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;  numero          1    wreg     unsigned char 
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  numero          1    8[COMRAM] unsigned char 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   457 ;;      Params:         0       0       0       0       0       0       0       0       0
   458 ;;      Locals:         1       0       0       0       0       0       0       0       0
   459 ;;      Temps:          0       0       0       0       0       0       0       0       0
   460 ;;      Totals:         1       0       0       0       0       0       0       0       0
   461 ;;Total ram usage:        1 bytes
   462 ;; Hardware stack levels used: 1
   463 ;; Hardware stack levels required when called: 2
   464 ;; This function calls:
   465 ;;		___awdiv
   466 ;;		___awmod
   467 ;; This function is called by:
   468 ;;		_main
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text1
   473  000C9A                     __ptext1:
   474                           	callstack 0
   475  000C9A                     _individualizacion_digitos:
   476                           	callstack 28
   477                           
   478                           ;incstack = 0
   479                           ;individualizacion_digitos@numero stored from wreg
   480  000C9A  6E09               	movwf	individualizacion_digitos@numero^0,c
   481  000C9C                     
   482                           ;maincode02.c: 23:     decena = numero / 10;
   483  000C9C  C009  F001         	movff	individualizacion_digitos@numero,___awdiv@dividend
   484  000CA0  6A02               	clrf	(___awdiv@dividend+1)^0,c
   485  000CA2  0E00               	movlw	0
   486  000CA4  6E04               	movwf	(___awdiv@divisor+1)^0,c
   487  000CA6  0E0A               	movlw	10
   488  000CA8  6E03               	movwf	___awdiv@divisor^0,c
   489  000CAA  EC6E  F004         	call	___awdiv	;wreg free
   490  000CAE  5001               	movf	?___awdiv^0,w,c
   491  000CB0  6E10               	movwf	_decena^0,c
   492                           
   493                           ;maincode02.c: 24:     unidad = numero % 10;
   494  000CB2  C009  F001         	movff	individualizacion_digitos@numero,___awmod@dividend
   495  000CB6  6A02               	clrf	(___awmod@dividend+1)^0,c
   496  000CB8  0E00               	movlw	0
   497  000CBA  6E04               	movwf	(___awmod@divisor+1)^0,c
   498  000CBC  0E0A               	movlw	10
   499  000CBE  6E03               	movwf	___awmod@divisor^0,c
   500  000CC0  ECD0  F004         	call	___awmod	;wreg free
   501  000CC4  5001               	movf	?___awmod^0,w,c
   502  000CC6  6E0F               	movwf	_unidad^0,c
   503  000CC8  0012               	return		;funcret
   504  000CCA                     __end_of_individualizacion_digitos:
   505                           	callstack 0
   506                           
   507 ;; *************** function ___awmod *****************
   508 ;; Defined at:
   509 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  dividend        2    0[COMRAM] int 
   512 ;;  divisor         2    2[COMRAM] int 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  sign            1    5[COMRAM] unsigned char 
   515 ;;  counter         1    4[COMRAM] unsigned char 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  2    0[COMRAM] int 
   518 ;; Registers used:
   519 ;;		wreg, status,2, status,0
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   525 ;;      Params:         4       0       0       0       0       0       0       0       0
   526 ;;      Locals:         2       0       0       0       0       0       0       0       0
   527 ;;      Temps:          0       0       0       0       0       0       0       0       0
   528 ;;      Totals:         6       0       0       0       0       0       0       0       0
   529 ;;Total ram usage:        6 bytes
   530 ;; Hardware stack levels used: 1
   531 ;; Hardware stack levels required when called: 1
   532 ;; This function calls:
   533 ;;		Nothing
   534 ;; This function is called by:
   535 ;;		_individualizacion_digitos
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text2
   540  0009A0                     __ptext2:
   541                           	callstack 0
   542  0009A0                     ___awmod:
   543                           	callstack 28
   544  0009A0  0E00               	movlw	0
   545  0009A2  6E06               	movwf	___awmod@sign^0,c
   546  0009A4  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   547  0009A6  EFD9  F004         	goto	u330
   548  0009AA  EFD7  F004         	goto	u331
   549  0009AE                     u331:
   550  0009AE  EFDF  F004         	goto	l1216
   551  0009B2                     u330:
   552  0009B2  6C01               	negf	___awmod@dividend^0,c
   553  0009B4  1E02               	comf	(___awmod@dividend+1)^0,f,c
   554  0009B6  B0D8               	btfsc	status,0,c
   555  0009B8  2A02               	incf	(___awmod@dividend+1)^0,f,c
   556  0009BA  0E01               	movlw	1
   557  0009BC  6E06               	movwf	___awmod@sign^0,c
   558  0009BE                     l1216:
   559  0009BE  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   560  0009C0  EFE6  F004         	goto	u340
   561  0009C4  EFE4  F004         	goto	u341
   562  0009C8                     u341:
   563  0009C8  EFEA  F004         	goto	l1220
   564  0009CC                     u340:
   565  0009CC  6C03               	negf	___awmod@divisor^0,c
   566  0009CE  1E04               	comf	(___awmod@divisor+1)^0,f,c
   567  0009D0  B0D8               	btfsc	status,0,c
   568  0009D2  2A04               	incf	(___awmod@divisor+1)^0,f,c
   569  0009D4                     l1220:
   570  0009D4  5003               	movf	___awmod@divisor^0,w,c
   571  0009D6  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   572  0009D8  B4D8               	btfsc	status,2,c
   573  0009DA  EFF1  F004         	goto	u351
   574  0009DE  EFF3  F004         	goto	u350
   575  0009E2                     u351:
   576  0009E2  EF17  F005         	goto	l1236
   577  0009E6                     u350:
   578  0009E6  0E01               	movlw	1
   579  0009E8  6E05               	movwf	___awmod@counter^0,c
   580  0009EA  EFFB  F004         	goto	l1226
   581  0009EE                     l1224:
   582  0009EE  90D8               	bcf	status,0,c
   583  0009F0  3603               	rlcf	___awmod@divisor^0,f,c
   584  0009F2  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   585  0009F4  2A05               	incf	___awmod@counter^0,f,c
   586  0009F6                     l1226:
   587  0009F6  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   588  0009F8  EF00  F005         	goto	u361
   589  0009FC  EF02  F005         	goto	u360
   590  000A00                     u361:
   591  000A00  EFF7  F004         	goto	l1224
   592  000A04                     u360:
   593  000A04                     l1228:
   594  000A04  5003               	movf	___awmod@divisor^0,w,c
   595  000A06  5C01               	subwf	___awmod@dividend^0,w,c
   596  000A08  5004               	movf	(___awmod@divisor+1)^0,w,c
   597  000A0A  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   598  000A0C  A0D8               	btfss	status,0,c
   599  000A0E  EF0B  F005         	goto	u371
   600  000A12  EF0D  F005         	goto	u370
   601  000A16                     u371:
   602  000A16  EF11  F005         	goto	l1232
   603  000A1A                     u370:
   604  000A1A  5003               	movf	___awmod@divisor^0,w,c
   605  000A1C  5E01               	subwf	___awmod@dividend^0,f,c
   606  000A1E  5004               	movf	(___awmod@divisor+1)^0,w,c
   607  000A20  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   608  000A22                     l1232:
   609  000A22  90D8               	bcf	status,0,c
   610  000A24  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   611  000A26  3203               	rrcf	___awmod@divisor^0,f,c
   612  000A28  2E05               	decfsz	___awmod@counter^0,f,c
   613  000A2A  EF02  F005         	goto	l1228
   614  000A2E                     l1236:
   615  000A2E  5006               	movf	___awmod@sign^0,w,c
   616  000A30  B4D8               	btfsc	status,2,c
   617  000A32  EF1D  F005         	goto	u381
   618  000A36  EF1F  F005         	goto	u380
   619  000A3A                     u381:
   620  000A3A  EF23  F005         	goto	l1240
   621  000A3E                     u380:
   622  000A3E  6C01               	negf	___awmod@dividend^0,c
   623  000A40  1E02               	comf	(___awmod@dividend+1)^0,f,c
   624  000A42  B0D8               	btfsc	status,0,c
   625  000A44  2A02               	incf	(___awmod@dividend+1)^0,f,c
   626  000A46                     l1240:
   627  000A46  C001  F001         	movff	___awmod@dividend,?___awmod
   628  000A4A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   629  000A4E  0012               	return		;funcret
   630  000A50                     __end_of___awmod:
   631                           	callstack 0
   632                           
   633 ;; *************** function ___awdiv *****************
   634 ;; Defined at:
   635 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  dividend        2    0[COMRAM] int 
   638 ;;  divisor         2    2[COMRAM] int 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  quotient        2    6[COMRAM] int 
   641 ;;  sign            1    5[COMRAM] unsigned char 
   642 ;;  counter         1    4[COMRAM] unsigned char 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  2    0[COMRAM] int 
   645 ;; Registers used:
   646 ;;		wreg, status,2, status,0
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   652 ;;      Params:         4       0       0       0       0       0       0       0       0
   653 ;;      Locals:         4       0       0       0       0       0       0       0       0
   654 ;;      Temps:          0       0       0       0       0       0       0       0       0
   655 ;;      Totals:         8       0       0       0       0       0       0       0       0
   656 ;;Total ram usage:        8 bytes
   657 ;; Hardware stack levels used: 1
   658 ;; Hardware stack levels required when called: 1
   659 ;; This function calls:
   660 ;;		Nothing
   661 ;; This function is called by:
   662 ;;		_individualizacion_digitos
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           	psect	text3
   667  0008DC                     __ptext3:
   668                           	callstack 0
   669  0008DC                     ___awdiv:
   670                           	callstack 28
   671  0008DC  0E00               	movlw	0
   672  0008DE  6E06               	movwf	___awdiv@sign^0,c
   673  0008E0  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   674  0008E2  EF77  F004         	goto	u270
   675  0008E6  EF75  F004         	goto	u271
   676  0008EA                     u271:
   677  0008EA  EF7D  F004         	goto	l1172
   678  0008EE                     u270:
   679  0008EE  6C03               	negf	___awdiv@divisor^0,c
   680  0008F0  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   681  0008F2  B0D8               	btfsc	status,0,c
   682  0008F4  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   683  0008F6  0E01               	movlw	1
   684  0008F8  6E06               	movwf	___awdiv@sign^0,c
   685  0008FA                     l1172:
   686  0008FA  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   687  0008FC  EF84  F004         	goto	u280
   688  000900  EF82  F004         	goto	u281
   689  000904                     u281:
   690  000904  EF8A  F004         	goto	l1178
   691  000908                     u280:
   692  000908  6C01               	negf	___awdiv@dividend^0,c
   693  00090A  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   694  00090C  B0D8               	btfsc	status,0,c
   695  00090E  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   696  000910  0E01               	movlw	1
   697  000912  1A06               	xorwf	___awdiv@sign^0,f,c
   698  000914                     l1178:
   699  000914  0E00               	movlw	0
   700  000916  6E08               	movwf	(___awdiv@quotient+1)^0,c
   701  000918  0E00               	movlw	0
   702  00091A  6E07               	movwf	___awdiv@quotient^0,c
   703  00091C  5003               	movf	___awdiv@divisor^0,w,c
   704  00091E  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   705  000920  B4D8               	btfsc	status,2,c
   706  000922  EF95  F004         	goto	u291
   707  000926  EF97  F004         	goto	u290
   708  00092A                     u291:
   709  00092A  EFBF  F004         	goto	l1200
   710  00092E                     u290:
   711  00092E  0E01               	movlw	1
   712  000930  6E05               	movwf	___awdiv@counter^0,c
   713  000932  EF9F  F004         	goto	l1186
   714  000936                     l1184:
   715  000936  90D8               	bcf	status,0,c
   716  000938  3603               	rlcf	___awdiv@divisor^0,f,c
   717  00093A  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   718  00093C  2A05               	incf	___awdiv@counter^0,f,c
   719  00093E                     l1186:
   720  00093E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   721  000940  EFA4  F004         	goto	u301
   722  000944  EFA6  F004         	goto	u300
   723  000948                     u301:
   724  000948  EF9B  F004         	goto	l1184
   725  00094C                     u300:
   726  00094C                     l1188:
   727  00094C  90D8               	bcf	status,0,c
   728  00094E  3607               	rlcf	___awdiv@quotient^0,f,c
   729  000950  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   730  000952  5003               	movf	___awdiv@divisor^0,w,c
   731  000954  5C01               	subwf	___awdiv@dividend^0,w,c
   732  000956  5004               	movf	(___awdiv@divisor+1)^0,w,c
   733  000958  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   734  00095A  A0D8               	btfss	status,0,c
   735  00095C  EFB2  F004         	goto	u311
   736  000960  EFB4  F004         	goto	u310
   737  000964                     u311:
   738  000964  EFB9  F004         	goto	l1196
   739  000968                     u310:
   740  000968  5003               	movf	___awdiv@divisor^0,w,c
   741  00096A  5E01               	subwf	___awdiv@dividend^0,f,c
   742  00096C  5004               	movf	(___awdiv@divisor+1)^0,w,c
   743  00096E  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   744  000970  8007               	bsf	___awdiv@quotient^0,0,c
   745  000972                     l1196:
   746  000972  90D8               	bcf	status,0,c
   747  000974  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   748  000976  3203               	rrcf	___awdiv@divisor^0,f,c
   749  000978  2E05               	decfsz	___awdiv@counter^0,f,c
   750  00097A  EFA6  F004         	goto	l1188
   751  00097E                     l1200:
   752  00097E  5006               	movf	___awdiv@sign^0,w,c
   753  000980  B4D8               	btfsc	status,2,c
   754  000982  EFC5  F004         	goto	u321
   755  000986  EFC7  F004         	goto	u320
   756  00098A                     u321:
   757  00098A  EFCB  F004         	goto	l1204
   758  00098E                     u320:
   759  00098E  6C07               	negf	___awdiv@quotient^0,c
   760  000990  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   761  000992  B0D8               	btfsc	status,0,c
   762  000994  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   763  000996                     l1204:
   764  000996  C007  F001         	movff	___awdiv@quotient,?___awdiv
   765  00099A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   766  00099E  0012               	return		;funcret
   767  0009A0                     __end_of___awdiv:
   768                           	callstack 0
   769                           
   770 ;; *************** function _configuro *****************
   771 ;; Defined at:
   772 ;;		line 14 in file "maincode02.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, status,2
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   786 ;;      Params:         0       0       0       0       0       0       0       0       0
   787 ;;      Locals:         0       0       0       0       0       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0       0       0
   789 ;;      Totals:         0       0       0       0       0       0       0       0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels used: 1
   792 ;; Hardware stack levels required when called: 1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text4
   801  000D46                     __ptext4:
   802                           	callstack 0
   803  000D46                     _configuro:
   804                           	callstack 29
   805  000D46                     
   806                           ;maincode02.c: 15:     TRISBbits.RB0 = 0;
   807  000D46  9093               	bcf	147,0,c	;volatile
   808  000D48                     
   809                           ;maincode02.c: 16:     T1CON = 0x0F;
   810  000D48  0E0F               	movlw	15
   811  000D4A  6ECD               	movwf	205,c	;volatile
   812  000D4C                     
   813                           ;maincode02.c: 17:     INTCONbits.GIE = 1;
   814  000D4C  8EF2               	bsf	242,7,c	;volatile
   815  000D4E                     
   816                           ;maincode02.c: 18:     INTCONbits.PEIE = 1;
   817  000D4E  8CF2               	bsf	242,6,c	;volatile
   818  000D50                     
   819                           ;maincode02.c: 19:     PIE1bits.TMR1IE = 1;
   820  000D50  809D               	bsf	157,0,c	;volatile
   821  000D52  0012               	return		;funcret
   822  000D54                     __end_of_configuro:
   823                           	callstack 0
   824                           
   825 ;; *************** function _arranque_LCD *****************
   826 ;; Defined at:
   827 ;;		line 27 in file "maincode02.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   841 ;;      Params:         0       0       0       0       0       0       0       0       0
   842 ;;      Locals:         0       0       0       0       0       0       0       0       0
   843 ;;      Temps:          2       0       0       0       0       0       0       0       0
   844 ;;      Totals:         2       0       0       0       0       0       0       0       0
   845 ;;Total ram usage:        2 bytes
   846 ;; Hardware stack levels used: 1
   847 ;; Hardware stack levels required when called: 4
   848 ;; This function calls:
   849 ;;		_BORRAR_LCD
   850 ;;		_CURSOR_HOME
   851 ;;		_CURSOR_ONOFF
   852 ;;		_LCD_CONFIG
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text5
   859  000CCA                     __ptext5:
   860                           	callstack 0
   861  000CCA                     _arranque_LCD:
   862                           	callstack 26
   863  000CCA                     
   864                           ;maincode02.c: 28:     TRISD = 0x00;
   865  000CCA  0E00               	movlw	0
   866  000CCC  6E95               	movwf	149,c	;volatile
   867  000CCE                     
   868                           ;maincode02.c: 29:     LCD_CONFIG();
   869  000CCE  EC93  F005         	call	_LCD_CONFIG	;wreg free
   870  000CD2                     
   871                           ;maincode02.c: 30:     _delay((unsigned long)((17)*(48000000UL/4000.0)));
   872  000CD2  0E02               	movlw	2
   873  000CD4  6E06               	movwf	(??_arranque_LCD+1)^0,c
   874  000CD6  0E09               	movlw	9
   875  000CD8  6E05               	movwf	??_arranque_LCD^0,c
   876  000CDA  0EEC               	movlw	236
   877  000CDC                     u447:
   878  000CDC  2EE8               	decfsz	wreg,f,c
   879  000CDE  D7FE               	bra	u447
   880  000CE0  2E05               	decfsz	??_arranque_LCD^0,f,c
   881  000CE2  D7FC               	bra	u447
   882  000CE4  2E06               	decfsz	(??_arranque_LCD+1)^0,f,c
   883  000CE6  D7FA               	bra	u447
   884  000CE8  D000               	nop2	
   885  000CEA                     
   886                           ;maincode02.c: 31:     BORRAR_LCD();
   887  000CEA  ECAE  F006         	call	_BORRAR_LCD	;wreg free
   888  000CEE                     
   889                           ;maincode02.c: 32:     CURSOR_HOME();
   890  000CEE  ECAA  F006         	call	_CURSOR_HOME	;wreg free
   891  000CF2                     
   892                           ;maincode02.c: 33:     CURSOR_ONOFF(1);
   893  000CF2  0E01               	movlw	1
   894  000CF4  EC7D  F006         	call	_CURSOR_ONOFF
   895  000CF8  0012               	return		;funcret
   896  000CFA                     __end_of_arranque_LCD:
   897                           	callstack 0
   898                           
   899 ;; *************** function _LCD_CONFIG *****************
   900 ;; Defined at:
   901 ;;		line 72 in file "LCD.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;		None
   906 ;; Return value:  Size  Location     Type
   907 ;;                  1    wreg      void 
   908 ;; Registers used:
   909 ;;		wreg, status,2, status,0, cstack
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 0/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   915 ;;      Params:         0       0       0       0       0       0       0       0       0
   916 ;;      Locals:         0       0       0       0       0       0       0       0       0
   917 ;;      Temps:          1       0       0       0       0       0       0       0       0
   918 ;;      Totals:         1       0       0       0       0       0       0       0       0
   919 ;;Total ram usage:        1 bytes
   920 ;; Hardware stack levels used: 1
   921 ;; Hardware stack levels required when called: 3
   922 ;; This function calls:
   923 ;;		_ENVIA_LCD_CMD
   924 ;;		_ENVIA_NIBBLE
   925 ;; This function is called by:
   926 ;;		_arranque_LCD
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text6
   931  000B26                     __ptext6:
   932                           	callstack 0
   933  000B26                     _LCD_CONFIG:
   934                           	callstack 26
   935  000B26                     
   936                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   937  000B26  908C               	bcf	140,0,c	;volatile
   938                           
   939                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   940  000B28  928C               	bcf	140,1,c	;volatile
   941  000B2A                     
   942                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   943  000B2A  0E30               	movlw	48
   944  000B2C  EC95  F006         	call	_ENVIA_NIBBLE
   945  000B30                     
   946                           ;LCD.c: 77:         _delay(24000);
   947  000B30  0E20               	movlw	32
   948  000B32  6E04               	movwf	??_LCD_CONFIG^0,c
   949  000B34  0E2A               	movlw	42
   950  000B36                     u457:
   951  000B36  2EE8               	decfsz	wreg,f,c
   952  000B38  D7FE               	bra	u457
   953  000B3A  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   954  000B3C  D7FC               	bra	u457
   955  000B3E                     
   956                           ;LCD.c: 78:         _delay(24000);
   957  000B3E  0E20               	movlw	32
   958  000B40  6E04               	movwf	??_LCD_CONFIG^0,c
   959  000B42  0E2A               	movlw	42
   960  000B44                     u467:
   961  000B44  2EE8               	decfsz	wreg,f,c
   962  000B46  D7FE               	bra	u467
   963  000B48  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   964  000B4A  D7FC               	bra	u467
   965                           
   966                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   967  000B4C  0E30               	movlw	48
   968  000B4E  EC95  F006         	call	_ENVIA_NIBBLE
   969  000B52                     
   970                           ;LCD.c: 83:  _delay(1200);
   971  000B52  0EF0               	movlw	240
   972  000B54                     u477:
   973  000B54  D000               	nop2	
   974  000B56  2EE8               	decfsz	wreg,f,c
   975  000B58  D7FD               	bra	u477
   976  000B5A                     
   977                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   978  000B5A  0E30               	movlw	48
   979  000B5C  EC95  F006         	call	_ENVIA_NIBBLE
   980  000B60                     
   981                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   982  000B60  0E20               	movlw	32
   983  000B62  EC95  F006         	call	_ENVIA_NIBBLE
   984  000B66                     
   985                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   986  000B66  0E01               	movlw	1
   987  000B68  EC19  F006         	call	_ENVIA_LCD_CMD
   988  000B6C                     
   989                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   990  000B6C  0E28               	movlw	40
   991  000B6E  EC19  F006         	call	_ENVIA_LCD_CMD
   992  000B72                     
   993                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   994  000B72  0E0F               	movlw	15
   995  000B74  EC19  F006         	call	_ENVIA_LCD_CMD
   996  000B78                     
   997                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   998  000B78  0E06               	movlw	6
   999  000B7A  EC19  F006         	call	_ENVIA_LCD_CMD
  1000  000B7E                     
  1001                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
  1002  000B7E  0E01               	movlw	1
  1003  000B80  EC19  F006         	call	_ENVIA_LCD_CMD
  1004  000B84  0012               	return		;funcret
  1005  000B86                     __end_of_LCD_CONFIG:
  1006                           	callstack 0
  1007                           
  1008 ;; *************** function _CURSOR_ONOFF *****************
  1009 ;; Defined at:
  1010 ;;		line 35 in file "LCD.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  estado          1    wreg     unsigned char 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  estado          1    3[COMRAM] unsigned char 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0
  1025 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1027 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1028 ;;Total ram usage:        1 bytes
  1029 ;; Hardware stack levels used: 1
  1030 ;; Hardware stack levels required when called: 3
  1031 ;; This function calls:
  1032 ;;		_ENVIA_LCD_CMD
  1033 ;; This function is called by:
  1034 ;;		_arranque_LCD
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text7
  1039  000CFA                     __ptext7:
  1040                           	callstack 0
  1041  000CFA                     _CURSOR_ONOFF:
  1042                           	callstack 26
  1043                           
  1044                           ;incstack = 0
  1045                           ;CURSOR_ONOFF@estado stored from wreg
  1046  000CFA  6E04               	movwf	CURSOR_ONOFF@estado^0,c
  1047  000CFC                     
  1048                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
  1049  000CFC  5004               	movf	CURSOR_ONOFF@estado^0,w,c
  1050  000CFE  A4D8               	btfss	status,2,c
  1051  000D00  EF84  F006         	goto	u21
  1052  000D04  EF86  F006         	goto	u20
  1053  000D08                     u21:
  1054  000D08  EF89  F006         	goto	l922
  1055  000D0C                     u20:
  1056  000D0C  0E0E               	movlw	14
  1057  000D0E  EC19  F006         	call	_ENVIA_LCD_CMD
  1058  000D12                     l922:
  1059                           
  1060                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1061  000D12  0404               	decf	CURSOR_ONOFF@estado^0,w,c
  1062  000D14  A4D8               	btfss	status,2,c
  1063  000D16  EF8F  F006         	goto	u31
  1064  000D1A  EF91  F006         	goto	u30
  1065  000D1E                     u31:
  1066  000D1E  EF94  F006         	goto	l114
  1067  000D22                     u30:
  1068  000D22  0E0C               	movlw	12
  1069  000D24  EC19  F006         	call	_ENVIA_LCD_CMD
  1070  000D28                     l114:
  1071  000D28  0012               	return		;funcret
  1072  000D2A                     __end_of_CURSOR_ONOFF:
  1073                           	callstack 0
  1074                           
  1075 ;; *************** function _CURSOR_HOME *****************
  1076 ;; Defined at:
  1077 ;;		line 30 in file "LCD.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, status,2, status,0, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1091 ;;      Params:         0       0       0       0       0       0       0       0       0
  1092 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1094 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels used: 1
  1097 ;; Hardware stack levels required when called: 3
  1098 ;; This function calls:
  1099 ;;		_ENVIA_LCD_CMD
  1100 ;; This function is called by:
  1101 ;;		_arranque_LCD
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text8
  1106  000D54                     __ptext8:
  1107                           	callstack 0
  1108  000D54                     _CURSOR_HOME:
  1109                           	callstack 26
  1110  000D54                     
  1111                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
  1112  000D54  0E02               	movlw	2
  1113  000D56  EC19  F006         	call	_ENVIA_LCD_CMD
  1114  000D5A  0012               	return		;funcret
  1115  000D5C                     __end_of_CURSOR_HOME:
  1116                           	callstack 0
  1117                           
  1118 ;; *************** function _BORRAR_LCD *****************
  1119 ;; Defined at:
  1120 ;;		line 67 in file "LCD.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1134 ;;      Params:         0       0       0       0       0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1137 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1138 ;;Total ram usage:        0 bytes
  1139 ;; Hardware stack levels used: 1
  1140 ;; Hardware stack levels required when called: 3
  1141 ;; This function calls:
  1142 ;;		_ENVIA_LCD_CMD
  1143 ;; This function is called by:
  1144 ;;		_arranque_LCD
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text9
  1149  000D5C                     __ptext9:
  1150                           	callstack 0
  1151  000D5C                     _BORRAR_LCD:
  1152                           	callstack 26
  1153  000D5C                     
  1154                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
  1155  000D5C  0E01               	movlw	1
  1156  000D5E  EC19  F006         	call	_ENVIA_LCD_CMD
  1157  000D62  0012               	return		;funcret
  1158  000D64                     __end_of_BORRAR_LCD:
  1159                           	callstack 0
  1160                           
  1161 ;; *************** function _POS_CURSOR *****************
  1162 ;; Defined at:
  1163 ;;		line 6 in file "LCD.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  fila            1    wreg     unsigned char 
  1166 ;;  columna         1    3[COMRAM] unsigned char 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  fila            1    4[COMRAM] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1178 ;;      Params:         1       0       0       0       0       0       0       0       0
  1179 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1181 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1182 ;;Total ram usage:        2 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 3
  1185 ;; This function calls:
  1186 ;;		_ENVIA_LCD_CMD
  1187 ;; This function is called by:
  1188 ;;		_main
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192                           	psect	text10
  1193  000BC4                     __ptext10:
  1194                           	callstack 0
  1195  000BC4                     _POS_CURSOR:
  1196                           	callstack 27
  1197                           
  1198                           ;incstack = 0
  1199                           ;POS_CURSOR@fila stored from wreg
  1200  000BC4  6E05               	movwf	POS_CURSOR@fila^0,c
  1201  000BC6                     
  1202                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1203  000BC6  0405               	decf	POS_CURSOR@fila^0,w,c
  1204  000BC8  A4D8               	btfss	status,2,c
  1205  000BCA  EFE9  F005         	goto	u391
  1206  000BCE  EFEB  F005         	goto	u390
  1207  000BD2                     u391:
  1208  000BD2  EFF1  F005         	goto	l1250
  1209  000BD6                     u390:
  1210  000BD6                     
  1211                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1212  000BD6  5004               	movf	POS_CURSOR@columna^0,w,c
  1213  000BD8  0F80               	addlw	128
  1214  000BDA  EC19  F006         	call	_ENVIA_LCD_CMD
  1215                           
  1216                           ;LCD.c: 11:  }
  1217  000BDE  EFFE  F005         	goto	l96
  1218  000BE2                     l1250:
  1219  000BE2  0E02               	movlw	2
  1220  000BE4  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1221  000BE6  A4D8               	btfss	status,2,c
  1222  000BE8  EFF8  F005         	goto	u401
  1223  000BEC  EFFA  F005         	goto	u400
  1224  000BF0                     u401:
  1225  000BF0  EFFE  F005         	goto	l96
  1226  000BF4                     u400:
  1227  000BF4                     
  1228                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1229  000BF4  5004               	movf	POS_CURSOR@columna^0,w,c
  1230  000BF6  0FC0               	addlw	192
  1231  000BF8  EC19  F006         	call	_ENVIA_LCD_CMD
  1232  000BFC                     l96:
  1233  000BFC  0012               	return		;funcret
  1234  000BFE                     __end_of_POS_CURSOR:
  1235                           	callstack 0
  1236                           
  1237 ;; *************** function _ENVIA_LCD_CMD *****************
  1238 ;; Defined at:
  1239 ;;		line 104 in file "LCD.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  dato            1    wreg     unsigned char 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  dato            1    1[COMRAM] unsigned char 
  1244 ;;  aux             1    2[COMRAM] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1254 ;;      Params:         0       0       0       0       0       0       0       0       0
  1255 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1257 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1258 ;;Total ram usage:        2 bytes
  1259 ;; Hardware stack levels used: 1
  1260 ;; Hardware stack levels required when called: 2
  1261 ;; This function calls:
  1262 ;;		_ENVIA_NIBBLE
  1263 ;;		_LEER_LCD
  1264 ;; This function is called by:
  1265 ;;		_POS_CURSOR
  1266 ;;		_CURSOR_HOME
  1267 ;;		_CURSOR_ONOFF
  1268 ;;		_BORRAR_LCD
  1269 ;;		_LCD_CONFIG
  1270 ;;		_BLINK_CURSOR
  1271 ;;		_DISPLAY_ONOFF
  1272 ;;		_GENERACARACTER
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text11
  1277  000C32                     __ptext11:
  1278                           	callstack 0
  1279  000C32                     _ENVIA_LCD_CMD:
  1280                           	callstack 26
  1281                           
  1282                           ;incstack = 0
  1283                           ;ENVIA_LCD_CMD@dato stored from wreg
  1284  000C32  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1285  000C34                     
  1286                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1287  000C34  908C               	bcf	140,0,c	;volatile
  1288  000C36                     
  1289                           ;LCD.c: 108:  LEER_LCD();
  1290  000C36  EC28  F005         	call	_LEER_LCD	;wreg free
  1291  000C3A                     
  1292                           ;LCD.c: 109:  TRISD = 0b00000000;
  1293  000C3A  0E00               	movlw	0
  1294  000C3C  6E95               	movwf	149,c	;volatile
  1295  000C3E                     
  1296                           ;LCD.c: 111:         _delay(1200);
  1297  000C3E  0EF0               	movlw	240
  1298  000C40                     u487:
  1299  000C40  D000               	nop2	
  1300  000C42  2EE8               	decfsz	wreg,f,c
  1301  000C44  D7FD               	bra	u487
  1302  000C46                     
  1303                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1304  000C46  928C               	bcf	140,1,c	;volatile
  1305  000C48                     
  1306                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1307  000C48  948C               	bcf	140,2,c	;volatile
  1308  000C4A                     
  1309                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1310  000C4A  908C               	bcf	140,0,c	;volatile
  1311  000C4C                     
  1312                           ;LCD.c: 115:  aux = dato & 0xF0;
  1313  000C4C  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1314  000C4E  0BF0               	andlw	240
  1315  000C50  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1316  000C52                     
  1317                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1318  000C52  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1319  000C54  EC95  F006         	call	_ENVIA_NIBBLE
  1320  000C58                     
  1321                           ;LCD.c: 117:  aux = dato<<4;
  1322  000C58  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1323  000C5A  0BF0               	andlw	240
  1324  000C5C  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1325  000C5E                     
  1326                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1327  000C5E  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1328  000C60  EC95  F006         	call	_ENVIA_NIBBLE
  1329  000C64  0012               	return		;funcret
  1330  000C66                     __end_of_ENVIA_LCD_CMD:
  1331                           	callstack 0
  1332                           
  1333 ;; *************** function _ESCRIBE_MENSAJE *****************
  1334 ;; Defined at:
  1335 ;;		line 41 in file "LCD.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1338 ;;		 -> STR_2(7), STR_1(13), 
  1339 ;;  tam             1    5[COMRAM] unsigned char 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  i               1    8[COMRAM] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1351 ;;      Params:         3       0       0       0       0       0       0       0       0
  1352 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1353 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1354 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1355 ;;Total ram usage:        6 bytes
  1356 ;; Hardware stack levels used: 1
  1357 ;; Hardware stack levels required when called: 3
  1358 ;; This function calls:
  1359 ;;		_ENVIA_CHAR
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text12
  1366  000B86                     __ptext12:
  1367                           	callstack 0
  1368  000B86                     _ESCRIBE_MENSAJE:
  1369                           	callstack 27
  1370  000B86                     
  1371                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1372  000B86  0E00               	movlw	0
  1373  000B88  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1374                           
  1375                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1376  000B8A  0E00               	movlw	0
  1377  000B8C  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1378  000B8E  EFD8  F005         	goto	l1260
  1379  000B92                     l1256:
  1380                           
  1381                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1382  000B92  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1383  000B94  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1384  000B96  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1385  000B98  0E00               	movlw	0
  1386  000B9A  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1387  000B9C  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1388  000B9E  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1389  000BA2  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1390  000BA6                     	if	0	;tblptru may be non-zero
  1391  000BA6                     	endif
  1392  000BA6                     	if	0	;tblptru may be non-zero
  1393  000BA6                     	endif
  1394  000BA6  0008               	tblrd		*
  1395  000BA8  50F5               	movf	tablat,w,c
  1396  000BAA  EC33  F006         	call	_ENVIA_CHAR
  1397  000BAE                     
  1398                           ;LCD.c: 47:  }
  1399  000BAE  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1400  000BB0                     l1260:
  1401  000BB0  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1402  000BB2  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1403  000BB4  A0D8               	btfss	status,0,c
  1404  000BB6  EFDF  F005         	goto	u411
  1405  000BBA  EFE1  F005         	goto	u410
  1406  000BBE                     u411:
  1407  000BBE  EFC9  F005         	goto	l1256
  1408  000BC2                     u410:
  1409  000BC2  0012               	return		;funcret
  1410  000BC4                     __end_of_ESCRIBE_MENSAJE:
  1411                           	callstack 0
  1412                           
  1413 ;; *************** function _ENVIA_CHAR *****************
  1414 ;; Defined at:
  1415 ;;		line 50 in file "LCD.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  dato            1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  dato            1    1[COMRAM] unsigned char 
  1420 ;;  aux             1    2[COMRAM] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0
  1431 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1433 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels used: 1
  1436 ;; Hardware stack levels required when called: 2
  1437 ;; This function calls:
  1438 ;;		_ENVIA_NIBBLE
  1439 ;;		_LEER_LCD
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;;		_ESCRIBE_MENSAJE
  1443 ;;		_GENERACARACTER
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text13
  1448  000C66                     __ptext13:
  1449                           	callstack 0
  1450  000C66                     _ENVIA_CHAR:
  1451                           	callstack 27
  1452                           
  1453                           ;incstack = 0
  1454                           ;ENVIA_CHAR@dato stored from wreg
  1455  000C66  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1456  000C68                     
  1457                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1458  000C68  808C               	bsf	140,0,c	;volatile
  1459  000C6A                     
  1460                           ;LCD.c: 54:  LEER_LCD();
  1461  000C6A  EC28  F005         	call	_LEER_LCD	;wreg free
  1462  000C6E                     
  1463                           ;LCD.c: 55:  TRISD = 0x00;
  1464  000C6E  0E00               	movlw	0
  1465  000C70  6E95               	movwf	149,c	;volatile
  1466  000C72                     
  1467                           ;LCD.c: 56:         _delay(1200);
  1468  000C72  0EF0               	movlw	240
  1469  000C74                     u497:
  1470  000C74  D000               	nop2	
  1471  000C76  2EE8               	decfsz	wreg,f,c
  1472  000C78  D7FD               	bra	u497
  1473  000C7A                     
  1474                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1475  000C7A  928C               	bcf	140,1,c	;volatile
  1476  000C7C                     
  1477                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1478  000C7C  948C               	bcf	140,2,c	;volatile
  1479  000C7E                     
  1480                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1481  000C7E  808C               	bsf	140,0,c	;volatile
  1482  000C80                     
  1483                           ;LCD.c: 61:  aux = dato & 0xF0;
  1484  000C80  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1485  000C82  0BF0               	andlw	240
  1486  000C84  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1487  000C86                     
  1488                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1489  000C86  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1490  000C88  EC95  F006         	call	_ENVIA_NIBBLE
  1491  000C8C                     
  1492                           ;LCD.c: 63:  aux = dato << 4;
  1493  000C8C  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1494  000C8E  0BF0               	andlw	240
  1495  000C90  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1496  000C92                     
  1497                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1498  000C92  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1499  000C94  EC95  F006         	call	_ENVIA_NIBBLE
  1500  000C98  0012               	return		;funcret
  1501  000C9A                     __end_of_ENVIA_CHAR:
  1502                           	callstack 0
  1503                           
  1504 ;; *************** function _LEER_LCD *****************
  1505 ;; Defined at:
  1506 ;;		line 121 in file "LCD.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;		None
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  aux             1    0[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1520 ;;      Params:         0       0       0       0       0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1523 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1524 ;;Total ram usage:        1 bytes
  1525 ;; Hardware stack levels used: 1
  1526 ;; Hardware stack levels required when called: 1
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_ENVIA_CHAR
  1531 ;;		_ENVIA_LCD_CMD
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           	psect	text14
  1536  000A50                     __ptext14:
  1537                           	callstack 0
  1538  000A50                     _LEER_LCD:
  1539                           	callstack 26
  1540  000A50                     
  1541                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1542  000A50  0EF8               	movlw	248
  1543  000A52  6E95               	movwf	149,c	;volatile
  1544  000A54                     
  1545                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1546  000A54  908C               	bcf	140,0,c	;volatile
  1547  000A56                     
  1548                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1549  000A56  828C               	bsf	140,1,c	;volatile
  1550  000A58                     
  1551                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1552  000A58  848C               	bsf	140,2,c	;volatile
  1553  000A5A                     
  1554                           ;LCD.c: 128:         _delay(1200);
  1555  000A5A  0EF0               	movlw	240
  1556  000A5C                     u507:
  1557  000A5C  D000               	nop2	
  1558  000A5E  2EE8               	decfsz	wreg,f,c
  1559  000A60  D7FD               	bra	u507
  1560  000A62                     
  1561                           ;LCD.c: 130:  aux = PORTD;
  1562  000A62  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1563  000A66                     
  1564                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1565  000A66  948C               	bcf	140,2,c	;volatile
  1566  000A68                     
  1567                           ;LCD.c: 132:         _delay(1200);
  1568  000A68  0EF0               	movlw	240
  1569  000A6A                     u517:
  1570  000A6A  D000               	nop2	
  1571  000A6C  2EE8               	decfsz	wreg,f,c
  1572  000A6E  D7FD               	bra	u517
  1573  000A70                     
  1574                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1575  000A70  848C               	bsf	140,2,c	;volatile
  1576  000A72                     
  1577                           ;LCD.c: 135:         _delay(1200);
  1578  000A72  0EF0               	movlw	240
  1579  000A74                     u527:
  1580  000A74  D000               	nop2	
  1581  000A76  2EE8               	decfsz	wreg,f,c
  1582  000A78  D7FD               	bra	u527
  1583  000A7A                     
  1584                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1585  000A7A  948C               	bcf	140,2,c	;volatile
  1586  000A7C                     l844:
  1587                           
  1588                           ;LCD.c: 138:  aux = aux & 0x80;
  1589  000A7C  5001               	movf	LEER_LCD@aux^0,w,c
  1590  000A7E  0B80               	andlw	128
  1591  000A80  6E01               	movwf	LEER_LCD@aux^0,c
  1592                           
  1593                           ;LCD.c: 139:  while(aux == 0x80)
  1594  000A82  EF57  F005         	goto	l858
  1595  000A86                     l139:
  1596                           
  1597                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1598  000A86  848C               	bsf	140,2,c	;volatile
  1599  000A88                     
  1600                           ;LCD.c: 142:             _delay(1200);
  1601  000A88  0EF0               	movlw	240
  1602  000A8A                     u537:
  1603  000A8A  D000               	nop2	
  1604  000A8C  2EE8               	decfsz	wreg,f,c
  1605  000A8E  D7FD               	bra	u537
  1606  000A90                     
  1607                           ;LCD.c: 143:             aux = PORTD;
  1608  000A90  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1609  000A94                     
  1610                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1611  000A94  948C               	bcf	140,2,c	;volatile
  1612                           
  1613                           ;LCD.c: 145:             _delay(1200);
  1614  000A96  0EF0               	movlw	240
  1615  000A98                     u547:
  1616  000A98  D000               	nop2	
  1617  000A9A  2EE8               	decfsz	wreg,f,c
  1618  000A9C  D7FD               	bra	u547
  1619  000A9E                     
  1620                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1621  000A9E  848C               	bsf	140,2,c	;volatile
  1622                           
  1623                           ;LCD.c: 147:             _delay(1200);
  1624  000AA0  0EF0               	movlw	240
  1625  000AA2                     u557:
  1626  000AA2  D000               	nop2	
  1627  000AA4  2EE8               	decfsz	wreg,f,c
  1628  000AA6  D7FD               	bra	u557
  1629  000AA8                     
  1630                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1631  000AA8  948C               	bcf	140,2,c	;volatile
  1632  000AAA  EF3E  F005         	goto	l844
  1633  000AAE                     l858:
  1634                           
  1635                           ;LCD.c: 139:  while(aux == 0x80)
  1636  000AAE  0E80               	movlw	128
  1637  000AB0  1801               	xorwf	LEER_LCD@aux^0,w,c
  1638  000AB2  B4D8               	btfsc	status,2,c
  1639  000AB4  EF5E  F005         	goto	u11
  1640  000AB8  EF60  F005         	goto	u10
  1641  000ABC                     u11:
  1642  000ABC  EF43  F005         	goto	l139
  1643  000AC0                     u10:
  1644  000AC0  0012               	return		;funcret
  1645  000AC2                     __end_of_LEER_LCD:
  1646                           	callstack 0
  1647                           
  1648 ;; *************** function _ENVIA_NIBBLE *****************
  1649 ;; Defined at:
  1650 ;;		line 93 in file "LCD.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  dato            1    wreg     unsigned char 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  dato            1    0[COMRAM] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0
  1665 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        1 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; Hardware stack levels required when called: 1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_ENVIA_CHAR
  1675 ;;		_LCD_CONFIG
  1676 ;;		_ENVIA_LCD_CMD
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text15
  1681  000D2A                     __ptext15:
  1682                           	callstack 0
  1683  000D2A                     _ENVIA_NIBBLE:
  1684                           	callstack 27
  1685                           
  1686                           ;incstack = 0
  1687                           ;ENVIA_NIBBLE@dato stored from wreg
  1688  000D2A  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1689  000D2C                     
  1690                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1691  000D2C  0E0F               	movlw	15
  1692  000D2E  168C               	andwf	140,f,c	;volatile
  1693                           
  1694                           ;LCD.c: 96:  dato &= 0xF0;
  1695  000D30  0EF0               	movlw	240
  1696  000D32  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1697                           
  1698                           ;LCD.c: 97:  LATD|= dato;
  1699  000D34  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1700  000D36  128C               	iorwf	140,f,c	;volatile
  1701  000D38                     
  1702                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1703  000D38  848C               	bsf	140,2,c	;volatile
  1704  000D3A                     
  1705                           ;LCD.c: 100:         _delay(1200);
  1706  000D3A  0EF0               	movlw	240
  1707  000D3C                     u567:
  1708  000D3C  D000               	nop2	
  1709  000D3E  2EE8               	decfsz	wreg,f,c
  1710  000D40  D7FD               	bra	u567
  1711  000D42                     
  1712                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1713  000D42  948C               	bcf	140,2,c	;volatile
  1714  000D44  0012               	return		;funcret
  1715  000D46                     __end_of_ENVIA_NIBBLE:
  1716                           	callstack 0
  1717                           
  1718 ;; *************** function _TMR1_ISR *****************
  1719 ;; Defined at:
  1720 ;;		line 62 in file "maincode02.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1734 ;;      Params:         0       0       0       0       0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		Interrupt level 2
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	intcode
  1748  000008                     __pintcode:
  1749                           	callstack 0
  1750  000008                     _TMR1_ISR:
  1751                           	callstack 26
  1752                           
  1753                           ;incstack = 0
  1754  000008  8211               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1755  00000A  ED61  F005         	call	int_func,f	;refresh shadow registers
  1756                           
  1757                           	psect	intcode_body
  1758  000AC2                     __pintcode_body:
  1759                           	callstack 26
  1760  000AC2                     int_func:
  1761                           	callstack 26
  1762  000AC2  0006               	pop		; remove dummy address from shadow register refresh
  1763  000AC4                     
  1764                           ;maincode02.c: 63:     PIR1bits.TMR1IF = 0;
  1765  000AC4  909E               	bcf	158,0,c	;volatile
  1766  000AC6                     
  1767                           ;maincode02.c: 64:     TMR1H = 0x80;
  1768  000AC6  0E80               	movlw	128
  1769  000AC8  6ECF               	movwf	207,c	;volatile
  1770                           
  1771                           ;maincode02.c: 65:     TMR1L = 0x00;
  1772  000ACA  0E00               	movlw	0
  1773  000ACC  6ECE               	movwf	206,c	;volatile
  1774  000ACE                     
  1775                           ;maincode02.c: 66:     if(segundos == 59){
  1776  000ACE  0E3B               	movlw	59
  1777  000AD0  180C               	xorwf	_segundos^0,w,c
  1778  000AD2  A4D8               	btfss	status,2,c
  1779  000AD4  EF6E  F005         	goto	i2u19_41
  1780  000AD8  EF70  F005         	goto	i2u19_40
  1781  000ADC                     i2u19_41:
  1782  000ADC  EF90  F005         	goto	i2l1130
  1783  000AE0                     i2u19_40:
  1784  000AE0                     
  1785                           ;maincode02.c: 67:         segundos = 0;
  1786  000AE0  0E00               	movlw	0
  1787  000AE2  6E0C               	movwf	_segundos^0,c
  1788  000AE4                     
  1789                           ;maincode02.c: 68:         if(minutos == 59){
  1790  000AE4  0E3B               	movlw	59
  1791  000AE6  180D               	xorwf	_minutos^0,w,c
  1792  000AE8  A4D8               	btfss	status,2,c
  1793  000AEA  EF79  F005         	goto	i2u20_41
  1794  000AEE  EF7B  F005         	goto	i2u20_40
  1795  000AF2                     i2u20_41:
  1796  000AF2  EF8D  F005         	goto	i2l1128
  1797  000AF6                     i2u20_40:
  1798  000AF6                     
  1799                           ;maincode02.c: 69:             minutos = 0;
  1800  000AF6  0E00               	movlw	0
  1801  000AF8  6E0D               	movwf	_minutos^0,c
  1802  000AFA                     
  1803                           ;maincode02.c: 70:             if(horas == 23){
  1804  000AFA  0E17               	movlw	23
  1805  000AFC  180E               	xorwf	_horas^0,w,c
  1806  000AFE  A4D8               	btfss	status,2,c
  1807  000B00  EF84  F005         	goto	i2u21_41
  1808  000B04  EF86  F005         	goto	i2u21_40
  1809  000B08                     i2u21_41:
  1810  000B08  EF8A  F005         	goto	i2l1126
  1811  000B0C                     i2u21_40:
  1812  000B0C                     
  1813                           ;maincode02.c: 71:                 horas = 0;
  1814  000B0C  0E00               	movlw	0
  1815  000B0E  6E0E               	movwf	_horas^0,c
  1816                           
  1817                           ;maincode02.c: 72:             }
  1818  000B10  EF91  F005         	goto	i2l72
  1819  000B14                     i2l1126:
  1820                           
  1821                           ;maincode02.c: 74:                 horas++;
  1822  000B14  2A0E               	incf	_horas^0,f,c
  1823  000B16  EF91  F005         	goto	i2l72
  1824  000B1A                     i2l1128:
  1825                           
  1826                           ;maincode02.c: 78:             minutos++;
  1827  000B1A  2A0D               	incf	_minutos^0,f,c
  1828  000B1C  EF91  F005         	goto	i2l72
  1829  000B20                     i2l1130:
  1830                           
  1831                           ;maincode02.c: 82:         segundos++;
  1832  000B20  2A0C               	incf	_segundos^0,f,c
  1833  000B22                     i2l72:
  1834  000B22  9211               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1835  000B24  0011               	retfie		f
  1836  000B26                     __end_of_TMR1_ISR:
  1837                           	callstack 0
  1838                           
  1839                           	psect	rparam
  1840  0000                     
  1841                           	psect	temp
  1842  000011                     btemp:
  1843                           	callstack 0
  1844  000011                     	ds	1
  1845  0000                     int$flags	set	btemp
  1846  0000                     wtemp8	set	btemp+1
  1847  0000                     ttemp5	set	btemp+1
  1848  0000                     ttemp6	set	btemp+4
  1849  0000                     ttemp7	set	btemp+8
  1850                           
  1851                           	psect	idloc
  1852                           
  1853                           ;Config register IDLOC0 @ 0x200000
  1854                           ;	unspecified, using default values
  1855  200000                     	org	2097152
  1856  200000  FF                 	db	255
  1857                           
  1858                           ;Config register IDLOC1 @ 0x200001
  1859                           ;	unspecified, using default values
  1860  200001                     	org	2097153
  1861  200001  FF                 	db	255
  1862                           
  1863                           ;Config register IDLOC2 @ 0x200002
  1864                           ;	unspecified, using default values
  1865  200002                     	org	2097154
  1866  200002  FF                 	db	255
  1867                           
  1868                           ;Config register IDLOC3 @ 0x200003
  1869                           ;	unspecified, using default values
  1870  200003                     	org	2097155
  1871  200003  FF                 	db	255
  1872                           
  1873                           ;Config register IDLOC4 @ 0x200004
  1874                           ;	unspecified, using default values
  1875  200004                     	org	2097156
  1876  200004  FF                 	db	255
  1877                           
  1878                           ;Config register IDLOC5 @ 0x200005
  1879                           ;	unspecified, using default values
  1880  200005                     	org	2097157
  1881  200005  FF                 	db	255
  1882                           
  1883                           ;Config register IDLOC6 @ 0x200006
  1884                           ;	unspecified, using default values
  1885  200006                     	org	2097158
  1886  200006  FF                 	db	255
  1887                           
  1888                           ;Config register IDLOC7 @ 0x200007
  1889                           ;	unspecified, using default values
  1890  200007                     	org	2097159
  1891  200007  FF                 	db	255
  1892                           
  1893                           	psect	config
  1894                           
  1895                           ;Config register CONFIG1L @ 0x300000
  1896                           ;	PLL Prescaler Selection bits
  1897                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1898                           ;	System Clock Postscaler Selection bits
  1899                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1900                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1901                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1902  300000                     	org	3145728
  1903  300000  00                 	db	0
  1904                           
  1905                           ;Config register CONFIG1H @ 0x300001
  1906                           ;	Oscillator Selection bits
  1907                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1908                           ;	Fail-Safe Clock Monitor Enable bit
  1909                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1910                           ;	Internal/External Oscillator Switchover bit
  1911                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1912  300001                     	org	3145729
  1913  300001  02                 	db	2
  1914                           
  1915                           ;Config register CONFIG2L @ 0x300002
  1916                           ;	Power-up Timer Enable bit
  1917                           ;	PWRT = ON, PWRT enabled
  1918                           ;	Brown-out Reset Enable bits
  1919                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1920                           ;	Brown-out Reset Voltage bits
  1921                           ;	BORV = 3, Minimum setting 2.05V
  1922                           ;	USB Voltage Regulator Enable bit
  1923                           ;	VREGEN = OFF, USB voltage regulator disabled
  1924  300002                     	org	3145730
  1925  300002  18                 	db	24
  1926                           
  1927                           ;Config register CONFIG2H @ 0x300003
  1928                           ;	Watchdog Timer Enable bit
  1929                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1930                           ;	Watchdog Timer Postscale Select bits
  1931                           ;	WDTPS = 32768, 1:32768
  1932  300003                     	org	3145731
  1933  300003  1E                 	db	30
  1934                           
  1935                           ; Padding undefined space
  1936  300004                     	org	3145732
  1937  300004  FF                 	db	255
  1938                           
  1939                           ;Config register CONFIG3H @ 0x300005
  1940                           ;	CCP2 MUX bit
  1941                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1942                           ;	PORTB A/D Enable bit
  1943                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1944                           ;	Low-Power Timer 1 Oscillator Enable bit
  1945                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1946                           ;	MCLR Pin Enable bit
  1947                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1948  300005                     	org	3145733
  1949  300005  81                 	db	129
  1950                           
  1951                           ;Config register CONFIG4L @ 0x300006
  1952                           ;	Stack Full/Underflow Reset Enable bit
  1953                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1954                           ;	Single-Supply ICSP Enable bit
  1955                           ;	LVP = OFF, Single-Supply ICSP disabled
  1956                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1957                           ;	ICPRT = OFF, ICPORT disabled
  1958                           ;	Extended Instruction Set Enable bit
  1959                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1960                           ;	Background Debugger Enable bit
  1961                           ;	DEBUG = 0x1, unprogrammed default
  1962  300006                     	org	3145734
  1963  300006  81                 	db	129
  1964                           
  1965                           ; Padding undefined space
  1966  300007                     	org	3145735
  1967  300007  FF                 	db	255
  1968                           
  1969                           ;Config register CONFIG5L @ 0x300008
  1970                           ;	Code Protection bit
  1971                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1972                           ;	Code Protection bit
  1973                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1974                           ;	Code Protection bit
  1975                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1976                           ;	Code Protection bit
  1977                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1978  300008                     	org	3145736
  1979  300008  0F                 	db	15
  1980                           
  1981                           ;Config register CONFIG5H @ 0x300009
  1982                           ;	Boot Block Code Protection bit
  1983                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1984                           ;	Data EEPROM Code Protection bit
  1985                           ;	CPD = OFF, Data EEPROM is not code-protected
  1986  300009                     	org	3145737
  1987  300009  C0                 	db	192
  1988                           
  1989                           ;Config register CONFIG6L @ 0x30000A
  1990                           ;	Write Protection bit
  1991                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1992                           ;	Write Protection bit
  1993                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1994                           ;	Write Protection bit
  1995                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1996                           ;	Write Protection bit
  1997                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1998  30000A                     	org	3145738
  1999  30000A  0F                 	db	15
  2000                           
  2001                           ;Config register CONFIG6H @ 0x30000B
  2002                           ;	Configuration Register Write Protection bit
  2003                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2004                           ;	Boot Block Write Protection bit
  2005                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2006                           ;	Data EEPROM Write Protection bit
  2007                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2008  30000B                     	org	3145739
  2009  30000B  E0                 	db	224
  2010                           
  2011                           ;Config register CONFIG7L @ 0x30000C
  2012                           ;	Table Read Protection bit
  2013                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2014                           ;	Table Read Protection bit
  2015                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2016                           ;	Table Read Protection bit
  2017                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2018                           ;	Table Read Protection bit
  2019                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2020  30000C                     	org	3145740
  2021  30000C  0F                 	db	15
  2022                           
  2023                           ;Config register CONFIG7H @ 0x30000D
  2024                           ;	Boot Block Table Read Protection bit
  2025                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2026  30000D                     	org	3145741
  2027  30000D  40                 	db	64
  2028                           tosu	equ	0xFFF
  2029                           tosh	equ	0xFFE
  2030                           tosl	equ	0xFFD
  2031                           stkptr	equ	0xFFC
  2032                           pclatu	equ	0xFFB
  2033                           pclath	equ	0xFFA
  2034                           pcl	equ	0xFF9
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           indf0	equ	0xFEF
  2042                           postinc0	equ	0xFEE
  2043                           postdec0	equ	0xFED
  2044                           preinc0	equ	0xFEC
  2045                           plusw0	equ	0xFEB
  2046                           fsr0h	equ	0xFEA
  2047                           fsr0l	equ	0xFE9
  2048                           wreg	equ	0xFE8
  2049                           indf1	equ	0xFE7
  2050                           postinc1	equ	0xFE6
  2051                           postdec1	equ	0xFE5
  2052                           preinc1	equ	0xFE4
  2053                           plusw1	equ	0xFE3
  2054                           fsr1h	equ	0xFE2
  2055                           fsr1l	equ	0xFE1
  2056                           bsr	equ	0xFE0
  2057                           indf2	equ	0xFDF
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           preinc2	equ	0xFDC
  2061                           plusw2	equ	0xFDB
  2062                           fsr2h	equ	0xFDA
  2063                           fsr2l	equ	0xFD9
  2064                           status	equ	0xFD8

Data Sizes:
    Strings     20
    Constant    0
    Data        3
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[7]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _main->_individualizacion_digitos
    _individualizacion_digitos->___awdiv
    _arranque_LCD->_CURSOR_ONOFF
    _arranque_LCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _TMR1_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR1_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR1_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR1_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR1_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2464
                                              9 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                       _arranque_LCD
                          _configuro
          _individualizacion_digitos
 ---------------------------------------------------------------------------------
 (1) _individualizacion_digitos                            1     1      0     944
                                              8 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _arranque_LCD                                         2     2      0     525
                                              4 COMRAM     2     2      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arranque_LCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
   _configuro
   _individualizacion_digitos
     ___awdiv
     ___awmod

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B      10       1       17.0%
BITBIGSFRhlh        2E      0       0      22        0.0%
BITBIGSFRlll        23      0       0      28        0.0%
BITBIGSFRhhlh       22      0       0      21        0.0%
BITBIGSFRhhh         D      0       0      20        0.0%
BITBIGSFRhllh        7      0       0      23        0.0%
BITBIGSFRllh         6      0       0      27        0.0%
BITBIGSFRlhh         6      0       0      25        0.0%
BITBIGSFRlhl         1      0       0      26        0.0%
BITBIGSFRhlll        1      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      10      29        0.0%
DATA                 0      0      10       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Oct 14 18:09:58 2022

                               l50 0CC8                                 l53 0CF8  
                               l47 0D52                                 l96 0BFC  
                               u10 0AC0                                 u11 0ABC  
                               u20 0D0C                                 u21 0D08  
                               u30 0D22                                 u31 0D1E  
                     ___awdiv@sign 0006                      ?_arranque_LCD 0001  
                    ENVIA_CHAR@aux 0003                                l120 0BC2  
                              l114 0D28                                l123 0C98  
                              l132 0D44                                l141 0AC0  
                              l109 0D5A                                l126 0D62  
                              l135 0C64                                l129 0B84  
                              l139 0A86                                l380 099E  
                              l393 0A4E                                l900 0B5A  
                              l830 0A5A                                l822 0A50  
                              l910 0B78                                l902 0B60  
                              l840 0A72                                l832 0A62  
                              l824 0A54                                l920 0D0C  
                              l912 0B7E                                l904 0B66  
                              l850 0A94                                l842 0A7A  
                              l834 0A66                                l826 0A56  
                              l930 0C6E                                l914 0D5C  
                              l922 0D12                                l906 0B6C  
                              l860 0D2C                                l852 0A9E  
                              l844 0A7C                                l836 0A68  
                              l828 0A58                                l940 0C80  
                              l932 0C72                                l916 0D54  
                              l924 0D22                                l908 0B72  
                              l862 0D38                                l854 0AA8  
                              l846 0A88                                l838 0A70  
                              l942 0C86                                l934 0C7A  
                              l926 0C68                                l870 0C36  
                              l918 0CFC                                l864 0D3A  
                              l848 0A90                                l944 0C8C  
                              l936 0C7C                                l928 0C6A  
                              l880 0C4A                                l872 0C3A  
                              l866 0D42                                l858 0AAE  
                              l946 0C92                                l938 0C7E  
                              l882 0C4C                                l874 0C3E  
                              l890 0B26                                l884 0C52  
                              l876 0C46                                l868 0C34  
                              l892 0B2A                                l886 0C58  
                              l878 0C48                                l894 0B30  
                              l888 0C5E                                l896 0B3E  
                              l898 0B52                                u300 094C  
                              u301 0948                                u310 0968  
                              u311 0964                                u400 0BF4  
                              u320 098E                                u401 0BF0  
                              u321 098A                                u410 0BC2  
                              u330 09B2                                u411 0BBE  
                              u331 09AE                                u340 09CC  
                              u341 09C8                                u270 08EE  
                              u350 09E6                                u271 08EA  
                              u351 09E2                                u280 0908  
                              u360 0A04                                u281 0904  
                              u361 0A00                                u290 092E  
                              u370 0A1A                                u507 0A5C  
                              u291 092A                                u371 0A16  
                              u427 082A                                u380 0A3E  
                              u517 0A6A                                u381 0A3A  
                              u437 0844                                u390 0BD6  
                              u527 0A74                                u391 0BD2  
                              u447 0CDC                                u537 0A8A  
                              u457 0B36                                u547 0A98  
                              u467 0B44                                u557 0AA2  
                              u477 0B54                                u567 0D3C  
                              u487 0C40                                u497 0C74  
                     ___awmod@sign 0006                        LEER_LCD@aux 0001  
                              wreg 000FE8                       ?_CURSOR_HOME 0001  
                   ??_ENVIA_NIBBLE 0001                     ENVIA_CHAR@dato 0002  
                             l1030 0D48                               l1040 0CCA  
                             l1032 0D4C                               l1200 097E  
                             l1050 0CF2                               l1042 0CCE  
                             l1034 0D4E                               l1202 098E  
                             l1210 09A4                               l1044 0CD2  
                             l1036 0D50                               l1028 0D46  
                             l1204 0996                               l1220 09D4  
                             l1212 09B2                               l1300 08C4  
                             l1046 0CEA                               l1230 0A1A  
                             l1222 09E6                               l1214 09BA  
                             l1302 08CC                               l1048 0CEE  
                             l1240 0A46                               l1232 0A22  
                             l1224 09EE                               l1216 09BE  
                             l1208 09A0                               l1250 0BE2  
                             l1170 08F6                               l1234 0A28  
                             l1226 09F6                               l1218 09CC  
                             l1260 0BB0                               l1252 0BF4  
                             l1180 091C                               l1172 08FA  
                             l1164 08DC                               l1228 0A04  
                             l1236 0A2E                               l1244 0C9C  
                             l1254 0B86                               l1246 0BC6  
                             l1190 0952                               l1182 092E  
                             l1174 0908                               l1166 08E0  
                             l1238 0A3E                               l1270 0838  
                             l1262 0816                               l1256 0B92  
                             l1248 0BD6                               l1192 0968  
                             l1184 0936                               l1176 0910  
                             l1168 08EE                               l1280 0876  
                             l1272 083A                               l1264 081A  
                             l1258 0BAE                               l1194 0970  
                             l1186 093E                               l1178 0914  
                             l1290 08A2                               l1282 0886  
                             l1274 0852                               l1266 081E  
                             l1196 0972                               l1188 094C  
                             l1292 08A8                               l1284 088C  
                             l1276 085C                               l1268 0820  
                             l1198 0978                               l1294 08B0  
                             l1286 0894                               l1278 086C  
                             l1296 08B8                               l1288 089C  
                             l1298 08BE                               STR_1 0801  
                             STR_2 080E                               _LATD 000F8C  
                             i2l72 0B22                               _main 0816  
                             btemp 0011                               start 000E  
                    ?_CURSOR_ONOFF 0001                       ___param_bank 000000  
                  ??_ENVIA_LCD_CMD 0002                   __end_of_LEER_LCD 0AC2  
                   ??_arranque_LCD 0005          _individualizacion_digitos 0C9A  
                            ?_main 0001                    __end_of___awdiv 09A0  
                  __end_of___awmod 0A50                    ___awdiv@divisor 0003  
                            _T1CON 000FCD                    ___awdiv@counter 0005  
                            _TMR1H 000FCF                              _TMR1L 000FCE  
                            _PORTD 000F83                              _TRISD 000F95  
                 __end_of_TMR1_ISR 0B26                              _horas 000E  
                      ?_POS_CURSOR 0004                              tablat 000FF5  
                            ttemp5 0012                              ttemp6 0015  
                            ttemp7 0019                              status 000FD8  
                            wtemp8 0012                     ??_CURSOR_ONOFF 0004  
                  __initialization 0BFE                       __end_of_main 08DC  
                  _ESCRIBE_MENSAJE 0B86                             ??_main 000A  
                    __activetblptr 000001                   ___awdiv@dividend 0001  
                           i2l1110 0AC4                             i2l1120 0AF6  
                           i2l1112 0AC6                             i2l1122 0AFA  
                           i2l1130 0B20                             i2l1114 0ACE  
                           i2l1124 0B0C                             i2l1116 0AE0  
                           i2l1126 0B14                             i2l1118 0AE4  
                           i2l1128 0B1A                          ??___awdiv 0005  
                           _decena 0010                          ??___awmod 0005  
             __end_of_ENVIA_NIBBLE 0D46                   ___awdiv@quotient 0007  
                  ___awmod@divisor 0003                             isa$std 000001  
                  ___awmod@counter 0005                             _unidad 000F  
                     __pdataCOMRAM 000C                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                       ??_BORRAR_LCD 0004  
             __end_of_arranque_LCD 0CFA                          ?_LEER_LCD 0001  
                       __accesstop 0060            __end_of__initialization 0C20  
  individualizacion_digitos@numero 0009                       ??_LCD_CONFIG 0004  
                    ___rparam_used 000001                       ??_ENVIA_CHAR 0002  
          __end_of_ESCRIBE_MENSAJE 0BC4                     __pcstackCOMRAM 0001  
                        ?_TMR1_ISR 0001                 __end_of_BORRAR_LCD 0D64  
                 ENVIA_LCD_CMD@aux 0003               __end_of_CURSOR_ONOFF 0D2A  
               __end_of_LCD_CONFIG 0B86                 __end_of_ENVIA_CHAR 0C9A  
                       ??_LEER_LCD 0001                   ENVIA_NIBBLE@dato 0001  
                       ??_TMR1_ISR 0001                            i2u20_40 0AF6  
                          i2u20_41 0AF2                            i2u21_40 0B0C  
                          i2u21_41 0B08                            i2u19_40 0AE0  
                          i2u19_41 0ADC                       ??_POS_CURSOR 0005  
__end_of_individualizacion_digitos 0CCA                            __Hparam 0000  
                          __Lparam 0000                   ?_ESCRIBE_MENSAJE 0004  
                __end_of_configuro 0D54                            ___awdiv 08DC  
                          ___awmod 09A0                       __psmallconst 0800  
            __end_of_ENVIA_LCD_CMD 0C66                            __pcinit 0BFE  
               __end_of_POS_CURSOR 0BFE                            __ramtop 0800  
                          __ptext0 0816                            __ptext1 0C9A  
                          __ptext2 09A0                            __ptext3 08DC  
                          __ptext4 0D46                            __ptext5 0CCA  
                          __ptext6 0B26                            __ptext7 0CFA  
                          __ptext8 0D54                            __ptext9 0D5C  
                 ___awmod@dividend 0001                            _minutos 000D  
                   __pintcode_body 0AC2                       _ENVIA_NIBBLE 0D2A  
             end_of_initialization 0C20                            int_func 0AC2  
                     _arranque_LCD 0CCA                          _TRISBbits 000F93  
                     _CURSOR_ONOFF 0CFA                 CURSOR_ONOFF@estado 0004  
                    __pidataCOMRAM 0D64                      ??_CURSOR_HOME 0004  
              start_initialization 0BFE                  ENVIA_LCD_CMD@dato 0002  
                      __pbssCOMRAM 000F                __end_of_CURSOR_HOME 0D5C  
                        __pintcode 0008                           ?___awdiv 0001  
                         ?___awmod 0001                          _configuro 0D46  
                      __smallconst 0800         ?_individualizacion_digitos 0001  
                         _LEER_LCD 0A50                           _LATBbits 000F8A  
                         _LATDbits 000F8C                           _PIE1bits 000F9D  
                         _PIR1bits 000F9E                           _TMR1_ISR 0008  
                 ESCRIBE_MENSAJE@i 0009                     POS_CURSOR@fila 0005  
                       ?_configuro 0001                        _CURSOR_HOME 0D54  
                         __Hrparam 0000                           __Lrparam 0000  
                     __Lsmallconst 0800                           __ptext10 0BC4  
                         __ptext11 0C32                           __ptext12 0B86  
                         __ptext13 0C66                           __ptext14 0A50  
                         __ptext15 0D2A                         _BORRAR_LCD 0D5C  
                       _LCD_CONFIG 0B26                         _ENVIA_CHAR 0C66  
                         _segundos 000C                           isa$xinst 000000  
                         int$flags 0011                      _ENVIA_LCD_CMD 0C32  
                      ??_configuro 0001                         _INTCONbits 000FF2  
                ??_ESCRIBE_MENSAJE 0007                           intlevel2 0000  
            ESCRIBE_MENSAJE@cadena 0004                     ?_ENVIA_LCD_CMD 0001  
                      ?_BORRAR_LCD 0001                      ?_ENVIA_NIBBLE 0001  
                       _POS_CURSOR 0BC4        ??_individualizacion_digitos 0009  
                      ?_LCD_CONFIG 0001                 ESCRIBE_MENSAJE@tam 0006  
                      ?_ENVIA_CHAR 0001                  POS_CURSOR@columna 0004  
