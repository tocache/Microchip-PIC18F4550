

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Oct 13 17:06:45 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.40
    37                           ; Generated 17/11/2021 GMT
    38                           ; 
    39                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  000D9C                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _segundos
    77  000D9C  25                 	db	37
    78                           
    79                           ;initializer for _minutos
    80  000D9D  16                 	db	22
    81                           
    82                           ;initializer for _horas
    83  000D9E  10                 	db	16
    84                           
    85                           ;initializer for _pacman
    86  000D9F  0E                 	db	14
    87  000DA0  11                 	db	17
    88  000DA1  12                 	db	18
    89  000DA2  14                 	db	20
    90  000DA3  12                 	db	18
    91  000DA4  11                 	db	17
    92  000DA5  0E                 	db	14
    93  000DA6  00                 	db	0
    94                           
    95                           ;initializer for _reloj
    96  000DA7  0E                 	db	14
    97  000DA8  15                 	db	21
    98  000DA9  15                 	db	21
    99  000DAA  17                 	db	23
   100  000DAB  11                 	db	17
   101  000DAC  11                 	db	17
   102  000DAD  0E                 	db	14
   103  000DAE  00                 	db	0
   104  0000                     _TMR1L	set	4046
   105  0000                     _TMR1H	set	4047
   106  0000                     _INTCONbits	set	4082
   107  0000                     _LATD	set	3980
   108  0000                     _PORTD	set	3971
   109  0000                     _LATDbits	set	3980
   110  0000                     _TRISD	set	3989
   111  0000                     _PIE1bits	set	3997
   112  0000                     _T1CON	set	4045
   113  0000                     _PIR1bits	set	3998
   114                           
   115                           	psect	smallconst
   116  000800                     __psmallconst:
   117                           	callstack 0
   118  000800  00                 	db	0
   119  000801                     STR_1:
   120  000801  48                 	db	72	;'H'
   121  000802  6F                 	db	111	;'o'
   122  000803  6C                 	db	108	;'l'
   123  000804  61                 	db	97	;'a'
   124  000805  20                 	db	32
   125  000806  55                 	db	85	;'U'
   126  000807  50                 	db	80	;'P'
   127  000808  43                 	db	67	;'C'
   128  000809  20                 	db	32
   129  00080A  4D                 	db	77	;'M'
   130  00080B  6F                 	db	111	;'o'
   131  00080C  6E                 	db	110	;'n'
   132  00080D  74                 	db	116	;'t'
   133  00080E  65                 	db	101	;'e'
   134  00080F  72                 	db	114	;'r'
   135  000810  72                 	db	114	;'r'
   136  000811  00                 	db	0
   137  000812  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           ; #config settings
   140                           
   141                           	psect	cinit
   142  000CB0                     __pcinit:
   143                           	callstack 0
   144  000CB0                     start_initialization:
   145                           	callstack 0
   146  000CB0                     __initialization:
   147                           	callstack 0
   148                           
   149                           ; Initialize objects allocated to COMRAM (19 bytes)
   150                           ; load TBLPTR registers with __pidataCOMRAM
   151  000CB0  0E9C               	movlw	low __pidataCOMRAM
   152  000CB2  6EF6               	movwf	tblptrl,c
   153  000CB4  0E0D               	movlw	high __pidataCOMRAM
   154  000CB6  6EF7               	movwf	tblptrh,c
   155  000CB8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   156  000CBA  6EF8               	movwf	tblptru,c
   157  000CBC  EE00  F001         	lfsr	0,__pdataCOMRAM
   158  000CC0  EE10 F013          	lfsr	1,19
   159  000CC4                     copy_data0:
   160  000CC4  0009               	tblrd		*+
   161  000CC6  CFF5 FFEE          	movff	tablat,postinc0
   162  000CCA  50E5               	movf	postdec1,w,c
   163  000CCC  50E1               	movf	fsr1l,w,c
   164  000CCE  E1FA               	bnz	copy_data0
   165                           
   166                           ; Clear objects allocated to COMRAM (3 bytes)
   167  000CD0  6A25               	clrf	(__pbssCOMRAM+2)& (0+255),c
   168  000CD2  6A24               	clrf	(__pbssCOMRAM+1)& (0+255),c
   169  000CD4  6A23               	clrf	__pbssCOMRAM& (0+255),c
   170  000CD6                     end_of_initialization:
   171                           	callstack 0
   172  000CD6                     __end_of__initialization:
   173                           	callstack 0
   174  000CD6  9026               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   175  000CD8  9226               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   176  000CDA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   177  000CDC  6EF8               	movwf	tblptru,c
   178  000CDE  0E08               	movlw	high __Lsmallconst
   179  000CE0  6EF7               	movwf	tblptrh,c
   180  000CE2  0100               	movlb	0
   181  000CE4  EFC4  F004         	goto	_main	;jump to C main() function
   182                           
   183                           	psect	bssCOMRAM
   184  000023                     __pbssCOMRAM:
   185                           	callstack 0
   186  000023                     _d_unidad:
   187                           	callstack 0
   188  000023                     	ds	1
   189  000024                     _d_decena:
   190                           	callstack 0
   191  000024                     	ds	1
   192  000025                     _d_centena:
   193                           	callstack 0
   194  000025                     	ds	1
   195                           
   196                           	psect	dataCOMRAM
   197  000001                     __pdataCOMRAM:
   198                           	callstack 0
   199  000001                     _segundos:
   200                           	callstack 0
   201  000001                     	ds	1
   202  000002                     _minutos:
   203                           	callstack 0
   204  000002                     	ds	1
   205  000003                     _horas:
   206                           	callstack 0
   207  000003                     	ds	1
   208  000004                     _pacman:
   209                           	callstack 0
   210  000004                     	ds	8
   211  00000C                     _reloj:
   212                           	callstack 0
   213  00000C                     	ds	8
   214                           
   215                           	psect	cstackCOMRAM
   216  000014                     __pcstackCOMRAM:
   217                           	callstack 0
   218  000014                     ?___awmod:
   219                           	callstack 0
   220  000014                     ENVIA_NIBBLE@dato:
   221                           	callstack 0
   222  000014                     LEER_LCD@aux:
   223                           	callstack 0
   224  000014                     ___awmod@dividend:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000014                     	ds	1
   229  000015                     ENVIA_CHAR@dato:
   230                           	callstack 0
   231  000015                     ENVIA_LCD_CMD@dato:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0x1
   235  000015                     	ds	1
   236  000016                     ENVIA_CHAR@aux:
   237                           	callstack 0
   238  000016                     ENVIA_LCD_CMD@aux:
   239                           	callstack 0
   240  000016                     ___awmod@divisor:
   241                           	callstack 0
   242                           
   243                           ; 2 bytes @ 0x2
   244  000016                     	ds	1
   245  000017                     ??_LCD_CONFIG:
   246  000017                     POS_CURSOR@columna:
   247                           	callstack 0
   248  000017                     CURSOR_ONOFF@estado:
   249                           	callstack 0
   250  000017                     ESCRIBE_MENSAJE@cadena:
   251                           	callstack 0
   252  000017                     GENERACARACTER@vector:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x3
   256  000017                     	ds	1
   257  000018                     POS_CURSOR@fila:
   258                           	callstack 0
   259  000018                     ___awmod@counter:
   260                           	callstack 0
   261                           
   262                           ; 1 bytes @ 0x4
   263  000018                     	ds	1
   264  000019                     ESCRIBE_MENSAJE@tam:
   265                           	callstack 0
   266  000019                     GENERACARACTER@pos:
   267                           	callstack 0
   268  000019                     ___awmod@sign:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x5
   272  000019                     	ds	1
   273  00001A                     ??_ESCRIBE_MENSAJE:
   274  00001A                     ?___awdiv:
   275                           	callstack 0
   276  00001A                     GENERACARACTER@i:
   277                           	callstack 0
   278  00001A                     ___awdiv@dividend:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x6
   282  00001A                     	ds	1
   283  00001B                     ??_lcd_init:
   284                           
   285                           ; 1 bytes @ 0x7
   286  00001B                     	ds	1
   287  00001C                     ESCRIBE_MENSAJE@i:
   288                           	callstack 0
   289  00001C                     ___awdiv@divisor:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x8
   293  00001C                     	ds	2
   294  00001E                     ___awdiv@counter:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0xA
   298  00001E                     	ds	1
   299  00001F                     ___awdiv@sign:
   300                           	callstack 0
   301                           
   302                           ; 1 bytes @ 0xB
   303  00001F                     	ds	1
   304  000020                     ___awdiv@quotient:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0xC
   308  000020                     	ds	2
   309  000022                     digit_converter@numero:
   310                           	callstack 0
   311                           
   312                           ; 1 bytes @ 0xE
   313  000022                     	ds	1
   314  000023                     
   315                           ; 1 bytes @ 0xF
   316 ;;
   317 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   318 ;;
   319 ;; *************** function _main *****************
   320 ;; Defined at:
   321 ;;		line 40 in file "maincode3.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   335 ;;      Params:         0       0       0       0       0       0       0       0       0
   336 ;;      Locals:         0       0       0       0       0       0       0       0       0
   337 ;;      Temps:          0       0       0       0       0       0       0       0       0
   338 ;;      Totals:         0       0       0       0       0       0       0       0       0
   339 ;;Total ram usage:        0 bytes
   340 ;; Hardware stack levels required when called: 5
   341 ;; This function calls:
   342 ;;		_ENVIA_CHAR
   343 ;;		_ESCRIBE_MENSAJE
   344 ;;		_POS_CURSOR
   345 ;;		_configuro
   346 ;;		_digit_converter
   347 ;;		_lcd_init
   348 ;; This function is called by:
   349 ;;		Startup code after reset
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text0
   354  000988                     __ptext0:
   355                           	callstack 0
   356  000988                     _main:
   357                           	callstack 26
   358  000988                     
   359                           ;maincode3.c: 41:     configuro();
   360  000988  ECD8  F006         	call	_configuro	;wreg free
   361  00098C                     
   362                           ;maincode3.c: 42:     lcd_init();
   363  00098C  ECD6  F005         	call	_lcd_init	;wreg free
   364  000990                     l1300:
   365                           
   366                           ;maincode3.c: 44:         POS_CURSOR(1,0);
   367  000990  0E00               	movlw	0
   368  000992  6E17               	movwf	POS_CURSOR@columna^0,c
   369  000994  0E01               	movlw	1
   370  000996  EC3B  F006         	call	_POS_CURSOR
   371  00099A                     
   372                           ;maincode3.c: 45:         ESCRIBE_MENSAJE("Hola UPC Monterr",16);
   373  00099A  0E01               	movlw	low STR_1
   374  00099C  6E17               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   375  00099E  0E08               	movlw	high STR_1
   376  0009A0  6E18               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   377  0009A2  0E10               	movlw	16
   378  0009A4  6E19               	movwf	ESCRIBE_MENSAJE@tam^0,c
   379  0009A6  ECFE  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   380  0009AA                     
   381                           ;maincode3.c: 46:         POS_CURSOR(2,0);
   382  0009AA  0E00               	movlw	0
   383  0009AC  6E17               	movwf	POS_CURSOR@columna^0,c
   384  0009AE  0E02               	movlw	2
   385  0009B0  EC3B  F006         	call	_POS_CURSOR
   386  0009B4                     
   387                           ;maincode3.c: 48:         ENVIA_CHAR(0);
   388  0009B4  0E00               	movlw	0
   389  0009B6  EC8E  F006         	call	_ENVIA_CHAR
   390  0009BA                     
   391                           ;maincode3.c: 49:         ENVIA_CHAR(1);
   392  0009BA  0E01               	movlw	1
   393  0009BC  EC8E  F006         	call	_ENVIA_CHAR
   394  0009C0                     
   395                           ;maincode3.c: 50:         ENVIA_CHAR(' ');
   396  0009C0  0E20               	movlw	32
   397  0009C2  EC8E  F006         	call	_ENVIA_CHAR
   398  0009C6                     
   399                           ;maincode3.c: 51:         digit_converter(horas);
   400  0009C6  5003               	movf	_horas^0,w,c
   401  0009C8  ECA9  F005         	call	_digit_converter
   402  0009CC                     
   403                           ;maincode3.c: 52:         ENVIA_CHAR(d_decena + 0x30);
   404  0009CC  5024               	movf	_d_decena^0,w,c
   405  0009CE  0F30               	addlw	48
   406  0009D0  EC8E  F006         	call	_ENVIA_CHAR
   407  0009D4                     
   408                           ;maincode3.c: 53:         ENVIA_CHAR(d_unidad + 0x30);
   409  0009D4  5023               	movf	_d_unidad^0,w,c
   410  0009D6  0F30               	addlw	48
   411  0009D8  EC8E  F006         	call	_ENVIA_CHAR
   412  0009DC                     
   413                           ;maincode3.c: 54:         ENVIA_CHAR(':');
   414  0009DC  0E3A               	movlw	58
   415  0009DE  EC8E  F006         	call	_ENVIA_CHAR
   416  0009E2                     
   417                           ;maincode3.c: 55:         digit_converter(minutos);
   418  0009E2  5002               	movf	_minutos^0,w,c
   419  0009E4  ECA9  F005         	call	_digit_converter
   420  0009E8                     
   421                           ;maincode3.c: 56:         ENVIA_CHAR(d_decena + 0x30);
   422  0009E8  5024               	movf	_d_decena^0,w,c
   423  0009EA  0F30               	addlw	48
   424  0009EC  EC8E  F006         	call	_ENVIA_CHAR
   425  0009F0                     
   426                           ;maincode3.c: 57:         ENVIA_CHAR(d_unidad + 0x30);
   427  0009F0  5023               	movf	_d_unidad^0,w,c
   428  0009F2  0F30               	addlw	48
   429  0009F4  EC8E  F006         	call	_ENVIA_CHAR
   430  0009F8                     
   431                           ;maincode3.c: 58:         ENVIA_CHAR(':');
   432  0009F8  0E3A               	movlw	58
   433  0009FA  EC8E  F006         	call	_ENVIA_CHAR
   434  0009FE                     
   435                           ;maincode3.c: 59:         digit_converter(segundos);
   436  0009FE  5001               	movf	_segundos^0,w,c
   437  000A00  ECA9  F005         	call	_digit_converter
   438  000A04                     
   439                           ;maincode3.c: 60:         ENVIA_CHAR(d_decena + 0x30);
   440  000A04  5024               	movf	_d_decena^0,w,c
   441  000A06  0F30               	addlw	48
   442  000A08  EC8E  F006         	call	_ENVIA_CHAR
   443  000A0C                     
   444                           ;maincode3.c: 61:         ENVIA_CHAR(d_unidad + 0x30);
   445  000A0C  5023               	movf	_d_unidad^0,w,c
   446  000A0E  0F30               	addlw	48
   447  000A10  EC8E  F006         	call	_ENVIA_CHAR
   448  000A14  EFC8  F004         	goto	l1300
   449  000A18  EF07  F000         	goto	start
   450  000A1C                     __end_of_main:
   451                           	callstack 0
   452                           
   453 ;; *************** function _lcd_init *****************
   454 ;; Defined at:
   455 ;;		line 22 in file "maincode3.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   469 ;;      Params:         0       0       0       0       0       0       0       0       0
   470 ;;      Locals:         0       0       0       0       0       0       0       0       0
   471 ;;      Temps:          2       0       0       0       0       0       0       0       0
   472 ;;      Totals:         2       0       0       0       0       0       0       0       0
   473 ;;Total ram usage:        2 bytes
   474 ;; Hardware stack levels used: 1
   475 ;; Hardware stack levels required when called: 4
   476 ;; This function calls:
   477 ;;		_BORRAR_LCD
   478 ;;		_CURSOR_HOME
   479 ;;		_CURSOR_ONOFF
   480 ;;		_GENERACARACTER
   481 ;;		_LCD_CONFIG
   482 ;; This function is called by:
   483 ;;		_main
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text1
   488  000BAC                     __ptext1:
   489                           	callstack 0
   490  000BAC                     _lcd_init:
   491                           	callstack 26
   492  000BAC                     
   493                           ;maincode3.c: 23:     TRISD = 0x00;
   494  000BAC  0E00               	movlw	0
   495  000BAE  6E95               	movwf	149,c	;volatile
   496  000BB0                     
   497                           ;maincode3.c: 24:     LCD_CONFIG();
   498  000BB0  EC79  F005         	call	_LCD_CONFIG	;wreg free
   499  000BB4                     
   500                           ;maincode3.c: 25:     _delay((unsigned long)((20)*(48000000UL/4000.0)));
   501  000BB4  0E02               	movlw	2
   502  000BB6  6E1C               	movwf	(??_lcd_init+1)^0,c
   503  000BB8  0E38               	movlw	56
   504  000BBA  6E1B               	movwf	??_lcd_init^0,c
   505  000BBC  0EAD               	movlw	173
   506  000BBE                     u437:
   507  000BBE  2EE8               	decfsz	wreg,f,c
   508  000BC0  D7FE               	bra	u437
   509  000BC2  2E1B               	decfsz	??_lcd_init^0,f,c
   510  000BC4  D7FC               	bra	u437
   511  000BC6  2E1C               	decfsz	(??_lcd_init+1)^0,f,c
   512  000BC8  D7FA               	bra	u437
   513  000BCA  F000               	nop	
   514  000BCC                     
   515                           ;maincode3.c: 26:     BORRAR_LCD();
   516  000BCC  ECE2  F006         	call	_BORRAR_LCD	;wreg free
   517  000BD0                     
   518                           ;maincode3.c: 27:     CURSOR_HOME();
   519  000BD0  ECDE  F006         	call	_CURSOR_HOME	;wreg free
   520  000BD4                     
   521                           ;maincode3.c: 28:     CURSOR_ONOFF(1);
   522  000BD4  0E01               	movlw	1
   523  000BD6  ECA8  F006         	call	_CURSOR_ONOFF
   524  000BDA                     
   525                           ;maincode3.c: 29:     GENERACARACTER(reloj, 0);
   526  000BDA  0E0C               	movlw	low _reloj
   527  000BDC  6E17               	movwf	GENERACARACTER@vector^0,c
   528  000BDE  0E00               	movlw	high _reloj
   529  000BE0  6E18               	movwf	(GENERACARACTER@vector+1)^0,c
   530  000BE2  0E00               	movlw	0
   531  000BE4  6E19               	movwf	GENERACARACTER@pos^0,c
   532  000BE6  EC1D  F006         	call	_GENERACARACTER	;wreg free
   533  000BEA                     
   534                           ;maincode3.c: 30:     GENERACARACTER(pacman, 1);
   535  000BEA  0E04               	movlw	low _pacman
   536  000BEC  6E17               	movwf	GENERACARACTER@vector^0,c
   537  000BEE  0E00               	movlw	high _pacman
   538  000BF0  6E18               	movwf	(GENERACARACTER@vector+1)^0,c
   539  000BF2  0E01               	movlw	1
   540  000BF4  6E19               	movwf	GENERACARACTER@pos^0,c
   541  000BF6  EC1D  F006         	call	_GENERACARACTER	;wreg free
   542  000BFA  0012               	return		;funcret
   543  000BFC                     __end_of_lcd_init:
   544                           	callstack 0
   545                           
   546 ;; *************** function _LCD_CONFIG *****************
   547 ;; Defined at:
   548 ;;		line 72 in file "LCD.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   562 ;;      Params:         0       0       0       0       0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0       0       0       0       0
   564 ;;      Temps:          1       0       0       0       0       0       0       0       0
   565 ;;      Totals:         1       0       0       0       0       0       0       0       0
   566 ;;Total ram usage:        1 bytes
   567 ;; Hardware stack levels used: 1
   568 ;; Hardware stack levels required when called: 3
   569 ;; This function calls:
   570 ;;		_ENVIA_LCD_CMD
   571 ;;		_ENVIA_NIBBLE
   572 ;; This function is called by:
   573 ;;		_lcd_init
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text2
   578  000AF2                     __ptext2:
   579                           	callstack 0
   580  000AF2                     _LCD_CONFIG:
   581                           	callstack 26
   582  000AF2                     
   583                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   584  000AF2  908C               	bcf	140,0,c	;volatile
   585                           
   586                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   587  000AF4  928C               	bcf	140,1,c	;volatile
   588  000AF6                     
   589                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   590  000AF6  0E30               	movlw	48
   591  000AF8  ECC0  F006         	call	_ENVIA_NIBBLE
   592  000AFC                     
   593                           ;LCD.c: 77:         _delay(24000);
   594  000AFC  0E20               	movlw	32
   595  000AFE  6E17               	movwf	??_LCD_CONFIG^0,c
   596  000B00  0E2A               	movlw	42
   597  000B02                     u447:
   598  000B02  2EE8               	decfsz	wreg,f,c
   599  000B04  D7FE               	bra	u447
   600  000B06  2E17               	decfsz	??_LCD_CONFIG^0,f,c
   601  000B08  D7FC               	bra	u447
   602  000B0A                     
   603                           ;LCD.c: 78:         _delay(24000);
   604  000B0A  0E20               	movlw	32
   605  000B0C  6E17               	movwf	??_LCD_CONFIG^0,c
   606  000B0E  0E2A               	movlw	42
   607  000B10                     u457:
   608  000B10  2EE8               	decfsz	wreg,f,c
   609  000B12  D7FE               	bra	u457
   610  000B14  2E17               	decfsz	??_LCD_CONFIG^0,f,c
   611  000B16  D7FC               	bra	u457
   612                           
   613                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   614  000B18  0E30               	movlw	48
   615  000B1A  ECC0  F006         	call	_ENVIA_NIBBLE
   616  000B1E                     
   617                           ;LCD.c: 83:  _delay(1200);
   618  000B1E  0EF0               	movlw	240
   619  000B20                     u467:
   620  000B20  D000               	nop2	
   621  000B22  2EE8               	decfsz	wreg,f,c
   622  000B24  D7FD               	bra	u467
   623  000B26                     
   624                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   625  000B26  0E30               	movlw	48
   626  000B28  ECC0  F006         	call	_ENVIA_NIBBLE
   627  000B2C                     
   628                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   629  000B2C  0E20               	movlw	32
   630  000B2E  ECC0  F006         	call	_ENVIA_NIBBLE
   631  000B32                     
   632                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   633  000B32  0E01               	movlw	1
   634  000B34  EC74  F006         	call	_ENVIA_LCD_CMD
   635  000B38                     
   636                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   637  000B38  0E28               	movlw	40
   638  000B3A  EC74  F006         	call	_ENVIA_LCD_CMD
   639  000B3E                     
   640                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   641  000B3E  0E0F               	movlw	15
   642  000B40  EC74  F006         	call	_ENVIA_LCD_CMD
   643  000B44                     
   644                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   645  000B44  0E06               	movlw	6
   646  000B46  EC74  F006         	call	_ENVIA_LCD_CMD
   647  000B4A                     
   648                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   649  000B4A  0E01               	movlw	1
   650  000B4C  EC74  F006         	call	_ENVIA_LCD_CMD
   651  000B50  0012               	return		;funcret
   652  000B52                     __end_of_LCD_CONFIG:
   653                           	callstack 0
   654                           
   655 ;; *************** function _GENERACARACTER *****************
   656 ;; Defined at:
   657 ;;		line 153 in file "LCD.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  vector          2    3[COMRAM] PTR const unsigned char 
   660 ;;		 -> pacman(8), reloj(8), 
   661 ;;  pos             1    5[COMRAM] unsigned char 
   662 ;; Auto vars:     Size  Location     Type
   663 ;;  i               1    6[COMRAM] unsigned char 
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   673 ;;      Params:         3       0       0       0       0       0       0       0       0
   674 ;;      Locals:         1       0       0       0       0       0       0       0       0
   675 ;;      Temps:          0       0       0       0       0       0       0       0       0
   676 ;;      Totals:         4       0       0       0       0       0       0       0       0
   677 ;;Total ram usage:        4 bytes
   678 ;; Hardware stack levels used: 1
   679 ;; Hardware stack levels required when called: 3
   680 ;; This function calls:
   681 ;;		_ENVIA_CHAR
   682 ;;		_ENVIA_LCD_CMD
   683 ;; This function is called by:
   684 ;;		_lcd_init
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text3
   689  000C3A                     __ptext3:
   690                           	callstack 0
   691  000C3A                     _GENERACARACTER:
   692                           	callstack 26
   693  000C3A                     
   694                           ;LCD.c: 153: void GENERACARACTER(const unsigned char *vector,unsigned char pos);LCD.c: 1
      +                          54: {;LCD.c: 155:  unsigned char i;;LCD.c: 156:  ENVIA_LCD_CMD(0x40+8*pos);
   695  000C3A  5019               	movf	GENERACARACTER@pos^0,w,c
   696  000C3C  0D08               	mullw	8
   697  000C3E  50F3               	movf	243,w,c
   698  000C40  0F40               	addlw	64
   699  000C42  EC74  F006         	call	_ENVIA_LCD_CMD
   700  000C46                     
   701                           ;LCD.c: 157:  for(i=0;i<8;i++)
   702  000C46  0E00               	movlw	0
   703  000C48  6E1A               	movwf	GENERACARACTER@i^0,c
   704  000C4A                     l1174:
   705                           
   706                           ;LCD.c: 158:  {;LCD.c: 159:   ENVIA_CHAR(vector[i]);
   707  000C4A  501A               	movf	GENERACARACTER@i^0,w,c
   708  000C4C  2417               	addwf	GENERACARACTER@vector^0,w,c
   709  000C4E  6ED9               	movwf	fsr2l,c
   710  000C50  0E00               	movlw	0
   711  000C52  2018               	addwfc	(GENERACARACTER@vector+1)^0,w,c
   712  000C54  6EDA               	movwf	fsr2h,c
   713  000C56  50DF               	movf	indf2,w,c
   714  000C58  EC8E  F006         	call	_ENVIA_CHAR
   715  000C5C                     
   716                           ;LCD.c: 160:  }
   717  000C5C  2A1A               	incf	GENERACARACTER@i^0,f,c
   718  000C5E  0E07               	movlw	7
   719  000C60  641A               	cpfsgt	GENERACARACTER@i^0,c
   720  000C62  EF35  F006         	goto	u271
   721  000C66  EF37  F006         	goto	u270
   722  000C6A                     u271:
   723  000C6A  EF25  F006         	goto	l1174
   724  000C6E                     u270:
   725  000C6E                     
   726                           ;LCD.c: 161:  ENVIA_LCD_CMD(0x80);
   727  000C6E  0E80               	movlw	128
   728  000C70  EC74  F006         	call	_ENVIA_LCD_CMD
   729  000C74  0012               	return		;funcret
   730  000C76                     __end_of_GENERACARACTER:
   731                           	callstack 0
   732                           
   733 ;; *************** function _CURSOR_ONOFF *****************
   734 ;; Defined at:
   735 ;;		line 35 in file "LCD.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  estado          1    wreg     unsigned char 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  estado          1    3[COMRAM] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   749 ;;      Params:         0       0       0       0       0       0       0       0       0
   750 ;;      Locals:         1       0       0       0       0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0
   752 ;;      Totals:         1       0       0       0       0       0       0       0       0
   753 ;;Total ram usage:        1 bytes
   754 ;; Hardware stack levels used: 1
   755 ;; Hardware stack levels required when called: 3
   756 ;; This function calls:
   757 ;;		_ENVIA_LCD_CMD
   758 ;; This function is called by:
   759 ;;		_lcd_init
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text4
   764  000D50                     __ptext4:
   765                           	callstack 0
   766  000D50                     _CURSOR_ONOFF:
   767                           	callstack 26
   768                           
   769                           ;incstack = 0
   770                           ;CURSOR_ONOFF@estado stored from wreg
   771  000D50  6E17               	movwf	CURSOR_ONOFF@estado^0,c
   772  000D52                     
   773                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   774  000D52  5017               	movf	CURSOR_ONOFF@estado^0,w,c
   775  000D54  A4D8               	btfss	status,2,c
   776  000D56  EFAF  F006         	goto	u21
   777  000D5A  EFB1  F006         	goto	u20
   778  000D5E                     u21:
   779  000D5E  EFB4  F006         	goto	l922
   780  000D62                     u20:
   781  000D62  0E0E               	movlw	14
   782  000D64  EC74  F006         	call	_ENVIA_LCD_CMD
   783  000D68                     l922:
   784                           
   785                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   786  000D68  0417               	decf	CURSOR_ONOFF@estado^0,w,c
   787  000D6A  A4D8               	btfss	status,2,c
   788  000D6C  EFBA  F006         	goto	u31
   789  000D70  EFBC  F006         	goto	u30
   790  000D74                     u31:
   791  000D74  EFBF  F006         	goto	l42
   792  000D78                     u30:
   793  000D78  0E0C               	movlw	12
   794  000D7A  EC74  F006         	call	_ENVIA_LCD_CMD
   795  000D7E                     l42:
   796  000D7E  0012               	return		;funcret
   797  000D80                     __end_of_CURSOR_ONOFF:
   798                           	callstack 0
   799                           
   800 ;; *************** function _CURSOR_HOME *****************
   801 ;; Defined at:
   802 ;;		line 30 in file "LCD.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   816 ;;      Params:         0       0       0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used: 1
   822 ;; Hardware stack levels required when called: 3
   823 ;; This function calls:
   824 ;;		_ENVIA_LCD_CMD
   825 ;; This function is called by:
   826 ;;		_lcd_init
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text5
   831  000DBC                     __ptext5:
   832                           	callstack 0
   833  000DBC                     _CURSOR_HOME:
   834                           	callstack 26
   835  000DBC                     
   836                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   837  000DBC  0E02               	movlw	2
   838  000DBE  EC74  F006         	call	_ENVIA_LCD_CMD
   839  000DC2  0012               	return		;funcret
   840  000DC4                     __end_of_CURSOR_HOME:
   841                           	callstack 0
   842                           
   843 ;; *************** function _BORRAR_LCD *****************
   844 ;; Defined at:
   845 ;;		line 67 in file "LCD.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   859 ;;      Params:         0       0       0       0       0       0       0       0       0
   860 ;;      Locals:         0       0       0       0       0       0       0       0       0
   861 ;;      Temps:          0       0       0       0       0       0       0       0       0
   862 ;;      Totals:         0       0       0       0       0       0       0       0       0
   863 ;;Total ram usage:        0 bytes
   864 ;; Hardware stack levels used: 1
   865 ;; Hardware stack levels required when called: 3
   866 ;; This function calls:
   867 ;;		_ENVIA_LCD_CMD
   868 ;; This function is called by:
   869 ;;		_lcd_init
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text6
   874  000DC4                     __ptext6:
   875                           	callstack 0
   876  000DC4                     _BORRAR_LCD:
   877                           	callstack 26
   878  000DC4                     
   879                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   880  000DC4  0E01               	movlw	1
   881  000DC6  EC74  F006         	call	_ENVIA_LCD_CMD
   882  000DCA  0012               	return		;funcret
   883  000DCC                     __end_of_BORRAR_LCD:
   884                           	callstack 0
   885                           
   886 ;; *************** function _digit_converter *****************
   887 ;; Defined at:
   888 ;;		line 34 in file "maincode3.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  numero          1    wreg     unsigned char 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  numero          1   14[COMRAM] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   902 ;;      Params:         0       0       0       0       0       0       0       0       0
   903 ;;      Locals:         1       0       0       0       0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0       0       0
   905 ;;      Totals:         1       0       0       0       0       0       0       0       0
   906 ;;Total ram usage:        1 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 2
   909 ;; This function calls:
   910 ;;		___awdiv
   911 ;;		___awmod
   912 ;; This function is called by:
   913 ;;		_main
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text7
   918  000B52                     __ptext7:
   919                           	callstack 0
   920  000B52                     _digit_converter:
   921                           	callstack 28
   922                           
   923                           ;incstack = 0
   924                           ;digit_converter@numero stored from wreg
   925  000B52  6E22               	movwf	digit_converter@numero^0,c
   926  000B54                     
   927                           ;maincode3.c: 35:     d_centena = numero / 100;
   928  000B54  C022  F01A         	movff	digit_converter@numero,___awdiv@dividend
   929  000B58  6A1B               	clrf	(___awdiv@dividend+1)^0,c
   930  000B5A  0E00               	movlw	0
   931  000B5C  6E1D               	movwf	(___awdiv@divisor+1)^0,c
   932  000B5E  0E64               	movlw	100
   933  000B60  6E1C               	movwf	___awdiv@divisor^0,c
   934  000B62  EC0A  F004         	call	___awdiv	;wreg free
   935  000B66  501A               	movf	?___awdiv^0,w,c
   936  000B68  6E25               	movwf	_d_centena^0,c
   937                           
   938                           ;maincode3.c: 36:     d_decena = (numero % 100) / 10;
   939  000B6A  0E00               	movlw	0
   940  000B6C  6E17               	movwf	(___awmod@divisor+1)^0,c
   941  000B6E  0E64               	movlw	100
   942  000B70  6E16               	movwf	___awmod@divisor^0,c
   943  000B72  C022  F014         	movff	digit_converter@numero,___awmod@dividend
   944  000B76  6A15               	clrf	(___awmod@dividend+1)^0,c
   945  000B78  EC6C  F004         	call	___awmod	;wreg free
   946  000B7C  C014  F01A         	movff	?___awmod,___awdiv@dividend
   947  000B80  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
   948  000B84  0E00               	movlw	0
   949  000B86  6E1D               	movwf	(___awdiv@divisor+1)^0,c
   950  000B88  0E0A               	movlw	10
   951  000B8A  6E1C               	movwf	___awdiv@divisor^0,c
   952  000B8C  EC0A  F004         	call	___awdiv	;wreg free
   953  000B90  501A               	movf	?___awdiv^0,w,c
   954  000B92  6E24               	movwf	_d_decena^0,c
   955                           
   956                           ;maincode3.c: 37:     d_unidad = numero % 10;
   957  000B94  C022  F014         	movff	digit_converter@numero,___awmod@dividend
   958  000B98  6A15               	clrf	(___awmod@dividend+1)^0,c
   959  000B9A  0E00               	movlw	0
   960  000B9C  6E17               	movwf	(___awmod@divisor+1)^0,c
   961  000B9E  0E0A               	movlw	10
   962  000BA0  6E16               	movwf	___awmod@divisor^0,c
   963  000BA2  EC6C  F004         	call	___awmod	;wreg free
   964  000BA6  5014               	movf	?___awmod^0,w,c
   965  000BA8  6E23               	movwf	_d_unidad^0,c
   966  000BAA  0012               	return		;funcret
   967  000BAC                     __end_of_digit_converter:
   968                           	callstack 0
   969                           
   970 ;; *************** function ___awmod *****************
   971 ;; Defined at:
   972 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  dividend        2    0[COMRAM] int 
   975 ;;  divisor         2    2[COMRAM] int 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  sign            1    5[COMRAM] unsigned char 
   978 ;;  counter         1    4[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  2    0[COMRAM] int 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         4       0       0       0       0       0       0       0       0
   989 ;;      Locals:         2       0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0
   991 ;;      Totals:         6       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        6 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; Hardware stack levels required when called: 1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_digit_converter
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text8
  1003  0008D8                     __ptext8:
  1004                           	callstack 0
  1005  0008D8                     ___awmod:
  1006                           	callstack 28
  1007  0008D8  0E00               	movlw	0
  1008  0008DA  6E19               	movwf	___awmod@sign^0,c
  1009  0008DC  BE15               	btfsc	(___awmod@dividend+1)^0,7,c
  1010  0008DE  EF75  F004         	goto	u340
  1011  0008E2  EF73  F004         	goto	u341
  1012  0008E6                     u341:
  1013  0008E6  EF7B  F004         	goto	l1234
  1014  0008EA                     u340:
  1015  0008EA  6C14               	negf	___awmod@dividend^0,c
  1016  0008EC  1E15               	comf	(___awmod@dividend+1)^0,f,c
  1017  0008EE  B0D8               	btfsc	status,0,c
  1018  0008F0  2A15               	incf	(___awmod@dividend+1)^0,f,c
  1019  0008F2  0E01               	movlw	1
  1020  0008F4  6E19               	movwf	___awmod@sign^0,c
  1021  0008F6                     l1234:
  1022  0008F6  BE17               	btfsc	(___awmod@divisor+1)^0,7,c
  1023  0008F8  EF82  F004         	goto	u350
  1024  0008FC  EF80  F004         	goto	u351
  1025  000900                     u351:
  1026  000900  EF86  F004         	goto	l1238
  1027  000904                     u350:
  1028  000904  6C16               	negf	___awmod@divisor^0,c
  1029  000906  1E17               	comf	(___awmod@divisor+1)^0,f,c
  1030  000908  B0D8               	btfsc	status,0,c
  1031  00090A  2A17               	incf	(___awmod@divisor+1)^0,f,c
  1032  00090C                     l1238:
  1033  00090C  5016               	movf	___awmod@divisor^0,w,c
  1034  00090E  1017               	iorwf	(___awmod@divisor+1)^0,w,c
  1035  000910  B4D8               	btfsc	status,2,c
  1036  000912  EF8D  F004         	goto	u361
  1037  000916  EF8F  F004         	goto	u360
  1038  00091A                     u361:
  1039  00091A  EFB3  F004         	goto	l1254
  1040  00091E                     u360:
  1041  00091E  0E01               	movlw	1
  1042  000920  6E18               	movwf	___awmod@counter^0,c
  1043  000922  EF97  F004         	goto	l1244
  1044  000926                     l1242:
  1045  000926  90D8               	bcf	status,0,c
  1046  000928  3616               	rlcf	___awmod@divisor^0,f,c
  1047  00092A  3617               	rlcf	(___awmod@divisor+1)^0,f,c
  1048  00092C  2A18               	incf	___awmod@counter^0,f,c
  1049  00092E                     l1244:
  1050  00092E  AE17               	btfss	(___awmod@divisor+1)^0,7,c
  1051  000930  EF9C  F004         	goto	u371
  1052  000934  EF9E  F004         	goto	u370
  1053  000938                     u371:
  1054  000938  EF93  F004         	goto	l1242
  1055  00093C                     u370:
  1056  00093C                     l1246:
  1057  00093C  5016               	movf	___awmod@divisor^0,w,c
  1058  00093E  5C14               	subwf	___awmod@dividend^0,w,c
  1059  000940  5017               	movf	(___awmod@divisor+1)^0,w,c
  1060  000942  5815               	subwfb	(___awmod@dividend+1)^0,w,c
  1061  000944  A0D8               	btfss	status,0,c
  1062  000946  EFA7  F004         	goto	u381
  1063  00094A  EFA9  F004         	goto	u380
  1064  00094E                     u381:
  1065  00094E  EFAD  F004         	goto	l1250
  1066  000952                     u380:
  1067  000952  5016               	movf	___awmod@divisor^0,w,c
  1068  000954  5E14               	subwf	___awmod@dividend^0,f,c
  1069  000956  5017               	movf	(___awmod@divisor+1)^0,w,c
  1070  000958  5A15               	subwfb	(___awmod@dividend+1)^0,f,c
  1071  00095A                     l1250:
  1072  00095A  90D8               	bcf	status,0,c
  1073  00095C  3217               	rrcf	(___awmod@divisor+1)^0,f,c
  1074  00095E  3216               	rrcf	___awmod@divisor^0,f,c
  1075  000960  2E18               	decfsz	___awmod@counter^0,f,c
  1076  000962  EF9E  F004         	goto	l1246
  1077  000966                     l1254:
  1078  000966  5019               	movf	___awmod@sign^0,w,c
  1079  000968  B4D8               	btfsc	status,2,c
  1080  00096A  EFB9  F004         	goto	u391
  1081  00096E  EFBB  F004         	goto	u390
  1082  000972                     u391:
  1083  000972  EFBF  F004         	goto	l1258
  1084  000976                     u390:
  1085  000976  6C14               	negf	___awmod@dividend^0,c
  1086  000978  1E15               	comf	(___awmod@dividend+1)^0,f,c
  1087  00097A  B0D8               	btfsc	status,0,c
  1088  00097C  2A15               	incf	(___awmod@dividend+1)^0,f,c
  1089  00097E                     l1258:
  1090  00097E  C014  F014         	movff	___awmod@dividend,?___awmod
  1091  000982  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
  1092  000986  0012               	return		;funcret
  1093  000988                     __end_of___awmod:
  1094                           	callstack 0
  1095                           
  1096 ;; *************** function ___awdiv *****************
  1097 ;; Defined at:
  1098 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  dividend        2    6[COMRAM] int 
  1101 ;;  divisor         2    8[COMRAM] int 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  quotient        2   12[COMRAM] int 
  1104 ;;  sign            1   11[COMRAM] unsigned char 
  1105 ;;  counter         1   10[COMRAM] unsigned char 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  2    6[COMRAM] int 
  1108 ;; Registers used:
  1109 ;;		wreg, status,2, status,0
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1115 ;;      Params:         4       0       0       0       0       0       0       0       0
  1116 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1118 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1119 ;;Total ram usage:        8 bytes
  1120 ;; Hardware stack levels used: 1
  1121 ;; Hardware stack levels required when called: 1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_digit_converter
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text9
  1130  000814                     __ptext9:
  1131                           	callstack 0
  1132  000814                     ___awdiv:
  1133                           	callstack 28
  1134  000814  0E00               	movlw	0
  1135  000816  6E1F               	movwf	___awdiv@sign^0,c
  1136  000818  BE1D               	btfsc	(___awdiv@divisor+1)^0,7,c
  1137  00081A  EF13  F004         	goto	u280
  1138  00081E  EF11  F004         	goto	u281
  1139  000822                     u281:
  1140  000822  EF19  F004         	goto	l1190
  1141  000826                     u280:
  1142  000826  6C1C               	negf	___awdiv@divisor^0,c
  1143  000828  1E1D               	comf	(___awdiv@divisor+1)^0,f,c
  1144  00082A  B0D8               	btfsc	status,0,c
  1145  00082C  2A1D               	incf	(___awdiv@divisor+1)^0,f,c
  1146  00082E  0E01               	movlw	1
  1147  000830  6E1F               	movwf	___awdiv@sign^0,c
  1148  000832                     l1190:
  1149  000832  BE1B               	btfsc	(___awdiv@dividend+1)^0,7,c
  1150  000834  EF20  F004         	goto	u290
  1151  000838  EF1E  F004         	goto	u291
  1152  00083C                     u291:
  1153  00083C  EF26  F004         	goto	l1196
  1154  000840                     u290:
  1155  000840  6C1A               	negf	___awdiv@dividend^0,c
  1156  000842  1E1B               	comf	(___awdiv@dividend+1)^0,f,c
  1157  000844  B0D8               	btfsc	status,0,c
  1158  000846  2A1B               	incf	(___awdiv@dividend+1)^0,f,c
  1159  000848  0E01               	movlw	1
  1160  00084A  1A1F               	xorwf	___awdiv@sign^0,f,c
  1161  00084C                     l1196:
  1162  00084C  0E00               	movlw	0
  1163  00084E  6E21               	movwf	(___awdiv@quotient+1)^0,c
  1164  000850  0E00               	movlw	0
  1165  000852  6E20               	movwf	___awdiv@quotient^0,c
  1166  000854  501C               	movf	___awdiv@divisor^0,w,c
  1167  000856  101D               	iorwf	(___awdiv@divisor+1)^0,w,c
  1168  000858  B4D8               	btfsc	status,2,c
  1169  00085A  EF31  F004         	goto	u301
  1170  00085E  EF33  F004         	goto	u300
  1171  000862                     u301:
  1172  000862  EF5B  F004         	goto	l1218
  1173  000866                     u300:
  1174  000866  0E01               	movlw	1
  1175  000868  6E1E               	movwf	___awdiv@counter^0,c
  1176  00086A  EF3B  F004         	goto	l1204
  1177  00086E                     l1202:
  1178  00086E  90D8               	bcf	status,0,c
  1179  000870  361C               	rlcf	___awdiv@divisor^0,f,c
  1180  000872  361D               	rlcf	(___awdiv@divisor+1)^0,f,c
  1181  000874  2A1E               	incf	___awdiv@counter^0,f,c
  1182  000876                     l1204:
  1183  000876  AE1D               	btfss	(___awdiv@divisor+1)^0,7,c
  1184  000878  EF40  F004         	goto	u311
  1185  00087C  EF42  F004         	goto	u310
  1186  000880                     u311:
  1187  000880  EF37  F004         	goto	l1202
  1188  000884                     u310:
  1189  000884                     l1206:
  1190  000884  90D8               	bcf	status,0,c
  1191  000886  3620               	rlcf	___awdiv@quotient^0,f,c
  1192  000888  3621               	rlcf	(___awdiv@quotient+1)^0,f,c
  1193  00088A  501C               	movf	___awdiv@divisor^0,w,c
  1194  00088C  5C1A               	subwf	___awdiv@dividend^0,w,c
  1195  00088E  501D               	movf	(___awdiv@divisor+1)^0,w,c
  1196  000890  581B               	subwfb	(___awdiv@dividend+1)^0,w,c
  1197  000892  A0D8               	btfss	status,0,c
  1198  000894  EF4E  F004         	goto	u321
  1199  000898  EF50  F004         	goto	u320
  1200  00089C                     u321:
  1201  00089C  EF55  F004         	goto	l1214
  1202  0008A0                     u320:
  1203  0008A0  501C               	movf	___awdiv@divisor^0,w,c
  1204  0008A2  5E1A               	subwf	___awdiv@dividend^0,f,c
  1205  0008A4  501D               	movf	(___awdiv@divisor+1)^0,w,c
  1206  0008A6  5A1B               	subwfb	(___awdiv@dividend+1)^0,f,c
  1207  0008A8  8020               	bsf	___awdiv@quotient^0,0,c
  1208  0008AA                     l1214:
  1209  0008AA  90D8               	bcf	status,0,c
  1210  0008AC  321D               	rrcf	(___awdiv@divisor+1)^0,f,c
  1211  0008AE  321C               	rrcf	___awdiv@divisor^0,f,c
  1212  0008B0  2E1E               	decfsz	___awdiv@counter^0,f,c
  1213  0008B2  EF42  F004         	goto	l1206
  1214  0008B6                     l1218:
  1215  0008B6  501F               	movf	___awdiv@sign^0,w,c
  1216  0008B8  B4D8               	btfsc	status,2,c
  1217  0008BA  EF61  F004         	goto	u331
  1218  0008BE  EF63  F004         	goto	u330
  1219  0008C2                     u331:
  1220  0008C2  EF67  F004         	goto	l1222
  1221  0008C6                     u330:
  1222  0008C6  6C20               	negf	___awdiv@quotient^0,c
  1223  0008C8  1E21               	comf	(___awdiv@quotient+1)^0,f,c
  1224  0008CA  B0D8               	btfsc	status,0,c
  1225  0008CC  2A21               	incf	(___awdiv@quotient+1)^0,f,c
  1226  0008CE                     l1222:
  1227  0008CE  C020  F01A         	movff	___awdiv@quotient,?___awdiv
  1228  0008D2  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
  1229  0008D6  0012               	return		;funcret
  1230  0008D8                     __end_of___awdiv:
  1231                           	callstack 0
  1232                           
  1233 ;; *************** function _configuro *****************
  1234 ;; Defined at:
  1235 ;;		line 15 in file "maincode3.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1249 ;;      Params:         0       0       0       0       0       0       0       0       0
  1250 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1252 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1253 ;;Total ram usage:        0 bytes
  1254 ;; Hardware stack levels used: 1
  1255 ;; Hardware stack levels required when called: 1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text10
  1264  000DB0                     __ptext10:
  1265                           	callstack 0
  1266  000DB0                     _configuro:
  1267                           	callstack 29
  1268  000DB0                     
  1269                           ;maincode3.c: 16:     T1CON = 0x0F;
  1270  000DB0  0E0F               	movlw	15
  1271  000DB2  6ECD               	movwf	205,c	;volatile
  1272  000DB4                     
  1273                           ;maincode3.c: 17:     INTCONbits.GIE = 1;
  1274  000DB4  8EF2               	bsf	242,7,c	;volatile
  1275  000DB6                     
  1276                           ;maincode3.c: 18:     INTCONbits.PEIE = 1;
  1277  000DB6  8CF2               	bsf	242,6,c	;volatile
  1278  000DB8                     
  1279                           ;maincode3.c: 19:     PIE1bits.TMR1IE = 1;
  1280  000DB8  809D               	bsf	157,0,c	;volatile
  1281  000DBA  0012               	return		;funcret
  1282  000DBC                     __end_of_configuro:
  1283                           	callstack 0
  1284                           
  1285 ;; *************** function _POS_CURSOR *****************
  1286 ;; Defined at:
  1287 ;;		line 6 in file "LCD.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  fila            1    wreg     unsigned char 
  1290 ;;  columna         1    3[COMRAM] unsigned char 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  fila            1    4[COMRAM] unsigned char 
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, status,2, status,0, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1302 ;;      Params:         1       0       0       0       0       0       0       0       0
  1303 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1305 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1306 ;;Total ram usage:        2 bytes
  1307 ;; Hardware stack levels used: 1
  1308 ;; Hardware stack levels required when called: 3
  1309 ;; This function calls:
  1310 ;;		_ENVIA_LCD_CMD
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text11
  1317  000C76                     __ptext11:
  1318                           	callstack 0
  1319  000C76                     _POS_CURSOR:
  1320                           	callstack 27
  1321                           
  1322                           ;incstack = 0
  1323                           ;POS_CURSOR@fila stored from wreg
  1324  000C76  6E18               	movwf	POS_CURSOR@fila^0,c
  1325  000C78                     
  1326                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1327  000C78  0418               	decf	POS_CURSOR@fila^0,w,c
  1328  000C7A  A4D8               	btfss	status,2,c
  1329  000C7C  EF42  F006         	goto	u401
  1330  000C80  EF44  F006         	goto	u400
  1331  000C84                     u401:
  1332  000C84  EF4A  F006         	goto	l1266
  1333  000C88                     u400:
  1334  000C88                     
  1335                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1336  000C88  5017               	movf	POS_CURSOR@columna^0,w,c
  1337  000C8A  0F80               	addlw	128
  1338  000C8C  EC74  F006         	call	_ENVIA_LCD_CMD
  1339                           
  1340                           ;LCD.c: 11:  }
  1341  000C90  EF57  F006         	goto	l24
  1342  000C94                     l1266:
  1343  000C94  0E02               	movlw	2
  1344  000C96  1818               	xorwf	POS_CURSOR@fila^0,w,c
  1345  000C98  A4D8               	btfss	status,2,c
  1346  000C9A  EF51  F006         	goto	u411
  1347  000C9E  EF53  F006         	goto	u410
  1348  000CA2                     u411:
  1349  000CA2  EF57  F006         	goto	l24
  1350  000CA6                     u410:
  1351  000CA6                     
  1352                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1353  000CA6  5017               	movf	POS_CURSOR@columna^0,w,c
  1354  000CA8  0FC0               	addlw	192
  1355  000CAA  EC74  F006         	call	_ENVIA_LCD_CMD
  1356  000CAE                     l24:
  1357  000CAE  0012               	return		;funcret
  1358  000CB0                     __end_of_POS_CURSOR:
  1359                           	callstack 0
  1360                           
  1361 ;; *************** function _ENVIA_LCD_CMD *****************
  1362 ;; Defined at:
  1363 ;;		line 104 in file "LCD.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  dato            1    wreg     unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  dato            1    1[COMRAM] unsigned char 
  1368 ;;  aux             1    2[COMRAM] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      void 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0, cstack
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1378 ;;      Params:         0       0       0       0       0       0       0       0       0
  1379 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1381 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1382 ;;Total ram usage:        2 bytes
  1383 ;; Hardware stack levels used: 1
  1384 ;; Hardware stack levels required when called: 2
  1385 ;; This function calls:
  1386 ;;		_ENVIA_NIBBLE
  1387 ;;		_LEER_LCD
  1388 ;; This function is called by:
  1389 ;;		_POS_CURSOR
  1390 ;;		_CURSOR_HOME
  1391 ;;		_CURSOR_ONOFF
  1392 ;;		_BORRAR_LCD
  1393 ;;		_LCD_CONFIG
  1394 ;;		_GENERACARACTER
  1395 ;;		_BLINK_CURSOR
  1396 ;;		_DISPLAY_ONOFF
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text12
  1401  000CE8                     __ptext12:
  1402                           	callstack 0
  1403  000CE8                     _ENVIA_LCD_CMD:
  1404                           	callstack 26
  1405                           
  1406                           ;incstack = 0
  1407                           ;ENVIA_LCD_CMD@dato stored from wreg
  1408  000CE8  6E15               	movwf	ENVIA_LCD_CMD@dato^0,c
  1409  000CEA                     
  1410                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1411  000CEA  908C               	bcf	140,0,c	;volatile
  1412  000CEC                     
  1413                           ;LCD.c: 108:  LEER_LCD();
  1414  000CEC  EC0E  F005         	call	_LEER_LCD	;wreg free
  1415  000CF0                     
  1416                           ;LCD.c: 109:  TRISD = 0b00000000;
  1417  000CF0  0E00               	movlw	0
  1418  000CF2  6E95               	movwf	149,c	;volatile
  1419  000CF4                     
  1420                           ;LCD.c: 111:         _delay(1200);
  1421  000CF4  0EF0               	movlw	240
  1422  000CF6                     u477:
  1423  000CF6  D000               	nop2	
  1424  000CF8  2EE8               	decfsz	wreg,f,c
  1425  000CFA  D7FD               	bra	u477
  1426  000CFC                     
  1427                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1428  000CFC  928C               	bcf	140,1,c	;volatile
  1429  000CFE                     
  1430                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1431  000CFE  948C               	bcf	140,2,c	;volatile
  1432  000D00                     
  1433                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1434  000D00  908C               	bcf	140,0,c	;volatile
  1435  000D02                     
  1436                           ;LCD.c: 115:  aux = dato & 0xF0;
  1437  000D02  5015               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1438  000D04  0BF0               	andlw	240
  1439  000D06  6E16               	movwf	ENVIA_LCD_CMD@aux^0,c
  1440  000D08                     
  1441                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1442  000D08  5016               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1443  000D0A  ECC0  F006         	call	_ENVIA_NIBBLE
  1444  000D0E                     
  1445                           ;LCD.c: 117:  aux = dato<<4;
  1446  000D0E  3815               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1447  000D10  0BF0               	andlw	240
  1448  000D12  6E16               	movwf	ENVIA_LCD_CMD@aux^0,c
  1449  000D14                     
  1450                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1451  000D14  5016               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1452  000D16  ECC0  F006         	call	_ENVIA_NIBBLE
  1453  000D1A  0012               	return		;funcret
  1454  000D1C                     __end_of_ENVIA_LCD_CMD:
  1455                           	callstack 0
  1456                           
  1457 ;; *************** function _ESCRIBE_MENSAJE *****************
  1458 ;; Defined at:
  1459 ;;		line 41 in file "LCD.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1462 ;;		 -> STR_1(17), 
  1463 ;;  tam             1    5[COMRAM] unsigned char 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  i               1    8[COMRAM] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1475 ;;      Params:         3       0       0       0       0       0       0       0       0
  1476 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1477 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1478 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1479 ;;Total ram usage:        6 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; Hardware stack levels required when called: 3
  1482 ;; This function calls:
  1483 ;;		_ENVIA_CHAR
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text13
  1490  000BFC                     __ptext13:
  1491                           	callstack 0
  1492  000BFC                     _ESCRIBE_MENSAJE:
  1493                           	callstack 27
  1494  000BFC                     
  1495                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1496  000BFC  0E00               	movlw	0
  1497  000BFE  6E1C               	movwf	ESCRIBE_MENSAJE@i^0,c
  1498                           
  1499                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1500  000C00  0E00               	movlw	0
  1501  000C02  6E1C               	movwf	ESCRIBE_MENSAJE@i^0,c
  1502  000C04  EF13  F006         	goto	l1276
  1503  000C08                     l1272:
  1504                           
  1505                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1506  000C08  501C               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1507  000C0A  2417               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1508  000C0C  6E1A               	movwf	??_ESCRIBE_MENSAJE^0,c
  1509  000C0E  0E00               	movlw	0
  1510  000C10  2018               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1511  000C12  6E1B               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1512  000C14  C01A  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1513  000C18  C01B  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1514  000C1C                     	if	0	;tblptru may be non-zero
  1515  000C1C                     	endif
  1516  000C1C                     	if	0	;tblptru may be non-zero
  1517  000C1C                     	endif
  1518  000C1C  0008               	tblrd		*
  1519  000C1E  50F5               	movf	tablat,w,c
  1520  000C20  EC8E  F006         	call	_ENVIA_CHAR
  1521  000C24                     
  1522                           ;LCD.c: 47:  }
  1523  000C24  2A1C               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1524  000C26                     l1276:
  1525  000C26  5019               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1526  000C28  5C1C               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1527  000C2A  A0D8               	btfss	status,0,c
  1528  000C2C  EF1A  F006         	goto	u421
  1529  000C30  EF1C  F006         	goto	u420
  1530  000C34                     u421:
  1531  000C34  EF04  F006         	goto	l1272
  1532  000C38                     u420:
  1533  000C38  0012               	return		;funcret
  1534  000C3A                     __end_of_ESCRIBE_MENSAJE:
  1535                           	callstack 0
  1536                           
  1537 ;; *************** function _ENVIA_CHAR *****************
  1538 ;; Defined at:
  1539 ;;		line 50 in file "LCD.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  dato            1    wreg     unsigned char 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  dato            1    1[COMRAM] unsigned char 
  1544 ;;  aux             1    2[COMRAM] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, status,2, status,0, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1554 ;;      Params:         0       0       0       0       0       0       0       0       0
  1555 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1557 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1558 ;;Total ram usage:        2 bytes
  1559 ;; Hardware stack levels used: 1
  1560 ;; Hardware stack levels required when called: 2
  1561 ;; This function calls:
  1562 ;;		_ENVIA_NIBBLE
  1563 ;;		_LEER_LCD
  1564 ;; This function is called by:
  1565 ;;		_ESCRIBE_MENSAJE
  1566 ;;		_GENERACARACTER
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text14
  1572  000D1C                     __ptext14:
  1573                           	callstack 0
  1574  000D1C                     _ENVIA_CHAR:
  1575                           	callstack 26
  1576                           
  1577                           ;incstack = 0
  1578                           ;ENVIA_CHAR@dato stored from wreg
  1579  000D1C  6E15               	movwf	ENVIA_CHAR@dato^0,c
  1580  000D1E                     
  1581                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1582  000D1E  808C               	bsf	140,0,c	;volatile
  1583  000D20                     
  1584                           ;LCD.c: 54:  LEER_LCD();
  1585  000D20  EC0E  F005         	call	_LEER_LCD	;wreg free
  1586  000D24                     
  1587                           ;LCD.c: 55:  TRISD = 0x00;
  1588  000D24  0E00               	movlw	0
  1589  000D26  6E95               	movwf	149,c	;volatile
  1590  000D28                     
  1591                           ;LCD.c: 56:         _delay(1200);
  1592  000D28  0EF0               	movlw	240
  1593  000D2A                     u487:
  1594  000D2A  D000               	nop2	
  1595  000D2C  2EE8               	decfsz	wreg,f,c
  1596  000D2E  D7FD               	bra	u487
  1597  000D30                     
  1598                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1599  000D30  928C               	bcf	140,1,c	;volatile
  1600  000D32                     
  1601                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1602  000D32  948C               	bcf	140,2,c	;volatile
  1603  000D34                     
  1604                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1605  000D34  808C               	bsf	140,0,c	;volatile
  1606  000D36                     
  1607                           ;LCD.c: 61:  aux = dato & 0xF0;
  1608  000D36  5015               	movf	ENVIA_CHAR@dato^0,w,c
  1609  000D38  0BF0               	andlw	240
  1610  000D3A  6E16               	movwf	ENVIA_CHAR@aux^0,c
  1611  000D3C                     
  1612                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1613  000D3C  5016               	movf	ENVIA_CHAR@aux^0,w,c
  1614  000D3E  ECC0  F006         	call	_ENVIA_NIBBLE
  1615  000D42                     
  1616                           ;LCD.c: 63:  aux = dato << 4;
  1617  000D42  3815               	swapf	ENVIA_CHAR@dato^0,w,c
  1618  000D44  0BF0               	andlw	240
  1619  000D46  6E16               	movwf	ENVIA_CHAR@aux^0,c
  1620  000D48                     
  1621                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1622  000D48  5016               	movf	ENVIA_CHAR@aux^0,w,c
  1623  000D4A  ECC0  F006         	call	_ENVIA_NIBBLE
  1624  000D4E  0012               	return		;funcret
  1625  000D50                     __end_of_ENVIA_CHAR:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _LEER_LCD *****************
  1629 ;; Defined at:
  1630 ;;		line 121 in file "LCD.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;		None
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  aux             1    0[COMRAM] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0
  1645 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1647 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1648 ;;Total ram usage:        1 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; Hardware stack levels required when called: 1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_ENVIA_CHAR
  1655 ;;		_ENVIA_LCD_CMD
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text15
  1660  000A1C                     __ptext15:
  1661                           	callstack 0
  1662  000A1C                     _LEER_LCD:
  1663                           	callstack 26
  1664  000A1C                     
  1665                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1666  000A1C  0EF8               	movlw	248
  1667  000A1E  6E95               	movwf	149,c	;volatile
  1668  000A20                     
  1669                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1670  000A20  908C               	bcf	140,0,c	;volatile
  1671  000A22                     
  1672                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1673  000A22  828C               	bsf	140,1,c	;volatile
  1674  000A24                     
  1675                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1676  000A24  848C               	bsf	140,2,c	;volatile
  1677  000A26                     
  1678                           ;LCD.c: 128:         _delay(1200);
  1679  000A26  0EF0               	movlw	240
  1680  000A28                     u497:
  1681  000A28  D000               	nop2	
  1682  000A2A  2EE8               	decfsz	wreg,f,c
  1683  000A2C  D7FD               	bra	u497
  1684  000A2E                     
  1685                           ;LCD.c: 130:  aux = PORTD;
  1686  000A2E  CF83 F014          	movff	3971,LEER_LCD@aux	;volatile
  1687  000A32                     
  1688                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1689  000A32  948C               	bcf	140,2,c	;volatile
  1690  000A34                     
  1691                           ;LCD.c: 132:         _delay(1200);
  1692  000A34  0EF0               	movlw	240
  1693  000A36                     u507:
  1694  000A36  D000               	nop2	
  1695  000A38  2EE8               	decfsz	wreg,f,c
  1696  000A3A  D7FD               	bra	u507
  1697  000A3C                     
  1698                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1699  000A3C  848C               	bsf	140,2,c	;volatile
  1700  000A3E                     
  1701                           ;LCD.c: 135:         _delay(1200);
  1702  000A3E  0EF0               	movlw	240
  1703  000A40                     u517:
  1704  000A40  D000               	nop2	
  1705  000A42  2EE8               	decfsz	wreg,f,c
  1706  000A44  D7FD               	bra	u517
  1707  000A46                     
  1708                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1709  000A46  948C               	bcf	140,2,c	;volatile
  1710  000A48                     l848:
  1711                           
  1712                           ;LCD.c: 138:  aux = aux & 0x80;
  1713  000A48  5014               	movf	LEER_LCD@aux^0,w,c
  1714  000A4A  0B80               	andlw	128
  1715  000A4C  6E14               	movwf	LEER_LCD@aux^0,c
  1716                           
  1717                           ;LCD.c: 139:  while(aux == 0x80)
  1718  000A4E  EF3D  F005         	goto	l862
  1719  000A52                     l67:
  1720                           
  1721                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1722  000A52  848C               	bsf	140,2,c	;volatile
  1723  000A54                     
  1724                           ;LCD.c: 142:             _delay(1200);
  1725  000A54  0EF0               	movlw	240
  1726  000A56                     u527:
  1727  000A56  D000               	nop2	
  1728  000A58  2EE8               	decfsz	wreg,f,c
  1729  000A5A  D7FD               	bra	u527
  1730  000A5C                     
  1731                           ;LCD.c: 143:             aux = PORTD;
  1732  000A5C  CF83 F014          	movff	3971,LEER_LCD@aux	;volatile
  1733  000A60                     
  1734                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1735  000A60  948C               	bcf	140,2,c	;volatile
  1736                           
  1737                           ;LCD.c: 145:             _delay(1200);
  1738  000A62  0EF0               	movlw	240
  1739  000A64                     u537:
  1740  000A64  D000               	nop2	
  1741  000A66  2EE8               	decfsz	wreg,f,c
  1742  000A68  D7FD               	bra	u537
  1743  000A6A                     
  1744                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1745  000A6A  848C               	bsf	140,2,c	;volatile
  1746                           
  1747                           ;LCD.c: 147:             _delay(1200);
  1748  000A6C  0EF0               	movlw	240
  1749  000A6E                     u547:
  1750  000A6E  D000               	nop2	
  1751  000A70  2EE8               	decfsz	wreg,f,c
  1752  000A72  D7FD               	bra	u547
  1753  000A74                     
  1754                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1755  000A74  948C               	bcf	140,2,c	;volatile
  1756  000A76  EF24  F005         	goto	l848
  1757  000A7A                     l862:
  1758                           
  1759                           ;LCD.c: 139:  while(aux == 0x80)
  1760  000A7A  0E80               	movlw	128
  1761  000A7C  1814               	xorwf	LEER_LCD@aux^0,w,c
  1762  000A7E  B4D8               	btfsc	status,2,c
  1763  000A80  EF44  F005         	goto	u11
  1764  000A84  EF46  F005         	goto	u10
  1765  000A88                     u11:
  1766  000A88  EF29  F005         	goto	l67
  1767  000A8C                     u10:
  1768  000A8C  0012               	return		;funcret
  1769  000A8E                     __end_of_LEER_LCD:
  1770                           	callstack 0
  1771                           
  1772 ;; *************** function _ENVIA_NIBBLE *****************
  1773 ;; Defined at:
  1774 ;;		line 93 in file "LCD.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  dato            1    wreg     unsigned char 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  dato            1    0[COMRAM] unsigned char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1788 ;;      Params:         0       0       0       0       0       0       0       0       0
  1789 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1790 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1791 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1792 ;;Total ram usage:        1 bytes
  1793 ;; Hardware stack levels used: 1
  1794 ;; Hardware stack levels required when called: 1
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_ENVIA_CHAR
  1799 ;;		_LCD_CONFIG
  1800 ;;		_ENVIA_LCD_CMD
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text16
  1805  000D80                     __ptext16:
  1806                           	callstack 0
  1807  000D80                     _ENVIA_NIBBLE:
  1808                           	callstack 27
  1809                           
  1810                           ;incstack = 0
  1811                           ;ENVIA_NIBBLE@dato stored from wreg
  1812  000D80  6E14               	movwf	ENVIA_NIBBLE@dato^0,c
  1813  000D82                     
  1814                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1815  000D82  0E0F               	movlw	15
  1816  000D84  168C               	andwf	140,f,c	;volatile
  1817                           
  1818                           ;LCD.c: 96:  dato &= 0xF0;
  1819  000D86  0EF0               	movlw	240
  1820  000D88  1614               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1821                           
  1822                           ;LCD.c: 97:  LATD|= dato;
  1823  000D8A  5014               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1824  000D8C  128C               	iorwf	140,f,c	;volatile
  1825  000D8E                     
  1826                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1827  000D8E  848C               	bsf	140,2,c	;volatile
  1828  000D90                     
  1829                           ;LCD.c: 100:         _delay(1200);
  1830  000D90  0EF0               	movlw	240
  1831  000D92                     u557:
  1832  000D92  D000               	nop2	
  1833  000D94  2EE8               	decfsz	wreg,f,c
  1834  000D96  D7FD               	bra	u557
  1835  000D98                     
  1836                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1837  000D98  948C               	bcf	140,2,c	;volatile
  1838  000D9A  0012               	return		;funcret
  1839  000D9C                     __end_of_ENVIA_NIBBLE:
  1840                           	callstack 0
  1841                           
  1842 ;; *************** function _TMR1_ISR *****************
  1843 ;; Defined at:
  1844 ;;		line 65 in file "maincode3.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		Interrupt level 2
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	intcode
  1872  000008                     __pintcode:
  1873                           	callstack 0
  1874  000008                     _TMR1_ISR:
  1875                           	callstack 26
  1876                           
  1877                           ;incstack = 0
  1878  000008  8226               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1879  00000A  ED47  F005         	call	int_func,f	;refresh shadow registers
  1880                           
  1881                           	psect	intcode_body
  1882  000A8E                     __pintcode_body:
  1883                           	callstack 26
  1884  000A8E                     int_func:
  1885                           	callstack 26
  1886  000A8E  0006               	pop		; remove dummy address from shadow register refresh
  1887  000A90                     
  1888                           ;maincode3.c: 66:     PIR1bits.TMR1IF = 0;
  1889  000A90  909E               	bcf	158,0,c	;volatile
  1890  000A92                     
  1891                           ;maincode3.c: 67:     TMR1H = 0x80;
  1892  000A92  0E80               	movlw	128
  1893  000A94  6ECF               	movwf	207,c	;volatile
  1894                           
  1895                           ;maincode3.c: 68:     TMR1L = 0x00;
  1896  000A96  0E00               	movlw	0
  1897  000A98  6ECE               	movwf	206,c	;volatile
  1898  000A9A                     
  1899                           ;maincode3.c: 69:     if(segundos == 59){
  1900  000A9A  0E3B               	movlw	59
  1901  000A9C  1801               	xorwf	_segundos^0,w,c
  1902  000A9E  A4D8               	btfss	status,2,c
  1903  000AA0  EF54  F005         	goto	i2u24_41
  1904  000AA4  EF56  F005         	goto	i2u24_40
  1905  000AA8                     i2u24_41:
  1906  000AA8  EF76  F005         	goto	i2l1164
  1907  000AAC                     i2u24_40:
  1908  000AAC                     
  1909                           ;maincode3.c: 70:         segundos = 0;
  1910  000AAC  0E00               	movlw	0
  1911  000AAE  6E01               	movwf	_segundos^0,c
  1912  000AB0                     
  1913                           ;maincode3.c: 71:         if(minutos == 59){
  1914  000AB0  0E3B               	movlw	59
  1915  000AB2  1802               	xorwf	_minutos^0,w,c
  1916  000AB4  A4D8               	btfss	status,2,c
  1917  000AB6  EF5F  F005         	goto	i2u25_41
  1918  000ABA  EF61  F005         	goto	i2u25_40
  1919  000ABE                     i2u25_41:
  1920  000ABE  EF73  F005         	goto	i2l1162
  1921  000AC2                     i2u25_40:
  1922  000AC2                     
  1923                           ;maincode3.c: 72:             minutos = 0;
  1924  000AC2  0E00               	movlw	0
  1925  000AC4  6E02               	movwf	_minutos^0,c
  1926  000AC6                     
  1927                           ;maincode3.c: 73:             if(horas == 23){
  1928  000AC6  0E17               	movlw	23
  1929  000AC8  1803               	xorwf	_horas^0,w,c
  1930  000ACA  A4D8               	btfss	status,2,c
  1931  000ACC  EF6A  F005         	goto	i2u26_41
  1932  000AD0  EF6C  F005         	goto	i2u26_40
  1933  000AD4                     i2u26_41:
  1934  000AD4  EF70  F005         	goto	i2l1160
  1935  000AD8                     i2u26_40:
  1936  000AD8                     
  1937                           ;maincode3.c: 74:                 horas = 0;
  1938  000AD8  0E00               	movlw	0
  1939  000ADA  6E03               	movwf	_horas^0,c
  1940                           
  1941                           ;maincode3.c: 75:             }
  1942  000ADC  EF77  F005         	goto	i2l150
  1943  000AE0                     i2l1160:
  1944                           
  1945                           ;maincode3.c: 77:                 horas++;
  1946  000AE0  2A03               	incf	_horas^0,f,c
  1947  000AE2  EF77  F005         	goto	i2l150
  1948  000AE6                     i2l1162:
  1949                           
  1950                           ;maincode3.c: 81:             minutos++;
  1951  000AE6  2A02               	incf	_minutos^0,f,c
  1952  000AE8  EF77  F005         	goto	i2l150
  1953  000AEC                     i2l1164:
  1954                           
  1955                           ;maincode3.c: 85:         segundos++;
  1956  000AEC  2A01               	incf	_segundos^0,f,c
  1957  000AEE                     i2l150:
  1958  000AEE  9226               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1959  000AF0  0011               	retfie		f
  1960  000AF2                     __end_of_TMR1_ISR:
  1961                           	callstack 0
  1962                           
  1963                           	psect	rparam
  1964  0000                     
  1965                           	psect	temp
  1966  000026                     btemp:
  1967                           	callstack 0
  1968  000026                     	ds	1
  1969  0000                     int$flags	set	btemp
  1970  0000                     wtemp8	set	btemp+1
  1971  0000                     ttemp5	set	btemp+1
  1972  0000                     ttemp6	set	btemp+4
  1973  0000                     ttemp7	set	btemp+8
  1974                           
  1975                           	psect	idloc
  1976                           
  1977                           ;Config register IDLOC0 @ 0x200000
  1978                           ;	unspecified, using default values
  1979  200000                     	org	2097152
  1980  200000  FF                 	db	255
  1981                           
  1982                           ;Config register IDLOC1 @ 0x200001
  1983                           ;	unspecified, using default values
  1984  200001                     	org	2097153
  1985  200001  FF                 	db	255
  1986                           
  1987                           ;Config register IDLOC2 @ 0x200002
  1988                           ;	unspecified, using default values
  1989  200002                     	org	2097154
  1990  200002  FF                 	db	255
  1991                           
  1992                           ;Config register IDLOC3 @ 0x200003
  1993                           ;	unspecified, using default values
  1994  200003                     	org	2097155
  1995  200003  FF                 	db	255
  1996                           
  1997                           ;Config register IDLOC4 @ 0x200004
  1998                           ;	unspecified, using default values
  1999  200004                     	org	2097156
  2000  200004  FF                 	db	255
  2001                           
  2002                           ;Config register IDLOC5 @ 0x200005
  2003                           ;	unspecified, using default values
  2004  200005                     	org	2097157
  2005  200005  FF                 	db	255
  2006                           
  2007                           ;Config register IDLOC6 @ 0x200006
  2008                           ;	unspecified, using default values
  2009  200006                     	org	2097158
  2010  200006  FF                 	db	255
  2011                           
  2012                           ;Config register IDLOC7 @ 0x200007
  2013                           ;	unspecified, using default values
  2014  200007                     	org	2097159
  2015  200007  FF                 	db	255
  2016                           
  2017                           	psect	config
  2018                           
  2019                           ;Config register CONFIG1L @ 0x300000
  2020                           ;	PLL Prescaler Selection bits
  2021                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  2022                           ;	System Clock Postscaler Selection bits
  2023                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  2024                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2025                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  2026  300000                     	org	3145728
  2027  300000  00                 	db	0
  2028                           
  2029                           ;Config register CONFIG1H @ 0x300001
  2030                           ;	Oscillator Selection bits
  2031                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  2032                           ;	Fail-Safe Clock Monitor Enable bit
  2033                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2034                           ;	Internal/External Oscillator Switchover bit
  2035                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2036  300001                     	org	3145729
  2037  300001  02                 	db	2
  2038                           
  2039                           ;Config register CONFIG2L @ 0x300002
  2040                           ;	Power-up Timer Enable bit
  2041                           ;	PWRT = ON, PWRT enabled
  2042                           ;	Brown-out Reset Enable bits
  2043                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  2044                           ;	Brown-out Reset Voltage bits
  2045                           ;	BORV = 3, Minimum setting 2.05V
  2046                           ;	USB Voltage Regulator Enable bit
  2047                           ;	VREGEN = OFF, USB voltage regulator disabled
  2048  300002                     	org	3145730
  2049  300002  18                 	db	24
  2050                           
  2051                           ;Config register CONFIG2H @ 0x300003
  2052                           ;	Watchdog Timer Enable bit
  2053                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2054                           ;	Watchdog Timer Postscale Select bits
  2055                           ;	WDTPS = 32768, 1:32768
  2056  300003                     	org	3145731
  2057  300003  1E                 	db	30
  2058                           
  2059                           ; Padding undefined space
  2060  300004                     	org	3145732
  2061  300004  FF                 	db	255
  2062                           
  2063                           ;Config register CONFIG3H @ 0x300005
  2064                           ;	CCP2 MUX bit
  2065                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  2066                           ;	PORTB A/D Enable bit
  2067                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2068                           ;	Low-Power Timer 1 Oscillator Enable bit
  2069                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2070                           ;	MCLR Pin Enable bit
  2071                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2072  300005                     	org	3145733
  2073  300005  81                 	db	129
  2074                           
  2075                           ;Config register CONFIG4L @ 0x300006
  2076                           ;	Stack Full/Underflow Reset Enable bit
  2077                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2078                           ;	Single-Supply ICSP Enable bit
  2079                           ;	LVP = OFF, Single-Supply ICSP disabled
  2080                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2081                           ;	ICPRT = OFF, ICPORT disabled
  2082                           ;	Extended Instruction Set Enable bit
  2083                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2084                           ;	Background Debugger Enable bit
  2085                           ;	DEBUG = 0x1, unprogrammed default
  2086  300006                     	org	3145734
  2087  300006  81                 	db	129
  2088                           
  2089                           ; Padding undefined space
  2090  300007                     	org	3145735
  2091  300007  FF                 	db	255
  2092                           
  2093                           ;Config register CONFIG5L @ 0x300008
  2094                           ;	Code Protection bit
  2095                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  2096                           ;	Code Protection bit
  2097                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  2098                           ;	Code Protection bit
  2099                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  2100                           ;	Code Protection bit
  2101                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  2102  300008                     	org	3145736
  2103  300008  0F                 	db	15
  2104                           
  2105                           ;Config register CONFIG5H @ 0x300009
  2106                           ;	Boot Block Code Protection bit
  2107                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  2108                           ;	Data EEPROM Code Protection bit
  2109                           ;	CPD = OFF, Data EEPROM is not code-protected
  2110  300009                     	org	3145737
  2111  300009  C0                 	db	192
  2112                           
  2113                           ;Config register CONFIG6L @ 0x30000A
  2114                           ;	Write Protection bit
  2115                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  2116                           ;	Write Protection bit
  2117                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  2118                           ;	Write Protection bit
  2119                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  2120                           ;	Write Protection bit
  2121                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  2122  30000A                     	org	3145738
  2123  30000A  0F                 	db	15
  2124                           
  2125                           ;Config register CONFIG6H @ 0x30000B
  2126                           ;	Configuration Register Write Protection bit
  2127                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2128                           ;	Boot Block Write Protection bit
  2129                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2130                           ;	Data EEPROM Write Protection bit
  2131                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2132  30000B                     	org	3145739
  2133  30000B  E0                 	db	224
  2134                           
  2135                           ;Config register CONFIG7L @ 0x30000C
  2136                           ;	Table Read Protection bit
  2137                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2138                           ;	Table Read Protection bit
  2139                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2140                           ;	Table Read Protection bit
  2141                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2142                           ;	Table Read Protection bit
  2143                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2144  30000C                     	org	3145740
  2145  30000C  0F                 	db	15
  2146                           
  2147                           ;Config register CONFIG7H @ 0x30000D
  2148                           ;	Boot Block Table Read Protection bit
  2149                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2150  30000D                     	org	3145741
  2151  30000D  40                 	db	64
  2152                           tosu	equ	0xFFF
  2153                           tosh	equ	0xFFE
  2154                           tosl	equ	0xFFD
  2155                           stkptr	equ	0xFFC
  2156                           pclatu	equ	0xFFB
  2157                           pclath	equ	0xFFA
  2158                           pcl	equ	0xFF9
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           indf0	equ	0xFEF
  2166                           postinc0	equ	0xFEE
  2167                           postdec0	equ	0xFED
  2168                           preinc0	equ	0xFEC
  2169                           plusw0	equ	0xFEB
  2170                           fsr0h	equ	0xFEA
  2171                           fsr0l	equ	0xFE9
  2172                           wreg	equ	0xFE8
  2173                           indf1	equ	0xFE7
  2174                           postinc1	equ	0xFE6
  2175                           postdec1	equ	0xFE5
  2176                           preinc1	equ	0xFE4
  2177                           plusw1	equ	0xFE3
  2178                           fsr1h	equ	0xFE2
  2179                           fsr1l	equ	0xFE1
  2180                           bsr	equ	0xFE0
  2181                           indf2	equ	0xFDF
  2182                           postinc2	equ	0xFDE
  2183                           postdec2	equ	0xFDD
  2184                           preinc2	equ	0xFDC
  2185                           plusw2	equ	0xFDB
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    0
    Data        19
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     15      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    GENERACARACTER@vector	PTR const unsigned char  size(2) Largest target is 8
		 -> pacman(COMRAM[8]), reloj(COMRAM[8]), 

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_digit_converter
    _lcd_init->_GENERACARACTER
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _GENERACARACTER->_ENVIA_CHAR
    _GENERACARACTER->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _digit_converter->___awdiv
    ___awdiv->___awmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _TMR1_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR1_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR1_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR1_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR1_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3294
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                          _configuro
                    _digit_converter
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    1181
                                              7 COMRAM     2     2      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                     _GENERACARACTER
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _GENERACARACTER                                       4     1      3     656
                                              3 COMRAM     4     1      3
                         _ENVIA_CHAR
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _digit_converter                                      1     1      0    1270
                                             14 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuro                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (3) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuro
   _digit_converter
     ___awdiv
       ___awmod (ARG)
     ___awmod
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _GENERACARACTER
       _ENVIA_CHAR
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      F      25       1       39.4%
BITBIGSFRhhlh       2E      0       0      22        0.0%
BITBIGSFRll         23      0       0      26        0.0%
BITBIGSFRhhhlh      22      0       0      21        0.0%
BITBIGSFRhhhh        D      0       0      20        0.0%
BITBIGSFRlh          8      0       0      25        0.0%
BITBIGSFRhl          8      0       0      24        0.0%
BITBIGSFRhhll        7      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25      27        0.0%
DATA                 0      0      25       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Oct 13 17:06:45 2022

                     l24 0CAE                       l42 0D7E                       l51 0D4E  
                     l60 0D9A                       l37 0DC2                       l54 0DCA  
                     l63 0D1A                       l48 0C38                       l57 0B50  
                     l74 0C74                       l67 0A52                       l69 0A8C  
                     u10 0A8C                       u11 0A88                       u20 0D62  
                     u21 0D5E                       u30 0D78                       u31 0D74  
           ___awdiv@sign 001F            ENVIA_CHAR@aux 0016                      l131 0BAA  
                    l125 0DBA                      l128 0BFA                      l384 08D6  
                    l900 0D28                      l397 0986                      l830 0A22  
                    l910 0D3C                      l902 0D30                      l840 0A34  
                    l832 0A24                      l912 0D42                      l904 0D32  
                    l920 0D62                      l850 0A54                      l842 0A3C  
                    l834 0A26                      l826 0A1C                      l914 0D48  
                    l906 0D34                      l922 0D68                      l930 0AF6  
                    l852 0A5C                      l844 0A3E                      l836 0A2E  
                    l828 0A20                      l908 0D36                      l916 0DBC  
                    l924 0D78                      l940 0B2C                      l932 0AFC  
                    l870 0D98                      l854 0A60                      l862 0A7A  
                    l846 0A46                      l838 0A32                      l926 0DC4  
                    l918 0D52                      l950 0B4A                      l942 0B32  
                    l934 0B0A                      l864 0D82                      l856 0A6A  
                    l848 0A48                      l880 0CFC                      l872 0CEA  
                    l944 0B38                      l936 0B1E                      l928 0AF2  
                    l866 0D8E                      l858 0A74                      l890 0D0E  
                    l882 0CFE                      l874 0CEC                      l946 0B3E  
                    l938 0B26                      l868 0D90                      l892 0D14  
                    l884 0D00                      l876 0CF0                      l948 0B44  
                    l894 0D1E                      l886 0D02                      l878 0CF4  
                    l896 0D20                      l888 0D08                      l898 0D24  
                    u300 0866                      u301 0862                      u310 0884  
                    u311 0880                      u400 0C88                      u320 08A0  
                    u401 0C84                      u321 089C                      u410 0CA6  
                    u330 08C6                      u411 0CA2                      u331 08C2  
                    u420 0C38                      u340 08EA                      u421 0C34  
                    u341 08E6                      u350 0904                      u270 0C6E  
                    u351 0900                      u271 0C6A                      u280 0826  
                    u360 091E                      u281 0822                      u361 091A  
                    u290 0840                      u370 093C                      u507 0A36  
                    u291 083C                      u371 0938                      u380 0952  
                    u517 0A40                      u381 094E                      u437 0BBE  
                    u390 0976                      u527 0A56                      u391 0972  
                    u447 0B02                      u537 0A64                      u457 0B10  
                    u547 0A6E                      u467 0B20                      u557 0D92  
                    u477 0CF6                      u487 0D2A                      u497 0A28  
           ___awmod@sign 0019              LEER_LCD@aux 0014                      wreg 000FE8  
           ?_CURSOR_HOME 0014           ??_ENVIA_NIBBLE 0014           ENVIA_CHAR@dato 0015  
                   l1200 0866                     l1210 08A0                     l1202 086E  
                   l1220 08C6                     l1212 08A8                     l1204 0876  
                   l1300 0990                     l1070 0DB8                     l1222 08CE  
                   l1214 08AA                     l1206 0884                     l1230 08EA  
                   l1310 09C0                     l1302 099A                     l1064 0DB0  
                   l1216 08B0                     l1208 088A                     l1240 091E  
                   l1232 08F2                     l1320 09E2                     l1312 09C6  
                   l1304 09AA                     l1066 0DB4                     l1218 08B6  
                   l1250 095A                     l1242 0926                     l1234 08F6  
                   l1226 08D8                     l1330 0A04                     l1322 09E8  
                   l1314 09CC                     l1306 09B4                     l1068 0DB6  
                   l1252 0960                     l1244 092E                     l1236 0904  
                   l1228 08DC                     l1180 0C6E                     l1332 0A0C  
                   l1324 09F0                     l1316 09D4                     l1308 09BA  
                   l1270 0BFC                     l1262 0C78                     l1190 0832  
                   l1182 0814                     l1246 093C                     l1254 0966  
                   l1238 090C                     l1174 0C4A                     l1166 0C3A  
                   l1326 09F8                     l1318 09DC                     l1272 0C08  
                   l1264 0C88                     l1192 0840                     l1184 0818  
                   l1256 0976                     l1248 0952                     l1176 0C5C  
                   l1168 0C46                     l1280 0BB0                     l1328 09FE  
                   l1274 0C24                     l1266 0C94                     l1194 0848  
                   l1186 0826                     l1258 097E                     l1178 0C5E  
                   l1290 0BDA                     l1282 0BB4                     l1276 0C26  
                   l1268 0CA6                     l1196 084C                     l1188 082E  
                   l1292 0BEA                     l1284 0BCC                     l1198 0854  
                   l1294 0B54                     l1286 0BD0                     l1278 0BAC  
                   l1288 0BD4                     l1296 0988                     l1298 098C  
                   STR_1 0801                     _LATD 000F8C                     _main 0988  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0026                     prodl 000FF3                     start 000E  
          ?_CURSOR_ONOFF 0014  __end_of_digit_converter 0BAC             ___param_bank 000000  
        ??_ENVIA_LCD_CMD 0015         __end_of_LEER_LCD 0A8E           _GENERACARACTER 0C3A  
                  ?_main 0014          __end_of___awdiv 08D8          __end_of___awmod 0988  
        ___awdiv@divisor 001C                    _T1CON 000FCD                    i2l150 0AEE  
        ___awdiv@counter 001E                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _PORTD 000F83                    _TRISD 000F95         __end_of_TMR1_ISR 0AF2  
                  _horas 0003                    _reloj 000C              ?_POS_CURSOR 0017  
                  tablat 000FF5                    ttemp5 0027                    ttemp6 002A  
                  ttemp7 002E                    status 000FD8                    wtemp8 0027  
         ??_CURSOR_ONOFF 0017          __initialization 0CB0             __end_of_main 0A1C  
 __end_of_GENERACARACTER 0C76          _ESCRIBE_MENSAJE 0BFC                   ??_main 0023  
          __activetblptr 000001         ___awdiv@dividend 001A                   i2l1150 0AAC  
                 i2l1160 0AE0                   i2l1152 0AB0                   i2l1144 0A90  
                 i2l1154 0AC2                   i2l1162 0AE6                   i2l1146 0A92  
                 i2l1156 0AC6                   i2l1164 0AEC                   i2l1148 0A9A  
                 i2l1158 0AD8         ?_digit_converter 0014         __end_of_lcd_init 0BFC  
              ??___awdiv 001E                ??___awmod 0018     __end_of_ENVIA_NIBBLE 0D9C  
        ?_GENERACARACTER 0017                   _pacman 0004         ___awdiv@quotient 0020  
        ___awmod@divisor 0016                   isa$std 000001          ___awmod@counter 0018  
           __pdataCOMRAM 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8             ??_BORRAR_LCD 0017  
              ?_LEER_LCD 0014               __accesstop 0060  __end_of__initialization 0CD6  
           ??_LCD_CONFIG 0017            ___rparam_used 000001             ??_ENVIA_CHAR 0015  
__end_of_ESCRIBE_MENSAJE 0C3A           __pcstackCOMRAM 0014                ?_TMR1_ISR 0014  
     __end_of_BORRAR_LCD 0DCC         ENVIA_LCD_CMD@aux 0016     __end_of_CURSOR_ONOFF 0D80  
     __end_of_LCD_CONFIG 0B52       __end_of_ENVIA_CHAR 0D50               ??_LEER_LCD 0014  
       ENVIA_NIBBLE@dato 0014               ??_TMR1_ISR 0014                  i2u24_40 0AAC  
                i2u24_41 0AA8                  i2u25_40 0AC2                  i2u25_41 0ABE  
                i2u26_40 0AD8                  i2u26_41 0AD4             ??_POS_CURSOR 0018  
              ?_lcd_init 0014                  __Hparam 0000                  __Lparam 0000  
       ?_ESCRIBE_MENSAJE 0017        __end_of_configuro 0DBC                  ___awdiv 0814  
                ___awmod 08D8             __psmallconst 0800    __end_of_ENVIA_LCD_CMD 0D1C  
                __pcinit 0CB0       __end_of_POS_CURSOR 0CB0                  __ramtop 0800  
                __ptext0 0988                  __ptext1 0BAC                  __ptext2 0AF2  
                __ptext3 0C3A                  __ptext4 0D50                  __ptext5 0DBC  
                __ptext6 0DC4                  __ptext7 0B52                  __ptext8 08D8  
                __ptext9 0814          GENERACARACTER@i 001A         ___awmod@dividend 0014  
                _minutos 0002               ??_lcd_init 001B           __pintcode_body 0A8E  
           _ENVIA_NIBBLE 0D80     end_of_initialization 0CD6                  int_func 0A8E  
       ??_GENERACARACTER 001A                  postdec1 000FE5                  postinc0 000FEE  
   GENERACARACTER@vector 0017             _CURSOR_ONOFF 0D50       CURSOR_ONOFF@estado 0017  
  digit_converter@numero 0022            __pidataCOMRAM 0D9C            ??_CURSOR_HOME 0017  
    start_initialization 0CB0        ENVIA_LCD_CMD@dato 0015              __pbssCOMRAM 0023  
              _d_centena 0025      __end_of_CURSOR_HOME 0DC4                __pintcode 0008  
               ?___awdiv 001A                 ?___awmod 0014        GENERACARACTER@pos 0019  
              _configuro 0DB0              __smallconst 0800        ??_digit_converter 0022  
               _LEER_LCD 0A1C                 _LATDbits 000F8C                 _PIE1bits 000F9D  
               _PIR1bits 000F9E                 _TMR1_ISR 0008         ESCRIBE_MENSAJE@i 001C  
         POS_CURSOR@fila 0018               ?_configuro 0014              _CURSOR_HOME 0DBC  
              copy_data0 0CC4                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800                 _d_decena 0024                 _d_unidad 0023  
               __ptext10 0DB0                 __ptext11 0C76                 __ptext12 0CE8  
               __ptext13 0BFC                 __ptext14 0D1C                 __ptext15 0A1C  
               __ptext16 0D80               _BORRAR_LCD 0DC4                 _lcd_init 0BAC  
             _LCD_CONFIG 0AF2               _ENVIA_CHAR 0D1C                 _segundos 0001  
               isa$xinst 000000                 int$flags 0026            _ENVIA_LCD_CMD 0CE8  
            ??_configuro 0014               _INTCONbits 000FF2        ??_ESCRIBE_MENSAJE 001A  
               intlevel2 0000    ESCRIBE_MENSAJE@cadena 0017           ?_ENVIA_LCD_CMD 0014  
        _digit_converter 0B52              ?_BORRAR_LCD 0014            ?_ENVIA_NIBBLE 0014  
             _POS_CURSOR 0C76              ?_LCD_CONFIG 0014       ESCRIBE_MENSAJE@tam 0019  
            ?_ENVIA_CHAR 0014        POS_CURSOR@columna 0017  
