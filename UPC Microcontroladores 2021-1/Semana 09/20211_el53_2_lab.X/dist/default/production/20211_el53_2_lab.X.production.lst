

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue May 18 18:40:22 2021

Microchip MPLAB XC8 C Compiler v2.31 (Pro license) build 20201012212115 Og9s 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29                           	psect	pa_nodes0,global,class=CODE,delta=1
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _LATCbits	set	3979
    69  0000                     _ADCON0	set	4034
    70  0000                     _ADCON1	set	4033
    71  0000                     _ADCON2	set	4032
    72  0000                     _TRISCbits	set	3988
    73  0000                     _PORTD	set	3971
    74  0000                     _LATD	set	3980
    75  0000                     _TRISD	set	3989
    76  0000                     _LATDbits	set	3980
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	callstack 0
    81  000800  00                 	db	0
    82  000801                     STR_1:
    83  000801  4C                 	db	76	;'L'
    84  000802  65                 	db	101	;'e'
    85  000803  63                 	db	99	;'c'
    86  000804  74                 	db	116	;'t'
    87  000805  75                 	db	117	;'u'
    88  000806  72                 	db	114	;'r'
    89  000807  61                 	db	97	;'a'
    90  000808  20                 	db	32
    91  000809  41                 	db	65	;'A'
    92  00080A  2F                 	db	47
    93  00080B  44                 	db	68	;'D'
    94  00080C  3A                 	db	58	;':'
    95  00080D  00                 	db	0
    96  00080E  00                 	db	0	; dummy byte at the end
    97  0000                     
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101  000B1E                     __pcinit:
   102                           	callstack 0
   103  000B1E                     start_initialization:
   104                           	callstack 0
   105  000B1E                     __initialization:
   106                           	callstack 0
   107                           
   108                           ; Clear objects allocated to COMRAM (10 bytes)
   109  000B1E  EE00  F011         	lfsr	0,__pbssCOMRAM
   110  000B22  0E0A               	movlw	10
   111  000B24                     clear_0:
   112  000B24  6AEE               	clrf	postinc0,c
   113  000B26  06E8               	decf	wreg,f,c
   114  000B28  E1FD               	bnz	clear_0
   115  000B2A                     end_of_initialization:
   116                           	callstack 0
   117  000B2A                     __end_of__initialization:
   118                           	callstack 0
   119  000B2A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   120  000B2C  6EF8               	movwf	tblptru,c
   121  000B2E  0E08               	movlw	high __Lsmallconst
   122  000B30  6EF7               	movwf	tblptrh,c
   123  000B32  0100               	movlb	0
   124  000B34  EF4B  F004         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	bssCOMRAM
   127  000011                     __pbssCOMRAM:
   128                           	callstack 0
   129  000011                     _unidad:
   130                           	callstack 0
   131  000011                     	ds	2
   132  000013                     _decena:
   133                           	callstack 0
   134  000013                     	ds	2
   135  000015                     _centena:
   136                           	callstack 0
   137  000015                     	ds	2
   138  000017                     _millar:
   139                           	callstack 0
   140  000017                     	ds	2
   141  000019                     _resultado:
   142                           	callstack 0
   143  000019                     	ds	2
   144                           
   145                           	psect	cstackCOMRAM
   146  000001                     __pcstackCOMRAM:
   147                           	callstack 0
   148  000001                     ?___lwmod:
   149                           	callstack 0
   150  000001                     ENVIA_NIBBLE@dato:
   151                           	callstack 0
   152  000001                     LEER_LCD@aux:
   153                           	callstack 0
   154  000001                     ___lwmod@dividend:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0x0
   158  000001                     	ds	1
   159  000002                     ENVIA_CHAR@dato:
   160                           	callstack 0
   161  000002                     ENVIA_LCD_CMD@dato:
   162                           	callstack 0
   163                           
   164                           ; 1 bytes @ 0x1
   165  000002                     	ds	1
   166  000003                     ENVIA_CHAR@aux:
   167                           	callstack 0
   168  000003                     ENVIA_LCD_CMD@aux:
   169                           	callstack 0
   170  000003                     ___lwmod@divisor:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174  000003                     	ds	1
   175  000004                     ??_LCD_CONFIG:
   176  000004                     POS_CURSOR@columna:
   177                           	callstack 0
   178  000004                     CURSOR_ONOFF@estado:
   179                           	callstack 0
   180  000004                     ESCRIBE_MENSAJE@cadena:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x3
   184  000004                     	ds	1
   185  000005                     ??_lcd_config:
   186  000005                     POS_CURSOR@fila:
   187                           	callstack 0
   188  000005                     ESCRIBE_MENSAJE@tam:
   189                           	callstack 0
   190  000005                     ___lwmod@counter:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x4
   194  000005                     	ds	1
   195  000006                     ??_ESCRIBE_MENSAJE:
   196  000006                     ?___lwdiv:
   197                           	callstack 0
   198  000006                     ___lwdiv@dividend:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x5
   202  000006                     	ds	1
   203  000007                     ESCRIBE_MENSAJE@i:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x6
   207  000007                     	ds	1
   208  000008                     ___lwdiv@divisor:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x7
   212  000008                     	ds	2
   213  00000A                     ___lwdiv@quotient:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x9
   217  00000A                     	ds	2
   218  00000C                     ___lwdiv@counter:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0xB
   222  00000C                     	ds	1
   223  00000D                     convierte@numero:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0xC
   227  00000D                     	ds	2
   228  00000F                     ??_main:
   229                           
   230                           ; 1 bytes @ 0xE
   231  00000F                     	ds	2
   232                           
   233 ;;
   234 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   235 ;;
   236 ;; *************** function _main *****************
   237 ;; Defined at:
   238 ;;		line 50 in file "maincode2.c"
   239 ;; Parameters:    Size  Location     Type
   240 ;;		None
   241 ;; Auto vars:     Size  Location     Type
   242 ;;		None
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : 0/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   252 ;;      Params:         0       0       0       0       0       0       0       0       0
   253 ;;      Locals:         0       0       0       0       0       0       0       0       0
   254 ;;      Temps:          2       0       0       0       0       0       0       0       0
   255 ;;      Totals:         2       0       0       0       0       0       0       0       0
   256 ;;Total ram usage:        2 bytes
   257 ;; Hardware stack levels required when called:    4
   258 ;; This function calls:
   259 ;;		_ENVIA_CHAR
   260 ;;		_ESCRIBE_MENSAJE
   261 ;;		_POS_CURSOR
   262 ;;		_convierte
   263 ;;		_init_conf
   264 ;;		_lcd_config
   265 ;; This function is called by:
   266 ;;		Startup code after reset
   267 ;; This function uses a non-reentrant model
   268 ;;
   269                           
   270                           	psect	text0
   271  000896                     __ptext0:
   272                           	callstack 0
   273  000896                     _main:
   274                           	callstack 27
   275                           
   276                           ;maincode2.c: 51:     init_conf();
   277                           
   278                           ;incstack = 0
   279  000896  ECA8  F005         	call	_init_conf	;wreg free
   280                           
   281                           ;maincode2.c: 52:     lcd_config();
   282  00089A  EC4F  F005         	call	_lcd_config	;wreg free
   283                           
   284                           ;maincode2.c: 53:     LATCbits.LC2 = 1;
   285  00089E  848B               	bsf	139,2,c	;volatile
   286                           
   287                           ;maincode2.c: 54:     ESCRIBE_MENSAJE("Lectura A/D:",12);
   288  0008A0  0E01               	movlw	low STR_1
   289  0008A2  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   290  0008A4  0E0C               	movlw	12
   291  0008A6  6E05               	movwf	ESCRIBE_MENSAJE@tam^0,c
   292  0008A8  EC61  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   293  0008AC                     l1100:
   294                           
   295                           ;maincode2.c: 56:         ADCON0bits.GODONE = 1;
   296  0008AC  82C2               	bsf	194,1,c	;volatile
   297  0008AE                     l133:
   298  0008AE  B2C2               	btfsc	194,1,c	;volatile
   299  0008B0  D7FE               	goto	l133
   300                           
   301                           ;maincode2.c: 59:         resultado = (ADRESH << 8) + ADRESL;
   302  0008B2  50C4               	movf	196,w,c	;volatile
   303  0008B4  6E10               	movwf	(??_main+1)^0,c
   304  0008B6  6A0F               	clrf	??_main^0,c
   305  0008B8  50C3               	movf	195,w,c	;volatile
   306  0008BA  240F               	addwf	??_main^0,w,c
   307  0008BC  6E19               	movwf	_resultado^0,c
   308  0008BE  0E00               	movlw	0
   309  0008C0  2010               	addwfc	(??_main+1)^0,w,c
   310  0008C2  6E1A               	movwf	(_resultado+1)^0,c
   311                           
   312                           ;maincode2.c: 60:         convierte (resultado);
   313  0008C4  C019  F00D         	movff	_resultado,convierte@numero
   314  0008C8  C01A  F00E         	movff	_resultado+1,convierte@numero+1
   315  0008CC  EC08  F004         	call	_convierte	;wreg free
   316                           
   317                           ;maincode2.c: 61:         POS_CURSOR(2,2);
   318  0008D0  0E02               	movlw	2
   319  0008D2  6E04               	movwf	POS_CURSOR@columna^0,c
   320  0008D4  EC72  F005         	call	_POS_CURSOR
   321                           
   322                           ;maincode2.c: 62:         ENVIA_CHAR(millar+0x30);
   323  0008D8  5017               	movf	_millar^0,w,c
   324  0008DA  0F30               	addlw	48
   325  0008DC  EC37  F005         	call	_ENVIA_CHAR
   326                           
   327                           ;maincode2.c: 63:         ENVIA_CHAR(centena+0x30);
   328  0008E0  5015               	movf	_centena^0,w,c
   329  0008E2  0F30               	addlw	48
   330  0008E4  EC37  F005         	call	_ENVIA_CHAR
   331                           
   332                           ;maincode2.c: 64:         ENVIA_CHAR(decena+0x30);
   333  0008E8  5013               	movf	_decena^0,w,c
   334  0008EA  0F30               	addlw	48
   335  0008EC  EC37  F005         	call	_ENVIA_CHAR
   336                           
   337                           ;maincode2.c: 65:         ENVIA_CHAR(unidad+0x30);
   338  0008F0  5011               	movf	_unidad^0,w,c
   339  0008F2  0F30               	addlw	48
   340  0008F4  EC37  F005         	call	_ENVIA_CHAR
   341  0008F8  D7D9               	goto	l1100
   342  0008FA                     __end_of_main:
   343                           	callstack 0
   344                           
   345 ;; *************** function _lcd_config *****************
   346 ;; Defined at:
   347 ;;		line 34 in file "maincode2.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;		None
   350 ;; Auto vars:     Size  Location     Type
   351 ;;		None
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, status,2, status,0, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   361 ;;      Params:         0       0       0       0       0       0       0       0       0
   362 ;;      Locals:         0       0       0       0       0       0       0       0       0
   363 ;;      Temps:          1       0       0       0       0       0       0       0       0
   364 ;;      Totals:         1       0       0       0       0       0       0       0       0
   365 ;;Total ram usage:        1 bytes
   366 ;; Hardware stack levels used:    1
   367 ;; Hardware stack levels required when called:    3
   368 ;; This function calls:
   369 ;;		_BORRAR_LCD
   370 ;;		_CURSOR_HOME
   371 ;;		_CURSOR_ONOFF
   372 ;;		_LCD_CONFIG
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           	psect	text1
   379  000A9E                     __ptext1:
   380                           	callstack 0
   381  000A9E                     _lcd_config:
   382                           	callstack 27
   383                           
   384                           ;maincode2.c: 35:     TRISD = 0x00;
   385                           
   386                           ;incstack = 0
   387  000A9E  6A95               	clrf	149,c	;volatile
   388                           
   389                           ;maincode2.c: 36:     LCD_CONFIG();
   390  000AA0  EC7D  F004         	call	_LCD_CONFIG	;wreg free
   391                           
   392                           ;maincode2.c: 37:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   393  000AA4  0EEA               	movlw	234
   394  000AA6  6E05               	movwf	??_lcd_config^0,c
   395  000AA8  0EC3               	movlw	195
   396  000AAA                     u247:
   397  000AAA  2EE8               	decfsz	wreg,f,c
   398  000AAC  D7FE               	bra	u247
   399  000AAE  2E05               	decfsz	??_lcd_config^0,f,c
   400  000AB0  D7FC               	bra	u247
   401  000AB2  F000               	nop	
   402                           
   403                           ;maincode2.c: 38:     BORRAR_LCD();
   404  000AB4  ECB4  F005         	call	_BORRAR_LCD	;wreg free
   405                           
   406                           ;maincode2.c: 39:     CURSOR_HOME();
   407  000AB8  ECB1  F005         	call	_CURSOR_HOME	;wreg free
   408                           
   409                           ;maincode2.c: 40:     CURSOR_ONOFF(1);
   410  000ABC  0E01               	movlw	1
   411  000ABE  EF9C  F005         	goto	_CURSOR_ONOFF
   412  000AC2                     __end_of_lcd_config:
   413                           	callstack 0
   414                           
   415 ;; *************** function _LCD_CONFIG *****************
   416 ;; Defined at:
   417 ;;		line 72 in file "LCD.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   431 ;;      Params:         0       0       0       0       0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0       0       0       0       0
   433 ;;      Temps:          1       0       0       0       0       0       0       0       0
   434 ;;      Totals:         1       0       0       0       0       0       0       0       0
   435 ;;Total ram usage:        1 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; Hardware stack levels required when called:    2
   438 ;; This function calls:
   439 ;;		_ENVIA_LCD_CMD
   440 ;;		_ENVIA_NIBBLE
   441 ;; This function is called by:
   442 ;;		_lcd_config
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           	psect	text2
   447  0008FA                     __ptext2:
   448                           	callstack 0
   449  0008FA                     _LCD_CONFIG:
   450                           	callstack 27
   451                           
   452                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   453                           
   454                           ;incstack = 0
   455  0008FA  908C               	bcf	140,0,c	;volatile
   456                           
   457                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   458  0008FC  928C               	bcf	140,1,c	;volatile
   459                           
   460                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   461  0008FE  0E30               	movlw	48
   462  000900  EC81  F005         	call	_ENVIA_NIBBLE
   463                           
   464                           ;LCD.c: 77:         _delay(24000);
   465  000904  0E20               	movlw	32
   466  000906  6E04               	movwf	??_LCD_CONFIG^0,c
   467  000908  0E2A               	movlw	42
   468  00090A                     u257:
   469  00090A  2EE8               	decfsz	wreg,f,c
   470  00090C  D7FE               	bra	u257
   471  00090E  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   472  000910  D7FC               	bra	u257
   473                           
   474                           ;LCD.c: 78:         _delay(24000);
   475  000912  0E20               	movlw	32
   476  000914  6E04               	movwf	??_LCD_CONFIG^0,c
   477  000916  0E2A               	movlw	42
   478  000918                     u267:
   479  000918  2EE8               	decfsz	wreg,f,c
   480  00091A  D7FE               	bra	u267
   481  00091C  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   482  00091E  D7FC               	bra	u267
   483                           
   484                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   485  000920  0E30               	movlw	48
   486  000922  EC81  F005         	call	_ENVIA_NIBBLE
   487                           
   488                           ;LCD.c: 83:  _delay(1200);
   489  000926  0EF0               	movlw	240
   490  000928                     u277:
   491  000928  D000               	nop2	
   492  00092A  2EE8               	decfsz	wreg,f,c
   493  00092C  D7FD               	bra	u277
   494                           
   495                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   496  00092E  0E30               	movlw	48
   497  000930  EC81  F005         	call	_ENVIA_NIBBLE
   498                           
   499                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   500  000934  0E20               	movlw	32
   501  000936  EC81  F005         	call	_ENVIA_NIBBLE
   502                           
   503                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   504  00093A  0E01               	movlw	1
   505  00093C  EC1F  F005         	call	_ENVIA_LCD_CMD
   506                           
   507                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   508  000940  0E28               	movlw	40
   509  000942  EC1F  F005         	call	_ENVIA_LCD_CMD
   510                           
   511                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   512  000946  0E0F               	movlw	15
   513  000948  EC1F  F005         	call	_ENVIA_LCD_CMD
   514                           
   515                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   516  00094C  0E06               	movlw	6
   517  00094E  EC1F  F005         	call	_ENVIA_LCD_CMD
   518                           
   519                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   520  000952  0E01               	movlw	1
   521  000954  EF1F  F005         	goto	_ENVIA_LCD_CMD
   522  000958                     __end_of_LCD_CONFIG:
   523                           	callstack 0
   524                           
   525 ;; *************** function _CURSOR_ONOFF *****************
   526 ;; Defined at:
   527 ;;		line 35 in file "LCD.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;  estado          1    wreg     unsigned char 
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  estado          1    3[COMRAM] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   541 ;;      Params:         0       0       0       0       0       0       0       0       0
   542 ;;      Locals:         1       0       0       0       0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0
   544 ;;      Totals:         1       0       0       0       0       0       0       0       0
   545 ;;Total ram usage:        1 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:    2
   548 ;; This function calls:
   549 ;;		_ENVIA_LCD_CMD
   550 ;; This function is called by:
   551 ;;		_lcd_config
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text3
   556  000B38                     __ptext3:
   557                           	callstack 0
   558  000B38                     _CURSOR_ONOFF:
   559                           	callstack 27
   560                           
   561                           ;incstack = 0
   562                           ;CURSOR_ONOFF@estado stored from wreg
   563  000B38  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   564                           
   565                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   566  000B3A  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   567  000B3C  E103               	bnz	l888
   568  000B3E  0E0E               	movlw	14
   569  000B40  EC1F  F005         	call	_ENVIA_LCD_CMD
   570  000B44                     l888:
   571                           
   572                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   573  000B44  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   574  000B46  A4D8               	btfss	status,2,c
   575  000B48  0012               	return	
   576  000B4A  0E0C               	movlw	12
   577  000B4C  EF1F  F005         	goto	_ENVIA_LCD_CMD
   578  000B50                     __end_of_CURSOR_ONOFF:
   579                           	callstack 0
   580                           
   581 ;; *************** function _CURSOR_HOME *****************
   582 ;; Defined at:
   583 ;;		line 30 in file "LCD.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   597 ;;      Params:         0       0       0       0       0       0       0       0       0
   598 ;;      Locals:         0       0       0       0       0       0       0       0       0
   599 ;;      Temps:          0       0       0       0       0       0       0       0       0
   600 ;;      Totals:         0       0       0       0       0       0       0       0       0
   601 ;;Total ram usage:        0 bytes
   602 ;; Hardware stack levels used:    1
   603 ;; Hardware stack levels required when called:    2
   604 ;; This function calls:
   605 ;;		_ENVIA_LCD_CMD
   606 ;; This function is called by:
   607 ;;		_lcd_config
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text4
   612  000B62                     __ptext4:
   613                           	callstack 0
   614  000B62                     _CURSOR_HOME:
   615                           	callstack 27
   616                           
   617                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   618                           
   619                           ;incstack = 0
   620  000B62  0E02               	movlw	2
   621  000B64  EF1F  F005         	goto	_ENVIA_LCD_CMD
   622  000B68                     __end_of_CURSOR_HOME:
   623                           	callstack 0
   624                           
   625 ;; *************** function _BORRAR_LCD *****************
   626 ;; Defined at:
   627 ;;		line 67 in file "LCD.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   641 ;;      Params:         0       0       0       0       0       0       0       0       0
   642 ;;      Locals:         0       0       0       0       0       0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0       0       0
   644 ;;      Totals:         0       0       0       0       0       0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		_ENVIA_LCD_CMD
   650 ;; This function is called by:
   651 ;;		_lcd_config
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text5
   656  000B68                     __ptext5:
   657                           	callstack 0
   658  000B68                     _BORRAR_LCD:
   659                           	callstack 27
   660                           
   661                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   662                           
   663                           ;incstack = 0
   664  000B68  0E01               	movlw	1
   665  000B6A  EF1F  F005         	goto	_ENVIA_LCD_CMD
   666  000B6E                     __end_of_BORRAR_LCD:
   667                           	callstack 0
   668                           
   669 ;; *************** function _init_conf *****************
   670 ;; Defined at:
   671 ;;		line 26 in file "maincode2.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   685 ;;      Params:         0       0       0       0       0       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0       0       0
   688 ;;      Totals:         0       0       0       0       0       0       0       0       0
   689 ;;Total ram usage:        0 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; This function calls:
   692 ;;		Nothing
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text6
   699  000B50                     __ptext6:
   700                           	callstack 0
   701  000B50                     _init_conf:
   702                           	callstack 30
   703                           
   704                           ;maincode2.c: 27:     TRISCbits.RC0 = 0;
   705                           
   706                           ;incstack = 0
   707  000B50  9094               	bcf	148,0,c	;volatile
   708                           
   709                           ;maincode2.c: 28:     TRISCbits.RC2 = 0;
   710  000B52  9494               	bcf	148,2,c	;volatile
   711                           
   712                           ;maincode2.c: 29:     ADCON2 = 0xA4;
   713  000B54  0EA4               	movlw	164
   714  000B56  6EC0               	movwf	192,c	;volatile
   715                           
   716                           ;maincode2.c: 30:     ADCON1 = 0x0E;
   717  000B58  0E0E               	movlw	14
   718  000B5A  6EC1               	movwf	193,c	;volatile
   719                           
   720                           ;maincode2.c: 31:     ADCON0 = 0x01;
   721  000B5C  0E01               	movlw	1
   722  000B5E  6EC2               	movwf	194,c	;volatile
   723  000B60  0C01               	retlw	1	;funcret
   724  000B62                     __end_of_init_conf:
   725                           	callstack 0
   726                           
   727 ;; *************** function _convierte *****************
   728 ;; Defined at:
   729 ;;		line 43 in file "maincode2.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;  numero          2   12[COMRAM] unsigned int 
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, status,2, status,0, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   743 ;;      Params:         2       0       0       0       0       0       0       0       0
   744 ;;      Locals:         0       0       0       0       0       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0       0       0       0       0
   746 ;;      Totals:         2       0       0       0       0       0       0       0       0
   747 ;;Total ram usage:        2 bytes
   748 ;; Hardware stack levels used:    1
   749 ;; Hardware stack levels required when called:    1
   750 ;; This function calls:
   751 ;;		___lwdiv
   752 ;;		___lwmod
   753 ;; This function is called by:
   754 ;;		_main
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           	psect	text7
   759  000810                     __ptext7:
   760                           	callstack 0
   761  000810                     _convierte:
   762                           	callstack 29
   763                           
   764                           ;maincode2.c: 44:     millar = numero /1000;
   765                           
   766                           ;incstack = 0
   767  000810  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   768  000814  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   769  000818  0E03               	movlw	3
   770  00081A  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   771  00081C  0EE8               	movlw	232
   772  00081E  6E08               	movwf	___lwdiv@divisor^0,c
   773  000820  ECDB  F004         	call	___lwdiv	;wreg free
   774  000824  C006  F017         	movff	?___lwdiv,_millar
   775  000828  C007  F018         	movff	?___lwdiv+1,_millar+1
   776                           
   777                           ;maincode2.c: 45:     centena = (numero % 1000) / 100;
   778  00082C  0E03               	movlw	3
   779  00082E  6E04               	movwf	(___lwmod@divisor+1)^0,c
   780  000830  0EE8               	movlw	232
   781  000832  6E03               	movwf	___lwmod@divisor^0,c
   782  000834  D825               	call	PL2	;call to abstracted procedure
   783  000836  EC00  F005         	call	___lwmod	;wreg free
   784  00083A  D827               	call	PL4	;call to abstracted procedure
   785  00083C  0E64               	movlw	100
   786  00083E  6E08               	movwf	___lwdiv@divisor^0,c
   787  000840  ECDB  F004         	call	___lwdiv	;wreg free
   788  000844  C006  F015         	movff	?___lwdiv,_centena
   789  000848  C007  F016         	movff	?___lwdiv+1,_centena+1
   790                           
   791                           ;maincode2.c: 46:     decena = (numero % 100) / 10;
   792  00084C  6A04               	clrf	(___lwmod@divisor+1)^0,c
   793  00084E  0E64               	movlw	100
   794  000850  6E03               	movwf	___lwmod@divisor^0,c
   795  000852  D816               	call	PL2	;call to abstracted procedure
   796  000854  EC00  F005         	call	___lwmod	;wreg free
   797  000858  D818               	call	PL4	;call to abstracted procedure
   798  00085A  0E0A               	movlw	10
   799  00085C  6E08               	movwf	___lwdiv@divisor^0,c
   800  00085E  ECDB  F004         	call	___lwdiv	;wreg free
   801  000862  C006  F013         	movff	?___lwdiv,_decena
   802  000866  C007  F014         	movff	?___lwdiv+1,_decena+1
   803                           
   804                           ;maincode2.c: 47:     unidad = numero % 10;
   805  00086A  D80A               	call	PL2	;call to abstracted procedure
   806  00086C  6A04               	clrf	(___lwmod@divisor+1)^0,c
   807  00086E  0E0A               	movlw	10
   808  000870  6E03               	movwf	___lwmod@divisor^0,c
   809  000872  EC00  F005         	call	___lwmod	;wreg free
   810  000876  C001  F011         	movff	?___lwmod,_unidad
   811  00087A  C002  F012         	movff	?___lwmod+1,_unidad+1
   812  00087E  0012               	return		;funcret
   813  000880                     __end_of_convierte:
   814                           	callstack 0
   815  000880                     PL2:
   816                           	callstack 29
   817  000880  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   818  000884  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   819  000888  0012               	return	
   820  00088A                     __end_ofPL2:
   821                           	callstack 0
   822  00088A                     PL4:
   823                           	callstack 29
   824  00088A  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   825  00088E  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   826  000892  6A09               	clrf	(___lwdiv@divisor+1)^0,c
   827  000894  0012               	return	
   828  000896                     __end_ofPL4:
   829                           	callstack 0
   830                           
   831 ;; *************** function ___lwmod *****************
   832 ;; Defined at:
   833 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwmod.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;  dividend        2    0[COMRAM] unsigned int 
   836 ;;  divisor         2    2[COMRAM] unsigned int 
   837 ;; Auto vars:     Size  Location     Type
   838 ;;  counter         1    4[COMRAM] unsigned char 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  2    0[COMRAM] unsigned int 
   841 ;; Registers used:
   842 ;;		wreg, status,2, status,0
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   848 ;;      Params:         4       0       0       0       0       0       0       0       0
   849 ;;      Locals:         1       0       0       0       0       0       0       0       0
   850 ;;      Temps:          0       0       0       0       0       0       0       0       0
   851 ;;      Totals:         5       0       0       0       0       0       0       0       0
   852 ;;Total ram usage:        5 bytes
   853 ;; Hardware stack levels used:    1
   854 ;; This function calls:
   855 ;;		Nothing
   856 ;; This function is called by:
   857 ;;		_convierte
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text8
   862  000A00                     __ptext8:
   863                           	callstack 0
   864  000A00                     ___lwmod:
   865                           	callstack 29
   866                           
   867                           ;incstack = 0
   868  000A00  5003               	movf	___lwmod@divisor^0,w,c
   869  000A02  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   870  000A04  E017               	bz	l642
   871  000A06  0E01               	movlw	1
   872  000A08  6E05               	movwf	___lwmod@counter^0,c
   873  000A0A  D004               	goto	l1064
   874  000A0C                     l1062:
   875  000A0C  90D8               	bcf	status,0,c
   876  000A0E  3603               	rlcf	___lwmod@divisor^0,f,c
   877  000A10  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   878  000A12  2A05               	incf	___lwmod@counter^0,f,c
   879  000A14                     l1064:
   880  000A14  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   881  000A16  D7FA               	goto	l1062
   882  000A18                     u180:
   883  000A18  5003               	movf	___lwmod@divisor^0,w,c
   884  000A1A  5C01               	subwf	___lwmod@dividend^0,w,c
   885  000A1C  5004               	movf	(___lwmod@divisor+1)^0,w,c
   886  000A1E  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   887  000A20  E304               	bnc	l1070
   888  000A22  5003               	movf	___lwmod@divisor^0,w,c
   889  000A24  5E01               	subwf	___lwmod@dividend^0,f,c
   890  000A26  5004               	movf	(___lwmod@divisor+1)^0,w,c
   891  000A28  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   892  000A2A                     l1070:
   893  000A2A  90D8               	bcf	status,0,c
   894  000A2C  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   895  000A2E  3203               	rrcf	___lwmod@divisor^0,f,c
   896  000A30  2E05               	decfsz	___lwmod@counter^0,f,c
   897  000A32  D7F2               	goto	u180
   898  000A34                     l642:
   899  000A34  C001  F001         	movff	___lwmod@dividend,?___lwmod
   900  000A38  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   901  000A3C  0012               	return		;funcret
   902  000A3E                     __end_of___lwmod:
   903                           	callstack 0
   904                           
   905 ;; *************** function ___lwdiv *****************
   906 ;; Defined at:
   907 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  dividend        2    5[COMRAM] unsigned int 
   910 ;;  divisor         2    7[COMRAM] unsigned int 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  quotient        2    9[COMRAM] unsigned int 
   913 ;;  counter         1   11[COMRAM] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  2    5[COMRAM] unsigned int 
   916 ;; Registers used:
   917 ;;		wreg, status,2, status,0
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   923 ;;      Params:         4       0       0       0       0       0       0       0       0
   924 ;;      Locals:         3       0       0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0
   926 ;;      Totals:         7       0       0       0       0       0       0       0       0
   927 ;;Total ram usage:        7 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_convierte
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text9
   937  0009B6                     __ptext9:
   938                           	callstack 0
   939  0009B6                     ___lwdiv:
   940                           	callstack 29
   941                           
   942                           ;incstack = 0
   943  0009B6  6A0A               	clrf	___lwdiv@quotient^0,c
   944  0009B8  6A0B               	clrf	(___lwdiv@quotient+1)^0,c
   945  0009BA  5008               	movf	___lwdiv@divisor^0,w,c
   946  0009BC  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   947  0009BE  E01B               	bz	l632
   948  0009C0  0E01               	movlw	1
   949  0009C2  6E0C               	movwf	___lwdiv@counter^0,c
   950  0009C4  D004               	goto	l1044
   951  0009C6                     l1042:
   952  0009C6  90D8               	bcf	status,0,c
   953  0009C8  3608               	rlcf	___lwdiv@divisor^0,f,c
   954  0009CA  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   955  0009CC  2A0C               	incf	___lwdiv@counter^0,f,c
   956  0009CE                     l1044:
   957  0009CE  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   958  0009D0  D7FA               	goto	l1042
   959  0009D2                     u150:
   960  0009D2  90D8               	bcf	status,0,c
   961  0009D4  360A               	rlcf	___lwdiv@quotient^0,f,c
   962  0009D6  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   963  0009D8  5008               	movf	___lwdiv@divisor^0,w,c
   964  0009DA  5C06               	subwf	___lwdiv@dividend^0,w,c
   965  0009DC  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   966  0009DE  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   967  0009E0  E305               	bnc	l1054
   968  0009E2  5008               	movf	___lwdiv@divisor^0,w,c
   969  0009E4  5E06               	subwf	___lwdiv@dividend^0,f,c
   970  0009E6  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   971  0009E8  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   972  0009EA  800A               	bsf	___lwdiv@quotient^0,0,c
   973  0009EC                     l1054:
   974  0009EC  90D8               	bcf	status,0,c
   975  0009EE  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   976  0009F0  3208               	rrcf	___lwdiv@divisor^0,f,c
   977  0009F2  2E0C               	decfsz	___lwdiv@counter^0,f,c
   978  0009F4  D7EE               	goto	u150
   979  0009F6                     l632:
   980  0009F6  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   981  0009FA  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   982  0009FE  0012               	return		;funcret
   983  000A00                     __end_of___lwdiv:
   984                           	callstack 0
   985                           
   986 ;; *************** function _POS_CURSOR *****************
   987 ;; Defined at:
   988 ;;		line 6 in file "LCD.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  fila            1    wreg     unsigned char 
   991 ;;  columna         1    3[COMRAM] unsigned char 
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  fila            1    4[COMRAM] unsigned char 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1003 ;;      Params:         1       0       0       0       0       0       0       0       0
  1004 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1005 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1006 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1007 ;;Total ram usage:        2 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    2
  1010 ;; This function calls:
  1011 ;;		_ENVIA_LCD_CMD
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text10
  1018  000AE4                     __ptext10:
  1019                           	callstack 0
  1020  000AE4                     _POS_CURSOR:
  1021                           	callstack 28
  1022                           
  1023                           ;incstack = 0
  1024                           ;POS_CURSOR@fila stored from wreg
  1025  000AE4  6E05               	movwf	POS_CURSOR@fila^0,c
  1026                           
  1027                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1028  000AE6  0405               	decf	POS_CURSOR@fila^0,w,c
  1029  000AE8  E104               	bnz	l1078
  1030                           
  1031                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1032  000AEA  5004               	movf	POS_CURSOR@columna^0,w,c
  1033  000AEC  0F80               	addlw	128
  1034  000AEE  EF1F  F005         	goto	_ENVIA_LCD_CMD
  1035  000AF2                     l1078:
  1036  000AF2  0E02               	movlw	2
  1037  000AF4  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1038  000AF6  A4D8               	btfss	status,2,c
  1039  000AF8  0012               	return	
  1040                           
  1041                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1042  000AFA  5004               	movf	POS_CURSOR@columna^0,w,c
  1043  000AFC  0FC0               	addlw	192
  1044  000AFE  EF1F  F005         	goto	_ENVIA_LCD_CMD
  1045  000B02                     __end_of_POS_CURSOR:
  1046                           	callstack 0
  1047                           
  1048 ;; *************** function _ENVIA_LCD_CMD *****************
  1049 ;; Defined at:
  1050 ;;		line 104 in file "LCD.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  dato            1    wreg     unsigned char 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  dato            1    1[COMRAM] unsigned char 
  1055 ;;  aux             1    2[COMRAM] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1065 ;;      Params:         0       0       0       0       0       0       0       0       0
  1066 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1068 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1069 ;;Total ram usage:        2 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    1
  1072 ;; This function calls:
  1073 ;;		_ENVIA_NIBBLE
  1074 ;;		_LEER_LCD
  1075 ;; This function is called by:
  1076 ;;		_POS_CURSOR
  1077 ;;		_CURSOR_HOME
  1078 ;;		_CURSOR_ONOFF
  1079 ;;		_BORRAR_LCD
  1080 ;;		_LCD_CONFIG
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text11
  1085  000A3E                     __ptext11:
  1086                           	callstack 0
  1087  000A3E                     _ENVIA_LCD_CMD:
  1088                           	callstack 27
  1089                           
  1090                           ;incstack = 0
  1091                           ;ENVIA_LCD_CMD@dato stored from wreg
  1092  000A3E  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1093                           
  1094                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1095  000A40  908C               	bcf	140,0,c	;volatile
  1096                           
  1097                           ;LCD.c: 108:  LEER_LCD();
  1098  000A42  ECAC  F004         	call	_LEER_LCD	;wreg free
  1099                           
  1100                           ;LCD.c: 109:  TRISD = 0b00000000;
  1101  000A46  6A95               	clrf	149,c	;volatile
  1102                           
  1103                           ;LCD.c: 111:         _delay(1200);
  1104  000A48  0EF0               	movlw	240
  1105  000A4A                     u287:
  1106  000A4A  D000               	nop2	
  1107  000A4C  2EE8               	decfsz	wreg,f,c
  1108  000A4E  D7FD               	bra	u287
  1109                           
  1110                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1111  000A50  928C               	bcf	140,1,c	;volatile
  1112                           
  1113                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1114  000A52  948C               	bcf	140,2,c	;volatile
  1115                           
  1116                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1117  000A54  908C               	bcf	140,0,c	;volatile
  1118                           
  1119                           ;LCD.c: 115:  aux = dato & 0xF0;
  1120  000A56  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1121                           
  1122                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1123  000A58  D806               	call	PL8	;call to abstracted procedure
  1124  000A5A  EC81  F005         	call	_ENVIA_NIBBLE
  1125                           
  1126                           ;LCD.c: 117:  aux = dato<<4;
  1127  000A5E  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1128                           
  1129                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1130  000A60  D802               	call	PL8	;call to abstracted procedure
  1131  000A62  EF81  F005         	goto	_ENVIA_NIBBLE
  1132  000A66                     __end_of_ENVIA_LCD_CMD:
  1133                           	callstack 0
  1134  000A66                     PL8:
  1135                           	callstack 27
  1136  000A66  0BF0               	andlw	240
  1137  000A68  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1138  000A6A  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1139  000A6C  0012               	return	
  1140  000A6E                     __end_ofPL8:
  1141                           	callstack 0
  1142                           
  1143 ;; *************** function _ESCRIBE_MENSAJE *****************
  1144 ;; Defined at:
  1145 ;;		line 41 in file "LCD.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  cadena          1    3[COMRAM] PTR const unsigned char 
  1148 ;;		 -> STR_1(13), 
  1149 ;;  tam             1    4[COMRAM] unsigned char 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  i               1    6[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1161 ;;      Params:         2       0       0       0       0       0       0       0       0
  1162 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1163 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1164 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1165 ;;Total ram usage:        4 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		_ENVIA_CHAR
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text12
  1176  000AC2                     __ptext12:
  1177                           	callstack 0
  1178  000AC2                     _ESCRIBE_MENSAJE:
  1179                           	callstack 28
  1180                           
  1181                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1182                           
  1183                           ;incstack = 0
  1184  000AC2  6A07               	clrf	ESCRIBE_MENSAJE@i^0,c
  1185                           
  1186                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1187  000AC4  6A07               	clrf	ESCRIBE_MENSAJE@i^0,c
  1188  000AC6  D00A               	goto	l1088
  1189  000AC8                     l1084:
  1190                           
  1191                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1192  000AC8  5004               	movf	ESCRIBE_MENSAJE@cadena^0,w,c
  1193  000ACA  2407               	addwf	ESCRIBE_MENSAJE@i^0,w,c
  1194  000ACC  6E06               	movwf	??_ESCRIBE_MENSAJE^0,c
  1195  000ACE  C006  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1196  000AD2                     	if	0	;There is only one active tblptr byte
  1197  000AD2                     	endif
  1198  000AD2                     	if	0	;tblptru may be non-zero
  1199  000AD2                     	endif
  1200  000AD2                     	if	0	;tblptru may be non-zero
  1201  000AD2                     	endif
  1202  000AD2  0008               	tblrd		*
  1203  000AD4  50F5               	movf	tablat,w,c
  1204  000AD6  EC37  F005         	call	_ENVIA_CHAR
  1205                           
  1206                           ;LCD.c: 47:  }
  1207  000ADA  2A07               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1208  000ADC                     l1088:
  1209  000ADC  5005               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1210  000ADE  5C07               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1211  000AE0  E3F3               	bnc	l1084
  1212  000AE2  0012               	return		;funcret
  1213  000AE4                     __end_of_ESCRIBE_MENSAJE:
  1214                           	callstack 0
  1215                           
  1216 ;; *************** function _ENVIA_CHAR *****************
  1217 ;; Defined at:
  1218 ;;		line 50 in file "LCD.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  dato            1    wreg     unsigned char 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  dato            1    1[COMRAM] unsigned char 
  1223 ;;  aux             1    2[COMRAM] unsigned char 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, status,2, status,0, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1233 ;;      Params:         0       0       0       0       0       0       0       0       0
  1234 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1236 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1237 ;;Total ram usage:        2 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    1
  1240 ;; This function calls:
  1241 ;;		_ENVIA_NIBBLE
  1242 ;;		_LEER_LCD
  1243 ;; This function is called by:
  1244 ;;		_ESCRIBE_MENSAJE
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text13
  1250  000A6E                     __ptext13:
  1251                           	callstack 0
  1252  000A6E                     _ENVIA_CHAR:
  1253                           	callstack 28
  1254                           
  1255                           ;incstack = 0
  1256                           ;ENVIA_CHAR@dato stored from wreg
  1257  000A6E  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1258                           
  1259                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1260  000A70  808C               	bsf	140,0,c	;volatile
  1261                           
  1262                           ;LCD.c: 54:  LEER_LCD();
  1263  000A72  ECAC  F004         	call	_LEER_LCD	;wreg free
  1264                           
  1265                           ;LCD.c: 55:  TRISD = 0x00;
  1266  000A76  6A95               	clrf	149,c	;volatile
  1267                           
  1268                           ;LCD.c: 56:         _delay(1200);
  1269  000A78  0EF0               	movlw	240
  1270  000A7A                     u297:
  1271  000A7A  D000               	nop2	
  1272  000A7C  2EE8               	decfsz	wreg,f,c
  1273  000A7E  D7FD               	bra	u297
  1274                           
  1275                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1276  000A80  928C               	bcf	140,1,c	;volatile
  1277                           
  1278                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1279  000A82  948C               	bcf	140,2,c	;volatile
  1280                           
  1281                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1282  000A84  808C               	bsf	140,0,c	;volatile
  1283                           
  1284                           ;LCD.c: 61:  aux = dato & 0xF0;
  1285  000A86  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1286                           
  1287                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1288  000A88  D806               	call	PL10	;call to abstracted procedure
  1289  000A8A  EC81  F005         	call	_ENVIA_NIBBLE
  1290                           
  1291                           ;LCD.c: 63:  aux = dato << 4;
  1292  000A8E  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1293                           
  1294                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1295  000A90  D802               	call	PL10	;call to abstracted procedure
  1296  000A92  EF81  F005         	goto	_ENVIA_NIBBLE
  1297  000A96                     __end_of_ENVIA_CHAR:
  1298                           	callstack 0
  1299  000A96                     PL10:
  1300                           	callstack 28
  1301  000A96  0BF0               	andlw	240
  1302  000A98  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1303  000A9A  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1304  000A9C  0012               	return	
  1305  000A9E                     __end_ofPL10:
  1306                           	callstack 0
  1307                           
  1308 ;; *************** function _LEER_LCD *****************
  1309 ;; Defined at:
  1310 ;;		line 121 in file "LCD.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  aux             1    0[COMRAM] unsigned char 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1324 ;;      Params:         0       0       0       0       0       0       0       0       0
  1325 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1327 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1328 ;;Total ram usage:        1 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; This function calls:
  1331 ;;		Nothing
  1332 ;; This function is called by:
  1333 ;;		_ENVIA_CHAR
  1334 ;;		_ENVIA_LCD_CMD
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text14
  1339  000958                     __ptext14:
  1340                           	callstack 0
  1341  000958                     _LEER_LCD:
  1342                           	callstack 27
  1343                           
  1344                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1345                           
  1346                           ;incstack = 0
  1347  000958  0EF8               	movlw	248
  1348  00095A  6E95               	movwf	149,c	;volatile
  1349                           
  1350                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1351  00095C  908C               	bcf	140,0,c	;volatile
  1352                           
  1353                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1354  00095E  828C               	bsf	140,1,c	;volatile
  1355                           
  1356                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1357  000960  848C               	bsf	140,2,c	;volatile
  1358                           
  1359                           ;LCD.c: 128:         _delay(1200);
  1360  000962  0EF0               	movlw	240
  1361  000964                     u307:
  1362  000964  D000               	nop2	
  1363  000966  2EE8               	decfsz	wreg,f,c
  1364  000968  D7FD               	bra	u307
  1365                           
  1366                           ;LCD.c: 130:  aux = PORTD;
  1367                           
  1368                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1369  00096A  D821               	call	PL6	;call to abstracted procedure
  1370                           
  1371                           ;LCD.c: 132:         _delay(1200);
  1372  00096C  0EF0               	movlw	240
  1373  00096E                     u317:
  1374  00096E  D000               	nop2	
  1375  000970  2EE8               	decfsz	wreg,f,c
  1376  000972  D7FD               	bra	u317
  1377                           
  1378                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1379  000974  848C               	bsf	140,2,c	;volatile
  1380                           
  1381                           ;LCD.c: 135:         _delay(1200);
  1382  000976  0EF0               	movlw	240
  1383  000978                     u327:
  1384  000978  D000               	nop2	
  1385  00097A  2EE8               	decfsz	wreg,f,c
  1386  00097C  D7FD               	bra	u327
  1387  00097E                     l834:
  1388                           
  1389                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1390  00097E  948C               	bcf	140,2,c	;volatile
  1391                           
  1392                           ;LCD.c: 138:  aux = aux & 0x80;
  1393  000980  0E80               	movlw	128
  1394  000982  1601               	andwf	LEER_LCD@aux^0,f,c
  1395                           
  1396                           ;LCD.c: 139:  while(aux == 0x80)
  1397  000984  D010               	goto	l850
  1398  000986                     l67:
  1399                           
  1400                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1401  000986  848C               	bsf	140,2,c	;volatile
  1402                           
  1403                           ;LCD.c: 142:             _delay(1200);
  1404  000988  0EF0               	movlw	240
  1405  00098A                     u337:
  1406  00098A  D000               	nop2	
  1407  00098C  2EE8               	decfsz	wreg,f,c
  1408  00098E  D7FD               	bra	u337
  1409                           
  1410                           ;LCD.c: 143:             aux = PORTD;
  1411                           
  1412                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1413  000990  D80E               	call	PL6	;call to abstracted procedure
  1414                           
  1415                           ;LCD.c: 145:             _delay(1200);
  1416  000992  0EF0               	movlw	240
  1417  000994                     u347:
  1418  000994  D000               	nop2	
  1419  000996  2EE8               	decfsz	wreg,f,c
  1420  000998  D7FD               	bra	u347
  1421                           
  1422                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1423  00099A  848C               	bsf	140,2,c	;volatile
  1424                           
  1425                           ;LCD.c: 147:             _delay(1200);
  1426  00099C  0EF0               	movlw	240
  1427  00099E                     u357:
  1428  00099E  D000               	nop2	
  1429  0009A0  2EE8               	decfsz	wreg,f,c
  1430  0009A2  D7FD               	bra	u357
  1431  0009A4  D7EC               	goto	l834
  1432  0009A6                     l850:
  1433                           
  1434                           ;LCD.c: 139:  while(aux == 0x80)
  1435  0009A6  0E80               	movlw	128
  1436  0009A8  1801               	xorwf	LEER_LCD@aux^0,w,c
  1437  0009AA  E0ED               	bz	l67
  1438  0009AC  0012               	return		;funcret
  1439  0009AE                     __end_of_LEER_LCD:
  1440                           	callstack 0
  1441  0009AE                     PL6:
  1442                           	callstack 27
  1443  0009AE  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1444  0009B2  948C               	bcf	140,2,c	;volatile
  1445  0009B4  0012               	return	
  1446  0009B6                     __end_ofPL6:
  1447                           	callstack 0
  1448                           
  1449 ;; *************** function _ENVIA_NIBBLE *****************
  1450 ;; Defined at:
  1451 ;;		line 93 in file "LCD.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  dato            1    wreg     unsigned char 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  dato            1    0[COMRAM] unsigned char 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      void 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1465 ;;      Params:         0       0       0       0       0       0       0       0       0
  1466 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1468 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1469 ;;Total ram usage:        1 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_ENVIA_CHAR
  1475 ;;		_LCD_CONFIG
  1476 ;;		_ENVIA_LCD_CMD
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text15
  1481  000B02                     __ptext15:
  1482                           	callstack 0
  1483  000B02                     _ENVIA_NIBBLE:
  1484                           	callstack 28
  1485                           
  1486                           ;incstack = 0
  1487                           ;ENVIA_NIBBLE@dato stored from wreg
  1488  000B02  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1489                           
  1490                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1491  000B04  0E0F               	movlw	15
  1492  000B06  168C               	andwf	140,f,c	;volatile
  1493                           
  1494                           ;LCD.c: 96:  dato &= 0xF0;
  1495  000B08  0EF0               	movlw	240
  1496  000B0A  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1497                           
  1498                           ;LCD.c: 97:  LATD|= dato;
  1499  000B0C  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1500  000B0E  128C               	iorwf	140,f,c	;volatile
  1501                           
  1502                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1503  000B10  848C               	bsf	140,2,c	;volatile
  1504                           
  1505                           ;LCD.c: 100:         _delay(1200);
  1506  000B12  0EF0               	movlw	240
  1507  000B14                     u367:
  1508  000B14  D000               	nop2	
  1509  000B16  2EE8               	decfsz	wreg,f,c
  1510  000B18  D7FD               	bra	u367
  1511                           
  1512                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1513  000B1A  948C               	bcf	140,2,c	;volatile
  1514  000B1C  0012               	return		;funcret
  1515  000B1E                     __end_of_ENVIA_NIBBLE:
  1516                           	callstack 0
  1517                           
  1518                           	psect	rparam
  1519  0000                     
  1520                           	psect	idloc
  1521                           
  1522                           ;Config register IDLOC0 @ 0x200000
  1523                           ;	unspecified, using default values
  1524  200000                     	org	2097152
  1525  200000  FF                 	db	255
  1526                           
  1527                           ;Config register IDLOC1 @ 0x200001
  1528                           ;	unspecified, using default values
  1529  200001                     	org	2097153
  1530  200001  FF                 	db	255
  1531                           
  1532                           ;Config register IDLOC2 @ 0x200002
  1533                           ;	unspecified, using default values
  1534  200002                     	org	2097154
  1535  200002  FF                 	db	255
  1536                           
  1537                           ;Config register IDLOC3 @ 0x200003
  1538                           ;	unspecified, using default values
  1539  200003                     	org	2097155
  1540  200003  FF                 	db	255
  1541                           
  1542                           ;Config register IDLOC4 @ 0x200004
  1543                           ;	unspecified, using default values
  1544  200004                     	org	2097156
  1545  200004  FF                 	db	255
  1546                           
  1547                           ;Config register IDLOC5 @ 0x200005
  1548                           ;	unspecified, using default values
  1549  200005                     	org	2097157
  1550  200005  FF                 	db	255
  1551                           
  1552                           ;Config register IDLOC6 @ 0x200006
  1553                           ;	unspecified, using default values
  1554  200006                     	org	2097158
  1555  200006  FF                 	db	255
  1556                           
  1557                           ;Config register IDLOC7 @ 0x200007
  1558                           ;	unspecified, using default values
  1559  200007                     	org	2097159
  1560  200007  FF                 	db	255
  1561                           
  1562                           	psect	config
  1563                           
  1564                           ;Config register CONFIG1L @ 0x300000
  1565                           ;	PLL Prescaler Selection bits
  1566                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1567                           ;	System Clock Postscaler Selection bits
  1568                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1569                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1570                           ;	USBDIV = 0x0, unprogrammed default
  1571  300000                     	org	3145728
  1572  300000  00                 	db	0
  1573                           
  1574                           ;Config register CONFIG1H @ 0x300001
  1575                           ;	Oscillator Selection bits
  1576                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1577                           ;	Fail-Safe Clock Monitor Enable bit
  1578                           ;	FCMEN = 0x0, unprogrammed default
  1579                           ;	Internal/External Oscillator Switchover bit
  1580                           ;	IESO = 0x0, unprogrammed default
  1581  300001                     	org	3145729
  1582  300001  02                 	db	2
  1583                           
  1584                           ;Config register CONFIG2L @ 0x300002
  1585                           ;	Power-up Timer Enable bit
  1586                           ;	PWRT = ON, PWRT enabled
  1587                           ;	Brown-out Reset Enable bits
  1588                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1589                           ;	Brown-out Reset Voltage bits
  1590                           ;	BORV = 3, Minimum setting 2.05V
  1591                           ;	USB Voltage Regulator Enable bit
  1592                           ;	VREGEN = 0x0, unprogrammed default
  1593  300002                     	org	3145730
  1594  300002  18                 	db	24
  1595                           
  1596                           ;Config register CONFIG2H @ 0x300003
  1597                           ;	Watchdog Timer Enable bit
  1598                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1599                           ;	Watchdog Timer Postscale Select bits
  1600                           ;	WDTPS = 32768, 1:32768
  1601  300003                     	org	3145731
  1602  300003  1E                 	db	30
  1603                           
  1604                           ; Padding undefined space
  1605  300004                     	org	3145732
  1606  300004  FF                 	db	255
  1607                           
  1608                           ;Config register CONFIG3H @ 0x300005
  1609                           ;	CCP2 MUX bit
  1610                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1611                           ;	PORTB A/D Enable bit
  1612                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1613                           ;	Low-Power Timer 1 Oscillator Enable bit
  1614                           ;	LPT1OSC = 0x0, unprogrammed default
  1615                           ;	MCLR Pin Enable bit
  1616                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1617  300005                     	org	3145733
  1618  300005  81                 	db	129
  1619                           
  1620                           ;Config register CONFIG4L @ 0x300006
  1621                           ;	Stack Full/Underflow Reset Enable bit
  1622                           ;	STVREN = 0x1, unprogrammed default
  1623                           ;	Single-Supply ICSP Enable bit
  1624                           ;	LVP = OFF, Single-Supply ICSP disabled
  1625                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1626                           ;	ICPRT = 0x0, unprogrammed default
  1627                           ;	Extended Instruction Set Enable bit
  1628                           ;	XINST = 0x0, unprogrammed default
  1629                           ;	Background Debugger Enable bit
  1630                           ;	DEBUG = 0x1, unprogrammed default
  1631  300006                     	org	3145734
  1632  300006  81                 	db	129
  1633                           
  1634                           ; Padding undefined space
  1635  300007                     	org	3145735
  1636  300007  FF                 	db	255
  1637                           
  1638                           ;Config register CONFIG5L @ 0x300008
  1639                           ;	unspecified, using default values
  1640                           ;	Code Protection bit
  1641                           ;	CP0 = 0x1, unprogrammed default
  1642                           ;	Code Protection bit
  1643                           ;	CP1 = 0x1, unprogrammed default
  1644                           ;	Code Protection bit
  1645                           ;	CP2 = 0x1, unprogrammed default
  1646                           ;	Code Protection bit
  1647                           ;	CP3 = 0x1, unprogrammed default
  1648  300008                     	org	3145736
  1649  300008  0F                 	db	15
  1650                           
  1651                           ;Config register CONFIG5H @ 0x300009
  1652                           ;	unspecified, using default values
  1653                           ;	Boot Block Code Protection bit
  1654                           ;	CPB = 0x1, unprogrammed default
  1655                           ;	Data EEPROM Code Protection bit
  1656                           ;	CPD = 0x1, unprogrammed default
  1657  300009                     	org	3145737
  1658  300009  C0                 	db	192
  1659                           
  1660                           ;Config register CONFIG6L @ 0x30000A
  1661                           ;	unspecified, using default values
  1662                           ;	Write Protection bit
  1663                           ;	WRT0 = 0x1, unprogrammed default
  1664                           ;	Write Protection bit
  1665                           ;	WRT1 = 0x1, unprogrammed default
  1666                           ;	Write Protection bit
  1667                           ;	WRT2 = 0x1, unprogrammed default
  1668                           ;	Write Protection bit
  1669                           ;	WRT3 = 0x1, unprogrammed default
  1670  30000A                     	org	3145738
  1671  30000A  0F                 	db	15
  1672                           
  1673                           ;Config register CONFIG6H @ 0x30000B
  1674                           ;	unspecified, using default values
  1675                           ;	Configuration Register Write Protection bit
  1676                           ;	WRTC = 0x1, unprogrammed default
  1677                           ;	Boot Block Write Protection bit
  1678                           ;	WRTB = 0x1, unprogrammed default
  1679                           ;	Data EEPROM Write Protection bit
  1680                           ;	WRTD = 0x1, unprogrammed default
  1681  30000B                     	org	3145739
  1682  30000B  E0                 	db	224
  1683                           
  1684                           ;Config register CONFIG7L @ 0x30000C
  1685                           ;	unspecified, using default values
  1686                           ;	Table Read Protection bit
  1687                           ;	EBTR0 = 0x1, unprogrammed default
  1688                           ;	Table Read Protection bit
  1689                           ;	EBTR1 = 0x1, unprogrammed default
  1690                           ;	Table Read Protection bit
  1691                           ;	EBTR2 = 0x1, unprogrammed default
  1692                           ;	Table Read Protection bit
  1693                           ;	EBTR3 = 0x1, unprogrammed default
  1694  30000C                     	org	3145740
  1695  30000C  0F                 	db	15
  1696                           
  1697                           ;Config register CONFIG7H @ 0x30000D
  1698                           ;	unspecified, using default values
  1699                           ;	Boot Block Table Read Protection bit
  1700                           ;	EBTRB = 0x1, unprogrammed default
  1701  30000D                     	org	3145741
  1702  30000D  40                 	db	64
  1703                           tosu	equ	0xFFF
  1704                           tosh	equ	0xFFE
  1705                           tosl	equ	0xFFD
  1706                           stkptr	equ	0xFFC
  1707                           pclatu	equ	0xFFB
  1708                           pclath	equ	0xFFA
  1709                           pcl	equ	0xFF9
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           indf0	equ	0xFEF
  1717                           postinc0	equ	0xFEE
  1718                           postdec0	equ	0xFED
  1719                           preinc0	equ	0xFEC
  1720                           plusw0	equ	0xFEB
  1721                           fsr0h	equ	0xFEA
  1722                           fsr0l	equ	0xFE9
  1723                           wreg	equ	0xFE8
  1724                           indf1	equ	0xFE7
  1725                           postinc1	equ	0xFE6
  1726                           postdec1	equ	0xFE5
  1727                           preinc1	equ	0xFE4
  1728                           plusw1	equ	0xFE3
  1729                           fsr1h	equ	0xFE2
  1730                           fsr1l	equ	0xFE1
  1731                           bsr	equ	0xFE0
  1732                           indf2	equ	0xFDF
  1733                           postinc2	equ	0xFDE
  1734                           postdec2	equ	0xFDD
  1735                           preinc2	equ	0xFDC
  1736                           plusw2	equ	0xFDB
  1737                           fsr2h	equ	0xFDA
  1738                           fsr2l	equ	0xFD9
  1739                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _lcd_config->_CURSOR_ONOFF
    _lcd_config->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2479
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                          _convierte
                          _init_conf
                         _lcd_config
 ---------------------------------------------------------------------------------
 (1) _lcd_config                                           1     1      0     405
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     105
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     120
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0      90
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0      90
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _init_conf                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1397
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     254
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0      90
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      4     2      2     333
                                              3 COMRAM     4     2      2
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0      90
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _init_conf
   _lcd_config
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue May 18 18:40:22 2021

                      PL2 0880                        PL4 088A                        PL6 09AE  
                      PL8 0A66                        l67 0986                       PL10 0A96  
           ENVIA_CHAR@aux 0003                       l133 08AE                       l632 09F6  
                     l642 0A34                       l850 09A6                       l834 097E  
                     l888 0B44                       u150 09D2                       u307 0964  
                     u180 0A18                       u317 096E                       u327 0978  
                     u247 0AAA                       u337 098A                       u257 090A  
                     u347 0994                       u267 0918                       u357 099E  
                     u277 0928                       u367 0B14                       u287 0A4A  
                     u297 0A7A               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002  
                    l1100 08AC                      l1042 09C6                      l1044 09CE  
                    l1054 09EC                      l1070 0A2A                      l1062 0A0C  
                    l1064 0A14                      l1084 0AC8                      l1078 0AF2  
                    l1088 0ADC                      STR_1 0801                      _LATD 000F8C  
                    _main 0896                      start 0000             ?_CURSOR_ONOFF 0001  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 09AE  
     __size_of_BORRAR_LCD 0006                     ?_main 0001           __end_of___lwdiv 0A00  
         __end_of___lwmod 0A3E                     _PORTD 000F83       __size_of_LCD_CONFIG 005E  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0028               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0B1E              __end_of_main 08FA           _ESCRIBE_MENSAJE 0AC2  
                  ??_main 000F             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _decena 0013      __end_of_ENVIA_NIBBLE 0B1E  
               ??___lwdiv 000A                 ??___lwmod 0005       __size_of_POS_CURSOR 001E  
                  _millar 0017                    clear_0 0B24                    _unidad 0011  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0006  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0B2A  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0AE4            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0B6E  
              __end_ofPL2 088A                __end_ofPL4 0896                __end_ofPL6 09B6  
              __end_ofPL8 0A6E          ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0B50  
      __end_of_LCD_CONFIG 0958        __end_of_ENVIA_CHAR 0A96        __size_of_convierte 0070  
              ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001        __size_of_init_conf 0012  
              _lcd_config 0A9E              ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___lwdiv 09B6                   ___lwmod 0A00              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0A66         __end_of_convierte 0880                   __pcinit 0B1E  
      __end_of_POS_CURSOR 0B02                   __ramtop 0800                   _centena 0015  
                 __ptext0 0896                   __ptext1 0A9E                   __ptext2 08FA  
                 __ptext3 0B38                   __ptext4 0B62                   __ptext5 0B68  
                 __ptext6 0B50                   __ptext7 0810                   __ptext8 0A00  
                 __ptext9 09B6         __end_of_init_conf 0B62              _ENVIA_NIBBLE 0B02  
    end_of_initialization 0B2A                   postinc0 000FEE     __size_of_CURSOR_ONOFF 0018  
             ?_lcd_config 0001                 _TRISCbits 000F94         __size_of_LEER_LCD 0056  
            _CURSOR_ONOFF 0B38        CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004  
             __end_ofPL10 0A9E       start_initialization 0B1E         ENVIA_LCD_CMD@dato 0002  
     __size_of_lcd_config 0024               __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0B68  
        ___lwdiv@dividend 0006                  ?___lwdiv 0006                  ?___lwmod 0001  
             __smallconst 0800                 _convierte 0810           convierte@numero 000D  
        ___lwdiv@quotient 000A                 _init_conf 0B50                  _LEER_LCD 0958  
                _LATCbits 000F8B                  _LATDbits 000F8C                 _resultado 0019  
        ESCRIBE_MENSAJE@i 0007            POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 0022  
              _ADCON0bits 000FC2                ?_convierte 000D              ??_lcd_config 0005  
             _CURSOR_HOME 0B62                ?_init_conf 0001    __size_of_ENVIA_LCD_CMD 0028  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
      __end_of_lcd_config 0AC2          __size_of___lwdiv 004A          __size_of___lwmod 003E  
         ___lwdiv@divisor 0008           ___lwdiv@counter 000C                  __ptext10 0AE4  
                __ptext11 0A3E                  __ptext12 0AC2                  __ptext13 0A6E  
                __ptext14 0958                  __ptext15 0B02                _BORRAR_LCD 0B68  
           __size_of_main 0064                _LCD_CONFIG 08FA                _ENVIA_CHAR 0A6E  
           _ENVIA_LCD_CMD 0A3E               ??_convierte 000F         ??_ESCRIBE_MENSAJE 0006  
             ??_init_conf 0001     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001           ___lwmod@divisor 0003           ___lwmod@counter 0005  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0AE4  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0005               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
