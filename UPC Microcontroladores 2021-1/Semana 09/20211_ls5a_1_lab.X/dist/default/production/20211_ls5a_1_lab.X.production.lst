

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed May 19 16:48:02 2021

Microchip MPLAB XC8 C Compiler v2.31 (Pro license) build 20201012212115 Og9s 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29                           	psect	pa_nodes0,global,class=CODE,delta=1
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _CCP2CON	set	4026
    69  0000                     _CCP1CON	set	4029
    70  0000                     _T2CON	set	4042
    71  0000                     _CCPR2L	set	4027
    72  0000                     _CCPR1L	set	4030
    73  0000                     _PR2	set	4043
    74  0000                     _ADCON0	set	4034
    75  0000                     _ADCON1	set	4033
    76  0000                     _ADCON2	set	4032
    77  0000                     _TRISCbits	set	3988
    78  0000                     _PORTD	set	3971
    79  0000                     _LATD	set	3980
    80  0000                     _TRISD	set	3989
    81  0000                     _LATDbits	set	3980
    82                           
    83                           	psect	smallconst
    84  000800                     __psmallconst:
    85                           	callstack 0
    86  000800  00                 	db	0
    87  000801                     STR_1:
    88  000801  4C                 	db	76	;'L'
    89  000802  65                 	db	101	;'e'
    90  000803  63                 	db	99	;'c'
    91  000804  74                 	db	116	;'t'
    92  000805  75                 	db	117	;'u'
    93  000806  72                 	db	114	;'r'
    94  000807  61                 	db	97	;'a'
    95  000808  20                 	db	32
    96  000809  41                 	db	65	;'A'
    97  00080A  44                 	db	68	;'D'
    98  00080B  43                 	db	67	;'C'
    99  00080C  3A                 	db	58	;':'
   100  00080D  00                 	db	0
   101  00080E                     STR_2:
   102  00080E  41                 	db	65	;'A'
   103  00080F  4E                 	db	78	;'N'
   104  000810  30                 	db	48	;'0'
   105  000811  3A                 	db	58	;':'
   106  000812  20                 	db	32
   107  000813  00                 	db	0
   108  000814  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           ; #config settings
   111                           
   112                           	psect	cinit
   113  000B86                     __pcinit:
   114                           	callstack 0
   115  000B86                     start_initialization:
   116                           	callstack 0
   117  000B86                     __initialization:
   118                           	callstack 0
   119                           
   120                           ; Clear objects allocated to COMRAM (12 bytes)
   121  000B86  EE00  F011         	lfsr	0,__pbssCOMRAM
   122  000B8A  0E0C               	movlw	12
   123  000B8C                     clear_0:
   124  000B8C  6AEE               	clrf	postinc0,c
   125  000B8E  06E8               	decf	wreg,f,c
   126  000B90  E1FD               	bnz	clear_0
   127  000B92                     end_of_initialization:
   128                           	callstack 0
   129  000B92                     __end_of__initialization:
   130                           	callstack 0
   131  000B92  0E00               	movlw	low (__Lsmallconst shr (0+16))
   132  000B94  6EF8               	movwf	tblptru,c
   133  000B96  0E08               	movlw	high __Lsmallconst
   134  000B98  6EF7               	movwf	tblptrh,c
   135  000B9A  0100               	movlb	0
   136  000B9C  EF62  F004         	goto	_main	;jump to C main() function
   137                           
   138                           	psect	bssCOMRAM
   139  000011                     __pbssCOMRAM:
   140                           	callstack 0
   141  000011                     _unidad:
   142                           	callstack 0
   143  000011                     	ds	2
   144  000013                     _decena:
   145                           	callstack 0
   146  000013                     	ds	2
   147  000015                     _centena:
   148                           	callstack 0
   149  000015                     	ds	2
   150  000017                     _millar:
   151                           	callstack 0
   152  000017                     	ds	2
   153  000019                     _d_millar:
   154                           	callstack 0
   155  000019                     	ds	2
   156  00001B                     _res_adc:
   157                           	callstack 0
   158  00001B                     	ds	2
   159                           
   160                           	psect	cstackCOMRAM
   161  000001                     __pcstackCOMRAM:
   162                           	callstack 0
   163  000001                     ?___lwmod:
   164                           	callstack 0
   165  000001                     ENVIA_NIBBLE@dato:
   166                           	callstack 0
   167  000001                     LEER_LCD@aux:
   168                           	callstack 0
   169  000001                     ___lwmod@dividend:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x0
   173  000001                     	ds	1
   174  000002                     ENVIA_CHAR@dato:
   175                           	callstack 0
   176  000002                     ENVIA_LCD_CMD@dato:
   177                           	callstack 0
   178                           
   179                           ; 1 bytes @ 0x1
   180  000002                     	ds	1
   181  000003                     ENVIA_CHAR@aux:
   182                           	callstack 0
   183  000003                     ENVIA_LCD_CMD@aux:
   184                           	callstack 0
   185  000003                     ___lwmod@divisor:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000003                     	ds	1
   190  000004                     ??_LCD_CONFIG:
   191  000004                     POS_CURSOR@columna:
   192                           	callstack 0
   193  000004                     CURSOR_ONOFF@estado:
   194                           	callstack 0
   195  000004                     ESCRIBE_MENSAJE@cadena:
   196                           	callstack 0
   197                           
   198                           ; 1 bytes @ 0x3
   199  000004                     	ds	1
   200  000005                     ??_init_lcd:
   201  000005                     POS_CURSOR@fila:
   202                           	callstack 0
   203  000005                     ESCRIBE_MENSAJE@tam:
   204                           	callstack 0
   205  000005                     ___lwmod@counter:
   206                           	callstack 0
   207                           
   208                           ; 1 bytes @ 0x4
   209  000005                     	ds	1
   210  000006                     ??_ESCRIBE_MENSAJE:
   211  000006                     ?___lwdiv:
   212                           	callstack 0
   213  000006                     ___lwdiv@dividend:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x5
   217  000006                     	ds	1
   218  000007                     ESCRIBE_MENSAJE@i:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x6
   222  000007                     	ds	1
   223  000008                     ___lwdiv@divisor:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x7
   227  000008                     	ds	2
   228  00000A                     ___lwdiv@quotient:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x9
   232  00000A                     	ds	2
   233  00000C                     ___lwdiv@counter:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0xB
   237  00000C                     	ds	1
   238  00000D                     convierte@numero:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0xC
   242  00000D                     	ds	2
   243  00000F                     ??_main:
   244                           
   245                           ; 1 bytes @ 0xE
   246  00000F                     	ds	2
   247                           
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 53 in file "maincode2.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;		None
   258 ;; Return value:  Size  Location     Type
   259 ;;                  1    wreg      void 
   260 ;; Registers used:
   261 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   262 ;; Tracked objects:
   263 ;;		On entry : 0/0
   264 ;;		On exit  : 0/0
   265 ;;		Unchanged: 0/0
   266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   267 ;;      Params:         0       0       0       0       0       0       0       0       0
   268 ;;      Locals:         0       0       0       0       0       0       0       0       0
   269 ;;      Temps:          2       0       0       0       0       0       0       0       0
   270 ;;      Totals:         2       0       0       0       0       0       0       0       0
   271 ;;Total ram usage:        2 bytes
   272 ;; Hardware stack levels required when called:    4
   273 ;; This function calls:
   274 ;;		_ENVIA_CHAR
   275 ;;		_ESCRIBE_MENSAJE
   276 ;;		_POS_CURSOR
   277 ;;		_convierte
   278 ;;		_init_conf
   279 ;;		_init_lcd
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           	psect	text0
   286  0008C4                     __ptext0:
   287                           	callstack 0
   288  0008C4                     _main:
   289                           	callstack 27
   290                           
   291                           ;maincode2.c: 54:     init_conf();
   292                           
   293                           ;incstack = 0
   294  0008C4  EC6F  F005         	call	_init_conf	;wreg free
   295                           
   296                           ;maincode2.c: 55:     init_lcd();
   297  0008C8  EC83  F005         	call	_init_lcd	;wreg free
   298                           
   299                           ;maincode2.c: 57:     ESCRIBE_MENSAJE("Lectura ADC:",12);
   300  0008CC  0E01               	movlw	low STR_1
   301  0008CE  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   302  0008D0  0E0C               	movlw	12
   303  0008D2  6E05               	movwf	ESCRIBE_MENSAJE@tam^0,c
   304  0008D4  EC95  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   305  0008D8                     l1112:
   306                           
   307                           ;maincode2.c: 59:         ADCON0bits.GODONE = 1;
   308  0008D8  82C2               	bsf	194,1,c	;volatile
   309  0008DA                     l145:
   310  0008DA  B2C2               	btfsc	194,1,c	;volatile
   311  0008DC  D7FE               	goto	l145
   312                           
   313                           ;maincode2.c: 61:         res_adc = (ADRESH << 8) + ADRESL;
   314  0008DE  50C4               	movf	196,w,c	;volatile
   315  0008E0  6E10               	movwf	(??_main+1)^0,c
   316  0008E2  6A0F               	clrf	??_main^0,c
   317  0008E4  50C3               	movf	195,w,c	;volatile
   318  0008E6  240F               	addwf	??_main^0,w,c
   319  0008E8  6E1B               	movwf	_res_adc^0,c
   320  0008EA  0E00               	movlw	0
   321  0008EC  2010               	addwfc	(??_main+1)^0,w,c
   322  0008EE  6E1C               	movwf	(_res_adc+1)^0,c
   323                           
   324                           ;maincode2.c: 62:         convierte(res_adc);
   325  0008F0  C01B  F00D         	movff	_res_adc,convierte@numero
   326  0008F4  C01C  F00E         	movff	_res_adc+1,convierte@numero+1
   327  0008F8  EC0B  F004         	call	_convierte	;wreg free
   328                           
   329                           ;maincode2.c: 63:         POS_CURSOR(2,0);
   330  0008FC  6A04               	clrf	POS_CURSOR@columna^0,c
   331  0008FE  0E02               	movlw	2
   332  000900  ECA6  F005         	call	_POS_CURSOR
   333                           
   334                           ;maincode2.c: 64:         ESCRIBE_MENSAJE("AN0: ",5);
   335  000904  0E0E               	movlw	low STR_2
   336  000906  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   337  000908  0E05               	movlw	5
   338  00090A  6E05               	movwf	ESCRIBE_MENSAJE@tam^0,c
   339  00090C  EC95  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   340                           
   341                           ;maincode2.c: 65:         ENVIA_CHAR(d_millar+0x30);
   342  000910  5019               	movf	_d_millar^0,w,c
   343  000912  0F30               	addlw	48
   344  000914  EC57  F005         	call	_ENVIA_CHAR
   345                           
   346                           ;maincode2.c: 66:         ENVIA_CHAR(millar+0x30);
   347  000918  5017               	movf	_millar^0,w,c
   348  00091A  0F30               	addlw	48
   349  00091C  EC57  F005         	call	_ENVIA_CHAR
   350                           
   351                           ;maincode2.c: 67:         ENVIA_CHAR(centena+0x30);
   352  000920  5015               	movf	_centena^0,w,c
   353  000922  0F30               	addlw	48
   354  000924  EC57  F005         	call	_ENVIA_CHAR
   355                           
   356                           ;maincode2.c: 68:         ENVIA_CHAR(decena+0x30);
   357  000928  5013               	movf	_decena^0,w,c
   358  00092A  0F30               	addlw	48
   359  00092C  EC57  F005         	call	_ENVIA_CHAR
   360                           
   361                           ;maincode2.c: 69:         ENVIA_CHAR(unidad+0x30);
   362  000930  5011               	movf	_unidad^0,w,c
   363  000932  0F30               	addlw	48
   364  000934  EC57  F005         	call	_ENVIA_CHAR
   365  000938  D7CF               	goto	l1112
   366  00093A                     __end_of_main:
   367                           	callstack 0
   368                           
   369 ;; *************** function _init_lcd *****************
   370 ;; Defined at:
   371 ;;		line 36 in file "maincode2.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, status,2, status,0, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   385 ;;      Params:         0       0       0       0       0       0       0       0       0
   386 ;;      Locals:         0       0       0       0       0       0       0       0       0
   387 ;;      Temps:          1       0       0       0       0       0       0       0       0
   388 ;;      Totals:         1       0       0       0       0       0       0       0       0
   389 ;;Total ram usage:        1 bytes
   390 ;; Hardware stack levels used:    1
   391 ;; Hardware stack levels required when called:    3
   392 ;; This function calls:
   393 ;;		_BORRAR_LCD
   394 ;;		_CURSOR_HOME
   395 ;;		_CURSOR_ONOFF
   396 ;;		_LCD_CONFIG
   397 ;; This function is called by:
   398 ;;		_main
   399 ;; This function uses a non-reentrant model
   400 ;;
   401                           
   402                           	psect	text1
   403  000B06                     __ptext1:
   404                           	callstack 0
   405  000B06                     _init_lcd:
   406                           	callstack 27
   407                           
   408                           ;maincode2.c: 37:     TRISD = 0x00;
   409                           
   410                           ;incstack = 0
   411  000B06  6A95               	clrf	149,c	;volatile
   412                           
   413                           ;maincode2.c: 38:     LCD_CONFIG();
   414  000B08  EC9D  F004         	call	_LCD_CONFIG	;wreg free
   415                           
   416                           ;maincode2.c: 39:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   417  000B0C  0EEA               	movlw	234
   418  000B0E  6E05               	movwf	??_init_lcd^0,c
   419  000B10  0EC3               	movlw	195
   420  000B12                     u247:
   421  000B12  2EE8               	decfsz	wreg,f,c
   422  000B14  D7FE               	bra	u247
   423  000B16  2E05               	decfsz	??_init_lcd^0,f,c
   424  000B18  D7FC               	bra	u247
   425  000B1A  F000               	nop	
   426                           
   427                           ;maincode2.c: 40:     BORRAR_LCD();
   428  000B1C  ECDF  F005         	call	_BORRAR_LCD	;wreg free
   429                           
   430                           ;maincode2.c: 41:     CURSOR_HOME();
   431  000B20  ECDC  F005         	call	_CURSOR_HOME	;wreg free
   432                           
   433                           ;maincode2.c: 42:     CURSOR_ONOFF(1);
   434  000B24  0E01               	movlw	1
   435  000B26  EFD0  F005         	goto	_CURSOR_ONOFF
   436  000B2A                     __end_of_init_lcd:
   437                           	callstack 0
   438                           
   439 ;; *************** function _LCD_CONFIG *****************
   440 ;; Defined at:
   441 ;;		line 72 in file "LCD.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;		None
   444 ;; Auto vars:     Size  Location     Type
   445 ;;		None
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg, status,2, status,0, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   455 ;;      Params:         0       0       0       0       0       0       0       0       0
   456 ;;      Locals:         0       0       0       0       0       0       0       0       0
   457 ;;      Temps:          1       0       0       0       0       0       0       0       0
   458 ;;      Totals:         1       0       0       0       0       0       0       0       0
   459 ;;Total ram usage:        1 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    2
   462 ;; This function calls:
   463 ;;		_ENVIA_LCD_CMD
   464 ;;		_ENVIA_NIBBLE
   465 ;; This function is called by:
   466 ;;		_init_lcd
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text2
   471  00093A                     __ptext2:
   472                           	callstack 0
   473  00093A                     _LCD_CONFIG:
   474                           	callstack 27
   475                           
   476                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   477                           
   478                           ;incstack = 0
   479  00093A  908C               	bcf	140,0,c	;volatile
   480                           
   481                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   482  00093C  928C               	bcf	140,1,c	;volatile
   483                           
   484                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   485  00093E  0E30               	movlw	48
   486  000940  ECB5  F005         	call	_ENVIA_NIBBLE
   487                           
   488                           ;LCD.c: 77:         _delay(24000);
   489  000944  0E20               	movlw	32
   490  000946  6E04               	movwf	??_LCD_CONFIG^0,c
   491  000948  0E2A               	movlw	42
   492  00094A                     u257:
   493  00094A  2EE8               	decfsz	wreg,f,c
   494  00094C  D7FE               	bra	u257
   495  00094E  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   496  000950  D7FC               	bra	u257
   497                           
   498                           ;LCD.c: 78:         _delay(24000);
   499  000952  0E20               	movlw	32
   500  000954  6E04               	movwf	??_LCD_CONFIG^0,c
   501  000956  0E2A               	movlw	42
   502  000958                     u267:
   503  000958  2EE8               	decfsz	wreg,f,c
   504  00095A  D7FE               	bra	u267
   505  00095C  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   506  00095E  D7FC               	bra	u267
   507                           
   508                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   509  000960  0E30               	movlw	48
   510  000962  ECB5  F005         	call	_ENVIA_NIBBLE
   511                           
   512                           ;LCD.c: 83:  _delay(1200);
   513  000966  0EF0               	movlw	240
   514  000968                     u277:
   515  000968  D000               	nop2	
   516  00096A  2EE8               	decfsz	wreg,f,c
   517  00096C  D7FD               	bra	u277
   518                           
   519                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   520  00096E  0E30               	movlw	48
   521  000970  ECB5  F005         	call	_ENVIA_NIBBLE
   522                           
   523                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   524  000974  0E20               	movlw	32
   525  000976  ECB5  F005         	call	_ENVIA_NIBBLE
   526                           
   527                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   528  00097A  0E01               	movlw	1
   529  00097C  EC3F  F005         	call	_ENVIA_LCD_CMD
   530                           
   531                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   532  000980  0E28               	movlw	40
   533  000982  EC3F  F005         	call	_ENVIA_LCD_CMD
   534                           
   535                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   536  000986  0E0F               	movlw	15
   537  000988  EC3F  F005         	call	_ENVIA_LCD_CMD
   538                           
   539                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   540  00098C  0E06               	movlw	6
   541  00098E  EC3F  F005         	call	_ENVIA_LCD_CMD
   542                           
   543                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   544  000992  0E01               	movlw	1
   545  000994  EF3F  F005         	goto	_ENVIA_LCD_CMD
   546  000998                     __end_of_LCD_CONFIG:
   547                           	callstack 0
   548                           
   549 ;; *************** function _CURSOR_ONOFF *****************
   550 ;; Defined at:
   551 ;;		line 35 in file "LCD.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;  estado          1    wreg     unsigned char 
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  estado          1    3[COMRAM] unsigned char 
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, status,2, status,0, cstack
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   565 ;;      Params:         0       0       0       0       0       0       0       0       0
   566 ;;      Locals:         1       0       0       0       0       0       0       0       0
   567 ;;      Temps:          0       0       0       0       0       0       0       0       0
   568 ;;      Totals:         1       0       0       0       0       0       0       0       0
   569 ;;Total ram usage:        1 bytes
   570 ;; Hardware stack levels used:    1
   571 ;; Hardware stack levels required when called:    2
   572 ;; This function calls:
   573 ;;		_ENVIA_LCD_CMD
   574 ;; This function is called by:
   575 ;;		_init_lcd
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text3
   580  000BA0                     __ptext3:
   581                           	callstack 0
   582  000BA0                     _CURSOR_ONOFF:
   583                           	callstack 27
   584                           
   585                           ;incstack = 0
   586                           ;CURSOR_ONOFF@estado stored from wreg
   587  000BA0  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   588                           
   589                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   590  000BA2  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   591  000BA4  E103               	bnz	l900
   592  000BA6  0E0E               	movlw	14
   593  000BA8  EC3F  F005         	call	_ENVIA_LCD_CMD
   594  000BAC                     l900:
   595                           
   596                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   597  000BAC  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   598  000BAE  A4D8               	btfss	status,2,c
   599  000BB0  0012               	return	
   600  000BB2  0E0C               	movlw	12
   601  000BB4  EF3F  F005         	goto	_ENVIA_LCD_CMD
   602  000BB8                     __end_of_CURSOR_ONOFF:
   603                           	callstack 0
   604                           
   605 ;; *************** function _CURSOR_HOME *****************
   606 ;; Defined at:
   607 ;;		line 30 in file "LCD.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         0       0       0       0       0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0       0       0
   624 ;;      Totals:         0       0       0       0       0       0       0       0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    2
   628 ;; This function calls:
   629 ;;		_ENVIA_LCD_CMD
   630 ;; This function is called by:
   631 ;;		_init_lcd
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text4
   636  000BB8                     __ptext4:
   637                           	callstack 0
   638  000BB8                     _CURSOR_HOME:
   639                           	callstack 27
   640                           
   641                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   642                           
   643                           ;incstack = 0
   644  000BB8  0E02               	movlw	2
   645  000BBA  EF3F  F005         	goto	_ENVIA_LCD_CMD
   646  000BBE                     __end_of_CURSOR_HOME:
   647                           	callstack 0
   648                           
   649 ;; *************** function _BORRAR_LCD *****************
   650 ;; Defined at:
   651 ;;		line 67 in file "LCD.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   665 ;;      Params:         0       0       0       0       0       0       0       0       0
   666 ;;      Locals:         0       0       0       0       0       0       0       0       0
   667 ;;      Temps:          0       0       0       0       0       0       0       0       0
   668 ;;      Totals:         0       0       0       0       0       0       0       0       0
   669 ;;Total ram usage:        0 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    2
   672 ;; This function calls:
   673 ;;		_ENVIA_LCD_CMD
   674 ;; This function is called by:
   675 ;;		_init_lcd
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text5
   680  000BBE                     __ptext5:
   681                           	callstack 0
   682  000BBE                     _BORRAR_LCD:
   683                           	callstack 27
   684                           
   685                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   686                           
   687                           ;incstack = 0
   688  000BBE  0E01               	movlw	1
   689  000BC0  EF3F  F005         	goto	_ENVIA_LCD_CMD
   690  000BC4                     __end_of_BORRAR_LCD:
   691                           	callstack 0
   692                           
   693 ;; *************** function _init_conf *****************
   694 ;; Defined at:
   695 ;;		line 21 in file "maincode2.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, status,2
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   709 ;;      Params:         0       0       0       0       0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0       0       0       0       0
   712 ;;      Totals:         0       0       0       0       0       0       0       0       0
   713 ;;Total ram usage:        0 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text6
   723  000ADE                     __ptext6:
   724                           	callstack 0
   725  000ADE                     _init_conf:
   726                           	callstack 30
   727                           
   728                           ;maincode2.c: 22:     TRISCbits.RC0 = 0;
   729                           
   730                           ;incstack = 0
   731  000ADE  9094               	bcf	148,0,c	;volatile
   732                           
   733                           ;maincode2.c: 23:     TRISCbits.RC2 = 0;
   734  000AE0  9494               	bcf	148,2,c	;volatile
   735                           
   736                           ;maincode2.c: 24:     TRISCbits.RC1 = 0;
   737  000AE2  9294               	bcf	148,1,c	;volatile
   738                           
   739                           ;maincode2.c: 25:     ADCON2 = 0xA4;
   740  000AE4  0EA4               	movlw	164
   741  000AE6  6EC0               	movwf	192,c	;volatile
   742                           
   743                           ;maincode2.c: 26:     ADCON1 = 0x0E;
   744  000AE8  0E0E               	movlw	14
   745  000AEA  6EC1               	movwf	193,c	;volatile
   746                           
   747                           ;maincode2.c: 27:     ADCON0 = 0x01;
   748  000AEC  0E01               	movlw	1
   749  000AEE  6EC2               	movwf	194,c	;volatile
   750                           
   751                           ;maincode2.c: 28:     PR2 = 155;
   752  000AF0  0E9B               	movlw	155
   753  000AF2  6ECB               	movwf	203,c	;volatile
   754                           
   755                           ;maincode2.c: 29:     CCPR1L = 78;
   756  000AF4  0E4E               	movlw	78
   757  000AF6  6EBE               	movwf	190,c	;volatile
   758                           
   759                           ;maincode2.c: 30:     CCPR2L = 78;
   760  000AF8  6EBB               	movwf	187,c	;volatile
   761                           
   762                           ;maincode2.c: 31:     T2CON = 0x07;
   763  000AFA  0E07               	movlw	7
   764  000AFC  6ECA               	movwf	202,c	;volatile
   765                           
   766                           ;maincode2.c: 32:     CCP1CON = 0x0C;
   767  000AFE  0E0C               	movlw	12
   768  000B00  6EBD               	movwf	189,c	;volatile
   769                           
   770                           ;maincode2.c: 33:     CCP2CON = 0x0C;
   771  000B02  6EBA               	movwf	186,c	;volatile
   772  000B04  0C0C               	retlw	12	;funcret
   773  000B06                     __end_of_init_conf:
   774                           	callstack 0
   775                           
   776 ;; *************** function _convierte *****************
   777 ;; Defined at:
   778 ;;		line 45 in file "maincode2.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;  numero          2   12[COMRAM] unsigned int 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, status,2, status,0, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   792 ;;      Params:         2       0       0       0       0       0       0       0       0
   793 ;;      Locals:         0       0       0       0       0       0       0       0       0
   794 ;;      Temps:          0       0       0       0       0       0       0       0       0
   795 ;;      Totals:         2       0       0       0       0       0       0       0       0
   796 ;;Total ram usage:        2 bytes
   797 ;; Hardware stack levels used:    1
   798 ;; Hardware stack levels required when called:    1
   799 ;; This function calls:
   800 ;;		___lwdiv
   801 ;;		___lwmod
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text7
   808  000816                     __ptext7:
   809                           	callstack 0
   810  000816                     _convierte:
   811                           	callstack 29
   812                           
   813                           ;maincode2.c: 46:     d_millar = numero / 10000;
   814                           
   815                           ;incstack = 0
   816  000816  C00D  F006         	movff	convierte@numero,___lwdiv@dividend
   817  00081A  C00E  F007         	movff	convierte@numero+1,___lwdiv@dividend+1
   818  00081E  0E27               	movlw	39
   819  000820  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   820  000822  0E10               	movlw	16
   821  000824  6E08               	movwf	___lwdiv@divisor^0,c
   822  000826  ECFB  F004         	call	___lwdiv	;wreg free
   823  00082A  C006  F019         	movff	?___lwdiv,_d_millar
   824  00082E  C007  F01A         	movff	?___lwdiv+1,_d_millar+1
   825                           
   826                           ;maincode2.c: 47:     millar = (numero % 10000) /1000;
   827  000832  0E27               	movlw	39
   828  000834  6E04               	movwf	(___lwmod@divisor+1)^0,c
   829  000836  0E10               	movlw	16
   830  000838  D83A               	call	PL2	;call to abstracted procedure
   831  00083A  EC20  F005         	call	___lwmod	;wreg free
   832  00083E  D83D               	call	PL4	;call to abstracted procedure
   833  000840  0E03               	movlw	3
   834  000842  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   835  000844  0EE8               	movlw	232
   836  000846  6E08               	movwf	___lwdiv@divisor^0,c
   837  000848  ECFB  F004         	call	___lwdiv	;wreg free
   838  00084C  C006  F017         	movff	?___lwdiv,_millar
   839  000850  C007  F018         	movff	?___lwdiv+1,_millar+1
   840                           
   841                           ;maincode2.c: 48:     centena = (numero % 1000) / 100;
   842  000854  0E03               	movlw	3
   843  000856  6E04               	movwf	(___lwmod@divisor+1)^0,c
   844  000858  0EE8               	movlw	232
   845  00085A  D829               	call	PL2	;call to abstracted procedure
   846  00085C  EC20  F005         	call	___lwmod	;wreg free
   847  000860  D82C               	call	PL4	;call to abstracted procedure
   848  000862  6A09               	clrf	(___lwdiv@divisor+1)^0,c
   849  000864  0E64               	movlw	100
   850  000866  6E08               	movwf	___lwdiv@divisor^0,c
   851  000868  ECFB  F004         	call	___lwdiv	;wreg free
   852  00086C  C006  F015         	movff	?___lwdiv,_centena
   853  000870  C007  F016         	movff	?___lwdiv+1,_centena+1
   854                           
   855                           ;maincode2.c: 49:     decena = (numero % 100) / 10;
   856  000874  6A04               	clrf	(___lwmod@divisor+1)^0,c
   857  000876  0E64               	movlw	100
   858  000878  D81A               	call	PL2	;call to abstracted procedure
   859  00087A  EC20  F005         	call	___lwmod	;wreg free
   860  00087E  D81D               	call	PL4	;call to abstracted procedure
   861  000880  6A09               	clrf	(___lwdiv@divisor+1)^0,c
   862  000882  0E0A               	movlw	10
   863  000884  6E08               	movwf	___lwdiv@divisor^0,c
   864  000886  ECFB  F004         	call	___lwdiv	;wreg free
   865  00088A  C006  F013         	movff	?___lwdiv,_decena
   866  00088E  C007  F014         	movff	?___lwdiv+1,_decena+1
   867                           
   868                           ;maincode2.c: 50:     unidad = numero % 10;
   869  000892  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   870  000896  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   871  00089A  6A04               	clrf	(___lwmod@divisor+1)^0,c
   872  00089C  0E0A               	movlw	10
   873  00089E  6E03               	movwf	___lwmod@divisor^0,c
   874  0008A0  EC20  F005         	call	___lwmod	;wreg free
   875  0008A4  C001  F011         	movff	?___lwmod,_unidad
   876  0008A8  C002  F012         	movff	?___lwmod+1,_unidad+1
   877  0008AC  0012               	return		;funcret
   878  0008AE                     __end_of_convierte:
   879                           	callstack 0
   880  0008AE                     PL2:
   881                           	callstack 29
   882  0008AE  6E03               	movwf	___lwmod@divisor^0,c
   883  0008B0  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   884  0008B4  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   885  0008B8  0012               	return	
   886  0008BA                     __end_ofPL2:
   887                           	callstack 0
   888  0008BA                     PL4:
   889                           	callstack 29
   890  0008BA  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   891  0008BE  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   892  0008C2  0012               	return	
   893  0008C4                     __end_ofPL4:
   894                           	callstack 0
   895                           
   896 ;; *************** function ___lwmod *****************
   897 ;; Defined at:
   898 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwmod.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;  dividend        2    0[COMRAM] unsigned int 
   901 ;;  divisor         2    2[COMRAM] unsigned int 
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  counter         1    4[COMRAM] unsigned char 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  2    0[COMRAM] unsigned int 
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   913 ;;      Params:         4       0       0       0       0       0       0       0       0
   914 ;;      Locals:         1       0       0       0       0       0       0       0       0
   915 ;;      Temps:          0       0       0       0       0       0       0       0       0
   916 ;;      Totals:         5       0       0       0       0       0       0       0       0
   917 ;;Total ram usage:        5 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; This function calls:
   920 ;;		Nothing
   921 ;; This function is called by:
   922 ;;		_convierte
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           	psect	text8
   927  000A40                     __ptext8:
   928                           	callstack 0
   929  000A40                     ___lwmod:
   930                           	callstack 29
   931                           
   932                           ;incstack = 0
   933  000A40  5003               	movf	___lwmod@divisor^0,w,c
   934  000A42  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   935  000A44  E017               	bz	l654
   936  000A46  0E01               	movlw	1
   937  000A48  6E05               	movwf	___lwmod@counter^0,c
   938  000A4A  D004               	goto	l1078
   939  000A4C                     l1076:
   940  000A4C  90D8               	bcf	status,0,c
   941  000A4E  3603               	rlcf	___lwmod@divisor^0,f,c
   942  000A50  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   943  000A52  2A05               	incf	___lwmod@counter^0,f,c
   944  000A54                     l1078:
   945  000A54  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   946  000A56  D7FA               	goto	l1076
   947  000A58                     u180:
   948  000A58  5003               	movf	___lwmod@divisor^0,w,c
   949  000A5A  5C01               	subwf	___lwmod@dividend^0,w,c
   950  000A5C  5004               	movf	(___lwmod@divisor+1)^0,w,c
   951  000A5E  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   952  000A60  E304               	bnc	l1084
   953  000A62  5003               	movf	___lwmod@divisor^0,w,c
   954  000A64  5E01               	subwf	___lwmod@dividend^0,f,c
   955  000A66  5004               	movf	(___lwmod@divisor+1)^0,w,c
   956  000A68  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   957  000A6A                     l1084:
   958  000A6A  90D8               	bcf	status,0,c
   959  000A6C  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   960  000A6E  3203               	rrcf	___lwmod@divisor^0,f,c
   961  000A70  2E05               	decfsz	___lwmod@counter^0,f,c
   962  000A72  D7F2               	goto	u180
   963  000A74                     l654:
   964  000A74  C001  F001         	movff	___lwmod@dividend,?___lwmod
   965  000A78  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   966  000A7C  0012               	return		;funcret
   967  000A7E                     __end_of___lwmod:
   968                           	callstack 0
   969                           
   970 ;; *************** function ___lwdiv *****************
   971 ;; Defined at:
   972 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  dividend        2    5[COMRAM] unsigned int 
   975 ;;  divisor         2    7[COMRAM] unsigned int 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  quotient        2    9[COMRAM] unsigned int 
   978 ;;  counter         1   11[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  2    5[COMRAM] unsigned int 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         4       0       0       0       0       0       0       0       0
   989 ;;      Locals:         3       0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0
   991 ;;      Totals:         7       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        7 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_convierte
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text9
  1002  0009F6                     __ptext9:
  1003                           	callstack 0
  1004  0009F6                     ___lwdiv:
  1005                           	callstack 29
  1006                           
  1007                           ;incstack = 0
  1008  0009F6  6A0A               	clrf	___lwdiv@quotient^0,c
  1009  0009F8  6A0B               	clrf	(___lwdiv@quotient+1)^0,c
  1010  0009FA  5008               	movf	___lwdiv@divisor^0,w,c
  1011  0009FC  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1012  0009FE  E01B               	bz	l644
  1013  000A00  0E01               	movlw	1
  1014  000A02  6E0C               	movwf	___lwdiv@counter^0,c
  1015  000A04  D004               	goto	l1058
  1016  000A06                     l1056:
  1017  000A06  90D8               	bcf	status,0,c
  1018  000A08  3608               	rlcf	___lwdiv@divisor^0,f,c
  1019  000A0A  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1020  000A0C  2A0C               	incf	___lwdiv@counter^0,f,c
  1021  000A0E                     l1058:
  1022  000A0E  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  1023  000A10  D7FA               	goto	l1056
  1024  000A12                     u150:
  1025  000A12  90D8               	bcf	status,0,c
  1026  000A14  360A               	rlcf	___lwdiv@quotient^0,f,c
  1027  000A16  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1028  000A18  5008               	movf	___lwdiv@divisor^0,w,c
  1029  000A1A  5C06               	subwf	___lwdiv@dividend^0,w,c
  1030  000A1C  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1031  000A1E  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1032  000A20  E305               	bnc	l1068
  1033  000A22  5008               	movf	___lwdiv@divisor^0,w,c
  1034  000A24  5E06               	subwf	___lwdiv@dividend^0,f,c
  1035  000A26  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1036  000A28  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1037  000A2A  800A               	bsf	___lwdiv@quotient^0,0,c
  1038  000A2C                     l1068:
  1039  000A2C  90D8               	bcf	status,0,c
  1040  000A2E  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1041  000A30  3208               	rrcf	___lwdiv@divisor^0,f,c
  1042  000A32  2E0C               	decfsz	___lwdiv@counter^0,f,c
  1043  000A34  D7EE               	goto	u150
  1044  000A36                     l644:
  1045  000A36  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1046  000A3A  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1047  000A3E  0012               	return		;funcret
  1048  000A40                     __end_of___lwdiv:
  1049                           	callstack 0
  1050                           
  1051 ;; *************** function _POS_CURSOR *****************
  1052 ;; Defined at:
  1053 ;;		line 6 in file "LCD.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;  fila            1    wreg     unsigned char 
  1056 ;;  columna         1    3[COMRAM] unsigned char 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  fila            1    4[COMRAM] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1068 ;;      Params:         1       0       0       0       0       0       0       0       0
  1069 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1071 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1072 ;;Total ram usage:        2 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    2
  1075 ;; This function calls:
  1076 ;;		_ENVIA_LCD_CMD
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text10
  1083  000B4C                     __ptext10:
  1084                           	callstack 0
  1085  000B4C                     _POS_CURSOR:
  1086                           	callstack 28
  1087                           
  1088                           ;incstack = 0
  1089                           ;POS_CURSOR@fila stored from wreg
  1090  000B4C  6E05               	movwf	POS_CURSOR@fila^0,c
  1091                           
  1092                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1093  000B4E  0405               	decf	POS_CURSOR@fila^0,w,c
  1094  000B50  E104               	bnz	l1092
  1095                           
  1096                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1097  000B52  5004               	movf	POS_CURSOR@columna^0,w,c
  1098  000B54  0F80               	addlw	128
  1099  000B56  EF3F  F005         	goto	_ENVIA_LCD_CMD
  1100  000B5A                     l1092:
  1101  000B5A  0E02               	movlw	2
  1102  000B5C  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1103  000B5E  A4D8               	btfss	status,2,c
  1104  000B60  0012               	return	
  1105                           
  1106                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1107  000B62  5004               	movf	POS_CURSOR@columna^0,w,c
  1108  000B64  0FC0               	addlw	192
  1109  000B66  EF3F  F005         	goto	_ENVIA_LCD_CMD
  1110  000B6A                     __end_of_POS_CURSOR:
  1111                           	callstack 0
  1112                           
  1113 ;; *************** function _ENVIA_LCD_CMD *****************
  1114 ;; Defined at:
  1115 ;;		line 104 in file "LCD.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  dato            1    wreg     unsigned char 
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  dato            1    1[COMRAM] unsigned char 
  1120 ;;  aux             1    2[COMRAM] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2, status,0, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0
  1131 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1133 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1134 ;;Total ram usage:        2 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    1
  1137 ;; This function calls:
  1138 ;;		_ENVIA_NIBBLE
  1139 ;;		_LEER_LCD
  1140 ;; This function is called by:
  1141 ;;		_POS_CURSOR
  1142 ;;		_CURSOR_HOME
  1143 ;;		_CURSOR_ONOFF
  1144 ;;		_BORRAR_LCD
  1145 ;;		_LCD_CONFIG
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text11
  1150  000A7E                     __ptext11:
  1151                           	callstack 0
  1152  000A7E                     _ENVIA_LCD_CMD:
  1153                           	callstack 27
  1154                           
  1155                           ;incstack = 0
  1156                           ;ENVIA_LCD_CMD@dato stored from wreg
  1157  000A7E  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1158                           
  1159                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1160  000A80  908C               	bcf	140,0,c	;volatile
  1161                           
  1162                           ;LCD.c: 108:  LEER_LCD();
  1163  000A82  ECCC  F004         	call	_LEER_LCD	;wreg free
  1164                           
  1165                           ;LCD.c: 109:  TRISD = 0b00000000;
  1166  000A86  6A95               	clrf	149,c	;volatile
  1167                           
  1168                           ;LCD.c: 111:         _delay(1200);
  1169  000A88  0EF0               	movlw	240
  1170  000A8A                     u287:
  1171  000A8A  D000               	nop2	
  1172  000A8C  2EE8               	decfsz	wreg,f,c
  1173  000A8E  D7FD               	bra	u287
  1174                           
  1175                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1176  000A90  928C               	bcf	140,1,c	;volatile
  1177                           
  1178                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1179  000A92  948C               	bcf	140,2,c	;volatile
  1180                           
  1181                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1182  000A94  908C               	bcf	140,0,c	;volatile
  1183                           
  1184                           ;LCD.c: 115:  aux = dato & 0xF0;
  1185  000A96  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1186                           
  1187                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1188  000A98  D806               	call	PL8	;call to abstracted procedure
  1189  000A9A  ECB5  F005         	call	_ENVIA_NIBBLE
  1190                           
  1191                           ;LCD.c: 117:  aux = dato<<4;
  1192  000A9E  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1193                           
  1194                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1195  000AA0  D802               	call	PL8	;call to abstracted procedure
  1196  000AA2  EFB5  F005         	goto	_ENVIA_NIBBLE
  1197  000AA6                     __end_of_ENVIA_LCD_CMD:
  1198                           	callstack 0
  1199  000AA6                     PL8:
  1200                           	callstack 27
  1201  000AA6  0BF0               	andlw	240
  1202  000AA8  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1203  000AAA  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1204  000AAC  0012               	return	
  1205  000AAE                     __end_ofPL8:
  1206                           	callstack 0
  1207                           
  1208 ;; *************** function _ESCRIBE_MENSAJE *****************
  1209 ;; Defined at:
  1210 ;;		line 41 in file "LCD.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  cadena          1    3[COMRAM] PTR const unsigned char 
  1213 ;;		 -> STR_2(6), STR_1(13), 
  1214 ;;  tam             1    4[COMRAM] unsigned char 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  i               1    6[COMRAM] unsigned char 
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1226 ;;      Params:         2       0       0       0       0       0       0       0       0
  1227 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1228 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1229 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1230 ;;Total ram usage:        4 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    2
  1233 ;; This function calls:
  1234 ;;		_ENVIA_CHAR
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text12
  1241  000B2A                     __ptext12:
  1242                           	callstack 0
  1243  000B2A                     _ESCRIBE_MENSAJE:
  1244                           	callstack 28
  1245                           
  1246                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1247                           
  1248                           ;incstack = 0
  1249  000B2A  6A07               	clrf	ESCRIBE_MENSAJE@i^0,c
  1250                           
  1251                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1252  000B2C  6A07               	clrf	ESCRIBE_MENSAJE@i^0,c
  1253  000B2E  D00A               	goto	l1102
  1254  000B30                     l1098:
  1255                           
  1256                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1257  000B30  5004               	movf	ESCRIBE_MENSAJE@cadena^0,w,c
  1258  000B32  2407               	addwf	ESCRIBE_MENSAJE@i^0,w,c
  1259  000B34  6E06               	movwf	??_ESCRIBE_MENSAJE^0,c
  1260  000B36  C006  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1261  000B3A                     	if	0	;There is only one active tblptr byte
  1262  000B3A                     	endif
  1263  000B3A                     	if	0	;tblptru may be non-zero
  1264  000B3A                     	endif
  1265  000B3A                     	if	0	;tblptru may be non-zero
  1266  000B3A                     	endif
  1267  000B3A  0008               	tblrd		*
  1268  000B3C  50F5               	movf	tablat,w,c
  1269  000B3E  EC57  F005         	call	_ENVIA_CHAR
  1270                           
  1271                           ;LCD.c: 47:  }
  1272  000B42  2A07               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1273  000B44                     l1102:
  1274  000B44  5005               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1275  000B46  5C07               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1276  000B48  E3F3               	bnc	l1098
  1277  000B4A  0012               	return		;funcret
  1278  000B4C                     __end_of_ESCRIBE_MENSAJE:
  1279                           	callstack 0
  1280                           
  1281 ;; *************** function _ENVIA_CHAR *****************
  1282 ;; Defined at:
  1283 ;;		line 50 in file "LCD.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  dato            1    wreg     unsigned char 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  dato            1    1[COMRAM] unsigned char 
  1288 ;;  aux             1    2[COMRAM] unsigned char 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2, status,0, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1298 ;;      Params:         0       0       0       0       0       0       0       0       0
  1299 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1301 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1302 ;;Total ram usage:        2 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; Hardware stack levels required when called:    1
  1305 ;; This function calls:
  1306 ;;		_ENVIA_NIBBLE
  1307 ;;		_LEER_LCD
  1308 ;; This function is called by:
  1309 ;;		_ESCRIBE_MENSAJE
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           	psect	text13
  1315  000AAE                     __ptext13:
  1316                           	callstack 0
  1317  000AAE                     _ENVIA_CHAR:
  1318                           	callstack 28
  1319                           
  1320                           ;incstack = 0
  1321                           ;ENVIA_CHAR@dato stored from wreg
  1322  000AAE  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1323                           
  1324                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1325  000AB0  808C               	bsf	140,0,c	;volatile
  1326                           
  1327                           ;LCD.c: 54:  LEER_LCD();
  1328  000AB2  ECCC  F004         	call	_LEER_LCD	;wreg free
  1329                           
  1330                           ;LCD.c: 55:  TRISD = 0x00;
  1331  000AB6  6A95               	clrf	149,c	;volatile
  1332                           
  1333                           ;LCD.c: 56:         _delay(1200);
  1334  000AB8  0EF0               	movlw	240
  1335  000ABA                     u297:
  1336  000ABA  D000               	nop2	
  1337  000ABC  2EE8               	decfsz	wreg,f,c
  1338  000ABE  D7FD               	bra	u297
  1339                           
  1340                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1341  000AC0  928C               	bcf	140,1,c	;volatile
  1342                           
  1343                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1344  000AC2  948C               	bcf	140,2,c	;volatile
  1345                           
  1346                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1347  000AC4  808C               	bsf	140,0,c	;volatile
  1348                           
  1349                           ;LCD.c: 61:  aux = dato & 0xF0;
  1350  000AC6  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1351                           
  1352                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1353  000AC8  D806               	call	PL10	;call to abstracted procedure
  1354  000ACA  ECB5  F005         	call	_ENVIA_NIBBLE
  1355                           
  1356                           ;LCD.c: 63:  aux = dato << 4;
  1357  000ACE  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1358                           
  1359                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1360  000AD0  D802               	call	PL10	;call to abstracted procedure
  1361  000AD2  EFB5  F005         	goto	_ENVIA_NIBBLE
  1362  000AD6                     __end_of_ENVIA_CHAR:
  1363                           	callstack 0
  1364  000AD6                     PL10:
  1365                           	callstack 28
  1366  000AD6  0BF0               	andlw	240
  1367  000AD8  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1368  000ADA  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1369  000ADC  0012               	return	
  1370  000ADE                     __end_ofPL10:
  1371                           	callstack 0
  1372                           
  1373 ;; *************** function _LEER_LCD *****************
  1374 ;; Defined at:
  1375 ;;		line 121 in file "LCD.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  aux             1    0[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1389 ;;      Params:         0       0       0       0       0       0       0       0       0
  1390 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1392 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1393 ;;Total ram usage:        1 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_ENVIA_CHAR
  1399 ;;		_ENVIA_LCD_CMD
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text14
  1404  000998                     __ptext14:
  1405                           	callstack 0
  1406  000998                     _LEER_LCD:
  1407                           	callstack 27
  1408                           
  1409                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1410                           
  1411                           ;incstack = 0
  1412  000998  0EF8               	movlw	248
  1413  00099A  6E95               	movwf	149,c	;volatile
  1414                           
  1415                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1416  00099C  908C               	bcf	140,0,c	;volatile
  1417                           
  1418                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1419  00099E  828C               	bsf	140,1,c	;volatile
  1420                           
  1421                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1422  0009A0  848C               	bsf	140,2,c	;volatile
  1423                           
  1424                           ;LCD.c: 128:         _delay(1200);
  1425  0009A2  0EF0               	movlw	240
  1426  0009A4                     u307:
  1427  0009A4  D000               	nop2	
  1428  0009A6  2EE8               	decfsz	wreg,f,c
  1429  0009A8  D7FD               	bra	u307
  1430                           
  1431                           ;LCD.c: 130:  aux = PORTD;
  1432                           
  1433                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1434  0009AA  D821               	call	PL6	;call to abstracted procedure
  1435                           
  1436                           ;LCD.c: 132:         _delay(1200);
  1437  0009AC  0EF0               	movlw	240
  1438  0009AE                     u317:
  1439  0009AE  D000               	nop2	
  1440  0009B0  2EE8               	decfsz	wreg,f,c
  1441  0009B2  D7FD               	bra	u317
  1442                           
  1443                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1444  0009B4  848C               	bsf	140,2,c	;volatile
  1445                           
  1446                           ;LCD.c: 135:         _delay(1200);
  1447  0009B6  0EF0               	movlw	240
  1448  0009B8                     u327:
  1449  0009B8  D000               	nop2	
  1450  0009BA  2EE8               	decfsz	wreg,f,c
  1451  0009BC  D7FD               	bra	u327
  1452  0009BE                     l846:
  1453                           
  1454                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1455  0009BE  948C               	bcf	140,2,c	;volatile
  1456                           
  1457                           ;LCD.c: 138:  aux = aux & 0x80;
  1458  0009C0  0E80               	movlw	128
  1459  0009C2  1601               	andwf	LEER_LCD@aux^0,f,c
  1460                           
  1461                           ;LCD.c: 139:  while(aux == 0x80)
  1462  0009C4  D010               	goto	l862
  1463  0009C6                     l67:
  1464                           
  1465                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1466  0009C6  848C               	bsf	140,2,c	;volatile
  1467                           
  1468                           ;LCD.c: 142:             _delay(1200);
  1469  0009C8  0EF0               	movlw	240
  1470  0009CA                     u337:
  1471  0009CA  D000               	nop2	
  1472  0009CC  2EE8               	decfsz	wreg,f,c
  1473  0009CE  D7FD               	bra	u337
  1474                           
  1475                           ;LCD.c: 143:             aux = PORTD;
  1476                           
  1477                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1478  0009D0  D80E               	call	PL6	;call to abstracted procedure
  1479                           
  1480                           ;LCD.c: 145:             _delay(1200);
  1481  0009D2  0EF0               	movlw	240
  1482  0009D4                     u347:
  1483  0009D4  D000               	nop2	
  1484  0009D6  2EE8               	decfsz	wreg,f,c
  1485  0009D8  D7FD               	bra	u347
  1486                           
  1487                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1488  0009DA  848C               	bsf	140,2,c	;volatile
  1489                           
  1490                           ;LCD.c: 147:             _delay(1200);
  1491  0009DC  0EF0               	movlw	240
  1492  0009DE                     u357:
  1493  0009DE  D000               	nop2	
  1494  0009E0  2EE8               	decfsz	wreg,f,c
  1495  0009E2  D7FD               	bra	u357
  1496  0009E4  D7EC               	goto	l846
  1497  0009E6                     l862:
  1498                           
  1499                           ;LCD.c: 139:  while(aux == 0x80)
  1500  0009E6  0E80               	movlw	128
  1501  0009E8  1801               	xorwf	LEER_LCD@aux^0,w,c
  1502  0009EA  E0ED               	bz	l67
  1503  0009EC  0012               	return		;funcret
  1504  0009EE                     __end_of_LEER_LCD:
  1505                           	callstack 0
  1506  0009EE                     PL6:
  1507                           	callstack 27
  1508  0009EE  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1509  0009F2  948C               	bcf	140,2,c	;volatile
  1510  0009F4  0012               	return	
  1511  0009F6                     __end_ofPL6:
  1512                           	callstack 0
  1513                           
  1514 ;; *************** function _ENVIA_NIBBLE *****************
  1515 ;; Defined at:
  1516 ;;		line 93 in file "LCD.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  dato            1    wreg     unsigned char 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  dato            1    0[COMRAM] unsigned char 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1530 ;;      Params:         0       0       0       0       0       0       0       0       0
  1531 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1532 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1533 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1534 ;;Total ram usage:        1 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_ENVIA_CHAR
  1540 ;;		_LCD_CONFIG
  1541 ;;		_ENVIA_LCD_CMD
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text15
  1546  000B6A                     __ptext15:
  1547                           	callstack 0
  1548  000B6A                     _ENVIA_NIBBLE:
  1549                           	callstack 28
  1550                           
  1551                           ;incstack = 0
  1552                           ;ENVIA_NIBBLE@dato stored from wreg
  1553  000B6A  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1554                           
  1555                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1556  000B6C  0E0F               	movlw	15
  1557  000B6E  168C               	andwf	140,f,c	;volatile
  1558                           
  1559                           ;LCD.c: 96:  dato &= 0xF0;
  1560  000B70  0EF0               	movlw	240
  1561  000B72  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1562                           
  1563                           ;LCD.c: 97:  LATD|= dato;
  1564  000B74  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1565  000B76  128C               	iorwf	140,f,c	;volatile
  1566                           
  1567                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1568  000B78  848C               	bsf	140,2,c	;volatile
  1569                           
  1570                           ;LCD.c: 100:         _delay(1200);
  1571  000B7A  0EF0               	movlw	240
  1572  000B7C                     u367:
  1573  000B7C  D000               	nop2	
  1574  000B7E  2EE8               	decfsz	wreg,f,c
  1575  000B80  D7FD               	bra	u367
  1576                           
  1577                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1578  000B82  948C               	bcf	140,2,c	;volatile
  1579  000B84  0012               	return		;funcret
  1580  000B86                     __end_of_ENVIA_NIBBLE:
  1581                           	callstack 0
  1582                           
  1583                           	psect	rparam
  1584  0000                     
  1585                           	psect	idloc
  1586                           
  1587                           ;Config register IDLOC0 @ 0x200000
  1588                           ;	unspecified, using default values
  1589  200000                     	org	2097152
  1590  200000  FF                 	db	255
  1591                           
  1592                           ;Config register IDLOC1 @ 0x200001
  1593                           ;	unspecified, using default values
  1594  200001                     	org	2097153
  1595  200001  FF                 	db	255
  1596                           
  1597                           ;Config register IDLOC2 @ 0x200002
  1598                           ;	unspecified, using default values
  1599  200002                     	org	2097154
  1600  200002  FF                 	db	255
  1601                           
  1602                           ;Config register IDLOC3 @ 0x200003
  1603                           ;	unspecified, using default values
  1604  200003                     	org	2097155
  1605  200003  FF                 	db	255
  1606                           
  1607                           ;Config register IDLOC4 @ 0x200004
  1608                           ;	unspecified, using default values
  1609  200004                     	org	2097156
  1610  200004  FF                 	db	255
  1611                           
  1612                           ;Config register IDLOC5 @ 0x200005
  1613                           ;	unspecified, using default values
  1614  200005                     	org	2097157
  1615  200005  FF                 	db	255
  1616                           
  1617                           ;Config register IDLOC6 @ 0x200006
  1618                           ;	unspecified, using default values
  1619  200006                     	org	2097158
  1620  200006  FF                 	db	255
  1621                           
  1622                           ;Config register IDLOC7 @ 0x200007
  1623                           ;	unspecified, using default values
  1624  200007                     	org	2097159
  1625  200007  FF                 	db	255
  1626                           
  1627                           	psect	config
  1628                           
  1629                           ;Config register CONFIG1L @ 0x300000
  1630                           ;	PLL Prescaler Selection bits
  1631                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1632                           ;	System Clock Postscaler Selection bits
  1633                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1634                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1635                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1636  300000                     	org	3145728
  1637  300000  00                 	db	0
  1638                           
  1639                           ;Config register CONFIG1H @ 0x300001
  1640                           ;	Oscillator Selection bits
  1641                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1642                           ;	Fail-Safe Clock Monitor Enable bit
  1643                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1644                           ;	Internal/External Oscillator Switchover bit
  1645                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1646  300001                     	org	3145729
  1647  300001  02                 	db	2
  1648                           
  1649                           ;Config register CONFIG2L @ 0x300002
  1650                           ;	Power-up Timer Enable bit
  1651                           ;	PWRT = ON, PWRT enabled
  1652                           ;	Brown-out Reset Enable bits
  1653                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1654                           ;	Brown-out Reset Voltage bits
  1655                           ;	BORV = 3, Minimum setting 2.05V
  1656                           ;	USB Voltage Regulator Enable bit
  1657                           ;	VREGEN = OFF, USB voltage regulator disabled
  1658  300002                     	org	3145730
  1659  300002  18                 	db	24
  1660                           
  1661                           ;Config register CONFIG2H @ 0x300003
  1662                           ;	Watchdog Timer Enable bit
  1663                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1664                           ;	Watchdog Timer Postscale Select bits
  1665                           ;	WDTPS = 32768, 1:32768
  1666  300003                     	org	3145731
  1667  300003  1E                 	db	30
  1668                           
  1669                           ; Padding undefined space
  1670  300004                     	org	3145732
  1671  300004  FF                 	db	255
  1672                           
  1673                           ;Config register CONFIG3H @ 0x300005
  1674                           ;	CCP2 MUX bit
  1675                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1676                           ;	PORTB A/D Enable bit
  1677                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1678                           ;	Low-Power Timer 1 Oscillator Enable bit
  1679                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1680                           ;	MCLR Pin Enable bit
  1681                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1682  300005                     	org	3145733
  1683  300005  81                 	db	129
  1684                           
  1685                           ;Config register CONFIG4L @ 0x300006
  1686                           ;	Stack Full/Underflow Reset Enable bit
  1687                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1688                           ;	Single-Supply ICSP Enable bit
  1689                           ;	LVP = OFF, Single-Supply ICSP disabled
  1690                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1691                           ;	ICPRT = OFF, ICPORT disabled
  1692                           ;	Extended Instruction Set Enable bit
  1693                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1694                           ;	Background Debugger Enable bit
  1695                           ;	DEBUG = 0x1, unprogrammed default
  1696  300006                     	org	3145734
  1697  300006  81                 	db	129
  1698                           
  1699                           ; Padding undefined space
  1700  300007                     	org	3145735
  1701  300007  FF                 	db	255
  1702                           
  1703                           ;Config register CONFIG5L @ 0x300008
  1704                           ;	Code Protection bit
  1705                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1706                           ;	Code Protection bit
  1707                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1708                           ;	Code Protection bit
  1709                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1710                           ;	Code Protection bit
  1711                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1712  300008                     	org	3145736
  1713  300008  0F                 	db	15
  1714                           
  1715                           ;Config register CONFIG5H @ 0x300009
  1716                           ;	Boot Block Code Protection bit
  1717                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1718                           ;	Data EEPROM Code Protection bit
  1719                           ;	CPD = OFF, Data EEPROM is not code-protected
  1720  300009                     	org	3145737
  1721  300009  C0                 	db	192
  1722                           
  1723                           ;Config register CONFIG6L @ 0x30000A
  1724                           ;	Write Protection bit
  1725                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1726                           ;	Write Protection bit
  1727                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1728                           ;	Write Protection bit
  1729                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1730                           ;	Write Protection bit
  1731                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1732  30000A                     	org	3145738
  1733  30000A  0F                 	db	15
  1734                           
  1735                           ;Config register CONFIG6H @ 0x30000B
  1736                           ;	Configuration Register Write Protection bit
  1737                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1738                           ;	Boot Block Write Protection bit
  1739                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1740                           ;	Data EEPROM Write Protection bit
  1741                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1742  30000B                     	org	3145739
  1743  30000B  E0                 	db	224
  1744                           
  1745                           ;Config register CONFIG7L @ 0x30000C
  1746                           ;	Table Read Protection bit
  1747                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1748                           ;	Table Read Protection bit
  1749                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1750                           ;	Table Read Protection bit
  1751                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1752                           ;	Table Read Protection bit
  1753                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1754  30000C                     	org	3145740
  1755  30000C  0F                 	db	15
  1756                           
  1757                           ;Config register CONFIG7H @ 0x30000D
  1758                           ;	Boot Block Table Read Protection bit
  1759                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1760  30000D                     	org	3145741
  1761  30000D  40                 	db	64
  1762                           tosu	equ	0xFFF
  1763                           tosh	equ	0xFFE
  1764                           tosl	equ	0xFFD
  1765                           stkptr	equ	0xFFC
  1766                           pclatu	equ	0xFFB
  1767                           pclath	equ	0xFFA
  1768                           pcl	equ	0xFF9
  1769                           tblptru	equ	0xFF8
  1770                           tblptrh	equ	0xFF7
  1771                           tblptrl	equ	0xFF6
  1772                           tablat	equ	0xFF5
  1773                           prodh	equ	0xFF4
  1774                           prodl	equ	0xFF3
  1775                           indf0	equ	0xFEF
  1776                           postinc0	equ	0xFEE
  1777                           postdec0	equ	0xFED
  1778                           preinc0	equ	0xFEC
  1779                           plusw0	equ	0xFEB
  1780                           fsr0h	equ	0xFEA
  1781                           fsr0l	equ	0xFE9
  1782                           wreg	equ	0xFE8
  1783                           indf1	equ	0xFE7
  1784                           postinc1	equ	0xFE6
  1785                           postdec1	equ	0xFE5
  1786                           preinc1	equ	0xFE4
  1787                           plusw1	equ	0xFE3
  1788                           fsr1h	equ	0xFE2
  1789                           fsr1l	equ	0xFE1
  1790                           bsr	equ	0xFE0
  1791                           indf2	equ	0xFDF
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           preinc2	equ	0xFDC
  1795                           plusw2	equ	0xFDB
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8

Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_2(CODE[6]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _init_lcd->_CURSOR_ONOFF
    _init_lcd->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2957
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                          _convierte
                          _init_conf
                           _init_lcd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0     405
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     105
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     120
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0      90
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0      90
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _init_conf                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1723
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     254
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0      90
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      4     2      2     485
                                              3 COMRAM     4     2      2
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0      90
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _init_conf
   _init_lcd
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1C       1       29.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      20        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed May 19 16:48:02 2021

                      PL2 08AE                        PL4 08BA                        PL6 09EE  
                      PL8 0AA6                        l67 09C6                       PL10 0AD6  
           ENVIA_CHAR@aux 0003                       l145 08DA                       l644 0A36  
                     l900 0BAC                       l654 0A74                       l862 09E6  
                     l846 09BE                       u150 0A12                       u307 09A4  
                     u180 0A58                       u317 09AE                       _PR2 000FCB  
                     u327 09B8                       u247 0B12                       u337 09CA  
                     u257 094A                       u347 09D4                       u267 0958  
                     u357 09DE                       u277 0968                       u367 0B7C  
                     u287 0A8A                       u297 0ABA               LEER_LCD@aux 0001  
                     wreg 000FE8              ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001  
          ENVIA_CHAR@dato 0002                      l1102 0B44                      l1112 08D8  
                    l1056 0A06                      l1058 0A0E                      l1092 0B5A  
                    l1068 0A2C                      l1084 0A6A                      l1076 0A4C  
                    l1078 0A54                      l1098 0B30                      STR_1 0801  
                    STR_2 080E                      _LATD 000F8C                      _main 08C4  
                    start 0000             ?_CURSOR_ONOFF 0001              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 09EE       __size_of_BORRAR_LCD 0006  
                   ?_main 0001                     _T2CON 000FCA           __end_of___lwdiv 0A40  
         __end_of___lwmod 0A7E                     _PORTD 000F83       __size_of_LCD_CONFIG 005E  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0028               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0B86              __end_of_main 093A           _ESCRIBE_MENSAJE 0B2A  
                  ??_main 000F             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3                    _CCPR1L 000FBE                    _CCPR2L 000FBB  
                  _decena 0013      __end_of_ENVIA_NIBBLE 0B86                 ??___lwdiv 000A  
               ??___lwmod 0005       __size_of_POS_CURSOR 001E          __end_of_init_lcd 0B2A  
                  _millar 0017                    clear_0 0B8C                    _unidad 0011  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0006  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0B92  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0B4C            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0BC4  
              __end_ofPL2 08BA                __end_ofPL4 08C4                __end_ofPL6 09F6  
              __end_ofPL8 0AAE          ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0BB8  
      __end_of_LCD_CONFIG 0998        __end_of_ENVIA_CHAR 0AD6        __size_of_convierte 0098  
              ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001        __size_of_init_conf 0028  
                 _CCP1CON 000FBD                   _CCP2CON 000FBA              ??_POS_CURSOR 0005  
               ?_init_lcd 0001     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0004                   ___lwdiv 09F6  
                 ___lwmod 0A40              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0AA6  
       __end_of_convierte 08AE                   __pcinit 0B86        __end_of_POS_CURSOR 0B6A  
                 __ramtop 0800                   _centena 0015                   __ptext0 08C4  
                 __ptext1 0B06                   __ptext2 093A                   __ptext3 0BA0  
                 __ptext4 0BB8                   __ptext5 0BBE                   __ptext6 0ADE  
                 __ptext7 0816                   __ptext8 0A40                   __ptext9 09F6  
       __end_of_init_conf 0B06                   _res_adc 001B              _ENVIA_NIBBLE 0B6A  
    end_of_initialization 0B92                ??_init_lcd 0005                   postinc0 000FEE  
   __size_of_CURSOR_ONOFF 0018                 _TRISCbits 000F94         __size_of_LEER_LCD 0056  
            _CURSOR_ONOFF 0BA0        CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004  
             __end_ofPL10 0ADE       start_initialization 0B86         ENVIA_LCD_CMD@dato 0002  
             __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0BBE         __size_of_init_lcd 0024  
        ___lwdiv@dividend 0006                  ?___lwdiv 0006                  ?___lwmod 0001  
             __smallconst 0800                 _convierte 0816           convierte@numero 000D  
        ___lwdiv@quotient 000A                 _init_conf 0ADE                  _LEER_LCD 0998  
                _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0007            POS_CURSOR@fila 0005  
__size_of_ESCRIBE_MENSAJE 0022                _ADCON0bits 000FC2                ?_convierte 000D  
             _CURSOR_HOME 0BB8                ?_init_conf 0001    __size_of_ENVIA_LCD_CMD 0028  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___lwdiv 004A          __size_of___lwmod 003E                  _d_millar 0019  
         ___lwdiv@divisor 0008           ___lwdiv@counter 000C                  __ptext10 0B4C  
                __ptext11 0A7E                  __ptext12 0B2A                  __ptext13 0AAE  
                __ptext14 0998                  __ptext15 0B6A                _BORRAR_LCD 0BBE  
                _init_lcd 0B06             __size_of_main 0076                _LCD_CONFIG 093A  
              _ENVIA_CHAR 0AAE             _ENVIA_LCD_CMD 0A7E               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0006               ??_init_conf 0001     ESCRIBE_MENSAJE@cadena 0004  
        ___lwmod@dividend 0001            ?_ENVIA_LCD_CMD 0001           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B4C               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0005  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
