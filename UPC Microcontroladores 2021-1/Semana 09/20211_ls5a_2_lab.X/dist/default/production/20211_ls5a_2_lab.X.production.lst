

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu May 20 15:23:00 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _ADRESL	set	4035
    65  0000                     _ADRESH	set	4036
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _LATCbits	set	3979
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _ADCON2	set	4032
    71  0000                     _TRISCbits	set	3988
    72  0000                     _PORTD	set	3971
    73  0000                     _LATD	set	3980
    74  0000                     _TRISD	set	3989
    75  0000                     _LATDbits	set	3980
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	callstack 0
    80  000800  00                 	db	0
    81  000801                     STR_1:
    82  000801  4C                 	db	76	;'L'
    83  000802  65                 	db	101	;'e'
    84  000803  63                 	db	99	;'c'
    85  000804  74                 	db	116	;'t'
    86  000805  75                 	db	117	;'u'
    87  000806  72                 	db	114	;'r'
    88  000807  61                 	db	97	;'a'
    89  000808  20                 	db	32
    90  000809  64                 	db	100	;'d'
    91  00080A  65                 	db	101	;'e'
    92  00080B  6C                 	db	108	;'l'
    93  00080C  20                 	db	32
    94  00080D  41                 	db	65	;'A'
    95  00080E  2F                 	db	47
    96  00080F  44                 	db	68	;'D'
    97  000810  00                 	db	0
    98  000811                     STR_2:
    99  000811  41                 	db	65	;'A'
   100  000812  4E                 	db	78	;'N'
   101  000813  30                 	db	48	;'0'
   102  000814  3A                 	db	58	;':'
   103  000815  00                 	db	0
   104  000816  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           ; #config settings
   107                           
   108                           	psect	cinit
   109  000C4E                     __pcinit:
   110                           	callstack 0
   111  000C4E                     start_initialization:
   112                           	callstack 0
   113  000C4E                     __initialization:
   114                           	callstack 0
   115                           
   116                           ; Clear objects allocated to COMRAM (10 bytes)
   117  000C4E  EE00  F011         	lfsr	0,__pbssCOMRAM
   118  000C52  0E0A               	movlw	10
   119  000C54                     clear_0:
   120  000C54  6AEE               	clrf	postinc0,c
   121  000C56  06E8               	decf	wreg,f,c
   122  000C58  E1FD               	bnz	clear_0
   123  000C5A                     end_of_initialization:
   124                           	callstack 0
   125  000C5A                     __end_of__initialization:
   126                           	callstack 0
   127  000C5A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   128  000C5C  6EF8               	movwf	tblptru,c
   129  000C5E  0E08               	movlw	high __Lsmallconst
   130  000C60  6EF7               	movwf	tblptrh,c
   131  000C62  0100               	movlb	0
   132  000C64  EF63  F004         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	bssCOMRAM
   135  000011                     __pbssCOMRAM:
   136                           	callstack 0
   137  000011                     _unidad:
   138                           	callstack 0
   139  000011                     	ds	2
   140  000013                     _decena:
   141                           	callstack 0
   142  000013                     	ds	2
   143  000015                     _centena:
   144                           	callstack 0
   145  000015                     	ds	2
   146  000017                     _millar:
   147                           	callstack 0
   148  000017                     	ds	2
   149  000019                     _resultado_adc:
   150                           	callstack 0
   151  000019                     	ds	2
   152                           
   153                           	psect	cstackCOMRAM
   154  000001                     __pcstackCOMRAM:
   155                           	callstack 0
   156  000001                     ?___lwmod:
   157                           	callstack 0
   158  000001                     ENVIA_NIBBLE@dato:
   159                           	callstack 0
   160  000001                     LEER_LCD@aux:
   161                           	callstack 0
   162  000001                     ___lwmod@dividend:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x0
   166  000001                     	ds	1
   167  000002                     ENVIA_CHAR@dato:
   168                           	callstack 0
   169  000002                     ENVIA_LCD_CMD@dato:
   170                           	callstack 0
   171                           
   172                           ; 1 bytes @ 0x1
   173  000002                     	ds	1
   174  000003                     ENVIA_CHAR@aux:
   175                           	callstack 0
   176  000003                     ENVIA_LCD_CMD@aux:
   177                           	callstack 0
   178  000003                     ___lwmod@divisor:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x2
   182  000003                     	ds	1
   183  000004                     ??_LCD_CONFIG:
   184  000004                     POS_CURSOR@columna:
   185                           	callstack 0
   186  000004                     CURSOR_ONOFF@estado:
   187                           	callstack 0
   188  000004                     ESCRIBE_MENSAJE@cadena:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x3
   192  000004                     	ds	1
   193  000005                     ??_lcd_init:
   194  000005                     POS_CURSOR@fila:
   195                           	callstack 0
   196  000005                     ___lwmod@counter:
   197                           	callstack 0
   198                           
   199                           ; 1 bytes @ 0x4
   200  000005                     	ds	1
   201  000006                     ?___lwdiv:
   202                           	callstack 0
   203  000006                     ESCRIBE_MENSAJE@tam:
   204                           	callstack 0
   205  000006                     ___lwdiv@dividend:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x5
   209  000006                     	ds	1
   210  000007                     ??_ESCRIBE_MENSAJE:
   211                           
   212                           ; 1 bytes @ 0x6
   213  000007                     	ds	1
   214  000008                     ___lwdiv@divisor:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0x7
   218  000008                     	ds	1
   219  000009                     ESCRIBE_MENSAJE@i:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0x8
   223  000009                     	ds	1
   224  00000A                     ___lwdiv@quotient:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0x9
   228  00000A                     	ds	2
   229  00000C                     ___lwdiv@counter:
   230                           	callstack 0
   231                           
   232                           ; 1 bytes @ 0xB
   233  00000C                     	ds	1
   234  00000D                     convierte@numero:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0xC
   238  00000D                     	ds	2
   239  00000F                     ??_main:
   240                           
   241                           ; 1 bytes @ 0xE
   242  00000F                     	ds	2
   243                           
   244 ;;
   245 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   246 ;;
   247 ;; *************** function _main *****************
   248 ;; Defined at:
   249 ;;		line 37 in file "maincode2.c"
   250 ;; Parameters:    Size  Location     Type
   251 ;;		None
   252 ;; Auto vars:     Size  Location     Type
   253 ;;		None
   254 ;; Return value:  Size  Location     Type
   255 ;;                  1    wreg      void 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   258 ;; Tracked objects:
   259 ;;		On entry : 0/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   263 ;;      Params:         0       0       0       0       0       0       0       0       0
   264 ;;      Locals:         0       0       0       0       0       0       0       0       0
   265 ;;      Temps:          2       0       0       0       0       0       0       0       0
   266 ;;      Totals:         2       0       0       0       0       0       0       0       0
   267 ;;Total ram usage:        2 bytes
   268 ;; Hardware stack levels required when called: 4
   269 ;; This function calls:
   270 ;;		_ENVIA_CHAR
   271 ;;		_ESCRIBE_MENSAJE
   272 ;;		_POS_CURSOR
   273 ;;		_convierte
   274 ;;		_init_conf
   275 ;;		_lcd_init
   276 ;; This function is called by:
   277 ;;		Startup code after reset
   278 ;; This function uses a non-reentrant model
   279 ;;
   280                           
   281                           	psect	text0
   282  0008C6                     __ptext0:
   283                           	callstack 0
   284  0008C6                     _main:
   285                           	callstack 27
   286  0008C6                     
   287                           ;maincode2.c: 38:     init_conf();
   288  0008C6  EC34  F006         	call	_init_conf	;wreg free
   289  0008CA                     
   290                           ;maincode2.c: 39:     lcd_init();
   291  0008CA  EC05  F006         	call	_lcd_init	;wreg free
   292  0008CE                     
   293                           ;maincode2.c: 40:     LATCbits.LC2 = 1;
   294  0008CE  848B               	bsf	139,2,c	;volatile
   295  0008D0                     
   296                           ;maincode2.c: 41:     ESCRIBE_MENSAJE("Lectura del A/D", 15);
   297  0008D0  0E01               	movlw	low STR_1
   298  0008D2  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   299  0008D4  0E08               	movlw	high STR_1
   300  0008D6  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   301  0008D8  0E0F               	movlw	15
   302  0008DA  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   303  0008DC  EC7D  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   304  0008E0                     l1134:
   305                           
   306                           ;maincode2.c: 43:         ADCON0bits.GODONE = 1;
   307  0008E0  82C2               	bsf	194,1,c	;volatile
   308  0008E2                     l133:
   309  0008E2  B2C2               	btfsc	194,1,c	;volatile
   310  0008E4  EF76  F004         	goto	u281
   311  0008E8  EF78  F004         	goto	u280
   312  0008EC                     u281:
   313  0008EC  EF71  F004         	goto	l133
   314  0008F0                     u280:
   315  0008F0                     
   316                           ;maincode2.c: 45:         resultado_adc = (ADRESH << 8) + ADRESL;
   317  0008F0  50C4               	movf	196,w,c	;volatile
   318  0008F2  6E10               	movwf	(??_main+1)^0,c
   319  0008F4  6A0F               	clrf	??_main^0,c
   320  0008F6  50C3               	movf	195,w,c	;volatile
   321  0008F8  240F               	addwf	??_main^0,w,c
   322  0008FA  6E19               	movwf	_resultado_adc^0,c
   323  0008FC  0E00               	movlw	0
   324  0008FE  2010               	addwfc	(??_main+1)^0,w,c
   325  000900  6E1A               	movwf	(_resultado_adc+1)^0,c
   326  000902                     
   327                           ;maincode2.c: 46:         convierte(resultado_adc);
   328  000902  C019  F00D         	movff	_resultado_adc,convierte@numero
   329  000906  C01A  F00E         	movff	_resultado_adc+1,convierte@numero+1
   330  00090A  EC0C  F004         	call	_convierte	;wreg free
   331  00090E                     
   332                           ;maincode2.c: 47:         POS_CURSOR(2,0);
   333  00090E  0E00               	movlw	0
   334  000910  6E04               	movwf	POS_CURSOR@columna^0,c
   335  000912  0E02               	movlw	2
   336  000914  EC9C  F005         	call	_POS_CURSOR
   337  000918                     
   338                           ;maincode2.c: 48:         ESCRIBE_MENSAJE("AN0:", 4);
   339  000918  0E11               	movlw	low STR_2
   340  00091A  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   341  00091C  0E08               	movlw	high STR_2
   342  00091E  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   343  000920  0E04               	movlw	4
   344  000922  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   345  000924  EC7D  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   346  000928                     
   347                           ;maincode2.c: 49:         ENVIA_CHAR(millar+0x30);
   348  000928  5017               	movf	_millar^0,w,c
   349  00092A  0F30               	addlw	48
   350  00092C  ECD3  F005         	call	_ENVIA_CHAR
   351  000930                     
   352                           ;maincode2.c: 50:         ENVIA_CHAR(centena+0x30);
   353  000930  5015               	movf	_centena^0,w,c
   354  000932  0F30               	addlw	48
   355  000934  ECD3  F005         	call	_ENVIA_CHAR
   356  000938                     
   357                           ;maincode2.c: 51:         ENVIA_CHAR(decena+0x30);
   358  000938  5013               	movf	_decena^0,w,c
   359  00093A  0F30               	addlw	48
   360  00093C  ECD3  F005         	call	_ENVIA_CHAR
   361  000940                     
   362                           ;maincode2.c: 52:         ENVIA_CHAR(unidad+0x30);
   363  000940  5011               	movf	_unidad^0,w,c
   364  000942  0F30               	addlw	48
   365  000944  ECD3  F005         	call	_ENVIA_CHAR
   366  000948  EF70  F004         	goto	l1134
   367  00094C  EF00  F000         	goto	start
   368  000950                     __end_of_main:
   369                           	callstack 0
   370                           
   371 ;; *************** function _lcd_init *****************
   372 ;; Defined at:
   373 ;;		line 21 in file "maincode2.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;		None
   378 ;; Return value:  Size  Location     Type
   379 ;;                  1    wreg      void 
   380 ;; Registers used:
   381 ;;		wreg, status,2, status,0, cstack
   382 ;; Tracked objects:
   383 ;;		On entry : 0/0
   384 ;;		On exit  : 0/0
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   387 ;;      Params:         0       0       0       0       0       0       0       0       0
   388 ;;      Locals:         0       0       0       0       0       0       0       0       0
   389 ;;      Temps:          1       0       0       0       0       0       0       0       0
   390 ;;      Totals:         1       0       0       0       0       0       0       0       0
   391 ;;Total ram usage:        1 bytes
   392 ;; Hardware stack levels used: 1
   393 ;; Hardware stack levels required when called: 3
   394 ;; This function calls:
   395 ;;		_BORRAR_LCD
   396 ;;		_CURSOR_HOME
   397 ;;		_CURSOR_ONOFF
   398 ;;		_LCD_CONFIG
   399 ;; This function is called by:
   400 ;;		_main
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404                           	psect	text1
   405  000C0A                     __ptext1:
   406                           	callstack 0
   407  000C0A                     _lcd_init:
   408                           	callstack 27
   409  000C0A                     
   410                           ;maincode2.c: 22:     TRISD = 0x00;
   411  000C0A  0E00               	movlw	0
   412  000C0C  6E95               	movwf	149,c	;volatile
   413  000C0E                     
   414                           ;maincode2.c: 23:     LCD_CONFIG();
   415  000C0E  EC4D  F005         	call	_LCD_CONFIG	;wreg free
   416  000C12                     
   417                           ;maincode2.c: 24:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   418  000C12  0EEA               	movlw	234
   419  000C14  6E05               	movwf	??_lcd_init^0,c
   420  000C16  0EC3               	movlw	195
   421  000C18                     u297:
   422  000C18  2EE8               	decfsz	wreg,f,c
   423  000C1A  D7FE               	bra	u297
   424  000C1C  2E05               	decfsz	??_lcd_init^0,f,c
   425  000C1E  D7FC               	bra	u297
   426  000C20  F000               	nop	
   427  000C22                     
   428                           ;maincode2.c: 25:     BORRAR_LCD();
   429  000C22  EC40  F006         	call	_BORRAR_LCD	;wreg free
   430  000C26                     
   431                           ;maincode2.c: 26:     CURSOR_HOME();
   432  000C26  EC3C  F006         	call	_CURSOR_HOME	;wreg free
   433  000C2A                     
   434                           ;maincode2.c: 27:     CURSOR_ONOFF(1);
   435  000C2A  0E01               	movlw	1
   436  000C2C  ECED  F005         	call	_CURSOR_ONOFF
   437  000C30  0012               	return		;funcret
   438  000C32                     __end_of_lcd_init:
   439                           	callstack 0
   440                           
   441 ;; *************** function _LCD_CONFIG *****************
   442 ;; Defined at:
   443 ;;		line 72 in file "LCD.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;		None
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   457 ;;      Params:         0       0       0       0       0       0       0       0       0
   458 ;;      Locals:         0       0       0       0       0       0       0       0       0
   459 ;;      Temps:          1       0       0       0       0       0       0       0       0
   460 ;;      Totals:         1       0       0       0       0       0       0       0       0
   461 ;;Total ram usage:        1 bytes
   462 ;; Hardware stack levels used: 1
   463 ;; Hardware stack levels required when called: 2
   464 ;; This function calls:
   465 ;;		_ENVIA_LCD_CMD
   466 ;;		_ENVIA_NIBBLE
   467 ;; This function is called by:
   468 ;;		_lcd_init
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text2
   473  000A9A                     __ptext2:
   474                           	callstack 0
   475  000A9A                     _LCD_CONFIG:
   476                           	callstack 27
   477  000A9A                     
   478                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   479  000A9A  908C               	bcf	140,0,c	;volatile
   480                           
   481                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   482  000A9C  928C               	bcf	140,1,c	;volatile
   483  000A9E                     
   484                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   485  000A9E  0E30               	movlw	48
   486  000AA0  EC19  F006         	call	_ENVIA_NIBBLE
   487  000AA4                     
   488                           ;LCD.c: 77:         _delay(24000);
   489  000AA4  0E20               	movlw	32
   490  000AA6  6E04               	movwf	??_LCD_CONFIG^0,c
   491  000AA8  0E2A               	movlw	42
   492  000AAA                     u307:
   493  000AAA  2EE8               	decfsz	wreg,f,c
   494  000AAC  D7FE               	bra	u307
   495  000AAE  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   496  000AB0  D7FC               	bra	u307
   497  000AB2                     
   498                           ;LCD.c: 78:         _delay(24000);
   499  000AB2  0E20               	movlw	32
   500  000AB4  6E04               	movwf	??_LCD_CONFIG^0,c
   501  000AB6  0E2A               	movlw	42
   502  000AB8                     u317:
   503  000AB8  2EE8               	decfsz	wreg,f,c
   504  000ABA  D7FE               	bra	u317
   505  000ABC  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   506  000ABE  D7FC               	bra	u317
   507                           
   508                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   509  000AC0  0E30               	movlw	48
   510  000AC2  EC19  F006         	call	_ENVIA_NIBBLE
   511  000AC6                     
   512                           ;LCD.c: 83:  _delay(1200);
   513  000AC6  0EF0               	movlw	240
   514  000AC8                     u327:
   515  000AC8  D000               	nop2	
   516  000ACA  2EE8               	decfsz	wreg,f,c
   517  000ACC  D7FD               	bra	u327
   518  000ACE                     
   519                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   520  000ACE  0E30               	movlw	48
   521  000AD0  EC19  F006         	call	_ENVIA_NIBBLE
   522  000AD4                     
   523                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   524  000AD4  0E20               	movlw	32
   525  000AD6  EC19  F006         	call	_ENVIA_NIBBLE
   526  000ADA                     
   527                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   528  000ADA  0E01               	movlw	1
   529  000ADC  ECB9  F005         	call	_ENVIA_LCD_CMD
   530  000AE0                     
   531                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   532  000AE0  0E28               	movlw	40
   533  000AE2  ECB9  F005         	call	_ENVIA_LCD_CMD
   534  000AE6                     
   535                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   536  000AE6  0E0F               	movlw	15
   537  000AE8  ECB9  F005         	call	_ENVIA_LCD_CMD
   538  000AEC                     
   539                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   540  000AEC  0E06               	movlw	6
   541  000AEE  ECB9  F005         	call	_ENVIA_LCD_CMD
   542  000AF2                     
   543                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   544  000AF2  0E01               	movlw	1
   545  000AF4  ECB9  F005         	call	_ENVIA_LCD_CMD
   546  000AF8  0012               	return		;funcret
   547  000AFA                     __end_of_LCD_CONFIG:
   548                           	callstack 0
   549                           
   550 ;; *************** function _CURSOR_ONOFF *****************
   551 ;; Defined at:
   552 ;;		line 35 in file "LCD.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  estado          1    wreg     unsigned char 
   555 ;; Auto vars:     Size  Location     Type
   556 ;;  estado          1    3[COMRAM] unsigned char 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, status,2, status,0, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   566 ;;      Params:         0       0       0       0       0       0       0       0       0
   567 ;;      Locals:         1       0       0       0       0       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0       0       0       0       0
   569 ;;      Totals:         1       0       0       0       0       0       0       0       0
   570 ;;Total ram usage:        1 bytes
   571 ;; Hardware stack levels used: 1
   572 ;; Hardware stack levels required when called: 2
   573 ;; This function calls:
   574 ;;		_ENVIA_LCD_CMD
   575 ;; This function is called by:
   576 ;;		_lcd_init
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text3
   581  000BDA                     __ptext3:
   582                           	callstack 0
   583  000BDA                     _CURSOR_ONOFF:
   584                           	callstack 27
   585                           
   586                           ;incstack = 0
   587                           ;CURSOR_ONOFF@estado stored from wreg
   588  000BDA  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   589  000BDC                     
   590                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   591  000BDC  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   592  000BDE  A4D8               	btfss	status,2,c
   593  000BE0  EFF4  F005         	goto	u21
   594  000BE4  EFF6  F005         	goto	u20
   595  000BE8                     u21:
   596  000BE8  EFF9  F005         	goto	l888
   597  000BEC                     u20:
   598  000BEC  0E0E               	movlw	14
   599  000BEE  ECB9  F005         	call	_ENVIA_LCD_CMD
   600  000BF2                     l888:
   601                           
   602                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   603  000BF2  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   604  000BF4  A4D8               	btfss	status,2,c
   605  000BF6  EFFF  F005         	goto	u31
   606  000BFA  EF01  F006         	goto	u30
   607  000BFE                     u31:
   608  000BFE  EF04  F006         	goto	l42
   609  000C02                     u30:
   610  000C02  0E0C               	movlw	12
   611  000C04  ECB9  F005         	call	_ENVIA_LCD_CMD
   612  000C08                     l42:
   613  000C08  0012               	return		;funcret
   614  000C0A                     __end_of_CURSOR_ONOFF:
   615                           	callstack 0
   616                           
   617 ;; *************** function _CURSOR_HOME *****************
   618 ;; Defined at:
   619 ;;		line 30 in file "LCD.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;		None
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, status,2, status,0, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   633 ;;      Params:         0       0       0       0       0       0       0       0       0
   634 ;;      Locals:         0       0       0       0       0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0       0       0
   636 ;;      Totals:         0       0       0       0       0       0       0       0       0
   637 ;;Total ram usage:        0 bytes
   638 ;; Hardware stack levels used: 1
   639 ;; Hardware stack levels required when called: 2
   640 ;; This function calls:
   641 ;;		_ENVIA_LCD_CMD
   642 ;; This function is called by:
   643 ;;		_lcd_init
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           	psect	text4
   648  000C78                     __ptext4:
   649                           	callstack 0
   650  000C78                     _CURSOR_HOME:
   651                           	callstack 27
   652  000C78                     
   653                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   654  000C78  0E02               	movlw	2
   655  000C7A  ECB9  F005         	call	_ENVIA_LCD_CMD
   656  000C7E  0012               	return		;funcret
   657  000C80                     __end_of_CURSOR_HOME:
   658                           	callstack 0
   659                           
   660 ;; *************** function _BORRAR_LCD *****************
   661 ;; Defined at:
   662 ;;		line 67 in file "LCD.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;		None
   665 ;; Auto vars:     Size  Location     Type
   666 ;;		None
   667 ;; Return value:  Size  Location     Type
   668 ;;                  1    wreg      void 
   669 ;; Registers used:
   670 ;;		wreg, status,2, status,0, cstack
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   676 ;;      Params:         0       0       0       0       0       0       0       0       0
   677 ;;      Locals:         0       0       0       0       0       0       0       0       0
   678 ;;      Temps:          0       0       0       0       0       0       0       0       0
   679 ;;      Totals:         0       0       0       0       0       0       0       0       0
   680 ;;Total ram usage:        0 bytes
   681 ;; Hardware stack levels used: 1
   682 ;; Hardware stack levels required when called: 2
   683 ;; This function calls:
   684 ;;		_ENVIA_LCD_CMD
   685 ;; This function is called by:
   686 ;;		_lcd_init
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text5
   691  000C80                     __ptext5:
   692                           	callstack 0
   693  000C80                     _BORRAR_LCD:
   694                           	callstack 27
   695  000C80                     
   696                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   697  000C80  0E01               	movlw	1
   698  000C82  ECB9  F005         	call	_ENVIA_LCD_CMD
   699  000C86  0012               	return		;funcret
   700  000C88                     __end_of_BORRAR_LCD:
   701                           	callstack 0
   702                           
   703 ;; *************** function _init_conf *****************
   704 ;; Defined at:
   705 ;;		line 14 in file "maincode2.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, status,2
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   719 ;;      Params:         0       0       0       0       0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0       0       0       0       0
   722 ;;      Totals:         0       0       0       0       0       0       0       0       0
   723 ;;Total ram usage:        0 bytes
   724 ;; Hardware stack levels used: 1
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text6
   733  000C68                     __ptext6:
   734                           	callstack 0
   735  000C68                     _init_conf:
   736                           	callstack 30
   737  000C68                     
   738                           ;maincode2.c: 15:     TRISCbits.RC2 = 0;
   739  000C68  9494               	bcf	148,2,c	;volatile
   740  000C6A                     
   741                           ;maincode2.c: 16:     ADCON2 = 0xA4;
   742  000C6A  0EA4               	movlw	164
   743  000C6C  6EC0               	movwf	192,c	;volatile
   744                           
   745                           ;maincode2.c: 17:     ADCON1 = 0x0E;
   746  000C6E  0E0E               	movlw	14
   747  000C70  6EC1               	movwf	193,c	;volatile
   748                           
   749                           ;maincode2.c: 18:     ADCON0 = 0x01;
   750  000C72  0E01               	movlw	1
   751  000C74  6EC2               	movwf	194,c	;volatile
   752  000C76  0012               	return		;funcret
   753  000C78                     __end_of_init_conf:
   754                           	callstack 0
   755                           
   756 ;; *************** function _convierte *****************
   757 ;; Defined at:
   758 ;;		line 30 in file "maincode2.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  numero          2   12[COMRAM] unsigned int 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   772 ;;      Params:         2       0       0       0       0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0       0       0
   775 ;;      Totals:         2       0       0       0       0       0       0       0       0
   776 ;;Total ram usage:        2 bytes
   777 ;; Hardware stack levels used: 1
   778 ;; Hardware stack levels required when called: 1
   779 ;; This function calls:
   780 ;;		___lwdiv
   781 ;;		___lwmod
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text7
   788  000818                     __ptext7:
   789                           	callstack 0
   790  000818                     _convierte:
   791                           	callstack 29
   792  000818                     
   793                           ;maincode2.c: 31:     millar = (numero %10000) /1000;
   794  000818  0E27               	movlw	39
   795  00081A  6E04               	movwf	(___lwmod@divisor+1)^0,c
   796  00081C  0E10               	movlw	16
   797  00081E  6E03               	movwf	___lwmod@divisor^0,c
   798  000820  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   799  000824  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   800  000828  EC1B  F005         	call	___lwmod	;wreg free
   801  00082C  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   802  000830  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   803  000834  0E03               	movlw	3
   804  000836  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   805  000838  0EE8               	movlw	232
   806  00083A  6E08               	movwf	___lwdiv@divisor^0,c
   807  00083C  ECA8  F004         	call	___lwdiv	;wreg free
   808  000840  C006  F017         	movff	?___lwdiv,_millar
   809  000844  C007  F018         	movff	?___lwdiv+1,_millar+1
   810                           
   811                           ;maincode2.c: 32:     centena = (numero % 1000) / 100;
   812  000848  0E03               	movlw	3
   813  00084A  6E04               	movwf	(___lwmod@divisor+1)^0,c
   814  00084C  0EE8               	movlw	232
   815  00084E  6E03               	movwf	___lwmod@divisor^0,c
   816  000850  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   817  000854  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   818  000858  EC1B  F005         	call	___lwmod	;wreg free
   819  00085C  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   820  000860  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   821  000864  0E00               	movlw	0
   822  000866  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   823  000868  0E64               	movlw	100
   824  00086A  6E08               	movwf	___lwdiv@divisor^0,c
   825  00086C  ECA8  F004         	call	___lwdiv	;wreg free
   826  000870  C006  F015         	movff	?___lwdiv,_centena
   827  000874  C007  F016         	movff	?___lwdiv+1,_centena+1
   828                           
   829                           ;maincode2.c: 33:     decena = (numero % 100) / 10;
   830  000878  0E00               	movlw	0
   831  00087A  6E04               	movwf	(___lwmod@divisor+1)^0,c
   832  00087C  0E64               	movlw	100
   833  00087E  6E03               	movwf	___lwmod@divisor^0,c
   834  000880  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   835  000884  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   836  000888  EC1B  F005         	call	___lwmod	;wreg free
   837  00088C  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   838  000890  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   839  000894  0E00               	movlw	0
   840  000896  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   841  000898  0E0A               	movlw	10
   842  00089A  6E08               	movwf	___lwdiv@divisor^0,c
   843  00089C  ECA8  F004         	call	___lwdiv	;wreg free
   844  0008A0  C006  F013         	movff	?___lwdiv,_decena
   845  0008A4  C007  F014         	movff	?___lwdiv+1,_decena+1
   846                           
   847                           ;maincode2.c: 34:     unidad = numero % 10;
   848  0008A8  C00D  F001         	movff	convierte@numero,___lwmod@dividend
   849  0008AC  C00E  F002         	movff	convierte@numero+1,___lwmod@dividend+1
   850  0008B0  0E00               	movlw	0
   851  0008B2  6E04               	movwf	(___lwmod@divisor+1)^0,c
   852  0008B4  0E0A               	movlw	10
   853  0008B6  6E03               	movwf	___lwmod@divisor^0,c
   854  0008B8  EC1B  F005         	call	___lwmod	;wreg free
   855  0008BC  C001  F011         	movff	?___lwmod,_unidad
   856  0008C0  C002  F012         	movff	?___lwmod+1,_unidad+1
   857  0008C4  0012               	return		;funcret
   858  0008C6                     __end_of_convierte:
   859                           	callstack 0
   860                           
   861 ;; *************** function ___lwmod *****************
   862 ;; Defined at:
   863 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  dividend        2    0[COMRAM] unsigned int 
   866 ;;  divisor         2    2[COMRAM] unsigned int 
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  counter         1    4[COMRAM] unsigned char 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  2    0[COMRAM] unsigned int 
   871 ;; Registers used:
   872 ;;		wreg, status,2, status,0
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   878 ;;      Params:         4       0       0       0       0       0       0       0       0
   879 ;;      Locals:         1       0       0       0       0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0
   881 ;;      Totals:         5       0       0       0       0       0       0       0       0
   882 ;;Total ram usage:        5 bytes
   883 ;; Hardware stack levels used: 1
   884 ;; This function calls:
   885 ;;		Nothing
   886 ;; This function is called by:
   887 ;;		_convierte
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text8
   892  000A36                     __ptext8:
   893                           	callstack 0
   894  000A36                     ___lwmod:
   895                           	callstack 29
   896  000A36  5003               	movf	___lwmod@divisor^0,w,c
   897  000A38  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   898  000A3A  B4D8               	btfsc	status,2,c
   899  000A3C  EF22  F005         	goto	u221
   900  000A40  EF24  F005         	goto	u220
   901  000A44                     u221:
   902  000A44  EF48  F005         	goto	l642
   903  000A48                     u220:
   904  000A48  0E01               	movlw	1
   905  000A4A  6E05               	movwf	___lwmod@counter^0,c
   906  000A4C  EF2C  F005         	goto	l1098
   907  000A50                     l1096:
   908  000A50  90D8               	bcf	status,0,c
   909  000A52  3603               	rlcf	___lwmod@divisor^0,f,c
   910  000A54  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   911  000A56  2A05               	incf	___lwmod@counter^0,f,c
   912  000A58                     l1098:
   913  000A58  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   914  000A5A  EF31  F005         	goto	u231
   915  000A5E  EF33  F005         	goto	u230
   916  000A62                     u231:
   917  000A62  EF28  F005         	goto	l1096
   918  000A66                     u230:
   919  000A66                     l1100:
   920  000A66  5003               	movf	___lwmod@divisor^0,w,c
   921  000A68  5C01               	subwf	___lwmod@dividend^0,w,c
   922  000A6A  5004               	movf	(___lwmod@divisor+1)^0,w,c
   923  000A6C  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   924  000A6E  A0D8               	btfss	status,0,c
   925  000A70  EF3C  F005         	goto	u241
   926  000A74  EF3E  F005         	goto	u240
   927  000A78                     u241:
   928  000A78  EF42  F005         	goto	l1104
   929  000A7C                     u240:
   930  000A7C  5003               	movf	___lwmod@divisor^0,w,c
   931  000A7E  5E01               	subwf	___lwmod@dividend^0,f,c
   932  000A80  5004               	movf	(___lwmod@divisor+1)^0,w,c
   933  000A82  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   934  000A84                     l1104:
   935  000A84  90D8               	bcf	status,0,c
   936  000A86  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   937  000A88  3203               	rrcf	___lwmod@divisor^0,f,c
   938  000A8A  2E05               	decfsz	___lwmod@counter^0,f,c
   939  000A8C  EF33  F005         	goto	l1100
   940  000A90                     l642:
   941  000A90  C001  F001         	movff	___lwmod@dividend,?___lwmod
   942  000A94  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   943  000A98  0012               	return		;funcret
   944  000A9A                     __end_of___lwmod:
   945                           	callstack 0
   946                           
   947 ;; *************** function ___lwdiv *****************
   948 ;; Defined at:
   949 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  dividend        2    5[COMRAM] unsigned int 
   952 ;;  divisor         2    7[COMRAM] unsigned int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  quotient        2    9[COMRAM] unsigned int 
   955 ;;  counter         1   11[COMRAM] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2    5[COMRAM] unsigned int 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   965 ;;      Params:         4       0       0       0       0       0       0       0       0
   966 ;;      Locals:         3       0       0       0       0       0       0       0       0
   967 ;;      Temps:          0       0       0       0       0       0       0       0       0
   968 ;;      Totals:         7       0       0       0       0       0       0       0       0
   969 ;;Total ram usage:        7 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_convierte
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text9
   979  000950                     __ptext9:
   980                           	callstack 0
   981  000950                     ___lwdiv:
   982                           	callstack 29
   983  000950  0E00               	movlw	0
   984  000952  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   985  000954  0E00               	movlw	0
   986  000956  6E0A               	movwf	___lwdiv@quotient^0,c
   987  000958  5008               	movf	___lwdiv@divisor^0,w,c
   988  00095A  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   989  00095C  B4D8               	btfsc	status,2,c
   990  00095E  EFB3  F004         	goto	u191
   991  000962  EFB5  F004         	goto	u190
   992  000966                     u191:
   993  000966  EFDD  F004         	goto	l632
   994  00096A                     u190:
   995  00096A  0E01               	movlw	1
   996  00096C  6E0C               	movwf	___lwdiv@counter^0,c
   997  00096E  EFBD  F004         	goto	l1078
   998  000972                     l1076:
   999  000972  90D8               	bcf	status,0,c
  1000  000974  3608               	rlcf	___lwdiv@divisor^0,f,c
  1001  000976  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1002  000978  2A0C               	incf	___lwdiv@counter^0,f,c
  1003  00097A                     l1078:
  1004  00097A  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  1005  00097C  EFC2  F004         	goto	u201
  1006  000980  EFC4  F004         	goto	u200
  1007  000984                     u201:
  1008  000984  EFB9  F004         	goto	l1076
  1009  000988                     u200:
  1010  000988                     l1080:
  1011  000988  90D8               	bcf	status,0,c
  1012  00098A  360A               	rlcf	___lwdiv@quotient^0,f,c
  1013  00098C  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1014  00098E  5008               	movf	___lwdiv@divisor^0,w,c
  1015  000990  5C06               	subwf	___lwdiv@dividend^0,w,c
  1016  000992  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1017  000994  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1018  000996  A0D8               	btfss	status,0,c
  1019  000998  EFD0  F004         	goto	u211
  1020  00099C  EFD2  F004         	goto	u210
  1021  0009A0                     u211:
  1022  0009A0  EFD7  F004         	goto	l1088
  1023  0009A4                     u210:
  1024  0009A4  5008               	movf	___lwdiv@divisor^0,w,c
  1025  0009A6  5E06               	subwf	___lwdiv@dividend^0,f,c
  1026  0009A8  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1027  0009AA  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1028  0009AC  800A               	bsf	___lwdiv@quotient^0,0,c
  1029  0009AE                     l1088:
  1030  0009AE  90D8               	bcf	status,0,c
  1031  0009B0  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1032  0009B2  3208               	rrcf	___lwdiv@divisor^0,f,c
  1033  0009B4  2E0C               	decfsz	___lwdiv@counter^0,f,c
  1034  0009B6  EFC4  F004         	goto	l1080
  1035  0009BA                     l632:
  1036  0009BA  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1037  0009BE  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1038  0009C2  0012               	return		;funcret
  1039  0009C4                     __end_of___lwdiv:
  1040                           	callstack 0
  1041                           
  1042 ;; *************** function _POS_CURSOR *****************
  1043 ;; Defined at:
  1044 ;;		line 6 in file "LCD.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  fila            1    wreg     unsigned char 
  1047 ;;  columna         1    3[COMRAM] unsigned char 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  fila            1    4[COMRAM] unsigned char 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, status,2, status,0, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1059 ;;      Params:         1       0       0       0       0       0       0       0       0
  1060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1062 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1063 ;;Total ram usage:        2 bytes
  1064 ;; Hardware stack levels used: 1
  1065 ;; Hardware stack levels required when called: 2
  1066 ;; This function calls:
  1067 ;;		_ENVIA_LCD_CMD
  1068 ;; This function is called by:
  1069 ;;		_main
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           	psect	text10
  1074  000B38                     __ptext10:
  1075                           	callstack 0
  1076  000B38                     _POS_CURSOR:
  1077                           	callstack 28
  1078                           
  1079                           ;incstack = 0
  1080                           ;POS_CURSOR@fila stored from wreg
  1081  000B38  6E05               	movwf	POS_CURSOR@fila^0,c
  1082  000B3A                     
  1083                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1084  000B3A  0405               	decf	POS_CURSOR@fila^0,w,c
  1085  000B3C  A4D8               	btfss	status,2,c
  1086  000B3E  EFA3  F005         	goto	u251
  1087  000B42  EFA5  F005         	goto	u250
  1088  000B46                     u251:
  1089  000B46  EFAB  F005         	goto	l1112
  1090  000B4A                     u250:
  1091  000B4A                     
  1092                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1093  000B4A  5004               	movf	POS_CURSOR@columna^0,w,c
  1094  000B4C  0F80               	addlw	128
  1095  000B4E  ECB9  F005         	call	_ENVIA_LCD_CMD
  1096                           
  1097                           ;LCD.c: 11:  }
  1098  000B52  EFB8  F005         	goto	l24
  1099  000B56                     l1112:
  1100  000B56  0E02               	movlw	2
  1101  000B58  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1102  000B5A  A4D8               	btfss	status,2,c
  1103  000B5C  EFB2  F005         	goto	u261
  1104  000B60  EFB4  F005         	goto	u260
  1105  000B64                     u261:
  1106  000B64  EFB8  F005         	goto	l24
  1107  000B68                     u260:
  1108  000B68                     
  1109                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1110  000B68  5004               	movf	POS_CURSOR@columna^0,w,c
  1111  000B6A  0FC0               	addlw	192
  1112  000B6C  ECB9  F005         	call	_ENVIA_LCD_CMD
  1113  000B70                     l24:
  1114  000B70  0012               	return		;funcret
  1115  000B72                     __end_of_POS_CURSOR:
  1116                           	callstack 0
  1117                           
  1118 ;; *************** function _ENVIA_LCD_CMD *****************
  1119 ;; Defined at:
  1120 ;;		line 104 in file "LCD.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  dato            1    wreg     unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  dato            1    1[COMRAM] unsigned char 
  1125 ;;  aux             1    2[COMRAM] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg, status,2, status,0, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1135 ;;      Params:         0       0       0       0       0       0       0       0       0
  1136 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1138 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1139 ;;Total ram usage:        2 bytes
  1140 ;; Hardware stack levels used: 1
  1141 ;; Hardware stack levels required when called: 1
  1142 ;; This function calls:
  1143 ;;		_ENVIA_NIBBLE
  1144 ;;		_LEER_LCD
  1145 ;; This function is called by:
  1146 ;;		_POS_CURSOR
  1147 ;;		_CURSOR_HOME
  1148 ;;		_CURSOR_ONOFF
  1149 ;;		_BORRAR_LCD
  1150 ;;		_LCD_CONFIG
  1151 ;;		_BLINK_CURSOR
  1152 ;;		_DISPLAY_ONOFF
  1153 ;;		_GENERACARACTER
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text11
  1158  000B72                     __ptext11:
  1159                           	callstack 0
  1160  000B72                     _ENVIA_LCD_CMD:
  1161                           	callstack 27
  1162                           
  1163                           ;incstack = 0
  1164                           ;ENVIA_LCD_CMD@dato stored from wreg
  1165  000B72  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1166  000B74                     
  1167                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1168  000B74  908C               	bcf	140,0,c	;volatile
  1169  000B76                     
  1170                           ;LCD.c: 108:  LEER_LCD();
  1171  000B76  ECE2  F004         	call	_LEER_LCD	;wreg free
  1172  000B7A                     
  1173                           ;LCD.c: 109:  TRISD = 0b00000000;
  1174  000B7A  0E00               	movlw	0
  1175  000B7C  6E95               	movwf	149,c	;volatile
  1176  000B7E                     
  1177                           ;LCD.c: 111:         _delay(1200);
  1178  000B7E  0EF0               	movlw	240
  1179  000B80                     u337:
  1180  000B80  D000               	nop2	
  1181  000B82  2EE8               	decfsz	wreg,f,c
  1182  000B84  D7FD               	bra	u337
  1183  000B86                     
  1184                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1185  000B86  928C               	bcf	140,1,c	;volatile
  1186  000B88                     
  1187                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1188  000B88  948C               	bcf	140,2,c	;volatile
  1189  000B8A                     
  1190                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1191  000B8A  908C               	bcf	140,0,c	;volatile
  1192  000B8C                     
  1193                           ;LCD.c: 115:  aux = dato & 0xF0;
  1194  000B8C  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1195  000B8E  0BF0               	andlw	240
  1196  000B90  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1197  000B92                     
  1198                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1199  000B92  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1200  000B94  EC19  F006         	call	_ENVIA_NIBBLE
  1201  000B98                     
  1202                           ;LCD.c: 117:  aux = dato<<4;
  1203  000B98  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1204  000B9A  0BF0               	andlw	240
  1205  000B9C  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1206  000B9E                     
  1207                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1208  000B9E  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1209  000BA0  EC19  F006         	call	_ENVIA_NIBBLE
  1210  000BA4  0012               	return		;funcret
  1211  000BA6                     __end_of_ENVIA_LCD_CMD:
  1212                           	callstack 0
  1213                           
  1214 ;; *************** function _ESCRIBE_MENSAJE *****************
  1215 ;; Defined at:
  1216 ;;		line 41 in file "LCD.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1219 ;;		 -> STR_2(5), STR_1(16), 
  1220 ;;  tam             1    5[COMRAM] unsigned char 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  i               1    8[COMRAM] unsigned char 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1232 ;;      Params:         3       0       0       0       0       0       0       0       0
  1233 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1234 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1235 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1236 ;;Total ram usage:        6 bytes
  1237 ;; Hardware stack levels used: 1
  1238 ;; Hardware stack levels required when called: 2
  1239 ;; This function calls:
  1240 ;;		_ENVIA_CHAR
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text12
  1247  000AFA                     __ptext12:
  1248                           	callstack 0
  1249  000AFA                     _ESCRIBE_MENSAJE:
  1250                           	callstack 28
  1251  000AFA                     
  1252                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1253  000AFA  0E00               	movlw	0
  1254  000AFC  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1255                           
  1256                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1257  000AFE  0E00               	movlw	0
  1258  000B00  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1259  000B02  EF92  F005         	goto	l1122
  1260  000B06                     l1118:
  1261                           
  1262                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1263  000B06  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1264  000B08  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1265  000B0A  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1266  000B0C  0E00               	movlw	0
  1267  000B0E  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1268  000B10  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1269  000B12  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1270  000B16  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1271  000B1A                     	if	0	;tblptru may be non-zero
  1272  000B1A                     	endif
  1273  000B1A                     	if	0	;tblptru may be non-zero
  1274  000B1A                     	endif
  1275  000B1A  0008               	tblrd		*
  1276  000B1C  50F5               	movf	tablat,w,c
  1277  000B1E  ECD3  F005         	call	_ENVIA_CHAR
  1278  000B22                     
  1279                           ;LCD.c: 47:  }
  1280  000B22  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1281  000B24                     l1122:
  1282  000B24  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1283  000B26  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1284  000B28  A0D8               	btfss	status,0,c
  1285  000B2A  EF99  F005         	goto	u271
  1286  000B2E  EF9B  F005         	goto	u270
  1287  000B32                     u271:
  1288  000B32  EF83  F005         	goto	l1118
  1289  000B36                     u270:
  1290  000B36  0012               	return		;funcret
  1291  000B38                     __end_of_ESCRIBE_MENSAJE:
  1292                           	callstack 0
  1293                           
  1294 ;; *************** function _ENVIA_CHAR *****************
  1295 ;; Defined at:
  1296 ;;		line 50 in file "LCD.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  dato            1    wreg     unsigned char 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  dato            1    1[COMRAM] unsigned char 
  1301 ;;  aux             1    2[COMRAM] unsigned char 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0, cstack
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1311 ;;      Params:         0       0       0       0       0       0       0       0       0
  1312 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1314 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1315 ;;Total ram usage:        2 bytes
  1316 ;; Hardware stack levels used: 1
  1317 ;; Hardware stack levels required when called: 1
  1318 ;; This function calls:
  1319 ;;		_ENVIA_NIBBLE
  1320 ;;		_LEER_LCD
  1321 ;; This function is called by:
  1322 ;;		_ESCRIBE_MENSAJE
  1323 ;;		_main
  1324 ;;		_GENERACARACTER
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text13
  1329  000BA6                     __ptext13:
  1330                           	callstack 0
  1331  000BA6                     _ENVIA_CHAR:
  1332                           	callstack 28
  1333                           
  1334                           ;incstack = 0
  1335                           ;ENVIA_CHAR@dato stored from wreg
  1336  000BA6  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1337  000BA8                     
  1338                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1339  000BA8  808C               	bsf	140,0,c	;volatile
  1340  000BAA                     
  1341                           ;LCD.c: 54:  LEER_LCD();
  1342  000BAA  ECE2  F004         	call	_LEER_LCD	;wreg free
  1343  000BAE                     
  1344                           ;LCD.c: 55:  TRISD = 0x00;
  1345  000BAE  0E00               	movlw	0
  1346  000BB0  6E95               	movwf	149,c	;volatile
  1347  000BB2                     
  1348                           ;LCD.c: 56:         _delay(1200);
  1349  000BB2  0EF0               	movlw	240
  1350  000BB4                     u347:
  1351  000BB4  D000               	nop2	
  1352  000BB6  2EE8               	decfsz	wreg,f,c
  1353  000BB8  D7FD               	bra	u347
  1354  000BBA                     
  1355                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1356  000BBA  928C               	bcf	140,1,c	;volatile
  1357  000BBC                     
  1358                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1359  000BBC  948C               	bcf	140,2,c	;volatile
  1360  000BBE                     
  1361                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1362  000BBE  808C               	bsf	140,0,c	;volatile
  1363  000BC0                     
  1364                           ;LCD.c: 61:  aux = dato & 0xF0;
  1365  000BC0  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1366  000BC2  0BF0               	andlw	240
  1367  000BC4  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1368  000BC6                     
  1369                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1370  000BC6  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1371  000BC8  EC19  F006         	call	_ENVIA_NIBBLE
  1372  000BCC                     
  1373                           ;LCD.c: 63:  aux = dato << 4;
  1374  000BCC  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1375  000BCE  0BF0               	andlw	240
  1376  000BD0  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1377  000BD2                     
  1378                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1379  000BD2  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1380  000BD4  EC19  F006         	call	_ENVIA_NIBBLE
  1381  000BD8  0012               	return		;funcret
  1382  000BDA                     __end_of_ENVIA_CHAR:
  1383                           	callstack 0
  1384                           
  1385 ;; *************** function _LEER_LCD *****************
  1386 ;; Defined at:
  1387 ;;		line 121 in file "LCD.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  aux             1    0[COMRAM] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, status,2, status,0
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0
  1402 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1404 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1405 ;;Total ram usage:        1 bytes
  1406 ;; Hardware stack levels used: 1
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_ENVIA_CHAR
  1411 ;;		_ENVIA_LCD_CMD
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text14
  1416  0009C4                     __ptext14:
  1417                           	callstack 0
  1418  0009C4                     _LEER_LCD:
  1419                           	callstack 27
  1420  0009C4                     
  1421                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1422  0009C4  0EF8               	movlw	248
  1423  0009C6  6E95               	movwf	149,c	;volatile
  1424  0009C8                     
  1425                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1426  0009C8  908C               	bcf	140,0,c	;volatile
  1427  0009CA                     
  1428                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1429  0009CA  828C               	bsf	140,1,c	;volatile
  1430  0009CC                     
  1431                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1432  0009CC  848C               	bsf	140,2,c	;volatile
  1433  0009CE                     
  1434                           ;LCD.c: 128:         _delay(1200);
  1435  0009CE  0EF0               	movlw	240
  1436  0009D0                     u357:
  1437  0009D0  D000               	nop2	
  1438  0009D2  2EE8               	decfsz	wreg,f,c
  1439  0009D4  D7FD               	bra	u357
  1440  0009D6                     
  1441                           ;LCD.c: 130:  aux = PORTD;
  1442  0009D6  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1443  0009DA                     
  1444                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1445  0009DA  948C               	bcf	140,2,c	;volatile
  1446  0009DC                     
  1447                           ;LCD.c: 132:         _delay(1200);
  1448  0009DC  0EF0               	movlw	240
  1449  0009DE                     u367:
  1450  0009DE  D000               	nop2	
  1451  0009E0  2EE8               	decfsz	wreg,f,c
  1452  0009E2  D7FD               	bra	u367
  1453  0009E4                     
  1454                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1455  0009E4  848C               	bsf	140,2,c	;volatile
  1456  0009E6                     
  1457                           ;LCD.c: 135:         _delay(1200);
  1458  0009E6  0EF0               	movlw	240
  1459  0009E8                     u377:
  1460  0009E8  D000               	nop2	
  1461  0009EA  2EE8               	decfsz	wreg,f,c
  1462  0009EC  D7FD               	bra	u377
  1463  0009EE                     
  1464                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1465  0009EE  948C               	bcf	140,2,c	;volatile
  1466  0009F0                     l836:
  1467                           
  1468                           ;LCD.c: 138:  aux = aux & 0x80;
  1469  0009F0  5001               	movf	LEER_LCD@aux^0,w,c
  1470  0009F2  0B80               	andlw	128
  1471  0009F4  6E01               	movwf	LEER_LCD@aux^0,c
  1472                           
  1473                           ;LCD.c: 139:  while(aux == 0x80)
  1474  0009F6  EF11  F005         	goto	l850
  1475  0009FA                     l67:
  1476                           
  1477                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1478  0009FA  848C               	bsf	140,2,c	;volatile
  1479  0009FC                     
  1480                           ;LCD.c: 142:             _delay(1200);
  1481  0009FC  0EF0               	movlw	240
  1482  0009FE                     u387:
  1483  0009FE  D000               	nop2	
  1484  000A00  2EE8               	decfsz	wreg,f,c
  1485  000A02  D7FD               	bra	u387
  1486  000A04                     
  1487                           ;LCD.c: 143:             aux = PORTD;
  1488  000A04  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1489  000A08                     
  1490                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1491  000A08  948C               	bcf	140,2,c	;volatile
  1492                           
  1493                           ;LCD.c: 145:             _delay(1200);
  1494  000A0A  0EF0               	movlw	240
  1495  000A0C                     u397:
  1496  000A0C  D000               	nop2	
  1497  000A0E  2EE8               	decfsz	wreg,f,c
  1498  000A10  D7FD               	bra	u397
  1499  000A12                     
  1500                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1501  000A12  848C               	bsf	140,2,c	;volatile
  1502                           
  1503                           ;LCD.c: 147:             _delay(1200);
  1504  000A14  0EF0               	movlw	240
  1505  000A16                     u407:
  1506  000A16  D000               	nop2	
  1507  000A18  2EE8               	decfsz	wreg,f,c
  1508  000A1A  D7FD               	bra	u407
  1509  000A1C                     
  1510                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1511  000A1C  948C               	bcf	140,2,c	;volatile
  1512  000A1E  EFF8  F004         	goto	l836
  1513  000A22                     l850:
  1514                           
  1515                           ;LCD.c: 139:  while(aux == 0x80)
  1516  000A22  0E80               	movlw	128
  1517  000A24  1801               	xorwf	LEER_LCD@aux^0,w,c
  1518  000A26  B4D8               	btfsc	status,2,c
  1519  000A28  EF18  F005         	goto	u11
  1520  000A2C  EF1A  F005         	goto	u10
  1521  000A30                     u11:
  1522  000A30  EFFD  F004         	goto	l67
  1523  000A34                     u10:
  1524  000A34  0012               	return		;funcret
  1525  000A36                     __end_of_LEER_LCD:
  1526                           	callstack 0
  1527                           
  1528 ;; *************** function _ENVIA_NIBBLE *****************
  1529 ;; Defined at:
  1530 ;;		line 93 in file "LCD.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  dato            1    wreg     unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  dato            1    0[COMRAM] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1544 ;;      Params:         0       0       0       0       0       0       0       0       0
  1545 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1547 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1548 ;;Total ram usage:        1 bytes
  1549 ;; Hardware stack levels used: 1
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_ENVIA_CHAR
  1554 ;;		_LCD_CONFIG
  1555 ;;		_ENVIA_LCD_CMD
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text15
  1560  000C32                     __ptext15:
  1561                           	callstack 0
  1562  000C32                     _ENVIA_NIBBLE:
  1563                           	callstack 28
  1564                           
  1565                           ;incstack = 0
  1566                           ;ENVIA_NIBBLE@dato stored from wreg
  1567  000C32  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1568  000C34                     
  1569                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1570  000C34  0E0F               	movlw	15
  1571  000C36  168C               	andwf	140,f,c	;volatile
  1572                           
  1573                           ;LCD.c: 96:  dato &= 0xF0;
  1574  000C38  0EF0               	movlw	240
  1575  000C3A  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1576                           
  1577                           ;LCD.c: 97:  LATD|= dato;
  1578  000C3C  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1579  000C3E  128C               	iorwf	140,f,c	;volatile
  1580  000C40                     
  1581                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1582  000C40  848C               	bsf	140,2,c	;volatile
  1583  000C42                     
  1584                           ;LCD.c: 100:         _delay(1200);
  1585  000C42  0EF0               	movlw	240
  1586  000C44                     u417:
  1587  000C44  D000               	nop2	
  1588  000C46  2EE8               	decfsz	wreg,f,c
  1589  000C48  D7FD               	bra	u417
  1590  000C4A                     
  1591                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1592  000C4A  948C               	bcf	140,2,c	;volatile
  1593  000C4C  0012               	return		;funcret
  1594  000C4E                     __end_of_ENVIA_NIBBLE:
  1595                           	callstack 0
  1596                           
  1597                           	psect	rparam
  1598  0000                     
  1599                           	psect	idloc
  1600                           
  1601                           ;Config register IDLOC0 @ 0x200000
  1602                           ;	unspecified, using default values
  1603  200000                     	org	2097152
  1604  200000  FF                 	db	255
  1605                           
  1606                           ;Config register IDLOC1 @ 0x200001
  1607                           ;	unspecified, using default values
  1608  200001                     	org	2097153
  1609  200001  FF                 	db	255
  1610                           
  1611                           ;Config register IDLOC2 @ 0x200002
  1612                           ;	unspecified, using default values
  1613  200002                     	org	2097154
  1614  200002  FF                 	db	255
  1615                           
  1616                           ;Config register IDLOC3 @ 0x200003
  1617                           ;	unspecified, using default values
  1618  200003                     	org	2097155
  1619  200003  FF                 	db	255
  1620                           
  1621                           ;Config register IDLOC4 @ 0x200004
  1622                           ;	unspecified, using default values
  1623  200004                     	org	2097156
  1624  200004  FF                 	db	255
  1625                           
  1626                           ;Config register IDLOC5 @ 0x200005
  1627                           ;	unspecified, using default values
  1628  200005                     	org	2097157
  1629  200005  FF                 	db	255
  1630                           
  1631                           ;Config register IDLOC6 @ 0x200006
  1632                           ;	unspecified, using default values
  1633  200006                     	org	2097158
  1634  200006  FF                 	db	255
  1635                           
  1636                           ;Config register IDLOC7 @ 0x200007
  1637                           ;	unspecified, using default values
  1638  200007                     	org	2097159
  1639  200007  FF                 	db	255
  1640                           
  1641                           	psect	config
  1642                           
  1643                           ;Config register CONFIG1L @ 0x300000
  1644                           ;	PLL Prescaler Selection bits
  1645                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1646                           ;	System Clock Postscaler Selection bits
  1647                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1648                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1649                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1650  300000                     	org	3145728
  1651  300000  00                 	db	0
  1652                           
  1653                           ;Config register CONFIG1H @ 0x300001
  1654                           ;	Oscillator Selection bits
  1655                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1656                           ;	Fail-Safe Clock Monitor Enable bit
  1657                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1658                           ;	Internal/External Oscillator Switchover bit
  1659                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1660  300001                     	org	3145729
  1661  300001  02                 	db	2
  1662                           
  1663                           ;Config register CONFIG2L @ 0x300002
  1664                           ;	Power-up Timer Enable bit
  1665                           ;	PWRT = ON, PWRT enabled
  1666                           ;	Brown-out Reset Enable bits
  1667                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1668                           ;	Brown-out Reset Voltage bits
  1669                           ;	BORV = 3, Minimum setting 2.05V
  1670                           ;	USB Voltage Regulator Enable bit
  1671                           ;	VREGEN = OFF, USB voltage regulator disabled
  1672  300002                     	org	3145730
  1673  300002  18                 	db	24
  1674                           
  1675                           ;Config register CONFIG2H @ 0x300003
  1676                           ;	Watchdog Timer Enable bit
  1677                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1678                           ;	Watchdog Timer Postscale Select bits
  1679                           ;	WDTPS = 32768, 1:32768
  1680  300003                     	org	3145731
  1681  300003  1E                 	db	30
  1682                           
  1683                           ; Padding undefined space
  1684  300004                     	org	3145732
  1685  300004  FF                 	db	255
  1686                           
  1687                           ;Config register CONFIG3H @ 0x300005
  1688                           ;	CCP2 MUX bit
  1689                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1690                           ;	PORTB A/D Enable bit
  1691                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1692                           ;	Low-Power Timer 1 Oscillator Enable bit
  1693                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1694                           ;	MCLR Pin Enable bit
  1695                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1696  300005                     	org	3145733
  1697  300005  81                 	db	129
  1698                           
  1699                           ;Config register CONFIG4L @ 0x300006
  1700                           ;	Stack Full/Underflow Reset Enable bit
  1701                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1702                           ;	Single-Supply ICSP Enable bit
  1703                           ;	LVP = OFF, Single-Supply ICSP disabled
  1704                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1705                           ;	ICPRT = OFF, ICPORT disabled
  1706                           ;	Extended Instruction Set Enable bit
  1707                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1708                           ;	Background Debugger Enable bit
  1709                           ;	DEBUG = 0x1, unprogrammed default
  1710  300006                     	org	3145734
  1711  300006  81                 	db	129
  1712                           
  1713                           ; Padding undefined space
  1714  300007                     	org	3145735
  1715  300007  FF                 	db	255
  1716                           
  1717                           ;Config register CONFIG5L @ 0x300008
  1718                           ;	Code Protection bit
  1719                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1720                           ;	Code Protection bit
  1721                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1722                           ;	Code Protection bit
  1723                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1724                           ;	Code Protection bit
  1725                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1726  300008                     	org	3145736
  1727  300008  0F                 	db	15
  1728                           
  1729                           ;Config register CONFIG5H @ 0x300009
  1730                           ;	Boot Block Code Protection bit
  1731                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1732                           ;	Data EEPROM Code Protection bit
  1733                           ;	CPD = OFF, Data EEPROM is not code-protected
  1734  300009                     	org	3145737
  1735  300009  C0                 	db	192
  1736                           
  1737                           ;Config register CONFIG6L @ 0x30000A
  1738                           ;	Write Protection bit
  1739                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1740                           ;	Write Protection bit
  1741                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1742                           ;	Write Protection bit
  1743                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1744                           ;	Write Protection bit
  1745                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1746  30000A                     	org	3145738
  1747  30000A  0F                 	db	15
  1748                           
  1749                           ;Config register CONFIG6H @ 0x30000B
  1750                           ;	Configuration Register Write Protection bit
  1751                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1752                           ;	Boot Block Write Protection bit
  1753                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1754                           ;	Data EEPROM Write Protection bit
  1755                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1756  30000B                     	org	3145739
  1757  30000B  E0                 	db	224
  1758                           
  1759                           ;Config register CONFIG7L @ 0x30000C
  1760                           ;	Table Read Protection bit
  1761                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1762                           ;	Table Read Protection bit
  1763                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1764                           ;	Table Read Protection bit
  1765                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1766                           ;	Table Read Protection bit
  1767                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1768  30000C                     	org	3145740
  1769  30000C  0F                 	db	15
  1770                           
  1771                           ;Config register CONFIG7H @ 0x30000D
  1772                           ;	Boot Block Table Read Protection bit
  1773                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1774  30000D                     	org	3145741
  1775  30000D  40                 	db	64
  1776                           tosu	equ	0xFFF
  1777                           tosh	equ	0xFFE
  1778                           tosl	equ	0xFFD
  1779                           stkptr	equ	0xFFC
  1780                           pclatu	equ	0xFFB
  1781                           pclath	equ	0xFFA
  1782                           pcl	equ	0xFF9
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           prodh	equ	0xFF4
  1788                           prodl	equ	0xFF3
  1789                           indf0	equ	0xFEF
  1790                           postinc0	equ	0xFEE
  1791                           postdec0	equ	0xFED
  1792                           preinc0	equ	0xFEC
  1793                           plusw0	equ	0xFEB
  1794                           fsr0h	equ	0xFEA
  1795                           fsr0l	equ	0xFE9
  1796                           wreg	equ	0xFE8
  1797                           indf1	equ	0xFE7
  1798                           postinc1	equ	0xFE6
  1799                           postdec1	equ	0xFE5
  1800                           preinc1	equ	0xFE4
  1801                           plusw1	equ	0xFE3
  1802                           fsr1h	equ	0xFE2
  1803                           fsr1l	equ	0xFE1
  1804                           bsr	equ	0xFE0
  1805                           indf2	equ	0xFDF
  1806                           postinc2	equ	0xFDE
  1807                           postdec2	equ	0xFDD
  1808                           preinc2	equ	0xFDC
  1809                           plusw2	equ	0xFDB
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[5]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2993
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                          _convierte
                          _init_conf
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _init_conf                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1549
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _init_conf
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu May 20 15:23:00 2021

                      l24 0B70                        l42 0C08                        l51 0BD8  
                      l60 0C4C                        l37 0C7E                        l54 0C86  
                      l63 0BA4                        l48 0B36                        l57 0AF8  
                      l67 09FA                        l69 0A34                        u10 0A34  
                      u11 0A30                        u20 0BEC                        u21 0BE8  
                      u30 0C02                        u31 0BFE             ENVIA_CHAR@aux 0003  
                     l121 0C76                       l124 0C30                       l133 08E2  
                     l127 08C4                       l632 09BA                       l642 0A90  
                     l820 09CC                       l900 0BBA                       l830 09E4  
                     l822 09CE                       l814 09C4                       l910 0BCC  
                     l902 0BBC                       l639 09C2                       l840 0A04  
                     l832 09E6                       l824 09D6                       l816 09C8  
                     l912 0BD2                       l904 0BBE                       l920 0AA4  
                     l649 0A98                       l842 0A08                       l850 0A22  
                     l834 09EE                       l826 09DA                       l818 09CA  
                     l906 0BC0                       l914 0C80                       l930 0ADA  
                     l922 0AB2                       l852 0C34                       l844 0A12  
                     l836 09F0                       l828 09DC                       l908 0BC6  
                     l860 0B74                       l932 0AE0                       l924 0AC6  
                     l916 0A9A                       l854 0C40                       l846 0A1C  
                     l838 09FC                       l870 0B88                       l862 0B76  
                     l934 0AE6                       l926 0ACE                       l918 0A9E  
                     l856 0C42                       l880 0B9E                       l872 0B8A  
                     l864 0B7A                       l936 0AEC                       l928 0AD4  
                     l858 0C4A                       l874 0B8C                       l866 0B7E  
                     l882 0C78                       l890 0C02                       l938 0AF2  
                     l892 0BA8                       l876 0B92                       l868 0B86  
                     l884 0BDC                       l894 0BAA                       l878 0B98  
                     l886 0BEC                       l896 0BAE                       l888 0BF2  
                     l898 0BB2                       l994 0C68                       l996 0C6A  
                     l998 0C0A                       u200 0988                       u201 0984  
                     u210 09A4                       u211 09A0                       u220 0A48  
                     u221 0A44                       u230 0A66                       u231 0A62  
                     u240 0A7C                       u241 0A78                       u250 0B4A  
                     u251 0B46                       u307 0AAA                       u260 0B68  
                     u261 0B64                       u317 0AB8                       u270 0B36  
                     u190 096A                       u407 0A16                       u271 0B32  
                     u191 0966                       u327 0AC8                       u280 08F0  
                     u417 0C44                       u337 0B80                       u281 08EC  
                     u347 0BB4                       u357 09D0                       u367 09DE  
                     u377 09E8                       u297 0C18                       u387 09FE  
                     u397 0A0C               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002  
                    l1000 0C0E                      l1002 0C12                      l1100 0A66  
                    l1004 0C22                      l1110 0B4A                      l1102 0A7C  
                    l1006 0C26                      l1120 0B22                      l1112 0B56  
                    l1104 0A84                      l1008 0C2A                      l1122 0B24  
                    l1114 0B68                      l1106 0A8A                      l1130 08CE  
                    l1116 0AFA                      l1108 0B3A                      l1124 0818  
                    l1140 090E                      l1132 08D0                      l1118 0B06  
                    l1070 0950                      l1150 0940                      l1142 0918  
                    l1134 08E0                      l1126 08C6                      l1080 0988  
                    l1072 0958                      l1144 0928                      l1136 08F0  
                    l1128 08CA                      l1090 09B4                      l1082 098E  
                    l1074 096A                      l1146 0930                      l1138 0902  
                    l1084 09A4                      l1076 0972                      l1092 0A36  
                    l1148 0938                      l1086 09AC                      l1078 097A  
                    l1094 0A48                      l1088 09AE                      l1096 0A50  
                    l1098 0A58                      STR_1 0801                      STR_2 0811  
                    _LATD 000F8C                      _main 08C6                      start 0000  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0A36       __size_of_BORRAR_LCD 0008                     ?_main 0001  
         __end_of___lwdiv 09C4           __end_of___lwmod 0A9A                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0004                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0004           __initialization 0C4E              __end_of_main 0950  
         _ESCRIBE_MENSAJE 0AFA                    ??_main 000F             __activetblptr 000001  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3          __end_of_lcd_init 0C32  
                  _decena 0013      __end_of_ENVIA_NIBBLE 0C4E                 ??___lwdiv 000A  
               ??___lwmod 0005       __size_of_POS_CURSOR 003A                    _millar 0017  
                  clear_0 0C54                    isa$std 000001                    _unidad 0011  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0C5A  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0B38            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0C88  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0C0A        __end_of_LCD_CONFIG 0AFA  
      __end_of_ENVIA_CHAR 0BDA        __size_of_convierte 00AE                ??_LEER_LCD 0001  
        ENVIA_NIBBLE@dato 0001        __size_of_init_conf 0010              ??_POS_CURSOR 0005  
               ?_lcd_init 0001     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0004                   ___lwdiv 0950  
                 ___lwmod 0A36              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0BA6  
       __end_of_convierte 08C6                   __pcinit 0C4E        __end_of_POS_CURSOR 0B72  
                 __ramtop 0800                   _centena 0015                   __ptext0 08C6  
                 __ptext1 0C0A                   __ptext2 0A9A                   __ptext3 0BDA  
                 __ptext4 0C78                   __ptext5 0C80                   __ptext6 0C68  
                 __ptext7 0818                   __ptext8 0A36                   __ptext9 0950  
       __end_of_init_conf 0C78                ??_lcd_init 0005              _ENVIA_NIBBLE 0C32  
    end_of_initialization 0C5A                   postinc0 000FEE     __size_of_CURSOR_ONOFF 0030  
               _TRISCbits 000F94         __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0BDA  
      CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004       start_initialization 0C4E  
       ENVIA_LCD_CMD@dato 0002               __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0C80  
       __size_of_lcd_init 0028          ___lwdiv@dividend 0006                  ?___lwdiv 0006  
                ?___lwmod 0001               __smallconst 0800                 _convierte 0818  
         convierte@numero 000D          ___lwdiv@quotient 000A                 _init_conf 0C68  
                _LEER_LCD 09C4                  _LATCbits 000F8B                  _LATDbits 000F8C  
        ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E  
              _ADCON0bits 000FC2                ?_convierte 000D               _CURSOR_HOME 0C78  
              ?_init_conf 0001    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800          __size_of___lwdiv 0074  
        __size_of___lwmod 0064           ___lwdiv@divisor 0008           ___lwdiv@counter 000C  
                __ptext10 0B38                  __ptext11 0B72                  __ptext12 0AFA  
                __ptext13 0BA6                  __ptext14 09C4                  __ptext15 0C32  
              _BORRAR_LCD 0C80                  _lcd_init 0C0A             _resultado_adc 0019  
           __size_of_main 008A                _LCD_CONFIG 0A9A                _ENVIA_CHAR 0BA6  
                isa$xinst 000000             _ENVIA_LCD_CMD 0B72               ??_convierte 000F  
       ??_ESCRIBE_MENSAJE 0007               ??_init_conf 0001     ESCRIBE_MENSAJE@cadena 0004  
        ___lwmod@dividend 0001            ?_ENVIA_LCD_CMD 0001           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B38               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
