

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed Oct 14 11:48:43 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     _PORTD	set	3971
    60  0000                     _LATD	set	3980
    61  0000                     _LATDbits	set	3980
    62  0000                     _TRISD	set	3989
    63                           
    64                           	psect	smallconst
    65  000800                     __psmallconst:
    66                           	callstack 0
    67  000800  00                 	db	0
    68  000801                     STR_2:
    69  000801  49                 	db	73	;'I'
    70  000802  6E                 	db	110	;'n'
    71  000803  67                 	db	103	;'g'
    72  000804  2E                 	db	46
    73  000805  20                 	db	32
    74  000806  4D                 	db	77	;'M'
    75  000807  65                 	db	101	;'e'
    76  000808  63                 	db	99	;'c'
    77  000809  61                 	db	97	;'a'
    78  00080A  74                 	db	116	;'t'
    79  00080B  72                 	db	114	;'r'
    80  00080C  6F                 	db	111	;'o'
    81  00080D  6E                 	db	110	;'n'
    82  00080E  69                 	db	105	;'i'
    83  00080F  63                 	db	99	;'c'
    84  000810  61                 	db	97	;'a'
    85  000811  00                 	db	0
    86  000812                     STR_1:
    87  000812  49                 	db	73	;'I'
    88  000813  6E                 	db	110	;'n'
    89  000814  67                 	db	103	;'g'
    90  000815  2E                 	db	46
    91  000816  20                 	db	32
    92  000817  45                 	db	69	;'E'
    93  000818  6C                 	db	108	;'l'
    94  000819  65                 	db	101	;'e'
    95  00081A  63                 	db	99	;'c'
    96  00081B  74                 	db	116	;'t'
    97  00081C  72                 	db	114	;'r'
    98  00081D  6F                 	db	111	;'o'
    99  00081E  6E                 	db	110	;'n'
   100  00081F  69                 	db	105	;'i'
   101  000820  63                 	db	99	;'c'
   102  000821  61                 	db	97	;'a'
   103  000822  00                 	db	0
   104  000823  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           ; #config settings
   107                           
   108                           	psect	cinit
   109  000A8A                     __pcinit:
   110                           	callstack 0
   111  000A8A                     start_initialization:
   112                           	callstack 0
   113  000A8A                     __initialization:
   114                           	callstack 0
   115  000A8A                     end_of_initialization:
   116                           	callstack 0
   117  000A8A                     __end_of__initialization:
   118                           	callstack 0
   119  000A8A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   120  000A8C  6EF8               	movwf	tblptru,c
   121  000A8E  0E08               	movlw	high __Lsmallconst
   122  000A90  6EF7               	movwf	tblptrh,c
   123  000A92  0100               	movlb	0
   124  000A94  EF7B  F004         	goto	_main	;jump to C main() function
   125                           
   126                           	psect	cstackCOMRAM
   127  000001                     __pcstackCOMRAM:
   128                           	callstack 0
   129  000001                     ENVIA_NIBBLE@dato:
   130                           	callstack 0
   131  000001                     LEER_LCD@aux:
   132                           	callstack 0
   133                           
   134                           ; 1 bytes @ 0x0
   135  000001                     	ds	1
   136  000002                     ENVIA_CHAR@dato:
   137                           	callstack 0
   138  000002                     ENVIA_LCD_CMD@dato:
   139                           	callstack 0
   140                           
   141                           ; 1 bytes @ 0x1
   142  000002                     	ds	1
   143  000003                     ENVIA_CHAR@aux:
   144                           	callstack 0
   145  000003                     ENVIA_LCD_CMD@aux:
   146                           	callstack 0
   147                           
   148                           ; 1 bytes @ 0x2
   149  000003                     	ds	1
   150  000004                     ??_LCD_CONFIG:
   151  000004                     POS_CURSOR@columna:
   152                           	callstack 0
   153  000004                     CURSOR_ONOFF@estado:
   154                           	callstack 0
   155  000004                     ESCRIBE_MENSAJE@cadena:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x3
   159  000004                     	ds	1
   160  000005                     ??_lcd_init:
   161  000005                     POS_CURSOR@fila:
   162                           	callstack 0
   163                           
   164                           ; 1 bytes @ 0x4
   165  000005                     	ds	1
   166  000006                     ESCRIBE_MENSAJE@tam:
   167                           	callstack 0
   168                           
   169                           ; 1 bytes @ 0x5
   170  000006                     	ds	1
   171  000007                     ??_ESCRIBE_MENSAJE:
   172                           
   173                           ; 1 bytes @ 0x6
   174  000007                     	ds	2
   175  000009                     ESCRIBE_MENSAJE@i:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x8
   179  000009                     	ds	1
   180  00000A                     
   181                           ; 1 bytes @ 0x9
   182 ;;
   183 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   184 ;;
   185 ;; *************** function _main *****************
   186 ;; Defined at:
   187 ;;		line 27 in file "maincode.c"
   188 ;; Parameters:    Size  Location     Type
   189 ;;		None
   190 ;; Auto vars:     Size  Location     Type
   191 ;;		None
   192 ;; Return value:  Size  Location     Type
   193 ;;                  1    wreg      void 
   194 ;; Registers used:
   195 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   196 ;; Tracked objects:
   197 ;;		On entry : 0/0
   198 ;;		On exit  : 0/0
   199 ;;		Unchanged: 0/0
   200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   201 ;;      Params:         0       0       0       0       0       0       0       0       0
   202 ;;      Locals:         0       0       0       0       0       0       0       0       0
   203 ;;      Temps:          0       0       0       0       0       0       0       0       0
   204 ;;      Totals:         0       0       0       0       0       0       0       0       0
   205 ;;Total ram usage:        0 bytes
   206 ;; Hardware stack levels required when called:    4
   207 ;; This function calls:
   208 ;;		_ESCRIBE_MENSAJE
   209 ;;		_POS_CURSOR
   210 ;;		_lcd_init
   211 ;; This function is called by:
   212 ;;		Startup code after reset
   213 ;; This function uses a non-reentrant model
   214 ;;
   215                           
   216                           	psect	text0
   217  0008F6                     __ptext0:
   218                           	callstack 0
   219  0008F6                     _main:
   220                           	callstack 27
   221  0008F6                     
   222                           ;maincode.c: 28:     lcd_init();
   223  0008F6  EC23  F005         	call	_lcd_init	;wreg free
   224  0008FA                     l24:
   225                           
   226                           ;maincode.c: 30:         POS_CURSOR(1,0);
   227  0008FA  0E00               	movlw	0
   228  0008FC  6E04               	movwf	POS_CURSOR@columna^0,c
   229  0008FE  0E01               	movlw	1
   230  000900  ECBA  F004         	call	_POS_CURSOR
   231  000904                     
   232                           ;maincode.c: 31:         ESCRIBE_MENSAJE("Ing. Electronica", 16);
   233  000904  0E12               	movlw	low STR_1
   234  000906  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   235  000908  0E08               	movlw	high STR_1
   236  00090A  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   237  00090C  0E10               	movlw	16
   238  00090E  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   239  000910  EC9B  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   240  000914                     
   241                           ;maincode.c: 32:         POS_CURSOR(2,0);
   242  000914  0E00               	movlw	0
   243  000916  6E04               	movwf	POS_CURSOR@columna^0,c
   244  000918  0E02               	movlw	2
   245  00091A  ECBA  F004         	call	_POS_CURSOR
   246                           
   247                           ;maincode.c: 33:         ESCRIBE_MENSAJE("Ing. Mecatronica", 16);
   248  00091E  0E01               	movlw	low STR_2
   249  000920  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   250  000922  0E08               	movlw	high STR_2
   251  000924  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   252  000926  0E10               	movlw	16
   253  000928  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   254  00092A  EC9B  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   255  00092E  EF7D  F004         	goto	l24
   256  000932  EF00  F000         	goto	start
   257  000936                     __end_of_main:
   258                           	callstack 0
   259                           
   260 ;; *************** function _lcd_init *****************
   261 ;; Defined at:
   262 ;;		line 18 in file "maincode.c"
   263 ;; Parameters:    Size  Location     Type
   264 ;;		None
   265 ;; Auto vars:     Size  Location     Type
   266 ;;		None
   267 ;; Return value:  Size  Location     Type
   268 ;;                  1    wreg      void 
   269 ;; Registers used:
   270 ;;		wreg, status,2, status,0, cstack
   271 ;; Tracked objects:
   272 ;;		On entry : 0/0
   273 ;;		On exit  : 0/0
   274 ;;		Unchanged: 0/0
   275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   276 ;;      Params:         0       0       0       0       0       0       0       0       0
   277 ;;      Locals:         0       0       0       0       0       0       0       0       0
   278 ;;      Temps:          1       0       0       0       0       0       0       0       0
   279 ;;      Totals:         1       0       0       0       0       0       0       0       0
   280 ;;Total ram usage:        1 bytes
   281 ;; Hardware stack levels used:    1
   282 ;; Hardware stack levels required when called:    3
   283 ;; This function calls:
   284 ;;		_BORRAR_LCD
   285 ;;		_CURSOR_HOME
   286 ;;		_CURSOR_ONOFF
   287 ;;		_LCD_CONFIG
   288 ;; This function is called by:
   289 ;;		_main
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293                           	psect	text1
   294  000A46                     __ptext1:
   295                           	callstack 0
   296  000A46                     _lcd_init:
   297                           	callstack 27
   298  000A46                     
   299                           ;maincode.c: 19:     TRISD = 0x00;
   300  000A46  0E00               	movlw	0
   301  000A48  6E95               	movwf	149,c	;volatile
   302  000A4A                     
   303                           ;maincode.c: 20:     LCD_CONFIG();
   304  000A4A  EC4B  F004         	call	_LCD_CONFIG	;wreg free
   305  000A4E                     
   306                           ;maincode.c: 21:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   307  000A4E  0EEA               	movlw	234
   308  000A50  6E05               	movwf	??_lcd_init^0,c
   309  000A52  0EC3               	movlw	195
   310  000A54                     u157:
   311  000A54  2EE8               	decfsz	wreg,f,c
   312  000A56  D7FE               	bra	u157
   313  000A58  2E05               	decfsz	??_lcd_init^0,f,c
   314  000A5A  D7FC               	bra	u157
   315  000A5C  F000               	nop	
   316  000A5E                     
   317                           ;maincode.c: 22:     BORRAR_LCD();
   318  000A5E  EC50  F005         	call	_BORRAR_LCD	;wreg free
   319  000A62                     
   320                           ;maincode.c: 23:     CURSOR_HOME();
   321  000A62  EC4C  F005         	call	_CURSOR_HOME	;wreg free
   322  000A66                     
   323                           ;maincode.c: 24:     CURSOR_ONOFF(1);
   324  000A66  0E01               	movlw	1
   325  000A68  EC0B  F005         	call	_CURSOR_ONOFF
   326  000A6C  0012               	return		;funcret
   327  000A6E                     __end_of_lcd_init:
   328                           	callstack 0
   329                           
   330 ;; *************** function _LCD_CONFIG *****************
   331 ;; Defined at:
   332 ;;		line 72 in file "LCD.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;		None
   335 ;; Auto vars:     Size  Location     Type
   336 ;;		None
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, status,2, status,0, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : 0/0
   343 ;;		On exit  : 0/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   346 ;;      Params:         0       0       0       0       0       0       0       0       0
   347 ;;      Locals:         0       0       0       0       0       0       0       0       0
   348 ;;      Temps:          1       0       0       0       0       0       0       0       0
   349 ;;      Totals:         1       0       0       0       0       0       0       0       0
   350 ;;Total ram usage:        1 bytes
   351 ;; Hardware stack levels used:    1
   352 ;; Hardware stack levels required when called:    2
   353 ;; This function calls:
   354 ;;		_ENVIA_LCD_CMD
   355 ;;		_ENVIA_NIBBLE
   356 ;; This function is called by:
   357 ;;		_lcd_init
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361                           	psect	text2
   362  000896                     __ptext2:
   363                           	callstack 0
   364  000896                     _LCD_CONFIG:
   365                           	callstack 27
   366  000896                     
   367                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   368  000896  908C               	bcf	140,0,c	;volatile
   369                           
   370                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   371  000898  928C               	bcf	140,1,c	;volatile
   372  00089A                     
   373                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   374  00089A  0E30               	movlw	48
   375  00089C  EC37  F005         	call	_ENVIA_NIBBLE
   376  0008A0                     
   377                           ;LCD.c: 77:         _delay(24000);
   378  0008A0  0E20               	movlw	32
   379  0008A2  6E04               	movwf	??_LCD_CONFIG^0,c
   380  0008A4  0E2A               	movlw	42
   381  0008A6                     u167:
   382  0008A6  2EE8               	decfsz	wreg,f,c
   383  0008A8  D7FE               	bra	u167
   384  0008AA  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   385  0008AC  D7FC               	bra	u167
   386  0008AE                     
   387                           ;LCD.c: 78:         _delay(24000);
   388  0008AE  0E20               	movlw	32
   389  0008B0  6E04               	movwf	??_LCD_CONFIG^0,c
   390  0008B2  0E2A               	movlw	42
   391  0008B4                     u177:
   392  0008B4  2EE8               	decfsz	wreg,f,c
   393  0008B6  D7FE               	bra	u177
   394  0008B8  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   395  0008BA  D7FC               	bra	u177
   396                           
   397                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   398  0008BC  0E30               	movlw	48
   399  0008BE  EC37  F005         	call	_ENVIA_NIBBLE
   400  0008C2                     
   401                           ;LCD.c: 83:  _delay(1200);
   402  0008C2  0EF0               	movlw	240
   403  0008C4                     u187:
   404  0008C4  D000               	nop2	
   405  0008C6  2EE8               	decfsz	wreg,f,c
   406  0008C8  D7FD               	bra	u187
   407  0008CA                     
   408                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   409  0008CA  0E30               	movlw	48
   410  0008CC  EC37  F005         	call	_ENVIA_NIBBLE
   411  0008D0                     
   412                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   413  0008D0  0E20               	movlw	32
   414  0008D2  EC37  F005         	call	_ENVIA_NIBBLE
   415  0008D6                     
   416                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   417  0008D6  0E01               	movlw	1
   418  0008D8  ECD7  F004         	call	_ENVIA_LCD_CMD
   419  0008DC                     
   420                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   421  0008DC  0E28               	movlw	40
   422  0008DE  ECD7  F004         	call	_ENVIA_LCD_CMD
   423  0008E2                     
   424                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   425  0008E2  0E0F               	movlw	15
   426  0008E4  ECD7  F004         	call	_ENVIA_LCD_CMD
   427  0008E8                     
   428                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   429  0008E8  0E06               	movlw	6
   430  0008EA  ECD7  F004         	call	_ENVIA_LCD_CMD
   431  0008EE                     
   432                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   433  0008EE  0E01               	movlw	1
   434  0008F0  ECD7  F004         	call	_ENVIA_LCD_CMD
   435  0008F4  0012               	return		;funcret
   436  0008F6                     __end_of_LCD_CONFIG:
   437                           	callstack 0
   438                           
   439 ;; *************** function _CURSOR_ONOFF *****************
   440 ;; Defined at:
   441 ;;		line 35 in file "LCD.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;  estado          1    wreg     unsigned char 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  estado          1    3[COMRAM] unsigned char 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg, status,2, status,0, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   455 ;;      Params:         0       0       0       0       0       0       0       0       0
   456 ;;      Locals:         1       0       0       0       0       0       0       0       0
   457 ;;      Temps:          0       0       0       0       0       0       0       0       0
   458 ;;      Totals:         1       0       0       0       0       0       0       0       0
   459 ;;Total ram usage:        1 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    2
   462 ;; This function calls:
   463 ;;		_ENVIA_LCD_CMD
   464 ;; This function is called by:
   465 ;;		_lcd_init
   466 ;; This function uses a non-reentrant model
   467 ;;
   468                           
   469                           	psect	text3
   470  000A16                     __ptext3:
   471                           	callstack 0
   472  000A16                     _CURSOR_ONOFF:
   473                           	callstack 27
   474                           
   475                           ;incstack = 0
   476                           ;CURSOR_ONOFF@estado stored from wreg
   477  000A16  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   478  000A18                     
   479                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   480  000A18  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   481  000A1A  A4D8               	btfss	status,2,c
   482  000A1C  EF12  F005         	goto	u21
   483  000A20  EF14  F005         	goto	u20
   484  000A24                     u21:
   485  000A24  EF17  F005         	goto	l877
   486  000A28                     u20:
   487  000A28  0E0E               	movlw	14
   488  000A2A  ECD7  F004         	call	_ENVIA_LCD_CMD
   489  000A2E                     l877:
   490                           
   491                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   492  000A2E  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   493  000A30  A4D8               	btfss	status,2,c
   494  000A32  EF1D  F005         	goto	u31
   495  000A36  EF1F  F005         	goto	u30
   496  000A3A                     u31:
   497  000A3A  EF22  F005         	goto	l69
   498  000A3E                     u30:
   499  000A3E  0E0C               	movlw	12
   500  000A40  ECD7  F004         	call	_ENVIA_LCD_CMD
   501  000A44                     l69:
   502  000A44  0012               	return		;funcret
   503  000A46                     __end_of_CURSOR_ONOFF:
   504                           	callstack 0
   505                           
   506 ;; *************** function _CURSOR_HOME *****************
   507 ;; Defined at:
   508 ;;		line 30 in file "LCD.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, status,2, status,0, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   522 ;;      Params:         0       0       0       0       0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0       0       0       0       0
   524 ;;      Temps:          0       0       0       0       0       0       0       0       0
   525 ;;      Totals:         0       0       0       0       0       0       0       0       0
   526 ;;Total ram usage:        0 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; Hardware stack levels required when called:    2
   529 ;; This function calls:
   530 ;;		_ENVIA_LCD_CMD
   531 ;; This function is called by:
   532 ;;		_lcd_init
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text4
   537  000A98                     __ptext4:
   538                           	callstack 0
   539  000A98                     _CURSOR_HOME:
   540                           	callstack 27
   541  000A98                     
   542                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   543  000A98  0E02               	movlw	2
   544  000A9A  ECD7  F004         	call	_ENVIA_LCD_CMD
   545  000A9E  0012               	return		;funcret
   546  000AA0                     __end_of_CURSOR_HOME:
   547                           	callstack 0
   548                           
   549 ;; *************** function _BORRAR_LCD *****************
   550 ;; Defined at:
   551 ;;		line 67 in file "LCD.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;		None
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, status,2, status,0, cstack
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   565 ;;      Params:         0       0       0       0       0       0       0       0       0
   566 ;;      Locals:         0       0       0       0       0       0       0       0       0
   567 ;;      Temps:          0       0       0       0       0       0       0       0       0
   568 ;;      Totals:         0       0       0       0       0       0       0       0       0
   569 ;;Total ram usage:        0 bytes
   570 ;; Hardware stack levels used:    1
   571 ;; Hardware stack levels required when called:    2
   572 ;; This function calls:
   573 ;;		_ENVIA_LCD_CMD
   574 ;; This function is called by:
   575 ;;		_lcd_init
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text5
   580  000AA0                     __ptext5:
   581                           	callstack 0
   582  000AA0                     _BORRAR_LCD:
   583                           	callstack 27
   584  000AA0                     
   585                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   586  000AA0  0E01               	movlw	1
   587  000AA2  ECD7  F004         	call	_ENVIA_LCD_CMD
   588  000AA6  0012               	return		;funcret
   589  000AA8                     __end_of_BORRAR_LCD:
   590                           	callstack 0
   591                           
   592 ;; *************** function _POS_CURSOR *****************
   593 ;; Defined at:
   594 ;;		line 6 in file "LCD.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  fila            1    wreg     unsigned char 
   597 ;;  columna         1    3[COMRAM] unsigned char 
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  fila            1    4[COMRAM] unsigned char 
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, status,2, status,0, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   609 ;;      Params:         1       0       0       0       0       0       0       0       0
   610 ;;      Locals:         1       0       0       0       0       0       0       0       0
   611 ;;      Temps:          0       0       0       0       0       0       0       0       0
   612 ;;      Totals:         2       0       0       0       0       0       0       0       0
   613 ;;Total ram usage:        2 bytes
   614 ;; Hardware stack levels used:    1
   615 ;; Hardware stack levels required when called:    2
   616 ;; This function calls:
   617 ;;		_ENVIA_LCD_CMD
   618 ;; This function is called by:
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           	psect	text6
   624  000974                     __ptext6:
   625                           	callstack 0
   626  000974                     _POS_CURSOR:
   627                           	callstack 28
   628                           
   629                           ;incstack = 0
   630                           ;POS_CURSOR@fila stored from wreg
   631  000974  6E05               	movwf	POS_CURSOR@fila^0,c
   632  000976                     
   633                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   634  000976  0405               	decf	POS_CURSOR@fila^0,w,c
   635  000978  A4D8               	btfss	status,2,c
   636  00097A  EFC1  F004         	goto	u121
   637  00097E  EFC3  F004         	goto	u120
   638  000982                     u121:
   639  000982  EFC9  F004         	goto	l973
   640  000986                     u120:
   641  000986                     
   642                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   643  000986  5004               	movf	POS_CURSOR@columna^0,w,c
   644  000988  0F80               	addlw	128
   645  00098A  ECD7  F004         	call	_ENVIA_LCD_CMD
   646                           
   647                           ;LCD.c: 11:  }
   648  00098E  EFD6  F004         	goto	l51
   649  000992                     l973:
   650  000992  0E02               	movlw	2
   651  000994  1805               	xorwf	POS_CURSOR@fila^0,w,c
   652  000996  A4D8               	btfss	status,2,c
   653  000998  EFD0  F004         	goto	u131
   654  00099C  EFD2  F004         	goto	u130
   655  0009A0                     u131:
   656  0009A0  EFD6  F004         	goto	l51
   657  0009A4                     u130:
   658  0009A4                     
   659                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   660  0009A4  5004               	movf	POS_CURSOR@columna^0,w,c
   661  0009A6  0FC0               	addlw	192
   662  0009A8  ECD7  F004         	call	_ENVIA_LCD_CMD
   663  0009AC                     l51:
   664  0009AC  0012               	return		;funcret
   665  0009AE                     __end_of_POS_CURSOR:
   666                           	callstack 0
   667                           
   668 ;; *************** function _ENVIA_LCD_CMD *****************
   669 ;; Defined at:
   670 ;;		line 104 in file "LCD.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;  dato            1    wreg     unsigned char 
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  dato            1    1[COMRAM] unsigned char 
   675 ;;  aux             1    2[COMRAM] unsigned char 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   685 ;;      Params:         0       0       0       0       0       0       0       0       0
   686 ;;      Locals:         2       0       0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0       0       0
   688 ;;      Totals:         2       0       0       0       0       0       0       0       0
   689 ;;Total ram usage:        2 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    1
   692 ;; This function calls:
   693 ;;		_ENVIA_NIBBLE
   694 ;;		_LEER_LCD
   695 ;; This function is called by:
   696 ;;		_POS_CURSOR
   697 ;;		_CURSOR_HOME
   698 ;;		_CURSOR_ONOFF
   699 ;;		_BORRAR_LCD
   700 ;;		_LCD_CONFIG
   701 ;;		_BLINK_CURSOR
   702 ;;		_DISPLAY_ONOFF
   703 ;;		_GENERACARACTER
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text7
   708  0009AE                     __ptext7:
   709                           	callstack 0
   710  0009AE                     _ENVIA_LCD_CMD:
   711                           	callstack 27
   712                           
   713                           ;incstack = 0
   714                           ;ENVIA_LCD_CMD@dato stored from wreg
   715  0009AE  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
   716  0009B0                     
   717                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
   718  0009B0  908C               	bcf	140,0,c	;volatile
   719  0009B2                     
   720                           ;LCD.c: 108:  LEER_LCD();
   721  0009B2  EC12  F004         	call	_LEER_LCD	;wreg free
   722  0009B6                     
   723                           ;LCD.c: 109:  TRISD = 0b00000000;
   724  0009B6  0E00               	movlw	0
   725  0009B8  6E95               	movwf	149,c	;volatile
   726  0009BA                     
   727                           ;LCD.c: 111:         _delay(1200);
   728  0009BA  0EF0               	movlw	240
   729  0009BC                     u197:
   730  0009BC  D000               	nop2	
   731  0009BE  2EE8               	decfsz	wreg,f,c
   732  0009C0  D7FD               	bra	u197
   733  0009C2                     
   734                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
   735  0009C2  928C               	bcf	140,1,c	;volatile
   736  0009C4                     
   737                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
   738  0009C4  948C               	bcf	140,2,c	;volatile
   739  0009C6                     
   740                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
   741  0009C6  908C               	bcf	140,0,c	;volatile
   742  0009C8                     
   743                           ;LCD.c: 115:  aux = dato & 0xF0;
   744  0009C8  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
   745  0009CA  0BF0               	andlw	240
   746  0009CC  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
   747  0009CE                     
   748                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
   749  0009CE  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
   750  0009D0  EC37  F005         	call	_ENVIA_NIBBLE
   751  0009D4                     
   752                           ;LCD.c: 117:  aux = dato<<4;
   753  0009D4  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
   754  0009D6  0BF0               	andlw	240
   755  0009D8  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
   756  0009DA                     
   757                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
   758  0009DA  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
   759  0009DC  EC37  F005         	call	_ENVIA_NIBBLE
   760  0009E0  0012               	return		;funcret
   761  0009E2                     __end_of_ENVIA_LCD_CMD:
   762                           	callstack 0
   763                           
   764 ;; *************** function _ESCRIBE_MENSAJE *****************
   765 ;; Defined at:
   766 ;;		line 41 in file "LCD.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   769 ;;		 -> STR_2(17), STR_1(17), 
   770 ;;  tam             1    5[COMRAM] unsigned char 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  i               1    8[COMRAM] unsigned char 
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      void 
   775 ;; Registers used:
   776 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   782 ;;      Params:         3       0       0       0       0       0       0       0       0
   783 ;;      Locals:         1       0       0       0       0       0       0       0       0
   784 ;;      Temps:          2       0       0       0       0       0       0       0       0
   785 ;;      Totals:         6       0       0       0       0       0       0       0       0
   786 ;;Total ram usage:        6 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    2
   789 ;; This function calls:
   790 ;;		_ENVIA_CHAR
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text8
   797  000936                     __ptext8:
   798                           	callstack 0
   799  000936                     _ESCRIBE_MENSAJE:
   800                           	callstack 28
   801  000936                     
   802                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   803  000936  0E00               	movlw	0
   804  000938  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   805                           
   806                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   807  00093A  0E00               	movlw	0
   808  00093C  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   809  00093E  EFB0  F004         	goto	l983
   810  000942                     l979:
   811                           
   812                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   813  000942  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
   814  000944  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
   815  000946  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
   816  000948  0E00               	movlw	0
   817  00094A  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
   818  00094C  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
   819  00094E  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   820  000952  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   821  000956                     	if	0	;tblptru may be non-zero
   822  000956                     	endif
   823  000956                     	if	0	;tblptru may be non-zero
   824  000956                     	endif
   825  000956  0008               	tblrd		*
   826  000958  50F5               	movf	tablat,w,c
   827  00095A  ECF1  F004         	call	_ENVIA_CHAR
   828  00095E                     
   829                           ;LCD.c: 47:  }
   830  00095E  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
   831  000960                     l983:
   832  000960  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
   833  000962  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
   834  000964  A0D8               	btfss	status,0,c
   835  000966  EFB7  F004         	goto	u141
   836  00096A  EFB9  F004         	goto	u140
   837  00096E                     u141:
   838  00096E  EFA1  F004         	goto	l979
   839  000972                     u140:
   840  000972  0012               	return		;funcret
   841  000974                     __end_of_ESCRIBE_MENSAJE:
   842                           	callstack 0
   843                           
   844 ;; *************** function _ENVIA_CHAR *****************
   845 ;; Defined at:
   846 ;;		line 50 in file "LCD.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  dato            1    wreg     unsigned char 
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  dato            1    1[COMRAM] unsigned char 
   851 ;;  aux             1    2[COMRAM] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   861 ;;      Params:         0       0       0       0       0       0       0       0       0
   862 ;;      Locals:         2       0       0       0       0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0       0       0       0       0
   864 ;;      Totals:         2       0       0       0       0       0       0       0       0
   865 ;;Total ram usage:        2 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    1
   868 ;; This function calls:
   869 ;;		_ENVIA_NIBBLE
   870 ;;		_LEER_LCD
   871 ;; This function is called by:
   872 ;;		_ESCRIBE_MENSAJE
   873 ;;		_GENERACARACTER
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text9
   878  0009E2                     __ptext9:
   879                           	callstack 0
   880  0009E2                     _ENVIA_CHAR:
   881                           	callstack 28
   882                           
   883                           ;incstack = 0
   884                           ;ENVIA_CHAR@dato stored from wreg
   885  0009E2  6E02               	movwf	ENVIA_CHAR@dato^0,c
   886  0009E4                     
   887                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   888  0009E4  808C               	bsf	140,0,c	;volatile
   889  0009E6                     
   890                           ;LCD.c: 54:  LEER_LCD();
   891  0009E6  EC12  F004         	call	_LEER_LCD	;wreg free
   892  0009EA                     
   893                           ;LCD.c: 55:  TRISD = 0x00;
   894  0009EA  0E00               	movlw	0
   895  0009EC  6E95               	movwf	149,c	;volatile
   896  0009EE                     
   897                           ;LCD.c: 56:         _delay(1200);
   898  0009EE  0EF0               	movlw	240
   899  0009F0                     u207:
   900  0009F0  D000               	nop2	
   901  0009F2  2EE8               	decfsz	wreg,f,c
   902  0009F4  D7FD               	bra	u207
   903  0009F6                     
   904                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   905  0009F6  928C               	bcf	140,1,c	;volatile
   906  0009F8                     
   907                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   908  0009F8  948C               	bcf	140,2,c	;volatile
   909  0009FA                     
   910                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   911  0009FA  808C               	bsf	140,0,c	;volatile
   912  0009FC                     
   913                           ;LCD.c: 61:  aux = dato & 0xF0;
   914  0009FC  5002               	movf	ENVIA_CHAR@dato^0,w,c
   915  0009FE  0BF0               	andlw	240
   916  000A00  6E03               	movwf	ENVIA_CHAR@aux^0,c
   917  000A02                     
   918                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   919  000A02  5003               	movf	ENVIA_CHAR@aux^0,w,c
   920  000A04  EC37  F005         	call	_ENVIA_NIBBLE
   921  000A08                     
   922                           ;LCD.c: 63:  aux = dato << 4;
   923  000A08  3802               	swapf	ENVIA_CHAR@dato^0,w,c
   924  000A0A  0BF0               	andlw	240
   925  000A0C  6E03               	movwf	ENVIA_CHAR@aux^0,c
   926  000A0E                     
   927                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   928  000A0E  5003               	movf	ENVIA_CHAR@aux^0,w,c
   929  000A10  EC37  F005         	call	_ENVIA_NIBBLE
   930  000A14  0012               	return		;funcret
   931  000A16                     __end_of_ENVIA_CHAR:
   932                           	callstack 0
   933                           
   934 ;; *************** function _LEER_LCD *****************
   935 ;; Defined at:
   936 ;;		line 121 in file "LCD.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  aux             1    0[COMRAM] unsigned char 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, status,2, status,0
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   950 ;;      Params:         0       0       0       0       0       0       0       0       0
   951 ;;      Locals:         1       0       0       0       0       0       0       0       0
   952 ;;      Temps:          0       0       0       0       0       0       0       0       0
   953 ;;      Totals:         1       0       0       0       0       0       0       0       0
   954 ;;Total ram usage:        1 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_ENVIA_CHAR
   960 ;;		_ENVIA_LCD_CMD
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	text10
   965  000824                     __ptext10:
   966                           	callstack 0
   967  000824                     _LEER_LCD:
   968                           	callstack 27
   969  000824                     
   970                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
   971  000824  0EF8               	movlw	248
   972  000826  6E95               	movwf	149,c	;volatile
   973  000828                     
   974                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
   975  000828  908C               	bcf	140,0,c	;volatile
   976  00082A                     
   977                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
   978  00082A  828C               	bsf	140,1,c	;volatile
   979  00082C                     
   980                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
   981  00082C  848C               	bsf	140,2,c	;volatile
   982  00082E                     
   983                           ;LCD.c: 128:         _delay(1200);
   984  00082E  0EF0               	movlw	240
   985  000830                     u217:
   986  000830  D000               	nop2	
   987  000832  2EE8               	decfsz	wreg,f,c
   988  000834  D7FD               	bra	u217
   989  000836                     
   990                           ;LCD.c: 130:  aux = PORTD;
   991  000836  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
   992  00083A                     
   993                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
   994  00083A  948C               	bcf	140,2,c	;volatile
   995  00083C                     
   996                           ;LCD.c: 132:         _delay(1200);
   997  00083C  0EF0               	movlw	240
   998  00083E                     u227:
   999  00083E  D000               	nop2	
  1000  000840  2EE8               	decfsz	wreg,f,c
  1001  000842  D7FD               	bra	u227
  1002  000844                     
  1003                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1004  000844  848C               	bsf	140,2,c	;volatile
  1005  000846                     
  1006                           ;LCD.c: 135:         _delay(1200);
  1007  000846  0EF0               	movlw	240
  1008  000848                     u237:
  1009  000848  D000               	nop2	
  1010  00084A  2EE8               	decfsz	wreg,f,c
  1011  00084C  D7FD               	bra	u237
  1012  00084E                     
  1013                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1014  00084E  948C               	bcf	140,2,c	;volatile
  1015  000850                     l799:
  1016                           
  1017                           ;LCD.c: 138:  aux = aux & 0x80;
  1018  000850  5001               	movf	LEER_LCD@aux^0,w,c
  1019  000852  0B80               	andlw	128
  1020  000854  6E01               	movwf	LEER_LCD@aux^0,c
  1021                           
  1022                           ;LCD.c: 139:  while(aux == 0x80)
  1023  000856  EF41  F004         	goto	l813
  1024  00085A                     l94:
  1025                           
  1026                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1027  00085A  848C               	bsf	140,2,c	;volatile
  1028  00085C                     
  1029                           ;LCD.c: 142:             _delay(1200);
  1030  00085C  0EF0               	movlw	240
  1031  00085E                     u247:
  1032  00085E  D000               	nop2	
  1033  000860  2EE8               	decfsz	wreg,f,c
  1034  000862  D7FD               	bra	u247
  1035  000864                     
  1036                           ;LCD.c: 143:             aux = PORTD;
  1037  000864  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1038  000868                     
  1039                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1040  000868  948C               	bcf	140,2,c	;volatile
  1041                           
  1042                           ;LCD.c: 145:             _delay(1200);
  1043  00086A  0EF0               	movlw	240
  1044  00086C                     u257:
  1045  00086C  D000               	nop2	
  1046  00086E  2EE8               	decfsz	wreg,f,c
  1047  000870  D7FD               	bra	u257
  1048  000872                     
  1049                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1050  000872  848C               	bsf	140,2,c	;volatile
  1051                           
  1052                           ;LCD.c: 147:             _delay(1200);
  1053  000874  0EF0               	movlw	240
  1054  000876                     u267:
  1055  000876  D000               	nop2	
  1056  000878  2EE8               	decfsz	wreg,f,c
  1057  00087A  D7FD               	bra	u267
  1058  00087C                     
  1059                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1060  00087C  948C               	bcf	140,2,c	;volatile
  1061  00087E  EF28  F004         	goto	l799
  1062  000882                     l813:
  1063                           
  1064                           ;LCD.c: 139:  while(aux == 0x80)
  1065  000882  0E80               	movlw	128
  1066  000884  1801               	xorwf	LEER_LCD@aux^0,w,c
  1067  000886  B4D8               	btfsc	status,2,c
  1068  000888  EF48  F004         	goto	u11
  1069  00088C  EF4A  F004         	goto	u10
  1070  000890                     u11:
  1071  000890  EF2D  F004         	goto	l94
  1072  000894                     u10:
  1073  000894  0012               	return		;funcret
  1074  000896                     __end_of_LEER_LCD:
  1075                           	callstack 0
  1076                           
  1077 ;; *************** function _ENVIA_NIBBLE *****************
  1078 ;; Defined at:
  1079 ;;		line 93 in file "LCD.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  dato            1    wreg     unsigned char 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  dato            1    0[COMRAM] unsigned char 
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      void 
  1086 ;; Registers used:
  1087 ;;		wreg, status,2, status,0
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1093 ;;      Params:         0       0       0       0       0       0       0       0       0
  1094 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1096 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1097 ;;Total ram usage:        1 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_ENVIA_CHAR
  1103 ;;		_LCD_CONFIG
  1104 ;;		_ENVIA_LCD_CMD
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text11
  1109  000A6E                     __ptext11:
  1110                           	callstack 0
  1111  000A6E                     _ENVIA_NIBBLE:
  1112                           	callstack 28
  1113                           
  1114                           ;incstack = 0
  1115                           ;ENVIA_NIBBLE@dato stored from wreg
  1116  000A6E  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1117  000A70                     
  1118                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1119  000A70  0E0F               	movlw	15
  1120  000A72  168C               	andwf	140,f,c	;volatile
  1121                           
  1122                           ;LCD.c: 96:  dato &= 0xF0;
  1123  000A74  0EF0               	movlw	240
  1124  000A76  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1125                           
  1126                           ;LCD.c: 97:  LATD|= dato;
  1127  000A78  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1128  000A7A  128C               	iorwf	140,f,c	;volatile
  1129  000A7C                     
  1130                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1131  000A7C  848C               	bsf	140,2,c	;volatile
  1132  000A7E                     
  1133                           ;LCD.c: 100:         _delay(1200);
  1134  000A7E  0EF0               	movlw	240
  1135  000A80                     u277:
  1136  000A80  D000               	nop2	
  1137  000A82  2EE8               	decfsz	wreg,f,c
  1138  000A84  D7FD               	bra	u277
  1139  000A86                     
  1140                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1141  000A86  948C               	bcf	140,2,c	;volatile
  1142  000A88  0012               	return		;funcret
  1143  000A8A                     __end_of_ENVIA_NIBBLE:
  1144                           	callstack 0
  1145                           
  1146                           	psect	rparam
  1147  0000                     
  1148                           	psect	idloc
  1149                           
  1150                           ;Config register IDLOC0 @ 0x200000
  1151                           ;	unspecified, using default values
  1152  200000                     	org	2097152
  1153  200000  FF                 	db	255
  1154                           
  1155                           ;Config register IDLOC1 @ 0x200001
  1156                           ;	unspecified, using default values
  1157  200001                     	org	2097153
  1158  200001  FF                 	db	255
  1159                           
  1160                           ;Config register IDLOC2 @ 0x200002
  1161                           ;	unspecified, using default values
  1162  200002                     	org	2097154
  1163  200002  FF                 	db	255
  1164                           
  1165                           ;Config register IDLOC3 @ 0x200003
  1166                           ;	unspecified, using default values
  1167  200003                     	org	2097155
  1168  200003  FF                 	db	255
  1169                           
  1170                           ;Config register IDLOC4 @ 0x200004
  1171                           ;	unspecified, using default values
  1172  200004                     	org	2097156
  1173  200004  FF                 	db	255
  1174                           
  1175                           ;Config register IDLOC5 @ 0x200005
  1176                           ;	unspecified, using default values
  1177  200005                     	org	2097157
  1178  200005  FF                 	db	255
  1179                           
  1180                           ;Config register IDLOC6 @ 0x200006
  1181                           ;	unspecified, using default values
  1182  200006                     	org	2097158
  1183  200006  FF                 	db	255
  1184                           
  1185                           ;Config register IDLOC7 @ 0x200007
  1186                           ;	unspecified, using default values
  1187  200007                     	org	2097159
  1188  200007  FF                 	db	255
  1189                           
  1190                           	psect	config
  1191                           
  1192                           ;Config register CONFIG1L @ 0x300000
  1193                           ;	PLL Prescaler Selection bits
  1194                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1195                           ;	System Clock Postscaler Selection bits
  1196                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1197                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1198                           ;	USBDIV = 0x0, unprogrammed default
  1199  300000                     	org	3145728
  1200  300000  00                 	db	0
  1201                           
  1202                           ;Config register CONFIG1H @ 0x300001
  1203                           ;	Oscillator Selection bits
  1204                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1205                           ;	Fail-Safe Clock Monitor Enable bit
  1206                           ;	FCMEN = 0x0, unprogrammed default
  1207                           ;	Internal/External Oscillator Switchover bit
  1208                           ;	IESO = 0x0, unprogrammed default
  1209  300001                     	org	3145729
  1210  300001  02                 	db	2
  1211                           
  1212                           ;Config register CONFIG2L @ 0x300002
  1213                           ;	Power-up Timer Enable bit
  1214                           ;	PWRT = ON, PWRT enabled
  1215                           ;	Brown-out Reset Enable bits
  1216                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1217                           ;	Brown-out Reset Voltage bits
  1218                           ;	BORV = 0x3, unprogrammed default
  1219                           ;	USB Voltage Regulator Enable bit
  1220                           ;	VREGEN = 0x0, unprogrammed default
  1221  300002                     	org	3145730
  1222  300002  18                 	db	24
  1223                           
  1224                           ;Config register CONFIG2H @ 0x300003
  1225                           ;	Watchdog Timer Enable bit
  1226                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1227                           ;	Watchdog Timer Postscale Select bits
  1228                           ;	WDTPS = 0xF, unprogrammed default
  1229  300003                     	org	3145731
  1230  300003  1E                 	db	30
  1231                           
  1232                           ; Padding undefined space
  1233  300004                     	org	3145732
  1234  300004  FF                 	db	255
  1235                           
  1236                           ;Config register CONFIG3H @ 0x300005
  1237                           ;	CCP2 MUX bit
  1238                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1239                           ;	PORTB A/D Enable bit
  1240                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1241                           ;	Low-Power Timer 1 Oscillator Enable bit
  1242                           ;	LPT1OSC = 0x0, unprogrammed default
  1243                           ;	MCLR Pin Enable bit
  1244                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1245  300005                     	org	3145733
  1246  300005  81                 	db	129
  1247                           
  1248                           ;Config register CONFIG4L @ 0x300006
  1249                           ;	Stack Full/Underflow Reset Enable bit
  1250                           ;	STVREN = 0x1, unprogrammed default
  1251                           ;	Single-Supply ICSP Enable bit
  1252                           ;	LVP = OFF, Single-Supply ICSP disabled
  1253                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1254                           ;	ICPRT = 0x0, unprogrammed default
  1255                           ;	Extended Instruction Set Enable bit
  1256                           ;	XINST = 0x0, unprogrammed default
  1257                           ;	Background Debugger Enable bit
  1258                           ;	DEBUG = 0x1, unprogrammed default
  1259  300006                     	org	3145734
  1260  300006  81                 	db	129
  1261                           
  1262                           ; Padding undefined space
  1263  300007                     	org	3145735
  1264  300007  FF                 	db	255
  1265                           
  1266                           ;Config register CONFIG5L @ 0x300008
  1267                           ;	unspecified, using default values
  1268                           ;	Code Protection bit
  1269                           ;	CP0 = 0x1, unprogrammed default
  1270                           ;	Code Protection bit
  1271                           ;	CP1 = 0x1, unprogrammed default
  1272                           ;	Code Protection bit
  1273                           ;	CP2 = 0x1, unprogrammed default
  1274                           ;	Code Protection bit
  1275                           ;	CP3 = 0x1, unprogrammed default
  1276  300008                     	org	3145736
  1277  300008  0F                 	db	15
  1278                           
  1279                           ;Config register CONFIG5H @ 0x300009
  1280                           ;	unspecified, using default values
  1281                           ;	Boot Block Code Protection bit
  1282                           ;	CPB = 0x1, unprogrammed default
  1283                           ;	Data EEPROM Code Protection bit
  1284                           ;	CPD = 0x1, unprogrammed default
  1285  300009                     	org	3145737
  1286  300009  C0                 	db	192
  1287                           
  1288                           ;Config register CONFIG6L @ 0x30000A
  1289                           ;	unspecified, using default values
  1290                           ;	Write Protection bit
  1291                           ;	WRT0 = 0x1, unprogrammed default
  1292                           ;	Write Protection bit
  1293                           ;	WRT1 = 0x1, unprogrammed default
  1294                           ;	Write Protection bit
  1295                           ;	WRT2 = 0x1, unprogrammed default
  1296                           ;	Write Protection bit
  1297                           ;	WRT3 = 0x1, unprogrammed default
  1298  30000A                     	org	3145738
  1299  30000A  0F                 	db	15
  1300                           
  1301                           ;Config register CONFIG6H @ 0x30000B
  1302                           ;	unspecified, using default values
  1303                           ;	Configuration Register Write Protection bit
  1304                           ;	WRTC = 0x1, unprogrammed default
  1305                           ;	Boot Block Write Protection bit
  1306                           ;	WRTB = 0x1, unprogrammed default
  1307                           ;	Data EEPROM Write Protection bit
  1308                           ;	WRTD = 0x1, unprogrammed default
  1309  30000B                     	org	3145739
  1310  30000B  E0                 	db	224
  1311                           
  1312                           ;Config register CONFIG7L @ 0x30000C
  1313                           ;	unspecified, using default values
  1314                           ;	Table Read Protection bit
  1315                           ;	EBTR0 = 0x1, unprogrammed default
  1316                           ;	Table Read Protection bit
  1317                           ;	EBTR1 = 0x1, unprogrammed default
  1318                           ;	Table Read Protection bit
  1319                           ;	EBTR2 = 0x1, unprogrammed default
  1320                           ;	Table Read Protection bit
  1321                           ;	EBTR3 = 0x1, unprogrammed default
  1322  30000C                     	org	3145740
  1323  30000C  0F                 	db	15
  1324                           
  1325                           ;Config register CONFIG7H @ 0x30000D
  1326                           ;	unspecified, using default values
  1327                           ;	Boot Block Table Read Protection bit
  1328                           ;	EBTRB = 0x1, unprogrammed default
  1329  30000D                     	org	3145741
  1330  30000D  40                 	db	64
  1331                           tosu	equ	0xFFF
  1332                           tosh	equ	0xFFE
  1333                           tosl	equ	0xFFD
  1334                           stkptr	equ	0xFFC
  1335                           pclatu	equ	0xFFB
  1336                           pclath	equ	0xFFA
  1337                           pcl	equ	0xFF9
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           prodh	equ	0xFF4
  1343                           prodl	equ	0xFF3
  1344                           indf0	equ	0xFEF
  1345                           postinc0	equ	0xFEE
  1346                           postdec0	equ	0xFED
  1347                           preinc0	equ	0xFEC
  1348                           plusw0	equ	0xFEB
  1349                           fsr0h	equ	0xFEA
  1350                           fsr0l	equ	0xFE9
  1351                           wreg	equ	0xFE8
  1352                           indf1	equ	0xFE7
  1353                           postinc1	equ	0xFE6
  1354                           postdec1	equ	0xFE5
  1355                           preinc1	equ	0xFE4
  1356                           plusw1	equ	0xFE3
  1357                           fsr1h	equ	0xFE2
  1358                           fsr1l	equ	0xFE1
  1359                           bsr	equ	0xFE0
  1360                           indf2	equ	0xFDF
  1361                           postinc2	equ	0xFDE
  1362                           postdec2	equ	0xFDD
  1363                           preinc2	equ	0xFDC
  1364                           plusw2	equ	0xFDB
  1365                           fsr2h	equ	0xFDA
  1366                           fsr2l	equ	0xFD9
  1367                           status	equ	0xFD8

Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9       9
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1400
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      9       9       1        9.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed Oct 14 11:48:43 2020

                      l24 08FA                        l51 09AC                        l19 0A6C  
                      l64 0A9E                        l81 0AA6                        l90 09E0  
                      l75 0972                        l84 08F4                        l69 0A44  
                      l94 085A                        l78 0A14                        l87 0A88  
                      l96 0894                        u10 0894                        u11 0890  
                      u20 0A28                        u21 0A24                        u30 0A3E  
                      u31 0A3A             ENVIA_CHAR@aux 0003                       l801 085C  
                     l803 0864                       l821 0A86                       l805 0868  
                     l813 0882                       l901 0A0E                       l815 0A70  
                     l807 0872                       l831 09C2                       l823 09B0  
                     l911 0A62                       l903 0A46                       l817 0A7C  
                     l809 087C                       l841 09D4                       l833 09C4  
                     l825 09B2                       l913 0A66                       l905 0A4A  
                     l819 0A7E                       l843 09DA                       l835 09C6  
                     l827 09B6                       l851 08AE                       l907 0A4E  
                     l781 082A                       l837 09C8                       l829 09BA  
                     l861 08DC                       l853 08C2                       l845 0896  
                     l909 0A5E                       l791 083C                       l783 082C  
                     l839 09CE                       l871 0A98                       l863 08E2  
                     l855 08CA                       l847 089A                       l793 0844  
                     l785 082E                       l777 0824                       l881 09E4  
                     l873 0A18                       l865 08E8                       l857 08D0  
                     l849 08A0                       l795 0846                       l787 0836  
                     l779 0828                       l891 09F8                       l883 09E6  
                     l971 0986                       l875 0A28                       l867 08EE  
                     l859 08D6                       l797 084E                       l789 083A  
                     l893 09FA                       l885 09EA                       l981 095E  
                     l973 0992                       l869 0AA0                       l877 0A2E  
                     l799 0850                       l895 09FC                       l887 09EE  
                     l983 0960                       l975 09A4                       l879 0A3E  
                     l897 0A02                       l889 09F6                       l977 0936  
                     l969 0976                       l985 08F6                       l899 0A08  
                     l979 0942                       l987 0904                       l989 0914  
                     u120 0986                       u121 0982                       u130 09A4  
                     u131 09A0                       u140 0972                       u141 096E  
                     u207 09F0                       u217 0830                       u227 083E  
                     u237 0848                       u157 0A54                       u247 085E  
                     u167 08A6                       u257 086C                       u177 08B4  
                     u267 0876                       u187 08C4                       u277 0A80  
                     u197 09BC               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002  
                    STR_1 0812                      STR_2 0801                      _LATD 000F8C  
                    _main 08F6                      start 0000             ?_CURSOR_ONOFF 0001  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 0896  
     __size_of_BORRAR_LCD 0008                     ?_main 0001                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0004                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0004           __initialization 0A8A              __end_of_main 0936  
         _ESCRIBE_MENSAJE 0936                    ??_main 000A             __activetblptr 000001  
        __end_of_lcd_init 0A6E      __end_of_ENVIA_NIBBLE 0A8A       __size_of_POS_CURSOR 003A  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008  
               ?_LEER_LCD 0001                __accesstop 0060   __end_of__initialization 0A8A  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0974            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0AA8  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0A46        __end_of_LCD_CONFIG 08F6  
      __end_of_ENVIA_CHAR 0A16                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
            ??_POS_CURSOR 0005                 ?_lcd_init 0001     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 09E2                   __pcinit 0A8A  
      __end_of_POS_CURSOR 09AE                   __ramtop 0800                   __ptext0 08F6  
                 __ptext1 0A46                   __ptext2 0896                   __ptext3 0A16  
                 __ptext4 0A98                   __ptext5 0AA0                   __ptext6 0974  
                 __ptext7 09AE                   __ptext8 0936                   __ptext9 09E2  
              ??_lcd_init 0005              _ENVIA_NIBBLE 0A6E      end_of_initialization 0A8A  
   __size_of_CURSOR_ONOFF 0030         __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0A16  
      CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004       start_initialization 0A8A  
       ENVIA_LCD_CMD@dato 0002       __end_of_CURSOR_HOME 0AA0         __size_of_lcd_init 0028  
             __smallconst 0800                  _LEER_LCD 0824                  _LATDbits 000F8C  
        ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E  
             _CURSOR_HOME 0A98    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800                  __ptext10 0824  
                __ptext11 0A6E                _BORRAR_LCD 0AA0                  _lcd_init 0A46  
           __size_of_main 0040                _LCD_CONFIG 0896                _ENVIA_CHAR 09E2  
           _ENVIA_LCD_CMD 09AE         ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004  
          ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0974               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
