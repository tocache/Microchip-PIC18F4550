

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Oct 15 14:49:06 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     _PORTD	set	3971
    60  0000                     _LATD	set	3980
    61  0000                     _LATDbits	set	3980
    62  0000                     _PORTBbits	set	3969
    63  0000                     _TRISD	set	3989
    64                           
    65                           	psect	smallconst
    66  000800                     __psmallconst:
    67                           	callstack 0
    68  000800  00                 	db	0
    69  000801                     STR_3:
    70  000801  20                 	db	32
    71  000802  20                 	db	32
    72  000803  20                 	db	32
    73  000804  20                 	db	32
    74  000805  53                 	db	83	;'S'
    75  000806  6F                 	db	111	;'o'
    76  000807  6C                 	db	108	;'l'
    77  000808  74                 	db	116	;'t'
    78  000809  61                 	db	97	;'a'
    79  00080A  64                 	db	100	;'d'
    80  00080B  6F                 	db	111	;'o'
    81  00080C  20                 	db	32
    82  00080D  20                 	db	32
    83  00080E  20                 	db	32
    84  00080F  20                 	db	32
    85  000810  20                 	db	32
    86  000811  00                 	db	0
    87  000812                     STR_2:
    88  000812  20                 	db	32
    89  000813  20                 	db	32
    90  000814  20                 	db	32
    91  000815  50                 	db	80	;'P'
    92  000816  72                 	db	114	;'r'
    93  000817  65                 	db	101	;'e'
    94  000818  73                 	db	115	;'s'
    95  000819  69                 	db	105	;'i'
    96  00081A  6F                 	db	111	;'o'
    97  00081B  6E                 	db	110	;'n'
    98  00081C  61                 	db	97	;'a'
    99  00081D  64                 	db	100	;'d'
   100  00081E  6F                 	db	111	;'o'
   101  00081F  20                 	db	32
   102  000820  20                 	db	32
   103  000821  20                 	db	32
   104  000822  00                 	db	0
   105  000823                     STR_1:
   106  000823  45                 	db	69	;'E'
   107  000824  73                 	db	115	;'s'
   108  000825  74                 	db	116	;'t'
   109  000826  61                 	db	97	;'a'
   110  000827  64                 	db	100	;'d'
   111  000828  6F                 	db	111	;'o'
   112  000829  20                 	db	32
   113  00082A  64                 	db	100	;'d'
   114  00082B  65                 	db	101	;'e'
   115  00082C  6C                 	db	108	;'l'
   116  00082D  20                 	db	32
   117  00082E  62                 	db	98	;'b'
   118  00082F  6F                 	db	111	;'o'
   119  000830  74                 	db	116	;'t'
   120  000831  6F                 	db	111	;'o'
   121  000832  6E                 	db	110	;'n'
   122  000833  00                 	db	0
   123  000834  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           ; #config settings
   126                           
   127                           	psect	cinit
   128  000AC8                     __pcinit:
   129                           	callstack 0
   130  000AC8                     start_initialization:
   131                           	callstack 0
   132  000AC8                     __initialization:
   133                           	callstack 0
   134  000AC8                     end_of_initialization:
   135                           	callstack 0
   136  000AC8                     __end_of__initialization:
   137                           	callstack 0
   138  000AC8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   139  000ACA  6EF8               	movwf	tblptru,c
   140  000ACC  0E08               	movlw	high __Lsmallconst
   141  000ACE  6EF7               	movwf	tblptrh,c
   142  000AD0  0100               	movlb	0
   143  000AD2  EF54  F004         	goto	_main	;jump to C main() function
   144                           
   145                           	psect	cstackCOMRAM
   146  000001                     __pcstackCOMRAM:
   147                           	callstack 0
   148  000001                     ENVIA_NIBBLE@dato:
   149                           	callstack 0
   150  000001                     LEER_LCD@aux:
   151                           	callstack 0
   152                           
   153                           ; 1 bytes @ 0x0
   154  000001                     	ds	1
   155  000002                     ENVIA_CHAR@dato:
   156                           	callstack 0
   157  000002                     ENVIA_LCD_CMD@dato:
   158                           	callstack 0
   159                           
   160                           ; 1 bytes @ 0x1
   161  000002                     	ds	1
   162  000003                     ENVIA_CHAR@aux:
   163                           	callstack 0
   164  000003                     ENVIA_LCD_CMD@aux:
   165                           	callstack 0
   166                           
   167                           ; 1 bytes @ 0x2
   168  000003                     	ds	1
   169  000004                     ??_LCD_CONFIG:
   170  000004                     POS_CURSOR@columna:
   171                           	callstack 0
   172  000004                     CURSOR_ONOFF@estado:
   173                           	callstack 0
   174  000004                     ESCRIBE_MENSAJE@cadena:
   175                           	callstack 0
   176                           
   177                           ; 2 bytes @ 0x3
   178  000004                     	ds	1
   179  000005                     ??_lcd_init:
   180  000005                     POS_CURSOR@fila:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x4
   184  000005                     	ds	1
   185  000006                     ESCRIBE_MENSAJE@tam:
   186                           	callstack 0
   187                           
   188                           ; 1 bytes @ 0x5
   189  000006                     	ds	1
   190  000007                     ??_ESCRIBE_MENSAJE:
   191                           
   192                           ; 1 bytes @ 0x6
   193  000007                     	ds	2
   194  000009                     ESCRIBE_MENSAJE@i:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x8
   198  000009                     	ds	1
   199  00000A                     
   200                           ; 1 bytes @ 0x9
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 25 in file "maincode.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;		None
   209 ;; Auto vars:     Size  Location     Type
   210 ;;		None
   211 ;; Return value:  Size  Location     Type
   212 ;;                  1    wreg      void 
   213 ;; Registers used:
   214 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   215 ;; Tracked objects:
   216 ;;		On entry : 0/0
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   220 ;;      Params:         0       0       0       0       0       0       0       0       0
   221 ;;      Locals:         0       0       0       0       0       0       0       0       0
   222 ;;      Temps:          0       0       0       0       0       0       0       0       0
   223 ;;      Totals:         0       0       0       0       0       0       0       0       0
   224 ;;Total ram usage:        0 bytes
   225 ;; Hardware stack levels required when called:    4
   226 ;; This function calls:
   227 ;;		_ESCRIBE_MENSAJE
   228 ;;		_POS_CURSOR
   229 ;;		_lcd_init
   230 ;; This function is called by:
   231 ;;		Startup code after reset
   232 ;; This function uses a non-reentrant model
   233 ;;
   234                           
   235                           	psect	text0
   236  0008A8                     __ptext0:
   237                           	callstack 0
   238  0008A8                     _main:
   239                           	callstack 27
   240  0008A8                     
   241                           ;maincode.c: 26:     lcd_init();
   242  0008A8  EC42  F005         	call	_lcd_init	;wreg free
   243  0008AC                     l26:
   244                           
   245                           ;maincode.c: 28:         POS_CURSOR(1,0);
   246  0008AC  0E00               	movlw	0
   247  0008AE  6E04               	movwf	POS_CURSOR@columna^0,c
   248  0008B0  0E01               	movlw	1
   249  0008B2  ECD9  F004         	call	_POS_CURSOR
   250  0008B6                     
   251                           ;maincode.c: 29:         ESCRIBE_MENSAJE("Estado del boton", 16);
   252  0008B6  0E23               	movlw	low STR_1
   253  0008B8  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   254  0008BA  0E08               	movlw	high STR_1
   255  0008BC  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   256  0008BE  0E10               	movlw	16
   257  0008C0  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   258  0008C2  ECBA  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   259  0008C6                     
   260                           ;maincode.c: 30:         if (PORTBbits.RB7 == 1){
   261  0008C6  AE81               	btfss	129,7,c	;volatile
   262  0008C8  EF68  F004         	goto	u161
   263  0008CC  EF6A  F004         	goto	u160
   264  0008D0                     u161:
   265  0008D0  EF79  F004         	goto	l1007
   266  0008D4                     u160:
   267  0008D4                     
   268                           ;maincode.c: 31:             POS_CURSOR(2,0);
   269  0008D4  0E00               	movlw	0
   270  0008D6  6E04               	movwf	POS_CURSOR@columna^0,c
   271  0008D8  0E02               	movlw	2
   272  0008DA  ECD9  F004         	call	_POS_CURSOR
   273  0008DE                     
   274                           ;maincode.c: 32:             ESCRIBE_MENSAJE("   Presionado   ", 16);
   275  0008DE  0E12               	movlw	low STR_2
   276  0008E0  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   277  0008E2  0E08               	movlw	high STR_2
   278  0008E4  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   279  0008E6  0E10               	movlw	16
   280  0008E8  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   281  0008EA  ECBA  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   282                           
   283                           ;maincode.c: 33:         }
   284  0008EE  EF56  F004         	goto	l26
   285  0008F2                     l1007:
   286                           
   287                           ;maincode.c: 35:             POS_CURSOR(2,0);
   288  0008F2  0E00               	movlw	0
   289  0008F4  6E04               	movwf	POS_CURSOR@columna^0,c
   290  0008F6  0E02               	movlw	2
   291  0008F8  ECD9  F004         	call	_POS_CURSOR
   292  0008FC                     
   293                           ;maincode.c: 36:             ESCRIBE_MENSAJE("    Soltado     ", 16);
   294  0008FC  0E01               	movlw	low STR_3
   295  0008FE  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   296  000900  0E08               	movlw	high STR_3
   297  000902  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   298  000904  0E10               	movlw	16
   299  000906  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   300  000908  ECBA  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   301  00090C  EF56  F004         	goto	l26
   302  000910  EF00  F000         	goto	start
   303  000914                     __end_of_main:
   304                           	callstack 0
   305                           
   306 ;; *************** function _lcd_init *****************
   307 ;; Defined at:
   308 ;;		line 16 in file "maincode.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   322 ;;      Params:         0       0       0       0       0       0       0       0       0
   323 ;;      Locals:         0       0       0       0       0       0       0       0       0
   324 ;;      Temps:          1       0       0       0       0       0       0       0       0
   325 ;;      Totals:         1       0       0       0       0       0       0       0       0
   326 ;;Total ram usage:        1 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; Hardware stack levels required when called:    3
   329 ;; This function calls:
   330 ;;		_BORRAR_LCD
   331 ;;		_CURSOR_HOME
   332 ;;		_CURSOR_ONOFF
   333 ;;		_LCD_CONFIG
   334 ;; This function is called by:
   335 ;;		_main
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339                           	psect	text1
   340  000A84                     __ptext1:
   341                           	callstack 0
   342  000A84                     _lcd_init:
   343                           	callstack 27
   344  000A84                     
   345                           ;maincode.c: 17:     TRISD = 0x00;
   346  000A84  0E00               	movlw	0
   347  000A86  6E95               	movwf	149,c	;volatile
   348  000A88                     
   349                           ;maincode.c: 18:     LCD_CONFIG();
   350  000A88  EC8A  F004         	call	_LCD_CONFIG	;wreg free
   351  000A8C                     
   352                           ;maincode.c: 19:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   353  000A8C  0EEA               	movlw	234
   354  000A8E  6E05               	movwf	??_lcd_init^0,c
   355  000A90  0EC3               	movlw	195
   356  000A92                     u177:
   357  000A92  2EE8               	decfsz	wreg,f,c
   358  000A94  D7FE               	bra	u177
   359  000A96  2E05               	decfsz	??_lcd_init^0,f,c
   360  000A98  D7FC               	bra	u177
   361  000A9A  F000               	nop	
   362  000A9C                     
   363                           ;maincode.c: 20:     BORRAR_LCD();
   364  000A9C  EC6F  F005         	call	_BORRAR_LCD	;wreg free
   365  000AA0                     
   366                           ;maincode.c: 21:     CURSOR_HOME();
   367  000AA0  EC6B  F005         	call	_CURSOR_HOME	;wreg free
   368  000AA4                     
   369                           ;maincode.c: 22:     CURSOR_ONOFF(1);
   370  000AA4  0E01               	movlw	1
   371  000AA6  EC2A  F005         	call	_CURSOR_ONOFF
   372  000AAA  0012               	return		;funcret
   373  000AAC                     __end_of_lcd_init:
   374                           	callstack 0
   375                           
   376 ;; *************** function _LCD_CONFIG *****************
   377 ;; Defined at:
   378 ;;		line 72 in file "LCD.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      void 
   385 ;; Registers used:
   386 ;;		wreg, status,2, status,0, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   392 ;;      Params:         0       0       0       0       0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0
   394 ;;      Temps:          1       0       0       0       0       0       0       0       0
   395 ;;      Totals:         1       0       0       0       0       0       0       0       0
   396 ;;Total ram usage:        1 bytes
   397 ;; Hardware stack levels used:    1
   398 ;; Hardware stack levels required when called:    2
   399 ;; This function calls:
   400 ;;		_ENVIA_LCD_CMD
   401 ;;		_ENVIA_NIBBLE
   402 ;; This function is called by:
   403 ;;		_lcd_init
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text2
   408  000914                     __ptext2:
   409                           	callstack 0
   410  000914                     _LCD_CONFIG:
   411                           	callstack 27
   412  000914                     
   413                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   414  000914  908C               	bcf	140,0,c	;volatile
   415                           
   416                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   417  000916  928C               	bcf	140,1,c	;volatile
   418  000918                     
   419                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   420  000918  0E30               	movlw	48
   421  00091A  EC56  F005         	call	_ENVIA_NIBBLE
   422  00091E                     
   423                           ;LCD.c: 77:         _delay(24000);
   424  00091E  0E20               	movlw	32
   425  000920  6E04               	movwf	??_LCD_CONFIG^0,c
   426  000922  0E2A               	movlw	42
   427  000924                     u187:
   428  000924  2EE8               	decfsz	wreg,f,c
   429  000926  D7FE               	bra	u187
   430  000928  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   431  00092A  D7FC               	bra	u187
   432  00092C                     
   433                           ;LCD.c: 78:         _delay(24000);
   434  00092C  0E20               	movlw	32
   435  00092E  6E04               	movwf	??_LCD_CONFIG^0,c
   436  000930  0E2A               	movlw	42
   437  000932                     u197:
   438  000932  2EE8               	decfsz	wreg,f,c
   439  000934  D7FE               	bra	u197
   440  000936  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   441  000938  D7FC               	bra	u197
   442                           
   443                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   444  00093A  0E30               	movlw	48
   445  00093C  EC56  F005         	call	_ENVIA_NIBBLE
   446  000940                     
   447                           ;LCD.c: 83:  _delay(1200);
   448  000940  0EF0               	movlw	240
   449  000942                     u207:
   450  000942  D000               	nop2	
   451  000944  2EE8               	decfsz	wreg,f,c
   452  000946  D7FD               	bra	u207
   453  000948                     
   454                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   455  000948  0E30               	movlw	48
   456  00094A  EC56  F005         	call	_ENVIA_NIBBLE
   457  00094E                     
   458                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   459  00094E  0E20               	movlw	32
   460  000950  EC56  F005         	call	_ENVIA_NIBBLE
   461  000954                     
   462                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   463  000954  0E01               	movlw	1
   464  000956  ECF6  F004         	call	_ENVIA_LCD_CMD
   465  00095A                     
   466                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   467  00095A  0E28               	movlw	40
   468  00095C  ECF6  F004         	call	_ENVIA_LCD_CMD
   469  000960                     
   470                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   471  000960  0E0F               	movlw	15
   472  000962  ECF6  F004         	call	_ENVIA_LCD_CMD
   473  000966                     
   474                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   475  000966  0E06               	movlw	6
   476  000968  ECF6  F004         	call	_ENVIA_LCD_CMD
   477  00096C                     
   478                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   479  00096C  0E01               	movlw	1
   480  00096E  ECF6  F004         	call	_ENVIA_LCD_CMD
   481  000972  0012               	return		;funcret
   482  000974                     __end_of_LCD_CONFIG:
   483                           	callstack 0
   484                           
   485 ;; *************** function _CURSOR_ONOFF *****************
   486 ;; Defined at:
   487 ;;		line 35 in file "LCD.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;  estado          1    wreg     unsigned char 
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  estado          1    3[COMRAM] unsigned char 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, status,2, status,0, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   501 ;;      Params:         0       0       0       0       0       0       0       0       0
   502 ;;      Locals:         1       0       0       0       0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0
   504 ;;      Totals:         1       0       0       0       0       0       0       0       0
   505 ;;Total ram usage:        1 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; Hardware stack levels required when called:    2
   508 ;; This function calls:
   509 ;;		_ENVIA_LCD_CMD
   510 ;; This function is called by:
   511 ;;		_lcd_init
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515                           	psect	text3
   516  000A54                     __ptext3:
   517                           	callstack 0
   518  000A54                     _CURSOR_ONOFF:
   519                           	callstack 27
   520                           
   521                           ;incstack = 0
   522                           ;CURSOR_ONOFF@estado stored from wreg
   523  000A54  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   524  000A56                     
   525                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   526  000A56  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   527  000A58  A4D8               	btfss	status,2,c
   528  000A5A  EF31  F005         	goto	u21
   529  000A5E  EF33  F005         	goto	u20
   530  000A62                     u21:
   531  000A62  EF36  F005         	goto	l881
   532  000A66                     u20:
   533  000A66  0E0E               	movlw	14
   534  000A68  ECF6  F004         	call	_ENVIA_LCD_CMD
   535  000A6C                     l881:
   536                           
   537                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   538  000A6C  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   539  000A6E  A4D8               	btfss	status,2,c
   540  000A70  EF3C  F005         	goto	u31
   541  000A74  EF3E  F005         	goto	u30
   542  000A78                     u31:
   543  000A78  EF41  F005         	goto	l73
   544  000A7C                     u30:
   545  000A7C  0E0C               	movlw	12
   546  000A7E  ECF6  F004         	call	_ENVIA_LCD_CMD
   547  000A82                     l73:
   548  000A82  0012               	return		;funcret
   549  000A84                     __end_of_CURSOR_ONOFF:
   550                           	callstack 0
   551                           
   552 ;; *************** function _CURSOR_HOME *****************
   553 ;; Defined at:
   554 ;;		line 30 in file "LCD.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		wreg, status,2, status,0, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   568 ;;      Params:         0       0       0       0       0       0       0       0       0
   569 ;;      Locals:         0       0       0       0       0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0
   571 ;;      Totals:         0       0       0       0       0       0       0       0       0
   572 ;;Total ram usage:        0 bytes
   573 ;; Hardware stack levels used:    1
   574 ;; Hardware stack levels required when called:    2
   575 ;; This function calls:
   576 ;;		_ENVIA_LCD_CMD
   577 ;; This function is called by:
   578 ;;		_lcd_init
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text4
   583  000AD6                     __ptext4:
   584                           	callstack 0
   585  000AD6                     _CURSOR_HOME:
   586                           	callstack 27
   587  000AD6                     
   588                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   589  000AD6  0E02               	movlw	2
   590  000AD8  ECF6  F004         	call	_ENVIA_LCD_CMD
   591  000ADC  0012               	return		;funcret
   592  000ADE                     __end_of_CURSOR_HOME:
   593                           	callstack 0
   594                           
   595 ;; *************** function _BORRAR_LCD *****************
   596 ;; Defined at:
   597 ;;		line 67 in file "LCD.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, status,2, status,0, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   611 ;;      Params:         0       0       0       0       0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0       0       0       0       0
   614 ;;      Totals:         0       0       0       0       0       0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; Hardware stack levels required when called:    2
   618 ;; This function calls:
   619 ;;		_ENVIA_LCD_CMD
   620 ;; This function is called by:
   621 ;;		_lcd_init
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           	psect	text5
   626  000ADE                     __ptext5:
   627                           	callstack 0
   628  000ADE                     _BORRAR_LCD:
   629                           	callstack 27
   630  000ADE                     
   631                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   632  000ADE  0E01               	movlw	1
   633  000AE0  ECF6  F004         	call	_ENVIA_LCD_CMD
   634  000AE4  0012               	return		;funcret
   635  000AE6                     __end_of_BORRAR_LCD:
   636                           	callstack 0
   637                           
   638 ;; *************** function _POS_CURSOR *****************
   639 ;; Defined at:
   640 ;;		line 6 in file "LCD.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  fila            1    wreg     unsigned char 
   643 ;;  columna         1    3[COMRAM] unsigned char 
   644 ;; Auto vars:     Size  Location     Type
   645 ;;  fila            1    4[COMRAM] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   655 ;;      Params:         1       0       0       0       0       0       0       0       0
   656 ;;      Locals:         1       0       0       0       0       0       0       0       0
   657 ;;      Temps:          0       0       0       0       0       0       0       0       0
   658 ;;      Totals:         2       0       0       0       0       0       0       0       0
   659 ;;Total ram usage:        2 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    2
   662 ;; This function calls:
   663 ;;		_ENVIA_LCD_CMD
   664 ;; This function is called by:
   665 ;;		_main
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           	psect	text6
   670  0009B2                     __ptext6:
   671                           	callstack 0
   672  0009B2                     _POS_CURSOR:
   673                           	callstack 28
   674                           
   675                           ;incstack = 0
   676                           ;POS_CURSOR@fila stored from wreg
   677  0009B2  6E05               	movwf	POS_CURSOR@fila^0,c
   678  0009B4                     
   679                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
   680  0009B4  0405               	decf	POS_CURSOR@fila^0,w,c
   681  0009B6  A4D8               	btfss	status,2,c
   682  0009B8  EFE0  F004         	goto	u131
   683  0009BC  EFE2  F004         	goto	u130
   684  0009C0                     u131:
   685  0009C0  EFE8  F004         	goto	l985
   686  0009C4                     u130:
   687  0009C4                     
   688                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
   689  0009C4  5004               	movf	POS_CURSOR@columna^0,w,c
   690  0009C6  0F80               	addlw	128
   691  0009C8  ECF6  F004         	call	_ENVIA_LCD_CMD
   692                           
   693                           ;LCD.c: 11:  }
   694  0009CC  EFF5  F004         	goto	l55
   695  0009D0                     l985:
   696  0009D0  0E02               	movlw	2
   697  0009D2  1805               	xorwf	POS_CURSOR@fila^0,w,c
   698  0009D4  A4D8               	btfss	status,2,c
   699  0009D6  EFEF  F004         	goto	u141
   700  0009DA  EFF1  F004         	goto	u140
   701  0009DE                     u141:
   702  0009DE  EFF5  F004         	goto	l55
   703  0009E2                     u140:
   704  0009E2                     
   705                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
   706  0009E2  5004               	movf	POS_CURSOR@columna^0,w,c
   707  0009E4  0FC0               	addlw	192
   708  0009E6  ECF6  F004         	call	_ENVIA_LCD_CMD
   709  0009EA                     l55:
   710  0009EA  0012               	return		;funcret
   711  0009EC                     __end_of_POS_CURSOR:
   712                           	callstack 0
   713                           
   714 ;; *************** function _ENVIA_LCD_CMD *****************
   715 ;; Defined at:
   716 ;;		line 104 in file "LCD.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;  dato            1    wreg     unsigned char 
   719 ;; Auto vars:     Size  Location     Type
   720 ;;  dato            1    1[COMRAM] unsigned char 
   721 ;;  aux             1    2[COMRAM] unsigned char 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, status,2, status,0, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   731 ;;      Params:         0       0       0       0       0       0       0       0       0
   732 ;;      Locals:         2       0       0       0       0       0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0       0       0
   734 ;;      Totals:         2       0       0       0       0       0       0       0       0
   735 ;;Total ram usage:        2 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    1
   738 ;; This function calls:
   739 ;;		_ENVIA_NIBBLE
   740 ;;		_LEER_LCD
   741 ;; This function is called by:
   742 ;;		_POS_CURSOR
   743 ;;		_CURSOR_HOME
   744 ;;		_CURSOR_ONOFF
   745 ;;		_BORRAR_LCD
   746 ;;		_LCD_CONFIG
   747 ;;		_BLINK_CURSOR
   748 ;;		_DISPLAY_ONOFF
   749 ;;		_GENERACARACTER
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	text7
   754  0009EC                     __ptext7:
   755                           	callstack 0
   756  0009EC                     _ENVIA_LCD_CMD:
   757                           	callstack 27
   758                           
   759                           ;incstack = 0
   760                           ;ENVIA_LCD_CMD@dato stored from wreg
   761  0009EC  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
   762  0009EE                     
   763                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
   764  0009EE  908C               	bcf	140,0,c	;volatile
   765  0009F0                     
   766                           ;LCD.c: 108:  LEER_LCD();
   767  0009F0  EC1B  F004         	call	_LEER_LCD	;wreg free
   768  0009F4                     
   769                           ;LCD.c: 109:  TRISD = 0b00000000;
   770  0009F4  0E00               	movlw	0
   771  0009F6  6E95               	movwf	149,c	;volatile
   772  0009F8                     
   773                           ;LCD.c: 111:         _delay(1200);
   774  0009F8  0EF0               	movlw	240
   775  0009FA                     u217:
   776  0009FA  D000               	nop2	
   777  0009FC  2EE8               	decfsz	wreg,f,c
   778  0009FE  D7FD               	bra	u217
   779  000A00                     
   780                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
   781  000A00  928C               	bcf	140,1,c	;volatile
   782  000A02                     
   783                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
   784  000A02  948C               	bcf	140,2,c	;volatile
   785  000A04                     
   786                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
   787  000A04  908C               	bcf	140,0,c	;volatile
   788  000A06                     
   789                           ;LCD.c: 115:  aux = dato & 0xF0;
   790  000A06  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
   791  000A08  0BF0               	andlw	240
   792  000A0A  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
   793  000A0C                     
   794                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
   795  000A0C  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
   796  000A0E  EC56  F005         	call	_ENVIA_NIBBLE
   797  000A12                     
   798                           ;LCD.c: 117:  aux = dato<<4;
   799  000A12  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
   800  000A14  0BF0               	andlw	240
   801  000A16  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
   802  000A18                     
   803                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
   804  000A18  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
   805  000A1A  EC56  F005         	call	_ENVIA_NIBBLE
   806  000A1E  0012               	return		;funcret
   807  000A20                     __end_of_ENVIA_LCD_CMD:
   808                           	callstack 0
   809                           
   810 ;; *************** function _ESCRIBE_MENSAJE *****************
   811 ;; Defined at:
   812 ;;		line 41 in file "LCD.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   815 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
   816 ;;  tam             1    5[COMRAM] unsigned char 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  i               1    8[COMRAM] unsigned char 
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   828 ;;      Params:         3       0       0       0       0       0       0       0       0
   829 ;;      Locals:         1       0       0       0       0       0       0       0       0
   830 ;;      Temps:          2       0       0       0       0       0       0       0       0
   831 ;;      Totals:         6       0       0       0       0       0       0       0       0
   832 ;;Total ram usage:        6 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		_ENVIA_CHAR
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text8
   843  000974                     __ptext8:
   844                           	callstack 0
   845  000974                     _ESCRIBE_MENSAJE:
   846                           	callstack 28
   847  000974                     
   848                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
   849  000974  0E00               	movlw	0
   850  000976  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   851                           
   852                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
   853  000978  0E00               	movlw	0
   854  00097A  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
   855  00097C  EFCF  F004         	goto	l995
   856  000980                     l991:
   857                           
   858                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
   859  000980  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
   860  000982  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
   861  000984  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
   862  000986  0E00               	movlw	0
   863  000988  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
   864  00098A  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
   865  00098C  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   866  000990  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   867  000994                     	if	0	;tblptru may be non-zero
   868  000994                     	endif
   869  000994                     	if	0	;tblptru may be non-zero
   870  000994                     	endif
   871  000994  0008               	tblrd		*
   872  000996  50F5               	movf	tablat,w,c
   873  000998  EC10  F005         	call	_ENVIA_CHAR
   874  00099C                     
   875                           ;LCD.c: 47:  }
   876  00099C  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
   877  00099E                     l995:
   878  00099E  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
   879  0009A0  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
   880  0009A2  A0D8               	btfss	status,0,c
   881  0009A4  EFD6  F004         	goto	u151
   882  0009A8  EFD8  F004         	goto	u150
   883  0009AC                     u151:
   884  0009AC  EFC0  F004         	goto	l991
   885  0009B0                     u150:
   886  0009B0  0012               	return		;funcret
   887  0009B2                     __end_of_ESCRIBE_MENSAJE:
   888                           	callstack 0
   889                           
   890 ;; *************** function _ENVIA_CHAR *****************
   891 ;; Defined at:
   892 ;;		line 50 in file "LCD.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;  dato            1    wreg     unsigned char 
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  dato            1    1[COMRAM] unsigned char 
   897 ;;  aux             1    2[COMRAM] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   907 ;;      Params:         0       0       0       0       0       0       0       0       0
   908 ;;      Locals:         2       0       0       0       0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0       0       0
   910 ;;      Totals:         2       0       0       0       0       0       0       0       0
   911 ;;Total ram usage:        2 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    1
   914 ;; This function calls:
   915 ;;		_ENVIA_NIBBLE
   916 ;;		_LEER_LCD
   917 ;; This function is called by:
   918 ;;		_ESCRIBE_MENSAJE
   919 ;;		_GENERACARACTER
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text9
   924  000A20                     __ptext9:
   925                           	callstack 0
   926  000A20                     _ENVIA_CHAR:
   927                           	callstack 28
   928                           
   929                           ;incstack = 0
   930                           ;ENVIA_CHAR@dato stored from wreg
   931  000A20  6E02               	movwf	ENVIA_CHAR@dato^0,c
   932  000A22                     
   933                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
   934  000A22  808C               	bsf	140,0,c	;volatile
   935  000A24                     
   936                           ;LCD.c: 54:  LEER_LCD();
   937  000A24  EC1B  F004         	call	_LEER_LCD	;wreg free
   938  000A28                     
   939                           ;LCD.c: 55:  TRISD = 0x00;
   940  000A28  0E00               	movlw	0
   941  000A2A  6E95               	movwf	149,c	;volatile
   942  000A2C                     
   943                           ;LCD.c: 56:         _delay(1200);
   944  000A2C  0EF0               	movlw	240
   945  000A2E                     u227:
   946  000A2E  D000               	nop2	
   947  000A30  2EE8               	decfsz	wreg,f,c
   948  000A32  D7FD               	bra	u227
   949  000A34                     
   950                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
   951  000A34  928C               	bcf	140,1,c	;volatile
   952  000A36                     
   953                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
   954  000A36  948C               	bcf	140,2,c	;volatile
   955  000A38                     
   956                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
   957  000A38  808C               	bsf	140,0,c	;volatile
   958  000A3A                     
   959                           ;LCD.c: 61:  aux = dato & 0xF0;
   960  000A3A  5002               	movf	ENVIA_CHAR@dato^0,w,c
   961  000A3C  0BF0               	andlw	240
   962  000A3E  6E03               	movwf	ENVIA_CHAR@aux^0,c
   963  000A40                     
   964                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
   965  000A40  5003               	movf	ENVIA_CHAR@aux^0,w,c
   966  000A42  EC56  F005         	call	_ENVIA_NIBBLE
   967  000A46                     
   968                           ;LCD.c: 63:  aux = dato << 4;
   969  000A46  3802               	swapf	ENVIA_CHAR@dato^0,w,c
   970  000A48  0BF0               	andlw	240
   971  000A4A  6E03               	movwf	ENVIA_CHAR@aux^0,c
   972  000A4C                     
   973                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
   974  000A4C  5003               	movf	ENVIA_CHAR@aux^0,w,c
   975  000A4E  EC56  F005         	call	_ENVIA_NIBBLE
   976  000A52  0012               	return		;funcret
   977  000A54                     __end_of_ENVIA_CHAR:
   978                           	callstack 0
   979                           
   980 ;; *************** function _LEER_LCD *****************
   981 ;; Defined at:
   982 ;;		line 121 in file "LCD.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  aux             1    0[COMRAM] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   996 ;;      Params:         0       0       0       0       0       0       0       0       0
   997 ;;      Locals:         1       0       0       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0       0
   999 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1000 ;;Total ram usage:        1 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_ENVIA_CHAR
  1006 ;;		_ENVIA_LCD_CMD
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text10
  1011  000836                     __ptext10:
  1012                           	callstack 0
  1013  000836                     _LEER_LCD:
  1014                           	callstack 27
  1015  000836                     
  1016                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1017  000836  0EF8               	movlw	248
  1018  000838  6E95               	movwf	149,c	;volatile
  1019  00083A                     
  1020                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1021  00083A  908C               	bcf	140,0,c	;volatile
  1022  00083C                     
  1023                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1024  00083C  828C               	bsf	140,1,c	;volatile
  1025  00083E                     
  1026                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1027  00083E  848C               	bsf	140,2,c	;volatile
  1028  000840                     
  1029                           ;LCD.c: 128:         _delay(1200);
  1030  000840  0EF0               	movlw	240
  1031  000842                     u237:
  1032  000842  D000               	nop2	
  1033  000844  2EE8               	decfsz	wreg,f,c
  1034  000846  D7FD               	bra	u237
  1035  000848                     
  1036                           ;LCD.c: 130:  aux = PORTD;
  1037  000848  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1038  00084C                     
  1039                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1040  00084C  948C               	bcf	140,2,c	;volatile
  1041  00084E                     
  1042                           ;LCD.c: 132:         _delay(1200);
  1043  00084E  0EF0               	movlw	240
  1044  000850                     u247:
  1045  000850  D000               	nop2	
  1046  000852  2EE8               	decfsz	wreg,f,c
  1047  000854  D7FD               	bra	u247
  1048  000856                     
  1049                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1050  000856  848C               	bsf	140,2,c	;volatile
  1051  000858                     
  1052                           ;LCD.c: 135:         _delay(1200);
  1053  000858  0EF0               	movlw	240
  1054  00085A                     u257:
  1055  00085A  D000               	nop2	
  1056  00085C  2EE8               	decfsz	wreg,f,c
  1057  00085E  D7FD               	bra	u257
  1058  000860                     
  1059                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1060  000860  948C               	bcf	140,2,c	;volatile
  1061  000862                     l803:
  1062                           
  1063                           ;LCD.c: 138:  aux = aux & 0x80;
  1064  000862  5001               	movf	LEER_LCD@aux^0,w,c
  1065  000864  0B80               	andlw	128
  1066  000866  6E01               	movwf	LEER_LCD@aux^0,c
  1067                           
  1068                           ;LCD.c: 139:  while(aux == 0x80)
  1069  000868  EF4A  F004         	goto	l817
  1070  00086C                     l98:
  1071                           
  1072                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1073  00086C  848C               	bsf	140,2,c	;volatile
  1074  00086E                     
  1075                           ;LCD.c: 142:             _delay(1200);
  1076  00086E  0EF0               	movlw	240
  1077  000870                     u267:
  1078  000870  D000               	nop2	
  1079  000872  2EE8               	decfsz	wreg,f,c
  1080  000874  D7FD               	bra	u267
  1081  000876                     
  1082                           ;LCD.c: 143:             aux = PORTD;
  1083  000876  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1084  00087A                     
  1085                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1086  00087A  948C               	bcf	140,2,c	;volatile
  1087                           
  1088                           ;LCD.c: 145:             _delay(1200);
  1089  00087C  0EF0               	movlw	240
  1090  00087E                     u277:
  1091  00087E  D000               	nop2	
  1092  000880  2EE8               	decfsz	wreg,f,c
  1093  000882  D7FD               	bra	u277
  1094  000884                     
  1095                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1096  000884  848C               	bsf	140,2,c	;volatile
  1097                           
  1098                           ;LCD.c: 147:             _delay(1200);
  1099  000886  0EF0               	movlw	240
  1100  000888                     u287:
  1101  000888  D000               	nop2	
  1102  00088A  2EE8               	decfsz	wreg,f,c
  1103  00088C  D7FD               	bra	u287
  1104  00088E                     
  1105                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1106  00088E  948C               	bcf	140,2,c	;volatile
  1107  000890  EF31  F004         	goto	l803
  1108  000894                     l817:
  1109                           
  1110                           ;LCD.c: 139:  while(aux == 0x80)
  1111  000894  0E80               	movlw	128
  1112  000896  1801               	xorwf	LEER_LCD@aux^0,w,c
  1113  000898  B4D8               	btfsc	status,2,c
  1114  00089A  EF51  F004         	goto	u11
  1115  00089E  EF53  F004         	goto	u10
  1116  0008A2                     u11:
  1117  0008A2  EF36  F004         	goto	l98
  1118  0008A6                     u10:
  1119  0008A6  0012               	return		;funcret
  1120  0008A8                     __end_of_LEER_LCD:
  1121                           	callstack 0
  1122                           
  1123 ;; *************** function _ENVIA_NIBBLE *****************
  1124 ;; Defined at:
  1125 ;;		line 93 in file "LCD.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;  dato            1    wreg     unsigned char 
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;  dato            1    0[COMRAM] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        1 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_ENVIA_CHAR
  1149 ;;		_LCD_CONFIG
  1150 ;;		_ENVIA_LCD_CMD
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           	psect	text11
  1155  000AAC                     __ptext11:
  1156                           	callstack 0
  1157  000AAC                     _ENVIA_NIBBLE:
  1158                           	callstack 28
  1159                           
  1160                           ;incstack = 0
  1161                           ;ENVIA_NIBBLE@dato stored from wreg
  1162  000AAC  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1163  000AAE                     
  1164                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1165  000AAE  0E0F               	movlw	15
  1166  000AB0  168C               	andwf	140,f,c	;volatile
  1167                           
  1168                           ;LCD.c: 96:  dato &= 0xF0;
  1169  000AB2  0EF0               	movlw	240
  1170  000AB4  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1171                           
  1172                           ;LCD.c: 97:  LATD|= dato;
  1173  000AB6  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1174  000AB8  128C               	iorwf	140,f,c	;volatile
  1175  000ABA                     
  1176                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1177  000ABA  848C               	bsf	140,2,c	;volatile
  1178  000ABC                     
  1179                           ;LCD.c: 100:         _delay(1200);
  1180  000ABC  0EF0               	movlw	240
  1181  000ABE                     u297:
  1182  000ABE  D000               	nop2	
  1183  000AC0  2EE8               	decfsz	wreg,f,c
  1184  000AC2  D7FD               	bra	u297
  1185  000AC4                     
  1186                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1187  000AC4  948C               	bcf	140,2,c	;volatile
  1188  000AC6  0012               	return		;funcret
  1189  000AC8                     __end_of_ENVIA_NIBBLE:
  1190                           	callstack 0
  1191                           
  1192                           	psect	rparam
  1193  0000                     
  1194                           	psect	idloc
  1195                           
  1196                           ;Config register IDLOC0 @ 0x200000
  1197                           ;	unspecified, using default values
  1198  200000                     	org	2097152
  1199  200000  FF                 	db	255
  1200                           
  1201                           ;Config register IDLOC1 @ 0x200001
  1202                           ;	unspecified, using default values
  1203  200001                     	org	2097153
  1204  200001  FF                 	db	255
  1205                           
  1206                           ;Config register IDLOC2 @ 0x200002
  1207                           ;	unspecified, using default values
  1208  200002                     	org	2097154
  1209  200002  FF                 	db	255
  1210                           
  1211                           ;Config register IDLOC3 @ 0x200003
  1212                           ;	unspecified, using default values
  1213  200003                     	org	2097155
  1214  200003  FF                 	db	255
  1215                           
  1216                           ;Config register IDLOC4 @ 0x200004
  1217                           ;	unspecified, using default values
  1218  200004                     	org	2097156
  1219  200004  FF                 	db	255
  1220                           
  1221                           ;Config register IDLOC5 @ 0x200005
  1222                           ;	unspecified, using default values
  1223  200005                     	org	2097157
  1224  200005  FF                 	db	255
  1225                           
  1226                           ;Config register IDLOC6 @ 0x200006
  1227                           ;	unspecified, using default values
  1228  200006                     	org	2097158
  1229  200006  FF                 	db	255
  1230                           
  1231                           ;Config register IDLOC7 @ 0x200007
  1232                           ;	unspecified, using default values
  1233  200007                     	org	2097159
  1234  200007  FF                 	db	255
  1235                           
  1236                           	psect	config
  1237                           
  1238                           ;Config register CONFIG1L @ 0x300000
  1239                           ;	PLL Prescaler Selection bits
  1240                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1241                           ;	System Clock Postscaler Selection bits
  1242                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1243                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1244                           ;	USBDIV = 0x0, unprogrammed default
  1245  300000                     	org	3145728
  1246  300000  00                 	db	0
  1247                           
  1248                           ;Config register CONFIG1H @ 0x300001
  1249                           ;	Oscillator Selection bits
  1250                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1251                           ;	Fail-Safe Clock Monitor Enable bit
  1252                           ;	FCMEN = 0x0, unprogrammed default
  1253                           ;	Internal/External Oscillator Switchover bit
  1254                           ;	IESO = 0x0, unprogrammed default
  1255  300001                     	org	3145729
  1256  300001  02                 	db	2
  1257                           
  1258                           ;Config register CONFIG2L @ 0x300002
  1259                           ;	Power-up Timer Enable bit
  1260                           ;	PWRT = ON, PWRT enabled
  1261                           ;	Brown-out Reset Enable bits
  1262                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1263                           ;	Brown-out Reset Voltage bits
  1264                           ;	BORV = 0x3, unprogrammed default
  1265                           ;	USB Voltage Regulator Enable bit
  1266                           ;	VREGEN = 0x0, unprogrammed default
  1267  300002                     	org	3145730
  1268  300002  18                 	db	24
  1269                           
  1270                           ;Config register CONFIG2H @ 0x300003
  1271                           ;	Watchdog Timer Enable bit
  1272                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1273                           ;	Watchdog Timer Postscale Select bits
  1274                           ;	WDTPS = 0xF, unprogrammed default
  1275  300003                     	org	3145731
  1276  300003  1E                 	db	30
  1277                           
  1278                           ; Padding undefined space
  1279  300004                     	org	3145732
  1280  300004  FF                 	db	255
  1281                           
  1282                           ;Config register CONFIG3H @ 0x300005
  1283                           ;	CCP2 MUX bit
  1284                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1285                           ;	PORTB A/D Enable bit
  1286                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1287                           ;	Low-Power Timer 1 Oscillator Enable bit
  1288                           ;	LPT1OSC = 0x0, unprogrammed default
  1289                           ;	MCLR Pin Enable bit
  1290                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1291  300005                     	org	3145733
  1292  300005  81                 	db	129
  1293                           
  1294                           ;Config register CONFIG4L @ 0x300006
  1295                           ;	Stack Full/Underflow Reset Enable bit
  1296                           ;	STVREN = 0x1, unprogrammed default
  1297                           ;	Single-Supply ICSP Enable bit
  1298                           ;	LVP = OFF, Single-Supply ICSP disabled
  1299                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1300                           ;	ICPRT = 0x0, unprogrammed default
  1301                           ;	Extended Instruction Set Enable bit
  1302                           ;	XINST = 0x0, unprogrammed default
  1303                           ;	Background Debugger Enable bit
  1304                           ;	DEBUG = 0x1, unprogrammed default
  1305  300006                     	org	3145734
  1306  300006  81                 	db	129
  1307                           
  1308                           ; Padding undefined space
  1309  300007                     	org	3145735
  1310  300007  FF                 	db	255
  1311                           
  1312                           ;Config register CONFIG5L @ 0x300008
  1313                           ;	unspecified, using default values
  1314                           ;	Code Protection bit
  1315                           ;	CP0 = 0x1, unprogrammed default
  1316                           ;	Code Protection bit
  1317                           ;	CP1 = 0x1, unprogrammed default
  1318                           ;	Code Protection bit
  1319                           ;	CP2 = 0x1, unprogrammed default
  1320                           ;	Code Protection bit
  1321                           ;	CP3 = 0x1, unprogrammed default
  1322  300008                     	org	3145736
  1323  300008  0F                 	db	15
  1324                           
  1325                           ;Config register CONFIG5H @ 0x300009
  1326                           ;	unspecified, using default values
  1327                           ;	Boot Block Code Protection bit
  1328                           ;	CPB = 0x1, unprogrammed default
  1329                           ;	Data EEPROM Code Protection bit
  1330                           ;	CPD = 0x1, unprogrammed default
  1331  300009                     	org	3145737
  1332  300009  C0                 	db	192
  1333                           
  1334                           ;Config register CONFIG6L @ 0x30000A
  1335                           ;	unspecified, using default values
  1336                           ;	Write Protection bit
  1337                           ;	WRT0 = 0x1, unprogrammed default
  1338                           ;	Write Protection bit
  1339                           ;	WRT1 = 0x1, unprogrammed default
  1340                           ;	Write Protection bit
  1341                           ;	WRT2 = 0x1, unprogrammed default
  1342                           ;	Write Protection bit
  1343                           ;	WRT3 = 0x1, unprogrammed default
  1344  30000A                     	org	3145738
  1345  30000A  0F                 	db	15
  1346                           
  1347                           ;Config register CONFIG6H @ 0x30000B
  1348                           ;	unspecified, using default values
  1349                           ;	Configuration Register Write Protection bit
  1350                           ;	WRTC = 0x1, unprogrammed default
  1351                           ;	Boot Block Write Protection bit
  1352                           ;	WRTB = 0x1, unprogrammed default
  1353                           ;	Data EEPROM Write Protection bit
  1354                           ;	WRTD = 0x1, unprogrammed default
  1355  30000B                     	org	3145739
  1356  30000B  E0                 	db	224
  1357                           
  1358                           ;Config register CONFIG7L @ 0x30000C
  1359                           ;	unspecified, using default values
  1360                           ;	Table Read Protection bit
  1361                           ;	EBTR0 = 0x1, unprogrammed default
  1362                           ;	Table Read Protection bit
  1363                           ;	EBTR1 = 0x1, unprogrammed default
  1364                           ;	Table Read Protection bit
  1365                           ;	EBTR2 = 0x1, unprogrammed default
  1366                           ;	Table Read Protection bit
  1367                           ;	EBTR3 = 0x1, unprogrammed default
  1368  30000C                     	org	3145740
  1369  30000C  0F                 	db	15
  1370                           
  1371                           ;Config register CONFIG7H @ 0x30000D
  1372                           ;	unspecified, using default values
  1373                           ;	Boot Block Table Read Protection bit
  1374                           ;	EBTRB = 0x1, unprogrammed default
  1375  30000D                     	org	3145741
  1376  30000D  40                 	db	64
  1377                           tosu	equ	0xFFF
  1378                           tosh	equ	0xFFE
  1379                           tosl	equ	0xFFD
  1380                           stkptr	equ	0xFFC
  1381                           pclatu	equ	0xFFB
  1382                           pclath	equ	0xFFA
  1383                           pcl	equ	0xFF9
  1384                           tblptru	equ	0xFF8
  1385                           tblptrh	equ	0xFF7
  1386                           tblptrl	equ	0xFF6
  1387                           tablat	equ	0xFF5
  1388                           prodh	equ	0xFF4
  1389                           prodl	equ	0xFF3
  1390                           indf0	equ	0xFEF
  1391                           postinc0	equ	0xFEE
  1392                           postdec0	equ	0xFED
  1393                           preinc0	equ	0xFEC
  1394                           plusw0	equ	0xFEB
  1395                           fsr0h	equ	0xFEA
  1396                           fsr0l	equ	0xFE9
  1397                           wreg	equ	0xFE8
  1398                           indf1	equ	0xFE7
  1399                           postinc1	equ	0xFE6
  1400                           postdec1	equ	0xFE5
  1401                           preinc1	equ	0xFE4
  1402                           plusw1	equ	0xFE3
  1403                           fsr1h	equ	0xFE2
  1404                           fsr1l	equ	0xFE1
  1405                           bsr	equ	0xFE0
  1406                           indf2	equ	0xFDF
  1407                           postinc2	equ	0xFDE
  1408                           postdec2	equ	0xFDD
  1409                           preinc2	equ	0xFDC
  1410                           plusw2	equ	0xFDB
  1411                           fsr2h	equ	0xFDA
  1412                           fsr2l	equ	0xFD9
  1413                           status	equ	0xFD8

Data Sizes:
    Strings     51
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9       9
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1628
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     436
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     667
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      9       9       1        9.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Oct 15 14:49:06 2020

                      l21 0AAA                        l26 08AC                        l55 09EA  
                      l73 0A82                        l82 0A52                        l91 0AC6  
                      l68 0ADC                        l85 0AE4                        l94 0A1E  
                      l79 09B0                        l88 0972                        l98 086C  
                      u10 08A6                        u11 08A2                        u20 0A66  
                      u21 0A62                        u30 0A7C                        u31 0A78  
           ENVIA_CHAR@aux 0003                       l100 08A6                       l801 0860  
                     l811 0884                       l803 0862                       l821 0ABA  
                     l813 088E                       l805 086E                       l901 0A40  
                     l823 0ABC                       l807 0876                       l903 0A46  
                     l831 09F4                       l911 0A8C                       l825 0AC4  
                     l809 087A                       l817 0894                       l905 0A4C  
                     l841 0A06                       l833 09F8                       l913 0A9C  
                     l819 0AAE                       l843 0A0C                       l835 0A00  
                     l827 09EE                       l851 0918                       l915 0AA0  
                     l907 0A84                       l781 0836                       l845 0A12  
                     l837 0A02                       l829 09F0                       l861 094E  
                     l853 091E                       l917 0AA4                       l909 0A88  
                     l791 0848                       l783 083A                       l847 0A18  
                     l839 0A04                       l871 096C                       l863 0954  
                     l855 092C                       l793 084C                       l785 083C  
                     l873 0ADE                       l881 0A6C                       l865 095A  
                     l857 0940                       l849 0914                       l795 084E  
                     l787 083E                       l891 0A2C                       l875 0AD6  
                     l883 0A7C                       l867 0960                       l859 0948  
                     l797 0856                       l789 0840                       l893 0A34  
                     l885 0A22                       l981 09B4                       l877 0A56  
                     l869 0966                       l799 0858                       l895 0A36  
                     l887 0A24                       l991 0980                       l983 09C4  
                     l879 0A66                       l897 0A38                       l889 0A28  
                     l993 099C                       l985 09D0                       l899 0A3A  
                     l995 099E                       l987 09E2                       l989 0974  
                     l997 08A8                       l999 08B6                       u130 09C4  
                     u131 09C0                       u140 09E2                       u141 09DE  
                     u150 09B0                       u151 09AC                       u207 0942  
                     u160 08D4                       u217 09FA                       u161 08D0  
                     u227 0A2E                       u237 0842                       u247 0850  
                     u257 085A                       u177 0A92                       u267 0870  
                     u187 0924                       u277 087E                       u197 0932  
                     u287 0888                       u297 0ABE               LEER_LCD@aux 0001  
                     wreg 000FE8              ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001  
          ENVIA_CHAR@dato 0002                      l1001 08C6                      l1003 08D4  
                    l1005 08DE                      l1007 08F2                      l1009 08FC  
                    STR_1 0823                      STR_2 0812                      STR_3 0801  
                    _LATD 000F8C                      _main 08A8                      start 0000  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 08A8       __size_of_BORRAR_LCD 0008                     ?_main 0001  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004           __initialization 0AC8  
            __end_of_main 0914           _ESCRIBE_MENSAJE 0974                    ??_main 000A  
           __activetblptr 000001          __end_of_lcd_init 0AAC      __end_of_ENVIA_NIBBLE 0AC8  
     __size_of_POS_CURSOR 003A              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0AC8              ??_LCD_CONFIG 0004             ___rparam_used 000001  
            ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 09B2            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0AE6          ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0A84  
      __end_of_LCD_CONFIG 0974        __end_of_ENVIA_CHAR 0A54                ??_LEER_LCD 0001  
        ENVIA_NIBBLE@dato 0001              ??_POS_CURSOR 0005                 ?_lcd_init 0001  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0A20  
                 __pcinit 0AC8        __end_of_POS_CURSOR 09EC                   __ramtop 0800  
                 __ptext0 08A8                   __ptext1 0A84                   __ptext2 0914  
                 __ptext3 0A54                   __ptext4 0AD6                   __ptext5 0ADE  
                 __ptext6 09B2                   __ptext7 09EC                   __ptext8 0974  
                 __ptext9 0A20                ??_lcd_init 0005              _ENVIA_NIBBLE 0AAC  
    end_of_initialization 0AC8     __size_of_CURSOR_ONOFF 0030                 _PORTBbits 000F81  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0A54        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0AC8         ENVIA_LCD_CMD@dato 0002  
     __end_of_CURSOR_HOME 0ADE         __size_of_lcd_init 0028               __smallconst 0800  
                _LEER_LCD 0836                  _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E               _CURSOR_HOME 0AD6  
  __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000                  __Lrparam 0000  
            __Lsmallconst 0800                  __ptext10 0836                  __ptext11 0AAC  
              _BORRAR_LCD 0ADE                  _lcd_init 0A84             __size_of_main 006C  
              _LCD_CONFIG 0914                _ENVIA_CHAR 0A20             _ENVIA_LCD_CMD 09EC  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004            ?_ENVIA_LCD_CMD 0001  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 09B2  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
