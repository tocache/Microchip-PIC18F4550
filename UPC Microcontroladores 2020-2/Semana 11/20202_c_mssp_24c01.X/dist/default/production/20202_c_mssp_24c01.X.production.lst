

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed Oct 28 00:50:19 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  000C50                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for _nombre
    71  000C50  5A                 	db	90
    72  000C51  68                 	db	104
    73  000C52  69                 	db	105
    74  000C53  78                 	db	120
    75  000C54  69                 	db	105
    76  000C55  6F                 	db	111
    77  000C56  6E                 	db	110
    78  000C57  67                 	db	103
    79  000C58  20                 	db	32
    80  000C59  20                 	db	32
    81  000C5A  4C                 	db	76
    82  000C5B  61                 	db	97
    83  000C5C  75                 	db	117
    84  000C5D  00                 	db	0
    85  0000                     _PORTD	set	3971
    86  0000                     _LATD	set	3980
    87  0000                     _LATDbits	set	3980
    88  0000                     _SSPSTATbits	set	4039
    89  0000                     _SSPBUF	set	4041
    90  0000                     _SSPCON2bits	set	4037
    91  0000                     _SSPADD	set	4040
    92  0000                     _SSPCON1bits	set	4038
    93  0000                     _TRISD	set	3989
    94                           
    95                           	psect	smallconst
    96  000800                     __psmallconst:
    97                           	callstack 0
    98  000800  00                 	db	0
    99  000801                     STR_1:
   100  000801  47                 	db	71	;'G'
   101  000802  72                 	db	114	;'r'
   102  000803  61                 	db	97	;'a'
   103  000804  62                 	db	98	;'b'
   104  000805  61                 	db	97	;'a'
   105  000806  6E                 	db	110	;'n'
   106  000807  64                 	db	100	;'d'
   107  000808  6F                 	db	111	;'o'
   108  000809  20                 	db	32
   109  00080A  45                 	db	69	;'E'
   110  00080B  45                 	db	69	;'E'
   111  00080C  50                 	db	80	;'P'
   112  00080D  52                 	db	82	;'R'
   113  00080E  4F                 	db	79	;'O'
   114  00080F  4D                 	db	77	;'M'
   115  000810  00                 	db	0
   116  000811  00                 	db	0	; dummy byte at the end
   117  0000                     
   118                           ; #config settings
   119                           
   120                           	psect	cinit
   121  000B9C                     __pcinit:
   122                           	callstack 0
   123  000B9C                     start_initialization:
   124                           	callstack 0
   125  000B9C                     __initialization:
   126                           	callstack 0
   127                           
   128                           ; Initialize objects allocated to COMRAM (14 bytes)
   129                           ; load TBLPTR registers with __pidataCOMRAM
   130  000B9C  0E50               	movlw	low __pidataCOMRAM
   131  000B9E  6EF6               	movwf	tblptrl,c
   132  000BA0  0E0C               	movlw	high __pidataCOMRAM
   133  000BA2  6EF7               	movwf	tblptrh,c
   134  000BA4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   135  000BA6  6EF8               	movwf	tblptru,c
   136  000BA8  EE00  F001         	lfsr	0,__pdataCOMRAM
   137  000BAC  EE10 F00E          	lfsr	1,14
   138  000BB0                     copy_data0:
   139  000BB0  0009               	tblrd		*+
   140  000BB2  CFF5 FFEE          	movff	tablat,postinc0
   141  000BB6  50E5               	movf	postdec1,w,c
   142  000BB8  50E1               	movf	fsr1l,w,c
   143  000BBA  E1FA               	bnz	copy_data0
   144                           
   145                           ; Clear objects allocated to COMRAM (1 bytes)
   146  000BBC  6A1A               	clrf	__pbssCOMRAM& (0+255),c
   147  000BBE                     end_of_initialization:
   148                           	callstack 0
   149  000BBE                     __end_of__initialization:
   150                           	callstack 0
   151  000BBE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   152  000BC0  6EF8               	movwf	tblptru,c
   153  000BC2  0E08               	movlw	high __Lsmallconst
   154  000BC4  6EF7               	movwf	tblptrh,c
   155  000BC6  0100               	movlb	0
   156  000BC8  EFB1  F004         	goto	_main	;jump to C main() function
   157                           
   158                           	psect	bssCOMRAM
   159  00001A                     __pbssCOMRAM:
   160                           	callstack 0
   161  00001A                     _datoin:
   162                           	callstack 0
   163  00001A                     	ds	1
   164                           
   165                           	psect	dataCOMRAM
   166  000001                     __pdataCOMRAM:
   167                           	callstack 0
   168  000001                     _nombre:
   169                           	callstack 0
   170  000001                     	ds	14
   171                           
   172                           	psect	cstackCOMRAM
   173  00000F                     __pcstackCOMRAM:
   174                           	callstack 0
   175  00000F                     i2c_read@direccion:
   176                           	callstack 0
   177  00000F                     i2c_write@dato1:
   178                           	callstack 0
   179  00000F                     ENVIA_NIBBLE@dato:
   180                           	callstack 0
   181  00000F                     LEER_LCD@aux:
   182                           	callstack 0
   183                           
   184                           ; 1 bytes @ 0x0
   185  00000F                     	ds	1
   186  000010                     ??_i2c_write:
   187  000010                     i2c_read@leido:
   188                           	callstack 0
   189  000010                     ENVIA_CHAR@dato:
   190                           	callstack 0
   191  000010                     ENVIA_LCD_CMD@dato:
   192                           	callstack 0
   193                           
   194                           ; 1 bytes @ 0x1
   195  000010                     	ds	1
   196  000011                     i2c_write@direccion1:
   197                           	callstack 0
   198  000011                     ENVIA_CHAR@aux:
   199                           	callstack 0
   200  000011                     ENVIA_LCD_CMD@aux:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x2
   204  000011                     	ds	1
   205  000012                     ??_LCD_CONFIG:
   206  000012                     POS_CURSOR@columna:
   207                           	callstack 0
   208  000012                     CURSOR_ONOFF@estado:
   209                           	callstack 0
   210  000012                     ESCRIBE_MENSAJE@cadena:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x3
   214  000012                     	ds	1
   215  000013                     ??_lcd_init:
   216  000013                     POS_CURSOR@fila:
   217                           	callstack 0
   218                           
   219                           ; 1 bytes @ 0x4
   220  000013                     	ds	1
   221  000014                     ESCRIBE_MENSAJE@tam:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0x5
   225  000014                     	ds	1
   226  000015                     ??_ESCRIBE_MENSAJE:
   227                           
   228                           ; 1 bytes @ 0x6
   229  000015                     	ds	2
   230  000017                     ESCRIBE_MENSAJE@i:
   231                           	callstack 0
   232                           
   233                           ; 1 bytes @ 0x8
   234  000017                     	ds	1
   235  000018                     main@x_300:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x9
   239  000018                     	ds	1
   240  000019                     main@x:
   241                           	callstack 0
   242                           
   243                           ; 1 bytes @ 0xA
   244  000019                     	ds	1
   245                           
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 82 in file "maincode.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;  x               1    9[COMRAM] unsigned char 
   256 ;;  x               1   10[COMRAM] unsigned char 
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   261 ;; Tracked objects:
   262 ;;		On entry : 0/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   266 ;;      Params:         0       0       0       0       0       0       0       0       0
   267 ;;      Locals:         2       0       0       0       0       0       0       0       0
   268 ;;      Temps:          0       0       0       0       0       0       0       0       0
   269 ;;      Totals:         2       0       0       0       0       0       0       0       0
   270 ;;Total ram usage:        2 bytes
   271 ;; Hardware stack levels required when called:    4
   272 ;; This function calls:
   273 ;;		_ENVIA_CHAR
   274 ;;		_ESCRIBE_MENSAJE
   275 ;;		_POS_CURSOR
   276 ;;		_i2c_read
   277 ;;		_i2c_write
   278 ;;		_lcd_init
   279 ;;		_mssp_conf
   280 ;; This function is called by:
   281 ;;		Startup code after reset
   282 ;; This function uses a non-reentrant model
   283 ;;
   284                           
   285                           	psect	text0
   286  000962                     __ptext0:
   287                           	callstack 0
   288  000962                     _main:
   289                           	callstack 27
   290  000962                     
   291                           ;maincode.c: 83:     lcd_init();
   292  000962  ECFE  F005         	call	_lcd_init	;wreg free
   293  000966                     
   294                           ;maincode.c: 84:     mssp_conf();
   295  000966  EC20  F006         	call	_mssp_conf	;wreg free
   296  00096A                     
   297                           ;maincode.c: 85:     POS_CURSOR(1,0);
   298  00096A  0E00               	movlw	0
   299  00096C  6E12               	movwf	POS_CURSOR@columna^0,c
   300  00096E  0E01               	movlw	1
   301  000970  EC7D  F005         	call	_POS_CURSOR
   302  000974                     
   303                           ;maincode.c: 86:     ESCRIBE_MENSAJE("Grabando EEPROM",15);
   304  000974  0E01               	movlw	low STR_1
   305  000976  6E12               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   306  000978  0E08               	movlw	high STR_1
   307  00097A  6E13               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   308  00097C  0E0F               	movlw	15
   309  00097E  6E14               	movwf	ESCRIBE_MENSAJE@tam^0,c
   310  000980  EC5E  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   311  000984                     
   312                           ;maincode.c: 87:     for(unsigned char x=0; x<13; x++){
   313  000984  0E00               	movlw	0
   314  000986  6E19               	movwf	main@x^0,c
   315  000988                     l1143:
   316                           
   317                           ;maincode.c: 88:         i2c_write(x+100, nombre[x]);
   318  000988  0E01               	movlw	low _nombre
   319  00098A  2419               	addwf	main@x^0,w,c
   320  00098C  6ED9               	movwf	fsr2l,c
   321  00098E  6ADA               	clrf	fsr2h,c
   322  000990  0E00               	movlw	high _nombre
   323  000992  22DA               	addwfc	fsr2h,f,c
   324  000994  50DF               	movf	indf2,w,c
   325  000996  6E0F               	movwf	i2c_write@dato1^0,c
   326  000998  5019               	movf	main@x^0,w,c
   327  00099A  0F64               	addlw	100
   328  00099C  EC67  F004         	call	_i2c_write
   329  0009A0                     
   330                           ;maincode.c: 89:     }
   331  0009A0  2A19               	incf	main@x^0,f,c
   332  0009A2  0E0C               	movlw	12
   333  0009A4  6419               	cpfsgt	main@x^0,c
   334  0009A6  EFD7  F004         	goto	u441
   335  0009AA  EFD9  F004         	goto	u440
   336  0009AE                     u441:
   337  0009AE  EFC4  F004         	goto	l1143
   338  0009B2                     u440:
   339  0009B2                     
   340                           ;maincode.c: 91:     POS_CURSOR(2,0);
   341  0009B2  0E00               	movlw	0
   342  0009B4  6E12               	movwf	POS_CURSOR@columna^0,c
   343  0009B6  0E02               	movlw	2
   344  0009B8  EC7D  F005         	call	_POS_CURSOR
   345  0009BC                     
   346                           ;maincode.c: 92:     for(unsigned char x=0;x<13;x++){
   347  0009BC  0E00               	movlw	0
   348  0009BE  6E18               	movwf	main@x_300^0,c
   349  0009C0                     l1157:
   350                           
   351                           ;maincode.c: 93:         datoin = i2c_read(x+100);
   352  0009C0  5018               	movf	main@x_300^0,w,c
   353  0009C2  0F64               	addlw	100
   354  0009C4  EC09  F004         	call	_i2c_read
   355  0009C8  6E1A               	movwf	_datoin^0,c
   356                           
   357                           ;maincode.c: 94:         ENVIA_CHAR(datoin);
   358  0009CA  501A               	movf	_datoin^0,w,c
   359  0009CC  ECB4  F005         	call	_ENVIA_CHAR
   360  0009D0                     
   361                           ;maincode.c: 95:     }
   362  0009D0  2A18               	incf	main@x_300^0,f,c
   363  0009D2  0E0C               	movlw	12
   364  0009D4  6418               	cpfsgt	main@x_300^0,c
   365  0009D6  EFEF  F004         	goto	u451
   366  0009DA  EFF1  F004         	goto	u450
   367  0009DE                     u451:
   368  0009DE  EFE0  F004         	goto	l1157
   369  0009E2                     u450:
   370  0009E2                     l110:
   371  0009E2  EFF1  F004         	goto	l110
   372  0009E6  EF00  F000         	goto	start
   373  0009EA                     __end_of_main:
   374                           	callstack 0
   375                           
   376 ;; *************** function _mssp_conf *****************
   377 ;; Defined at:
   378 ;;		line 28 in file "maincode.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      void 
   385 ;; Registers used:
   386 ;;		wreg, status,2
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   392 ;;      Params:         0       0       0       0       0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels used:    1
   398 ;; This function calls:
   399 ;;		Nothing
   400 ;; This function is called by:
   401 ;;		_main
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405                           	psect	text1
   406  000C40                     __ptext1:
   407                           	callstack 0
   408  000C40                     _mssp_conf:
   409                           	callstack 30
   410  000C40                     
   411                           ;maincode.c: 29:     SSPCON1bits.SSPEN = 1;
   412  000C40  8AC6               	bsf	198,5,c	;volatile
   413                           
   414                           ;maincode.c: 30:     SSPCON1bits.SSPM3 = 1;
   415  000C42  86C6               	bsf	198,3,c	;volatile
   416                           
   417                           ;maincode.c: 31:     SSPCON1bits.SSPM2 = 0;
   418  000C44  94C6               	bcf	198,2,c	;volatile
   419                           
   420                           ;maincode.c: 32:     SSPCON1bits.SSPM1 = 0;
   421  000C46  92C6               	bcf	198,1,c	;volatile
   422                           
   423                           ;maincode.c: 33:     SSPCON1bits.SSPM0 = 0;
   424  000C48  90C6               	bcf	198,0,c	;volatile
   425  000C4A                     
   426                           ;maincode.c: 34:     SSPADD = 29;
   427  000C4A  0E1D               	movlw	29
   428  000C4C  6EC8               	movwf	200,c	;volatile
   429  000C4E  0012               	return		;funcret
   430  000C50                     __end_of_mssp_conf:
   431                           	callstack 0
   432                           
   433 ;; *************** function _lcd_init *****************
   434 ;; Defined at:
   435 ;;		line 19 in file "maincode.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;		None
   438 ;; Auto vars:     Size  Location     Type
   439 ;;		None
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, status,2, status,0, cstack
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   449 ;;      Params:         0       0       0       0       0       0       0       0       0
   450 ;;      Locals:         0       0       0       0       0       0       0       0       0
   451 ;;      Temps:          1       0       0       0       0       0       0       0       0
   452 ;;      Totals:         1       0       0       0       0       0       0       0       0
   453 ;;Total ram usage:        1 bytes
   454 ;; Hardware stack levels used:    1
   455 ;; Hardware stack levels required when called:    3
   456 ;; This function calls:
   457 ;;		_BORRAR_LCD
   458 ;;		_CURSOR_HOME
   459 ;;		_CURSOR_ONOFF
   460 ;;		_LCD_CONFIG
   461 ;; This function is called by:
   462 ;;		_main
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           	psect	text2
   467  000BFC                     __ptext2:
   468                           	callstack 0
   469  000BFC                     _lcd_init:
   470                           	callstack 27
   471  000BFC                     
   472                           ;maincode.c: 20:     TRISD = 0x00;
   473  000BFC  0E00               	movlw	0
   474  000BFE  6E95               	movwf	149,c	;volatile
   475  000C00                     
   476                           ;maincode.c: 21:     LCD_CONFIG();
   477  000C00  EC2E  F005         	call	_LCD_CONFIG	;wreg free
   478  000C04                     
   479                           ;maincode.c: 22:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   480  000C04  0EEA               	movlw	234
   481  000C06  6E13               	movwf	??_lcd_init^0,c
   482  000C08  0EC3               	movlw	195
   483  000C0A                     u467:
   484  000C0A  2EE8               	decfsz	wreg,f,c
   485  000C0C  D7FE               	bra	u467
   486  000C0E  2E13               	decfsz	??_lcd_init^0,f,c
   487  000C10  D7FC               	bra	u467
   488  000C12  F000               	nop	
   489  000C14                     
   490                           ;maincode.c: 23:     BORRAR_LCD();
   491  000C14  EC33  F006         	call	_BORRAR_LCD	;wreg free
   492  000C18                     
   493                           ;maincode.c: 24:     CURSOR_HOME();
   494  000C18  EC2F  F006         	call	_CURSOR_HOME	;wreg free
   495  000C1C                     
   496                           ;maincode.c: 25:     CURSOR_ONOFF(1);
   497  000C1C  0E01               	movlw	1
   498  000C1E  ECE6  F005         	call	_CURSOR_ONOFF
   499  000C22  0012               	return		;funcret
   500  000C24                     __end_of_lcd_init:
   501                           	callstack 0
   502                           
   503 ;; *************** function _LCD_CONFIG *****************
   504 ;; Defined at:
   505 ;;		line 72 in file "LCD.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;		None
   508 ;; Auto vars:     Size  Location     Type
   509 ;;		None
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   519 ;;      Params:         0       0       0       0       0       0       0       0       0
   520 ;;      Locals:         0       0       0       0       0       0       0       0       0
   521 ;;      Temps:          1       0       0       0       0       0       0       0       0
   522 ;;      Totals:         1       0       0       0       0       0       0       0       0
   523 ;;Total ram usage:        1 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; Hardware stack levels required when called:    2
   526 ;; This function calls:
   527 ;;		_ENVIA_LCD_CMD
   528 ;;		_ENVIA_NIBBLE
   529 ;; This function is called by:
   530 ;;		_lcd_init
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           	psect	text3
   535  000A5C                     __ptext3:
   536                           	callstack 0
   537  000A5C                     _LCD_CONFIG:
   538                           	callstack 27
   539  000A5C                     
   540                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   541  000A5C  908C               	bcf	140,0,c	;volatile
   542                           
   543                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   544  000A5E  928C               	bcf	140,1,c	;volatile
   545  000A60                     
   546                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   547  000A60  0E30               	movlw	48
   548  000A62  EC12  F006         	call	_ENVIA_NIBBLE
   549  000A66                     
   550                           ;LCD.c: 77:         _delay(24000);
   551  000A66  0E20               	movlw	32
   552  000A68  6E12               	movwf	??_LCD_CONFIG^0,c
   553  000A6A  0E2A               	movlw	42
   554  000A6C                     u477:
   555  000A6C  2EE8               	decfsz	wreg,f,c
   556  000A6E  D7FE               	bra	u477
   557  000A70  2E12               	decfsz	??_LCD_CONFIG^0,f,c
   558  000A72  D7FC               	bra	u477
   559  000A74                     
   560                           ;LCD.c: 78:         _delay(24000);
   561  000A74  0E20               	movlw	32
   562  000A76  6E12               	movwf	??_LCD_CONFIG^0,c
   563  000A78  0E2A               	movlw	42
   564  000A7A                     u487:
   565  000A7A  2EE8               	decfsz	wreg,f,c
   566  000A7C  D7FE               	bra	u487
   567  000A7E  2E12               	decfsz	??_LCD_CONFIG^0,f,c
   568  000A80  D7FC               	bra	u487
   569                           
   570                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   571  000A82  0E30               	movlw	48
   572  000A84  EC12  F006         	call	_ENVIA_NIBBLE
   573  000A88                     
   574                           ;LCD.c: 83:  _delay(1200);
   575  000A88  0EF0               	movlw	240
   576  000A8A                     u497:
   577  000A8A  D000               	nop2	
   578  000A8C  2EE8               	decfsz	wreg,f,c
   579  000A8E  D7FD               	bra	u497
   580  000A90                     
   581                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   582  000A90  0E30               	movlw	48
   583  000A92  EC12  F006         	call	_ENVIA_NIBBLE
   584  000A96                     
   585                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   586  000A96  0E20               	movlw	32
   587  000A98  EC12  F006         	call	_ENVIA_NIBBLE
   588  000A9C                     
   589                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   590  000A9C  0E01               	movlw	1
   591  000A9E  EC9A  F005         	call	_ENVIA_LCD_CMD
   592  000AA2                     
   593                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   594  000AA2  0E28               	movlw	40
   595  000AA4  EC9A  F005         	call	_ENVIA_LCD_CMD
   596  000AA8                     
   597                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   598  000AA8  0E0F               	movlw	15
   599  000AAA  EC9A  F005         	call	_ENVIA_LCD_CMD
   600  000AAE                     
   601                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   602  000AAE  0E06               	movlw	6
   603  000AB0  EC9A  F005         	call	_ENVIA_LCD_CMD
   604  000AB4                     
   605                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   606  000AB4  0E01               	movlw	1
   607  000AB6  EC9A  F005         	call	_ENVIA_LCD_CMD
   608  000ABA  0012               	return		;funcret
   609  000ABC                     __end_of_LCD_CONFIG:
   610                           	callstack 0
   611                           
   612 ;; *************** function _CURSOR_ONOFF *****************
   613 ;; Defined at:
   614 ;;		line 35 in file "LCD.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;  estado          1    wreg     unsigned char 
   617 ;; Auto vars:     Size  Location     Type
   618 ;;  estado          1    3[COMRAM] unsigned char 
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, status,2, status,0, cstack
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   628 ;;      Params:         0       0       0       0       0       0       0       0       0
   629 ;;      Locals:         1       0       0       0       0       0       0       0       0
   630 ;;      Temps:          0       0       0       0       0       0       0       0       0
   631 ;;      Totals:         1       0       0       0       0       0       0       0       0
   632 ;;Total ram usage:        1 bytes
   633 ;; Hardware stack levels used:    1
   634 ;; Hardware stack levels required when called:    2
   635 ;; This function calls:
   636 ;;		_ENVIA_LCD_CMD
   637 ;; This function is called by:
   638 ;;		_lcd_init
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text4
   643  000BCC                     __ptext4:
   644                           	callstack 0
   645  000BCC                     _CURSOR_ONOFF:
   646                           	callstack 27
   647                           
   648                           ;incstack = 0
   649                           ;CURSOR_ONOFF@estado stored from wreg
   650  000BCC  6E12               	movwf	CURSOR_ONOFF@estado^0,c
   651  000BCE                     
   652                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   653  000BCE  5012               	movf	CURSOR_ONOFF@estado^0,w,c
   654  000BD0  A4D8               	btfss	status,2,c
   655  000BD2  EFED  F005         	goto	u21
   656  000BD6  EFEF  F005         	goto	u20
   657  000BDA                     u21:
   658  000BDA  EFF2  F005         	goto	l963
   659  000BDE                     u20:
   660  000BDE  0E0E               	movlw	14
   661  000BE0  EC9A  F005         	call	_ENVIA_LCD_CMD
   662  000BE4                     l963:
   663                           
   664                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   665  000BE4  0412               	decf	CURSOR_ONOFF@estado^0,w,c
   666  000BE6  A4D8               	btfss	status,2,c
   667  000BE8  EFF8  F005         	goto	u31
   668  000BEC  EFFA  F005         	goto	u30
   669  000BF0                     u31:
   670  000BF0  EFFD  F005         	goto	l155
   671  000BF4                     u30:
   672  000BF4  0E0C               	movlw	12
   673  000BF6  EC9A  F005         	call	_ENVIA_LCD_CMD
   674  000BFA                     l155:
   675  000BFA  0012               	return		;funcret
   676  000BFC                     __end_of_CURSOR_ONOFF:
   677                           	callstack 0
   678                           
   679 ;; *************** function _CURSOR_HOME *****************
   680 ;; Defined at:
   681 ;;		line 30 in file "LCD.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2, status,0, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   695 ;;      Params:         0       0       0       0       0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    2
   702 ;; This function calls:
   703 ;;		_ENVIA_LCD_CMD
   704 ;; This function is called by:
   705 ;;		_lcd_init
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           	psect	text5
   710  000C5E                     __ptext5:
   711                           	callstack 0
   712  000C5E                     _CURSOR_HOME:
   713                           	callstack 27
   714  000C5E                     
   715                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   716  000C5E  0E02               	movlw	2
   717  000C60  EC9A  F005         	call	_ENVIA_LCD_CMD
   718  000C64  0012               	return		;funcret
   719  000C66                     __end_of_CURSOR_HOME:
   720                           	callstack 0
   721                           
   722 ;; *************** function _BORRAR_LCD *****************
   723 ;; Defined at:
   724 ;;		line 67 in file "LCD.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, status,2, status,0, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   738 ;;      Params:         0       0       0       0       0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0       0       0
   741 ;;      Totals:         0       0       0       0       0       0       0       0       0
   742 ;;Total ram usage:        0 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    2
   745 ;; This function calls:
   746 ;;		_ENVIA_LCD_CMD
   747 ;; This function is called by:
   748 ;;		_lcd_init
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text6
   753  000C66                     __ptext6:
   754                           	callstack 0
   755  000C66                     _BORRAR_LCD:
   756                           	callstack 27
   757  000C66                     
   758                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   759  000C66  0E01               	movlw	1
   760  000C68  EC9A  F005         	call	_ENVIA_LCD_CMD
   761  000C6C  0012               	return		;funcret
   762  000C6E                     __end_of_BORRAR_LCD:
   763                           	callstack 0
   764                           
   765 ;; *************** function _i2c_write *****************
   766 ;; Defined at:
   767 ;;		line 65 in file "maincode.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  direccion1      1    wreg     unsigned char 
   770 ;;  dato1           1    0[COMRAM] unsigned char 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  direccion1      1    2[COMRAM] unsigned char 
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      void 
   775 ;; Registers used:
   776 ;;		wreg, status,2, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   782 ;;      Params:         1       0       0       0       0       0       0       0       0
   783 ;;      Locals:         1       0       0       0       0       0       0       0       0
   784 ;;      Temps:          1       0       0       0       0       0       0       0       0
   785 ;;      Totals:         3       0       0       0       0       0       0       0       0
   786 ;;Total ram usage:        3 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; This function calls:
   789 ;;		Nothing
   790 ;; This function is called by:
   791 ;;		_main
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text7
   796  0008CE                     __ptext7:
   797                           	callstack 0
   798  0008CE                     _i2c_write:
   799                           	callstack 30
   800                           
   801                           ;incstack = 0
   802                           ;i2c_write@direccion1 stored from wreg
   803  0008CE  6E11               	movwf	i2c_write@direccion1^0,c
   804  0008D0                     
   805                           ;maincode.c: 66:     SSPCON2bits.SEN = 1;
   806  0008D0  80C5               	bsf	197,0,c	;volatile
   807  0008D2                     l77:
   808  0008D2  B0C5               	btfsc	197,0,c	;volatile
   809  0008D4  EF6E  F004         	goto	u331
   810  0008D8  EF70  F004         	goto	u330
   811  0008DC                     u331:
   812  0008DC  EF69  F004         	goto	l77
   813  0008E0                     u330:
   814  0008E0                     
   815                           ;maincode.c: 68:     SSPBUF = 0xA0;
   816  0008E0  0EA0               	movlw	160
   817  0008E2  6EC9               	movwf	201,c	;volatile
   818  0008E4                     l80:
   819  0008E4  B0C7               	btfsc	199,0,c	;volatile
   820  0008E6  EF77  F004         	goto	u341
   821  0008EA  EF79  F004         	goto	u340
   822  0008EE                     u341:
   823  0008EE  EF72  F004         	goto	l80
   824  0008F2                     u340:
   825  0008F2                     l83:
   826  0008F2  B4C7               	btfsc	199,2,c	;volatile
   827  0008F4  EF7E  F004         	goto	u351
   828  0008F8  EF80  F004         	goto	u350
   829  0008FC                     u351:
   830  0008FC  EF79  F004         	goto	l83
   831  000900                     u350:
   832  000900                     
   833                           ;maincode.c: 71:     SSPBUF = direccion1;
   834  000900  C011  FFC9         	movff	i2c_write@direccion1,4041	;volatile
   835  000904                     l86:
   836  000904  B0C7               	btfsc	199,0,c	;volatile
   837  000906  EF87  F004         	goto	u361
   838  00090A  EF89  F004         	goto	u360
   839  00090E                     u361:
   840  00090E  EF82  F004         	goto	l86
   841  000912                     u360:
   842  000912                     l89:
   843  000912  B4C7               	btfsc	199,2,c	;volatile
   844  000914  EF8E  F004         	goto	u371
   845  000918  EF90  F004         	goto	u370
   846  00091C                     u371:
   847  00091C  EF89  F004         	goto	l89
   848  000920                     u370:
   849  000920                     
   850                           ;maincode.c: 74:     SSPBUF = dato1;
   851  000920  C00F  FFC9         	movff	i2c_write@dato1,4041	;volatile
   852  000924                     l92:
   853  000924  B0C7               	btfsc	199,0,c	;volatile
   854  000926  EF97  F004         	goto	u381
   855  00092A  EF99  F004         	goto	u380
   856  00092E                     u381:
   857  00092E  EF92  F004         	goto	l92
   858  000932                     u380:
   859  000932                     l95:
   860  000932  B4C7               	btfsc	199,2,c	;volatile
   861  000934  EF9E  F004         	goto	u391
   862  000938  EFA0  F004         	goto	u390
   863  00093C                     u391:
   864  00093C  EF99  F004         	goto	l95
   865  000940                     u390:
   866  000940                     
   867                           ;maincode.c: 77:     SSPCON2bits.PEN = 1;
   868  000940  84C5               	bsf	197,2,c	;volatile
   869  000942                     l98:
   870  000942  B4C5               	btfsc	197,2,c	;volatile
   871  000944  EFA6  F004         	goto	u401
   872  000948  EFA8  F004         	goto	u400
   873  00094C                     u401:
   874  00094C  EFA1  F004         	goto	l98
   875  000950                     u400:
   876  000950                     
   877                           ;maincode.c: 79:     _delay((unsigned long)((10)*(48000000UL/4000.0)));
   878  000950  0E9C               	movlw	156
   879  000952  6E10               	movwf	??_i2c_write^0,c
   880  000954  0ED7               	movlw	215
   881  000956                     u507:
   882  000956  2EE8               	decfsz	wreg,f,c
   883  000958  D7FE               	bra	u507
   884  00095A  2E10               	decfsz	??_i2c_write^0,f,c
   885  00095C  D7FC               	bra	u507
   886  00095E  F000               	nop	
   887  000960  0012               	return		;funcret
   888  000962                     __end_of_i2c_write:
   889                           	callstack 0
   890                           
   891 ;; *************** function _i2c_read *****************
   892 ;; Defined at:
   893 ;;		line 37 in file "maincode.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;  direccion       1    wreg     unsigned char 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  direccion       1    0[COMRAM] unsigned char 
   898 ;;  leido           1    1[COMRAM] unsigned char 
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      unsigned char 
   901 ;; Registers used:
   902 ;;		wreg, status,2
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   908 ;;      Params:         0       0       0       0       0       0       0       0       0
   909 ;;      Locals:         2       0       0       0       0       0       0       0       0
   910 ;;      Temps:          0       0       0       0       0       0       0       0       0
   911 ;;      Totals:         2       0       0       0       0       0       0       0       0
   912 ;;Total ram usage:        2 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text8
   922  000812                     __ptext8:
   923                           	callstack 0
   924  000812                     _i2c_read:
   925                           	callstack 30
   926                           
   927                           ;incstack = 0
   928                           ;i2c_read@direccion stored from wreg
   929  000812  6E0F               	movwf	i2c_read@direccion^0,c
   930  000814                     
   931                           ;maincode.c: 41:     SSPCON2bits.SEN = 1;
   932  000814  80C5               	bsf	197,0,c	;volatile
   933  000816                     l41:
   934  000816  B0C5               	btfsc	197,0,c	;volatile
   935  000818  EF10  F004         	goto	u41
   936  00081C  EF12  F004         	goto	u40
   937  000820                     u41:
   938  000820  EF0B  F004         	goto	l41
   939  000824                     u40:
   940  000824                     
   941                           ;maincode.c: 43:     SSPBUF = 0xA0;
   942  000824  0EA0               	movlw	160
   943  000826  6EC9               	movwf	201,c	;volatile
   944  000828                     l44:
   945  000828  B0C7               	btfsc	199,0,c	;volatile
   946  00082A  EF19  F004         	goto	u51
   947  00082E  EF1B  F004         	goto	u50
   948  000832                     u51:
   949  000832  EF14  F004         	goto	l44
   950  000836                     u50:
   951  000836                     l47:
   952  000836  B4C7               	btfsc	199,2,c	;volatile
   953  000838  EF20  F004         	goto	u61
   954  00083C  EF22  F004         	goto	u60
   955  000840                     u61:
   956  000840  EF1B  F004         	goto	l47
   957  000844                     u60:
   958  000844                     
   959                           ;maincode.c: 46:     SSPBUF = direccion;
   960  000844  C00F  FFC9         	movff	i2c_read@direccion,4041	;volatile
   961  000848                     l50:
   962  000848  B0C7               	btfsc	199,0,c	;volatile
   963  00084A  EF29  F004         	goto	u71
   964  00084E  EF2B  F004         	goto	u70
   965  000852                     u71:
   966  000852  EF24  F004         	goto	l50
   967  000856                     u70:
   968  000856                     l53:
   969  000856  B4C7               	btfsc	199,2,c	;volatile
   970  000858  EF30  F004         	goto	u81
   971  00085C  EF32  F004         	goto	u80
   972  000860                     u81:
   973  000860  EF2B  F004         	goto	l53
   974  000864                     u80:
   975  000864                     
   976                           ;maincode.c: 49:     SSPCON2bits.RSEN = 1;
   977  000864  82C5               	bsf	197,1,c	;volatile
   978  000866                     l56:
   979  000866  B2C5               	btfsc	197,1,c	;volatile
   980  000868  EF38  F004         	goto	u91
   981  00086C  EF3A  F004         	goto	u90
   982  000870                     u91:
   983  000870  EF33  F004         	goto	l56
   984  000874                     u90:
   985  000874                     
   986                           ;maincode.c: 51:     SSPBUF = 0xA1;
   987  000874  0EA1               	movlw	161
   988  000876  6EC9               	movwf	201,c	;volatile
   989  000878                     l59:
   990  000878  B0C7               	btfsc	199,0,c	;volatile
   991  00087A  EF41  F004         	goto	u101
   992  00087E  EF43  F004         	goto	u100
   993  000882                     u101:
   994  000882  EF3C  F004         	goto	l59
   995  000886                     u100:
   996  000886                     l62:
   997  000886  B4C7               	btfsc	199,2,c	;volatile
   998  000888  EF48  F004         	goto	u111
   999  00088C  EF4A  F004         	goto	u110
  1000  000890                     u111:
  1001  000890  EF43  F004         	goto	l62
  1002  000894                     u110:
  1003  000894                     
  1004                           ;maincode.c: 54:     SSPCON2bits.RCEN = 1;
  1005  000894  86C5               	bsf	197,3,c	;volatile
  1006  000896                     l65:
  1007  000896  A0C7               	btfss	199,0,c	;volatile
  1008  000898  EF50  F004         	goto	u121
  1009  00089C  EF52  F004         	goto	u120
  1010  0008A0                     u121:
  1011  0008A0  EF4B  F004         	goto	l65
  1012  0008A4                     u120:
  1013  0008A4                     
  1014                           ;maincode.c: 56:     leido = SSPBUF;
  1015  0008A4  CFC9 F010          	movff	4041,i2c_read@leido	;volatile
  1016                           
  1017                           ;maincode.c: 57:     SSPCON2bits.ACKDT = 1;
  1018  0008A8  8AC5               	bsf	197,5,c	;volatile
  1019                           
  1020                           ;maincode.c: 58:     SSPCON2bits.ACKEN = 1;
  1021  0008AA  88C5               	bsf	197,4,c	;volatile
  1022  0008AC                     l68:
  1023  0008AC  B8C5               	btfsc	197,4,c	;volatile
  1024  0008AE  EF5B  F004         	goto	u131
  1025  0008B2  EF5D  F004         	goto	u130
  1026  0008B6                     u131:
  1027  0008B6  EF56  F004         	goto	l68
  1028  0008BA                     u130:
  1029  0008BA                     
  1030                           ;maincode.c: 60:     SSPCON2bits.PEN = 1;
  1031  0008BA  84C5               	bsf	197,2,c	;volatile
  1032  0008BC                     l71:
  1033  0008BC  B4C5               	btfsc	197,2,c	;volatile
  1034  0008BE  EF63  F004         	goto	u141
  1035  0008C2  EF65  F004         	goto	u140
  1036  0008C6                     u141:
  1037  0008C6  EF5E  F004         	goto	l71
  1038  0008CA                     u140:
  1039  0008CA                     
  1040                           ;maincode.c: 62:     return(leido);
  1041  0008CA  5010               	movf	i2c_read@leido^0,w,c
  1042  0008CC  0012               	return		;funcret
  1043  0008CE                     __end_of_i2c_read:
  1044                           	callstack 0
  1045                           
  1046 ;; *************** function _POS_CURSOR *****************
  1047 ;; Defined at:
  1048 ;;		line 6 in file "LCD.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  fila            1    wreg     unsigned char 
  1051 ;;  columna         1    3[COMRAM] unsigned char 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  fila            1    4[COMRAM] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1063 ;;      Params:         1       0       0       0       0       0       0       0       0
  1064 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1066 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1067 ;;Total ram usage:        2 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; Hardware stack levels required when called:    2
  1070 ;; This function calls:
  1071 ;;		_ENVIA_LCD_CMD
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text9
  1078  000AFA                     __ptext9:
  1079                           	callstack 0
  1080  000AFA                     _POS_CURSOR:
  1081                           	callstack 28
  1082                           
  1083                           ;incstack = 0
  1084                           ;POS_CURSOR@fila stored from wreg
  1085  000AFA  6E13               	movwf	POS_CURSOR@fila^0,c
  1086  000AFC                     
  1087                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1088  000AFC  0413               	decf	POS_CURSOR@fila^0,w,c
  1089  000AFE  A4D8               	btfss	status,2,c
  1090  000B00  EF84  F005         	goto	u411
  1091  000B04  EF86  F005         	goto	u410
  1092  000B08                     u411:
  1093  000B08  EF8C  F005         	goto	l1117
  1094  000B0C                     u410:
  1095  000B0C                     
  1096                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1097  000B0C  5012               	movf	POS_CURSOR@columna^0,w,c
  1098  000B0E  0F80               	addlw	128
  1099  000B10  EC9A  F005         	call	_ENVIA_LCD_CMD
  1100                           
  1101                           ;LCD.c: 11:  }
  1102  000B14  EF99  F005         	goto	l137
  1103  000B18                     l1117:
  1104  000B18  0E02               	movlw	2
  1105  000B1A  1813               	xorwf	POS_CURSOR@fila^0,w,c
  1106  000B1C  A4D8               	btfss	status,2,c
  1107  000B1E  EF93  F005         	goto	u421
  1108  000B22  EF95  F005         	goto	u420
  1109  000B26                     u421:
  1110  000B26  EF99  F005         	goto	l137
  1111  000B2A                     u420:
  1112  000B2A                     
  1113                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1114  000B2A  5012               	movf	POS_CURSOR@columna^0,w,c
  1115  000B2C  0FC0               	addlw	192
  1116  000B2E  EC9A  F005         	call	_ENVIA_LCD_CMD
  1117  000B32                     l137:
  1118  000B32  0012               	return		;funcret
  1119  000B34                     __end_of_POS_CURSOR:
  1120                           	callstack 0
  1121                           
  1122 ;; *************** function _ENVIA_LCD_CMD *****************
  1123 ;; Defined at:
  1124 ;;		line 104 in file "LCD.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  dato            1    wreg     unsigned char 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  dato            1    1[COMRAM] unsigned char 
  1129 ;;  aux             1    2[COMRAM] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        2 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    1
  1146 ;; This function calls:
  1147 ;;		_ENVIA_NIBBLE
  1148 ;;		_LEER_LCD
  1149 ;; This function is called by:
  1150 ;;		_POS_CURSOR
  1151 ;;		_CURSOR_HOME
  1152 ;;		_CURSOR_ONOFF
  1153 ;;		_BORRAR_LCD
  1154 ;;		_LCD_CONFIG
  1155 ;;		_BLINK_CURSOR
  1156 ;;		_DISPLAY_ONOFF
  1157 ;;		_GENERACARACTER
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text10
  1162  000B34                     __ptext10:
  1163                           	callstack 0
  1164  000B34                     _ENVIA_LCD_CMD:
  1165                           	callstack 27
  1166                           
  1167                           ;incstack = 0
  1168                           ;ENVIA_LCD_CMD@dato stored from wreg
  1169  000B34  6E10               	movwf	ENVIA_LCD_CMD@dato^0,c
  1170  000B36                     
  1171                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1172  000B36  908C               	bcf	140,0,c	;volatile
  1173  000B38                     
  1174                           ;LCD.c: 108:  LEER_LCD();
  1175  000B38  ECF5  F004         	call	_LEER_LCD	;wreg free
  1176  000B3C                     
  1177                           ;LCD.c: 109:  TRISD = 0b00000000;
  1178  000B3C  0E00               	movlw	0
  1179  000B3E  6E95               	movwf	149,c	;volatile
  1180  000B40                     
  1181                           ;LCD.c: 111:         _delay(1200);
  1182  000B40  0EF0               	movlw	240
  1183  000B42                     u517:
  1184  000B42  D000               	nop2	
  1185  000B44  2EE8               	decfsz	wreg,f,c
  1186  000B46  D7FD               	bra	u517
  1187  000B48                     
  1188                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1189  000B48  928C               	bcf	140,1,c	;volatile
  1190  000B4A                     
  1191                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1192  000B4A  948C               	bcf	140,2,c	;volatile
  1193  000B4C                     
  1194                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1195  000B4C  908C               	bcf	140,0,c	;volatile
  1196  000B4E                     
  1197                           ;LCD.c: 115:  aux = dato & 0xF0;
  1198  000B4E  5010               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1199  000B50  0BF0               	andlw	240
  1200  000B52  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1201  000B54                     
  1202                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1203  000B54  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1204  000B56  EC12  F006         	call	_ENVIA_NIBBLE
  1205  000B5A                     
  1206                           ;LCD.c: 117:  aux = dato<<4;
  1207  000B5A  3810               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1208  000B5C  0BF0               	andlw	240
  1209  000B5E  6E11               	movwf	ENVIA_LCD_CMD@aux^0,c
  1210  000B60                     
  1211                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1212  000B60  5011               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1213  000B62  EC12  F006         	call	_ENVIA_NIBBLE
  1214  000B66  0012               	return		;funcret
  1215  000B68                     __end_of_ENVIA_LCD_CMD:
  1216                           	callstack 0
  1217                           
  1218 ;; *************** function _ESCRIBE_MENSAJE *****************
  1219 ;; Defined at:
  1220 ;;		line 41 in file "LCD.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1223 ;;		 -> STR_1(16), 
  1224 ;;  tam             1    5[COMRAM] unsigned char 
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  i               1    8[COMRAM] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      void 
  1229 ;; Registers used:
  1230 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1236 ;;      Params:         3       0       0       0       0       0       0       0       0
  1237 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1238 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1239 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1240 ;;Total ram usage:        6 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; Hardware stack levels required when called:    2
  1243 ;; This function calls:
  1244 ;;		_ENVIA_CHAR
  1245 ;; This function is called by:
  1246 ;;		_main
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text11
  1251  000ABC                     __ptext11:
  1252                           	callstack 0
  1253  000ABC                     _ESCRIBE_MENSAJE:
  1254                           	callstack 28
  1255  000ABC                     
  1256                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1257  000ABC  0E00               	movlw	0
  1258  000ABE  6E17               	movwf	ESCRIBE_MENSAJE@i^0,c
  1259                           
  1260                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1261  000AC0  0E00               	movlw	0
  1262  000AC2  6E17               	movwf	ESCRIBE_MENSAJE@i^0,c
  1263  000AC4  EF73  F005         	goto	l1127
  1264  000AC8                     l1123:
  1265                           
  1266                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1267  000AC8  5017               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1268  000ACA  2412               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1269  000ACC  6E15               	movwf	??_ESCRIBE_MENSAJE^0,c
  1270  000ACE  0E00               	movlw	0
  1271  000AD0  2013               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1272  000AD2  6E16               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1273  000AD4  C015  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1274  000AD8  C016  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1275  000ADC                     	if	0	;tblptru may be non-zero
  1276  000ADC                     	endif
  1277  000ADC                     	if	0	;tblptru may be non-zero
  1278  000ADC                     	endif
  1279  000ADC  0008               	tblrd		*
  1280  000ADE  50F5               	movf	tablat,w,c
  1281  000AE0  ECB4  F005         	call	_ENVIA_CHAR
  1282  000AE4                     
  1283                           ;LCD.c: 47:  }
  1284  000AE4  2A17               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1285  000AE6                     l1127:
  1286  000AE6  5014               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1287  000AE8  5C17               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1288  000AEA  A0D8               	btfss	status,0,c
  1289  000AEC  EF7A  F005         	goto	u431
  1290  000AF0  EF7C  F005         	goto	u430
  1291  000AF4                     u431:
  1292  000AF4  EF64  F005         	goto	l1123
  1293  000AF8                     u430:
  1294  000AF8  0012               	return		;funcret
  1295  000AFA                     __end_of_ESCRIBE_MENSAJE:
  1296                           	callstack 0
  1297                           
  1298 ;; *************** function _ENVIA_CHAR *****************
  1299 ;; Defined at:
  1300 ;;		line 50 in file "LCD.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  dato            1    wreg     unsigned char 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  dato            1    1[COMRAM] unsigned char 
  1305 ;;  aux             1    2[COMRAM] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1315 ;;      Params:         0       0       0       0       0       0       0       0       0
  1316 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1318 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1319 ;;Total ram usage:        2 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    1
  1322 ;; This function calls:
  1323 ;;		_ENVIA_NIBBLE
  1324 ;;		_LEER_LCD
  1325 ;; This function is called by:
  1326 ;;		_main
  1327 ;;		_ESCRIBE_MENSAJE
  1328 ;;		_GENERACARACTER
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text12
  1333  000B68                     __ptext12:
  1334                           	callstack 0
  1335  000B68                     _ENVIA_CHAR:
  1336                           	callstack 28
  1337                           
  1338                           ;incstack = 0
  1339                           ;ENVIA_CHAR@dato stored from wreg
  1340  000B68  6E10               	movwf	ENVIA_CHAR@dato^0,c
  1341  000B6A                     
  1342                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1343  000B6A  808C               	bsf	140,0,c	;volatile
  1344  000B6C                     
  1345                           ;LCD.c: 54:  LEER_LCD();
  1346  000B6C  ECF5  F004         	call	_LEER_LCD	;wreg free
  1347  000B70                     
  1348                           ;LCD.c: 55:  TRISD = 0x00;
  1349  000B70  0E00               	movlw	0
  1350  000B72  6E95               	movwf	149,c	;volatile
  1351  000B74                     
  1352                           ;LCD.c: 56:         _delay(1200);
  1353  000B74  0EF0               	movlw	240
  1354  000B76                     u527:
  1355  000B76  D000               	nop2	
  1356  000B78  2EE8               	decfsz	wreg,f,c
  1357  000B7A  D7FD               	bra	u527
  1358  000B7C                     
  1359                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1360  000B7C  928C               	bcf	140,1,c	;volatile
  1361  000B7E                     
  1362                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1363  000B7E  948C               	bcf	140,2,c	;volatile
  1364  000B80                     
  1365                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1366  000B80  808C               	bsf	140,0,c	;volatile
  1367  000B82                     
  1368                           ;LCD.c: 61:  aux = dato & 0xF0;
  1369  000B82  5010               	movf	ENVIA_CHAR@dato^0,w,c
  1370  000B84  0BF0               	andlw	240
  1371  000B86  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1372  000B88                     
  1373                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1374  000B88  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1375  000B8A  EC12  F006         	call	_ENVIA_NIBBLE
  1376  000B8E                     
  1377                           ;LCD.c: 63:  aux = dato << 4;
  1378  000B8E  3810               	swapf	ENVIA_CHAR@dato^0,w,c
  1379  000B90  0BF0               	andlw	240
  1380  000B92  6E11               	movwf	ENVIA_CHAR@aux^0,c
  1381  000B94                     
  1382                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1383  000B94  5011               	movf	ENVIA_CHAR@aux^0,w,c
  1384  000B96  EC12  F006         	call	_ENVIA_NIBBLE
  1385  000B9A  0012               	return		;funcret
  1386  000B9C                     __end_of_ENVIA_CHAR:
  1387                           	callstack 0
  1388                           
  1389 ;; *************** function _LEER_LCD *****************
  1390 ;; Defined at:
  1391 ;;		line 121 in file "LCD.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  aux             1    0[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1405 ;;      Params:         0       0       0       0       0       0       0       0       0
  1406 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1408 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1409 ;;Total ram usage:        1 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_ENVIA_CHAR
  1415 ;;		_ENVIA_LCD_CMD
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text13
  1420  0009EA                     __ptext13:
  1421                           	callstack 0
  1422  0009EA                     _LEER_LCD:
  1423                           	callstack 27
  1424  0009EA                     
  1425                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1426  0009EA  0EF8               	movlw	248
  1427  0009EC  6E95               	movwf	149,c	;volatile
  1428  0009EE                     
  1429                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1430  0009EE  908C               	bcf	140,0,c	;volatile
  1431  0009F0                     
  1432                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1433  0009F0  828C               	bsf	140,1,c	;volatile
  1434  0009F2                     
  1435                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1436  0009F2  848C               	bsf	140,2,c	;volatile
  1437  0009F4                     
  1438                           ;LCD.c: 128:         _delay(1200);
  1439  0009F4  0EF0               	movlw	240
  1440  0009F6                     u537:
  1441  0009F6  D000               	nop2	
  1442  0009F8  2EE8               	decfsz	wreg,f,c
  1443  0009FA  D7FD               	bra	u537
  1444  0009FC                     
  1445                           ;LCD.c: 130:  aux = PORTD;
  1446  0009FC  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1447  000A00                     
  1448                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1449  000A00  948C               	bcf	140,2,c	;volatile
  1450  000A02                     
  1451                           ;LCD.c: 132:         _delay(1200);
  1452  000A02  0EF0               	movlw	240
  1453  000A04                     u547:
  1454  000A04  D000               	nop2	
  1455  000A06  2EE8               	decfsz	wreg,f,c
  1456  000A08  D7FD               	bra	u547
  1457  000A0A                     
  1458                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1459  000A0A  848C               	bsf	140,2,c	;volatile
  1460  000A0C                     
  1461                           ;LCD.c: 135:         _delay(1200);
  1462  000A0C  0EF0               	movlw	240
  1463  000A0E                     u557:
  1464  000A0E  D000               	nop2	
  1465  000A10  2EE8               	decfsz	wreg,f,c
  1466  000A12  D7FD               	bra	u557
  1467  000A14                     
  1468                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1469  000A14  948C               	bcf	140,2,c	;volatile
  1470  000A16                     l885:
  1471                           
  1472                           ;LCD.c: 138:  aux = aux & 0x80;
  1473  000A16  500F               	movf	LEER_LCD@aux^0,w,c
  1474  000A18  0B80               	andlw	128
  1475  000A1A  6E0F               	movwf	LEER_LCD@aux^0,c
  1476                           
  1477                           ;LCD.c: 139:  while(aux == 0x80)
  1478  000A1C  EF24  F005         	goto	l899
  1479  000A20                     l180:
  1480                           
  1481                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1482  000A20  848C               	bsf	140,2,c	;volatile
  1483  000A22                     
  1484                           ;LCD.c: 142:             _delay(1200);
  1485  000A22  0EF0               	movlw	240
  1486  000A24                     u567:
  1487  000A24  D000               	nop2	
  1488  000A26  2EE8               	decfsz	wreg,f,c
  1489  000A28  D7FD               	bra	u567
  1490  000A2A                     
  1491                           ;LCD.c: 143:             aux = PORTD;
  1492  000A2A  CF83 F00F          	movff	3971,LEER_LCD@aux	;volatile
  1493  000A2E                     
  1494                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1495  000A2E  948C               	bcf	140,2,c	;volatile
  1496                           
  1497                           ;LCD.c: 145:             _delay(1200);
  1498  000A30  0EF0               	movlw	240
  1499  000A32                     u577:
  1500  000A32  D000               	nop2	
  1501  000A34  2EE8               	decfsz	wreg,f,c
  1502  000A36  D7FD               	bra	u577
  1503  000A38                     
  1504                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1505  000A38  848C               	bsf	140,2,c	;volatile
  1506                           
  1507                           ;LCD.c: 147:             _delay(1200);
  1508  000A3A  0EF0               	movlw	240
  1509  000A3C                     u587:
  1510  000A3C  D000               	nop2	
  1511  000A3E  2EE8               	decfsz	wreg,f,c
  1512  000A40  D7FD               	bra	u587
  1513  000A42                     
  1514                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1515  000A42  948C               	bcf	140,2,c	;volatile
  1516  000A44  EF0B  F005         	goto	l885
  1517  000A48                     l899:
  1518                           
  1519                           ;LCD.c: 139:  while(aux == 0x80)
  1520  000A48  0E80               	movlw	128
  1521  000A4A  180F               	xorwf	LEER_LCD@aux^0,w,c
  1522  000A4C  B4D8               	btfsc	status,2,c
  1523  000A4E  EF2B  F005         	goto	u11
  1524  000A52  EF2D  F005         	goto	u10
  1525  000A56                     u11:
  1526  000A56  EF10  F005         	goto	l180
  1527  000A5A                     u10:
  1528  000A5A  0012               	return		;funcret
  1529  000A5C                     __end_of_LEER_LCD:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _ENVIA_NIBBLE *****************
  1533 ;; Defined at:
  1534 ;;		line 93 in file "LCD.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  dato            1    wreg     unsigned char 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  dato            1    0[COMRAM] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1548 ;;      Params:         0       0       0       0       0       0       0       0       0
  1549 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1551 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1552 ;;Total ram usage:        1 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_ENVIA_CHAR
  1558 ;;		_LCD_CONFIG
  1559 ;;		_ENVIA_LCD_CMD
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text14
  1564  000C24                     __ptext14:
  1565                           	callstack 0
  1566  000C24                     _ENVIA_NIBBLE:
  1567                           	callstack 28
  1568                           
  1569                           ;incstack = 0
  1570                           ;ENVIA_NIBBLE@dato stored from wreg
  1571  000C24  6E0F               	movwf	ENVIA_NIBBLE@dato^0,c
  1572  000C26                     
  1573                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1574  000C26  0E0F               	movlw	15
  1575  000C28  168C               	andwf	140,f,c	;volatile
  1576                           
  1577                           ;LCD.c: 96:  dato &= 0xF0;
  1578  000C2A  0EF0               	movlw	240
  1579  000C2C  160F               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1580                           
  1581                           ;LCD.c: 97:  LATD|= dato;
  1582  000C2E  500F               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1583  000C30  128C               	iorwf	140,f,c	;volatile
  1584  000C32                     
  1585                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1586  000C32  848C               	bsf	140,2,c	;volatile
  1587  000C34                     
  1588                           ;LCD.c: 100:         _delay(1200);
  1589  000C34  0EF0               	movlw	240
  1590  000C36                     u597:
  1591  000C36  D000               	nop2	
  1592  000C38  2EE8               	decfsz	wreg,f,c
  1593  000C3A  D7FD               	bra	u597
  1594  000C3C                     
  1595                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1596  000C3C  948C               	bcf	140,2,c	;volatile
  1597  000C3E  0012               	return		;funcret
  1598  000C40                     __end_of_ENVIA_NIBBLE:
  1599                           	callstack 0
  1600                           
  1601                           	psect	rparam
  1602  0000                     
  1603                           	psect	idloc
  1604                           
  1605                           ;Config register IDLOC0 @ 0x200000
  1606                           ;	unspecified, using default values
  1607  200000                     	org	2097152
  1608  200000  FF                 	db	255
  1609                           
  1610                           ;Config register IDLOC1 @ 0x200001
  1611                           ;	unspecified, using default values
  1612  200001                     	org	2097153
  1613  200001  FF                 	db	255
  1614                           
  1615                           ;Config register IDLOC2 @ 0x200002
  1616                           ;	unspecified, using default values
  1617  200002                     	org	2097154
  1618  200002  FF                 	db	255
  1619                           
  1620                           ;Config register IDLOC3 @ 0x200003
  1621                           ;	unspecified, using default values
  1622  200003                     	org	2097155
  1623  200003  FF                 	db	255
  1624                           
  1625                           ;Config register IDLOC4 @ 0x200004
  1626                           ;	unspecified, using default values
  1627  200004                     	org	2097156
  1628  200004  FF                 	db	255
  1629                           
  1630                           ;Config register IDLOC5 @ 0x200005
  1631                           ;	unspecified, using default values
  1632  200005                     	org	2097157
  1633  200005  FF                 	db	255
  1634                           
  1635                           ;Config register IDLOC6 @ 0x200006
  1636                           ;	unspecified, using default values
  1637  200006                     	org	2097158
  1638  200006  FF                 	db	255
  1639                           
  1640                           ;Config register IDLOC7 @ 0x200007
  1641                           ;	unspecified, using default values
  1642  200007                     	org	2097159
  1643  200007  FF                 	db	255
  1644                           
  1645                           	psect	config
  1646                           
  1647                           ;Config register CONFIG1L @ 0x300000
  1648                           ;	PLL Prescaler Selection bits
  1649                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1650                           ;	System Clock Postscaler Selection bits
  1651                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1652                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1653                           ;	USBDIV = 0x0, unprogrammed default
  1654  300000                     	org	3145728
  1655  300000  00                 	db	0
  1656                           
  1657                           ;Config register CONFIG1H @ 0x300001
  1658                           ;	Oscillator Selection bits
  1659                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1660                           ;	Fail-Safe Clock Monitor Enable bit
  1661                           ;	FCMEN = 0x0, unprogrammed default
  1662                           ;	Internal/External Oscillator Switchover bit
  1663                           ;	IESO = 0x0, unprogrammed default
  1664  300001                     	org	3145729
  1665  300001  02                 	db	2
  1666                           
  1667                           ;Config register CONFIG2L @ 0x300002
  1668                           ;	Power-up Timer Enable bit
  1669                           ;	PWRT = ON, PWRT enabled
  1670                           ;	Brown-out Reset Enable bits
  1671                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1672                           ;	Brown-out Reset Voltage bits
  1673                           ;	BORV = 0x3, unprogrammed default
  1674                           ;	USB Voltage Regulator Enable bit
  1675                           ;	VREGEN = 0x0, unprogrammed default
  1676  300002                     	org	3145730
  1677  300002  18                 	db	24
  1678                           
  1679                           ;Config register CONFIG2H @ 0x300003
  1680                           ;	Watchdog Timer Enable bit
  1681                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1682                           ;	Watchdog Timer Postscale Select bits
  1683                           ;	WDTPS = 0xF, unprogrammed default
  1684  300003                     	org	3145731
  1685  300003  1E                 	db	30
  1686                           
  1687                           ; Padding undefined space
  1688  300004                     	org	3145732
  1689  300004  FF                 	db	255
  1690                           
  1691                           ;Config register CONFIG3H @ 0x300005
  1692                           ;	CCP2 MUX bit
  1693                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1694                           ;	PORTB A/D Enable bit
  1695                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1696                           ;	Low-Power Timer 1 Oscillator Enable bit
  1697                           ;	LPT1OSC = 0x0, unprogrammed default
  1698                           ;	MCLR Pin Enable bit
  1699                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1700  300005                     	org	3145733
  1701  300005  81                 	db	129
  1702                           
  1703                           ;Config register CONFIG4L @ 0x300006
  1704                           ;	Stack Full/Underflow Reset Enable bit
  1705                           ;	STVREN = 0x1, unprogrammed default
  1706                           ;	Single-Supply ICSP Enable bit
  1707                           ;	LVP = OFF, Single-Supply ICSP disabled
  1708                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1709                           ;	ICPRT = 0x0, unprogrammed default
  1710                           ;	Extended Instruction Set Enable bit
  1711                           ;	XINST = 0x0, unprogrammed default
  1712                           ;	Background Debugger Enable bit
  1713                           ;	DEBUG = 0x1, unprogrammed default
  1714  300006                     	org	3145734
  1715  300006  81                 	db	129
  1716                           
  1717                           ; Padding undefined space
  1718  300007                     	org	3145735
  1719  300007  FF                 	db	255
  1720                           
  1721                           ;Config register CONFIG5L @ 0x300008
  1722                           ;	unspecified, using default values
  1723                           ;	Code Protection bit
  1724                           ;	CP0 = 0x1, unprogrammed default
  1725                           ;	Code Protection bit
  1726                           ;	CP1 = 0x1, unprogrammed default
  1727                           ;	Code Protection bit
  1728                           ;	CP2 = 0x1, unprogrammed default
  1729                           ;	Code Protection bit
  1730                           ;	CP3 = 0x1, unprogrammed default
  1731  300008                     	org	3145736
  1732  300008  0F                 	db	15
  1733                           
  1734                           ;Config register CONFIG5H @ 0x300009
  1735                           ;	unspecified, using default values
  1736                           ;	Boot Block Code Protection bit
  1737                           ;	CPB = 0x1, unprogrammed default
  1738                           ;	Data EEPROM Code Protection bit
  1739                           ;	CPD = 0x1, unprogrammed default
  1740  300009                     	org	3145737
  1741  300009  C0                 	db	192
  1742                           
  1743                           ;Config register CONFIG6L @ 0x30000A
  1744                           ;	unspecified, using default values
  1745                           ;	Write Protection bit
  1746                           ;	WRT0 = 0x1, unprogrammed default
  1747                           ;	Write Protection bit
  1748                           ;	WRT1 = 0x1, unprogrammed default
  1749                           ;	Write Protection bit
  1750                           ;	WRT2 = 0x1, unprogrammed default
  1751                           ;	Write Protection bit
  1752                           ;	WRT3 = 0x1, unprogrammed default
  1753  30000A                     	org	3145738
  1754  30000A  0F                 	db	15
  1755                           
  1756                           ;Config register CONFIG6H @ 0x30000B
  1757                           ;	unspecified, using default values
  1758                           ;	Configuration Register Write Protection bit
  1759                           ;	WRTC = 0x1, unprogrammed default
  1760                           ;	Boot Block Write Protection bit
  1761                           ;	WRTB = 0x1, unprogrammed default
  1762                           ;	Data EEPROM Write Protection bit
  1763                           ;	WRTD = 0x1, unprogrammed default
  1764  30000B                     	org	3145739
  1765  30000B  E0                 	db	224
  1766                           
  1767                           ;Config register CONFIG7L @ 0x30000C
  1768                           ;	unspecified, using default values
  1769                           ;	Table Read Protection bit
  1770                           ;	EBTR0 = 0x1, unprogrammed default
  1771                           ;	Table Read Protection bit
  1772                           ;	EBTR1 = 0x1, unprogrammed default
  1773                           ;	Table Read Protection bit
  1774                           ;	EBTR2 = 0x1, unprogrammed default
  1775                           ;	Table Read Protection bit
  1776                           ;	EBTR3 = 0x1, unprogrammed default
  1777  30000C                     	org	3145740
  1778  30000C  0F                 	db	15
  1779                           
  1780                           ;Config register CONFIG7H @ 0x30000D
  1781                           ;	unspecified, using default values
  1782                           ;	Boot Block Table Read Protection bit
  1783                           ;	EBTRB = 0x1, unprogrammed default
  1784  30000D                     	org	3145741
  1785  30000D  40                 	db	64
  1786                           tosu	equ	0xFFF
  1787                           tosh	equ	0xFFE
  1788                           tosl	equ	0xFFD
  1789                           stkptr	equ	0xFFC
  1790                           pclatu	equ	0xFFB
  1791                           pclath	equ	0xFFA
  1792                           pcl	equ	0xFF9
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           prodh	equ	0xFF4
  1798                           prodl	equ	0xFF3
  1799                           indf0	equ	0xFEF
  1800                           postinc0	equ	0xFEE
  1801                           postdec0	equ	0xFED
  1802                           preinc0	equ	0xFEC
  1803                           plusw0	equ	0xFEB
  1804                           fsr0h	equ	0xFEA
  1805                           fsr0l	equ	0xFE9
  1806                           wreg	equ	0xFE8
  1807                           indf1	equ	0xFE7
  1808                           postinc1	equ	0xFE6
  1809                           postdec1	equ	0xFE5
  1810                           preinc1	equ	0xFE4
  1811                           plusw1	equ	0xFE3
  1812                           fsr1h	equ	0xFE2
  1813                           fsr1l	equ	0xFE1
  1814                           bsr	equ	0xFE0
  1815                           indf2	equ	0xFDF
  1816                           postinc2	equ	0xFDE
  1817                           postdec2	equ	0xFDD
  1818                           preinc2	equ	0xFDC
  1819                           plusw2	equ	0xFDB
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8

Data Sizes:
    Strings     16
    Constant    0
    Data        14
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1676
                                              9 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                           _i2c_read
                          _i2c_write
                           _lcd_init
                          _mssp_conf
 ---------------------------------------------------------------------------------
 (1) _mssp_conf                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _i2c_write                                            3     2      1     120
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _i2c_read                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     363
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _i2c_read
   _i2c_write
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _mssp_conf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed Oct 28 00:50:19 2020

             _SSPSTATbits 000FC7                        l41 0816                        l50 0848  
                      l35 0C22                        l44 0828                        l53 0856  
                      l70 08BA                        l62 0886                        l38 0C4E  
                      l71 08BC                        l55 0864                        l47 0836  
                      l64 0894                        l56 0866                        l80 08E4  
                      l73 08CA                        l65 0896                        l74 08CC  
                      l67 08A4                        l59 0878                        l91 0920  
                      l83 08F2                        l68 08AC                        l92 0924  
                      l77 08D2                        l86 0904                        l95 0932  
                      l97 0940                        l89 0912                        l98 0942  
                      u10 0A5A                        u11 0A56                        u20 0BDE  
                      u21 0BDA                        u30 0BF4                        u31 0BF0  
                      u40 0824                        u41 0820                        u50 0836  
                      u51 0832                        u60 0844                        u61 0840  
                      u70 0856                        u71 0852                        u80 0864  
                      u81 0860                        u90 0874                        u91 0870  
           ENVIA_CHAR@aux 0011                       l101 0960                       l110 09E2  
                     l150 0C64                       l161 0AF8                       l137 0B32  
                     l170 0ABA                       l155 0BFA                       l180 0A20  
                     l164 0B9A                       l173 0C3E                       l182 0A5A  
                     l167 0C6C                       l176 0B66                       l901 0C26  
                     l903 0C32                       l911 0B38                       l905 0C34  
                     l921 0B4C                       l913 0B3C                       l907 0C3C  
                     l923 0B4E                       l915 0B40                       l931 0A5C  
                     l925 0B54                       l917 0B48                       l909 0B36  
                     l941 0A90                       l933 0A60                       l871 09F4  
                     l863 09EA                       l927 0B5A                       l919 0B4A  
                     l951 0AAE                       l943 0A96                       l935 0A66  
                     l881 0A0C                       l873 09FC                       l865 09EE  
                     l929 0B60                       l961 0BDE                       l953 0AB4  
                     l945 0A9C                       l937 0A74                       l891 0A2E  
                     l883 0A14                       l875 0A00                       l867 09F0  
                     l971 0B70                       l955 0C66                       l963 0BE4  
                     l947 0AA2                       l939 0A88                       l893 0A38  
                     l885 0A16                       l877 0A02                       l869 09F2  
                     l981 0B82                       l973 0B74                       l957 0C5E  
                     l965 0BF4                       l949 0AA8                       l895 0A42  
                     l887 0A22                       l879 0A0A                       l983 0B88  
                     l975 0B7C                       l967 0B6A                       l959 0BCE  
                     l991 0C00                       l889 0A2A                       l985 0B8E  
                     l977 0B7E                       l969 0B6C                       l993 0C04  
                     l899 0A48                       l987 0B94                       l979 0B80  
                     l995 0C14                       l997 0C18                       l989 0BFC  
                     l999 0C1C                       u100 0886                       u101 0882  
                     u110 0894                       u111 0890                       u120 08A4  
                     u121 08A0                       u130 08BA                       u131 08B6  
                     u140 08CA                       u141 08C6                       u400 0950  
                     u401 094C                       u410 0B0C                       u330 08E0  
                     u411 0B08                       u331 08DC                       u420 0B2A  
                     u340 08F2                       u421 0B26                       u341 08EE  
                     u430 0AF8                       u350 0900                       u431 0AF4  
                     u351 08FC                       u360 0912                       u440 09B2  
                     u361 090E                       u441 09AE                       u370 0920  
                     u450 09E2                       u507 0956                       u371 091C  
                     u451 09DE                       u380 0932                       u517 0B42  
                     u381 092E                       u390 0940                       u527 0B76  
                     u391 093C                       u537 09F6                       u547 0A04  
                     u467 0C0A                       u557 0A0E                       u477 0A6C  
                     u567 0A24                       u487 0A7A                       u577 0A32  
                     u497 0A8A                       u587 0A3C                       u597 0C36  
             LEER_LCD@aux 000F                       wreg 000FE8              ?_CURSOR_HOME 000F  
          ??_ENVIA_NIBBLE 000F            ENVIA_CHAR@dato 0010                      l1001 0C40  
                    l1011 0844                      l1003 0C4A                      l1013 0874  
                    l1005 0814                      l1007 0814                      l1111 0950  
                    l1121 0ABC                      l1113 0AFC                      l1009 0824  
                    l1105 08D0                      l1123 0AC8                      l1115 0B0C  
                    l1107 08E0                      l1131 0966                      l1125 0AE4  
                    l1117 0B18                      l1109 0900                      l1133 096A  
                    l1127 0AE6                      l1119 0B2A                      l1151 09BC  
                    l1143 0988                      l1135 0974                      l1161 09D2  
                    l1145 09A0                      l1137 0984                      l1129 0962  
                    l1147 09A2                      l1157 09C0                      l1149 09B2  
                    l1159 09D0                      STR_1 0801                      _LATD 000F8C  
                    _main 0962                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9                      start 0000             ?_CURSOR_ONOFF 000F  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0010          __end_of_LEER_LCD 0A5C  
     __size_of_BORRAR_LCD 0008                     ?_main 000F                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0012                     main@x 0019                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0012           __initialization 0B9C  
            __end_of_main 09EA          __end_of_i2c_read 08CE           _ESCRIBE_MENSAJE 0ABC  
                  ??_main 0018             __activetblptr 000001                    _SSPADD 000FC8  
                  _SSPBUF 000FC9        __size_of_i2c_write 0094          __end_of_lcd_init 0C24  
    __end_of_ENVIA_NIBBLE 0C40                    _datoin 001A       __size_of_POS_CURSOR 003A  
                  _nombre 0001              __pdataCOMRAM 0001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0012      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 000F  
              __accesstop 0060   __end_of__initialization 0BBE              ??_LCD_CONFIG 0012  
           ___rparam_used 000001              ??_ENVIA_CHAR 0010   __end_of_ESCRIBE_MENSAJE 0AFA  
          __pcstackCOMRAM 000F        __end_of_BORRAR_LCD 0C6E         __end_of_i2c_write 0962  
        ENVIA_LCD_CMD@aux 0011      __end_of_CURSOR_ONOFF 0BFC        __end_of_LCD_CONFIG 0ABC  
      __end_of_ENVIA_CHAR 0B9C                 ?_i2c_read 000F                ??_LEER_LCD 000F  
        ENVIA_NIBBLE@dato 000F             i2c_read@leido 0010        __size_of_mssp_conf 0010  
            ??_POS_CURSOR 0013                 ?_lcd_init 000F                ??_i2c_read 000F  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0012              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0B68  
                 __pcinit 0B9C        __end_of_POS_CURSOR 0B34                   __ramtop 0800  
                 __ptext0 0962                   __ptext1 0C40                   __ptext2 0BFC  
                 __ptext3 0A5C                   __ptext4 0BCC                   __ptext5 0C5E  
                 __ptext6 0C66                   __ptext7 08CE                   __ptext8 0812  
                 __ptext9 0AFA                ??_lcd_init 0013              _ENVIA_NIBBLE 0C24  
    end_of_initialization 0BBE         __end_of_mssp_conf 0C50                   postdec1 000FE5  
                 postinc0 000FEE     __size_of_CURSOR_ONOFF 0030         __size_of_LEER_LCD 0072  
            _CURSOR_ONOFF 0BCC        CURSOR_ONOFF@estado 0012             __pidataCOMRAM 0C50  
           ??_CURSOR_HOME 0012       start_initialization 0B9C                 _i2c_write 08CE  
       ENVIA_LCD_CMD@dato 0010         __size_of_i2c_read 00BC               __pbssCOMRAM 001A  
              ?_i2c_write 000F       __end_of_CURSOR_HOME 0C66         __size_of_lcd_init 0028  
             __smallconst 0800         i2c_read@direccion 000F                  _LEER_LCD 09EA  
                _LATDbits 000F8C                 _mssp_conf 0C40          ESCRIBE_MENSAJE@i 0017  
          POS_CURSOR@fila 0013  __size_of_ESCRIBE_MENSAJE 003E                 main@x_300 0018  
             _CURSOR_HOME 0C5E               ??_i2c_write 0010                 copy_data0 0BB0  
     i2c_write@direccion1 0011                  _i2c_read 0812    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
              ?_mssp_conf 000F                  __ptext10 0B34                  __ptext11 0ABC  
                __ptext12 0B68                  __ptext13 09EA                  __ptext14 0C24  
              _BORRAR_LCD 0C66                  _lcd_init 0BFC             __size_of_main 0088  
              _LCD_CONFIG 0A5C                _ENVIA_CHAR 0B68             _ENVIA_LCD_CMD 0B34  
       ??_ESCRIBE_MENSAJE 0015     ESCRIBE_MENSAJE@cadena 0012               ??_mssp_conf 000F  
          ?_ENVIA_LCD_CMD 000F               _SSPCON1bits 000FC6               _SSPCON2bits 000FC5  
             ?_BORRAR_LCD 000F             ?_ENVIA_NIBBLE 000F                _POS_CURSOR 0AFA  
             ?_LCD_CONFIG 000F        ESCRIBE_MENSAJE@tam 0014            i2c_write@dato1 000F  
             ?_ENVIA_CHAR 000F         POS_CURSOR@columna 0012  
