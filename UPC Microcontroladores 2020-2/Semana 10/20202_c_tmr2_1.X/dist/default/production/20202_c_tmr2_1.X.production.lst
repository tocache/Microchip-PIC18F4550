

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Oct 20 21:11:57 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _PORTD	set	3971
    70  0000                     _LATD	set	3980
    71  0000                     _LATDbits	set	3980
    72  0000                     _PIR1bits	set	3998
    73  0000                     _LATEbits	set	3981
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADCON0bits	set	4034
    76  0000                     _TRISEbits	set	3990
    77  0000                     _ADCON0	set	4034
    78  0000                     _ADCON1	set	4033
    79  0000                     _ADCON2	set	4032
    80  0000                     _PIE1bits	set	3997
    81  0000                     _INTCONbits	set	4082
    82  0000                     _PR2	set	4043
    83  0000                     _T2CON	set	4042
    84  0000                     _TRISD	set	3989
    85                           
    86                           	psect	smallconst
    87  000800                     __psmallconst:
    88                           	callstack 0
    89  000800  00                 	db	0
    90  000801                     STR_2:
    91  000801  56                 	db	86	;'V'
    92  000802  61                 	db	97	;'a'
    93  000803  6C                 	db	108	;'l'
    94  000804  6F                 	db	111	;'o'
    95  000805  72                 	db	114	;'r'
    96  000806  20                 	db	32
    97  000807  64                 	db	100	;'d'
    98  000808  65                 	db	101	;'e'
    99  000809  20                 	db	32
   100  00080A  50                 	db	80	;'P'
   101  00080B  52                 	db	82	;'R'
   102  00080C  32                 	db	50	;'2'
   103  00080D  3A                 	db	58	;':'
   104  00080E  00                 	db	0
   105  00080F                     STR_1:
   106  00080F  47                 	db	71	;'G'
   107  000810  65                 	db	101	;'e'
   108  000811  6E                 	db	110	;'n'
   109  000812  65                 	db	101	;'e'
   110  000813  72                 	db	114	;'r'
   111  000814  61                 	db	97	;'a'
   112  000815  64                 	db	100	;'d'
   113  000816  6F                 	db	111	;'o'
   114  000817  72                 	db	114	;'r'
   115  000818  00                 	db	0
   116  000819  00                 	db	0	; dummy byte at the end
   117  0000                     
   118                           ; #config settings
   119                           
   120                           	psect	cinit
   121  000C48                     __pcinit:
   122                           	callstack 0
   123  000C48                     start_initialization:
   124                           	callstack 0
   125  000C48                     __initialization:
   126                           	callstack 0
   127                           
   128                           ; Clear objects allocated to COMRAM (10 bytes)
   129  000C48  EE00  F010         	lfsr	0,__pbssCOMRAM
   130  000C4C  0E0A               	movlw	10
   131  000C4E                     clear_0:
   132  000C4E  6AEE               	clrf	postinc0,c
   133  000C50  06E8               	decf	wreg,f,c
   134  000C52  E1FD               	bnz	clear_0
   135  000C54                     end_of_initialization:
   136                           	callstack 0
   137  000C54                     __end_of__initialization:
   138                           	callstack 0
   139  000C54  901A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   140  000C56  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   141  000C58  0E00               	movlw	low (__Lsmallconst shr (0+16))
   142  000C5A  6EF8               	movwf	tblptru,c
   143  000C5C  0E08               	movlw	high __Lsmallconst
   144  000C5E  6EF7               	movwf	tblptrh,c
   145  000C60  0100               	movlb	0
   146  000C62  EF5A  F004         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMRAM
   149  000010                     __pbssCOMRAM:
   150                           	callstack 0
   151  000010                     _unidad:
   152                           	callstack 0
   153  000010                     	ds	2
   154  000012                     _decena:
   155                           	callstack 0
   156  000012                     	ds	2
   157  000014                     _centena:
   158                           	callstack 0
   159  000014                     	ds	2
   160  000016                     _millar:
   161                           	callstack 0
   162  000016                     	ds	2
   163  000018                     _var_gen:
   164                           	callstack 0
   165  000018                     	ds	2
   166                           
   167                           	psect	cstackCOMRAM
   168  000001                     __pcstackCOMRAM:
   169                           	callstack 0
   170  000001                     ??_High_ISR:
   171                           
   172                           ; 1 bytes @ 0x0
   173  000001                     	ds	1
   174  000002                     ?___lwmod:
   175                           	callstack 0
   176  000002                     ENVIA_NIBBLE@dato:
   177                           	callstack 0
   178  000002                     LEER_LCD@aux:
   179                           	callstack 0
   180  000002                     ___lwmod@dividend:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x1
   184  000002                     	ds	1
   185  000003                     ENVIA_CHAR@dato:
   186                           	callstack 0
   187  000003                     ENVIA_LCD_CMD@dato:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x2
   191  000003                     	ds	1
   192  000004                     ENVIA_CHAR@aux:
   193                           	callstack 0
   194  000004                     ENVIA_LCD_CMD@aux:
   195                           	callstack 0
   196  000004                     ___lwmod@divisor:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x3
   200  000004                     	ds	1
   201  000005                     ??_LCD_CONFIG:
   202  000005                     POS_CURSOR@columna:
   203                           	callstack 0
   204  000005                     CURSOR_ONOFF@estado:
   205                           	callstack 0
   206  000005                     ESCRIBE_MENSAJE@cadena:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x4
   210  000005                     	ds	1
   211  000006                     ??_lcd_init:
   212  000006                     POS_CURSOR@fila:
   213                           	callstack 0
   214  000006                     ___lwmod@counter:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x5
   218  000006                     	ds	1
   219  000007                     ?___lwdiv:
   220                           	callstack 0
   221  000007                     ESCRIBE_MENSAJE@tam:
   222                           	callstack 0
   223  000007                     ___lwdiv@dividend:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x6
   227  000007                     	ds	1
   228  000008                     ??_ESCRIBE_MENSAJE:
   229                           
   230                           ; 1 bytes @ 0x7
   231  000008                     	ds	1
   232  000009                     ___lwdiv@divisor:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0x8
   236  000009                     	ds	1
   237  00000A                     ESCRIBE_MENSAJE@i:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x9
   241  00000A                     	ds	1
   242  00000B                     ___lwdiv@quotient:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0xA
   246  00000B                     	ds	2
   247  00000D                     ___lwdiv@counter:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0xC
   251  00000D                     	ds	1
   252  00000E                     convierte@numero:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0xD
   256  00000E                     	ds	2
   257  000010                     
   258                           ; 1 bytes @ 0xF
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 56 in file "maincode.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : 0/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   278 ;;      Params:         0       0       0       0       0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0       0       0       0       0
   280 ;;      Temps:          0       0       0       0       0       0       0       0       0
   281 ;;      Totals:         0       0       0       0       0       0       0       0       0
   282 ;;Total ram usage:        0 bytes
   283 ;; Hardware stack levels required when called:    5
   284 ;; This function calls:
   285 ;;		_ENVIA_CHAR
   286 ;;		_ESCRIBE_MENSAJE
   287 ;;		_POS_CURSOR
   288 ;;		_ad_conf
   289 ;;		_convierte
   290 ;;		_int_conf
   291 ;;		_lcd_init
   292 ;;		_tmr2_conf
   293 ;; This function is called by:
   294 ;;		Startup code after reset
   295 ;; This function uses a non-reentrant model
   296 ;;
   297                           
   298                           	psect	text0
   299  0008B4                     __ptext0:
   300                           	callstack 0
   301  0008B4                     _main:
   302                           	callstack 26
   303  0008B4                     
   304                           ;maincode.c: 57:     lcd_init();
   305  0008B4  ECFD  F005         	call	_lcd_init	;wreg free
   306  0008B8                     
   307                           ;maincode.c: 58:     tmr2_conf();
   308  0008B8  EC48  F006         	call	_tmr2_conf	;wreg free
   309  0008BC                     
   310                           ;maincode.c: 59:     ad_conf();
   311  0008BC  EC41  F006         	call	_ad_conf	;wreg free
   312  0008C0                     
   313                           ;maincode.c: 60:     int_conf();
   314  0008C0  EC55  F006         	call	_int_conf	;wreg free
   315  0008C4                     
   316                           ;maincode.c: 62:     TRISEbits.RE0 = 0;
   317  0008C4  9096               	bcf	150,0,c	;volatile
   318  0008C6                     
   319                           ;maincode.c: 63:     POS_CURSOR(1,0);
   320  0008C6  0E00               	movlw	0
   321  0008C8  6E05               	movwf	POS_CURSOR@columna^0,c
   322  0008CA  0E01               	movlw	1
   323  0008CC  EC94  F005         	call	_POS_CURSOR
   324  0008D0                     
   325                           ;maincode.c: 64:     ESCRIBE_MENSAJE("Generador",9);
   326  0008D0  0E0F               	movlw	low STR_1
   327  0008D2  6E05               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   328  0008D4  0E08               	movlw	high STR_1
   329  0008D6  6E06               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   330  0008D8  0E09               	movlw	9
   331  0008DA  6E07               	movwf	ESCRIBE_MENSAJE@tam^0,c
   332  0008DC  EC75  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   333  0008E0                     l1165:
   334                           
   335                           ;maincode.c: 66:         ADCON0bits.GODONE = 1;
   336  0008E0  82C2               	bsf	194,1,c	;volatile
   337  0008E2                     l73:
   338  0008E2  B2C2               	btfsc	194,1,c	;volatile
   339  0008E4  EF76  F004         	goto	u301
   340  0008E8  EF78  F004         	goto	u300
   341  0008EC                     u301:
   342  0008EC  EF71  F004         	goto	l73
   343  0008F0                     u300:
   344  0008F0                     
   345                           ;maincode.c: 68:         PR2 = ADRESH;
   346  0008F0  CFC4 FFCB          	movff	4036,4043	;volatile
   347                           
   348                           ;maincode.c: 69:         var_gen = ADRESH;
   349  0008F4  CFC4 F018          	movff	4036,_var_gen	;volatile
   350  0008F8  6A19               	clrf	(_var_gen+1)^0,c
   351  0008FA                     
   352                           ;maincode.c: 70:         convierte(var_gen);
   353  0008FA  C018  F00E         	movff	_var_gen,convierte@numero
   354  0008FE  C019  F00F         	movff	_var_gen+1,convierte@numero+1
   355  000902  EC0D  F004         	call	_convierte	;wreg free
   356                           
   357                           ;maincode.c: 71:         POS_CURSOR(2,0);
   358  000906  0E00               	movlw	0
   359  000908  6E05               	movwf	POS_CURSOR@columna^0,c
   360  00090A  0E02               	movlw	2
   361  00090C  EC94  F005         	call	_POS_CURSOR
   362  000910                     
   363                           ;maincode.c: 72:         ESCRIBE_MENSAJE("Valor de PR2:",13);
   364  000910  0E01               	movlw	low STR_2
   365  000912  6E05               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   366  000914  0E08               	movlw	high STR_2
   367  000916  6E06               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   368  000918  0E0D               	movlw	13
   369  00091A  6E07               	movwf	ESCRIBE_MENSAJE@tam^0,c
   370  00091C  EC75  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   371  000920                     
   372                           ;maincode.c: 73:         ENVIA_CHAR(centena+0x30);
   373  000920  5014               	movf	_centena^0,w,c
   374  000922  0F30               	addlw	48
   375  000924  ECCB  F005         	call	_ENVIA_CHAR
   376  000928                     
   377                           ;maincode.c: 74:         ENVIA_CHAR(decena+0x30);
   378  000928  5012               	movf	_decena^0,w,c
   379  00092A  0F30               	addlw	48
   380  00092C  ECCB  F005         	call	_ENVIA_CHAR
   381  000930                     
   382                           ;maincode.c: 75:         ENVIA_CHAR(unidad+0x30);
   383  000930  5010               	movf	_unidad^0,w,c
   384  000932  0F30               	addlw	48
   385  000934  ECCB  F005         	call	_ENVIA_CHAR
   386  000938  EF70  F004         	goto	l1165
   387  00093C  EF07  F000         	goto	start
   388  000940                     __end_of_main:
   389                           	callstack 0
   390                           
   391 ;; *************** function _tmr2_conf *****************
   392 ;; Defined at:
   393 ;;		line 39 in file "maincode.c"
   394 ;; Parameters:    Size  Location     Type
   395 ;;		None
   396 ;; Auto vars:     Size  Location     Type
   397 ;;		None
   398 ;; Return value:  Size  Location     Type
   399 ;;                  1    wreg      void 
   400 ;; Registers used:
   401 ;;		wreg, status,2
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   407 ;;      Params:         0       0       0       0       0       0       0       0       0
   408 ;;      Locals:         0       0       0       0       0       0       0       0       0
   409 ;;      Temps:          0       0       0       0       0       0       0       0       0
   410 ;;      Totals:         0       0       0       0       0       0       0       0       0
   411 ;;Total ram usage:        0 bytes
   412 ;; Hardware stack levels used:    1
   413 ;; Hardware stack levels required when called:    1
   414 ;; This function calls:
   415 ;;		Nothing
   416 ;; This function is called by:
   417 ;;		_main
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text1
   422  000C90                     __ptext1:
   423                           	callstack 0
   424  000C90                     _tmr2_conf:
   425                           	callstack 29
   426  000C90                     
   427                           ;maincode.c: 40:     T2CON = 0x45;
   428  000C90  0E45               	movlw	69
   429  000C92  6ECA               	movwf	202,c	;volatile
   430                           
   431                           ;maincode.c: 41:     PR2 = 164;
   432  000C94  0EA4               	movlw	164
   433  000C96  6ECB               	movwf	203,c	;volatile
   434  000C98  0012               	return		;funcret
   435  000C9A                     __end_of_tmr2_conf:
   436                           	callstack 0
   437                           
   438 ;; *************** function _lcd_init *****************
   439 ;; Defined at:
   440 ;;		line 30 in file "maincode.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;		None
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, status,2, status,0, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   454 ;;      Params:         0       0       0       0       0       0       0       0       0
   455 ;;      Locals:         0       0       0       0       0       0       0       0       0
   456 ;;      Temps:          1       0       0       0       0       0       0       0       0
   457 ;;      Totals:         1       0       0       0       0       0       0       0       0
   458 ;;Total ram usage:        1 bytes
   459 ;; Hardware stack levels used:    1
   460 ;; Hardware stack levels required when called:    4
   461 ;; This function calls:
   462 ;;		_BORRAR_LCD
   463 ;;		_CURSOR_HOME
   464 ;;		_CURSOR_ONOFF
   465 ;;		_LCD_CONFIG
   466 ;; This function is called by:
   467 ;;		_main
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text2
   472  000BFA                     __ptext2:
   473                           	callstack 0
   474  000BFA                     _lcd_init:
   475                           	callstack 26
   476  000BFA                     
   477                           ;maincode.c: 31:     TRISD = 0x00;
   478  000BFA  0E00               	movlw	0
   479  000BFC  6E95               	movwf	149,c	;volatile
   480  000BFE                     
   481                           ;maincode.c: 32:     LCD_CONFIG();
   482  000BFE  EC45  F005         	call	_LCD_CONFIG	;wreg free
   483  000C02                     
   484                           ;maincode.c: 33:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   485  000C02  0EEA               	movlw	234
   486  000C04  6E06               	movwf	??_lcd_init^0,c
   487  000C06  0EC3               	movlw	195
   488  000C08                     u317:
   489  000C08  2EE8               	decfsz	wreg,f,c
   490  000C0A  D7FE               	bra	u317
   491  000C0C  2E06               	decfsz	??_lcd_init^0,f,c
   492  000C0E  D7FC               	bra	u317
   493  000C10  F000               	nop	
   494  000C12                     
   495                           ;maincode.c: 34:     BORRAR_LCD();
   496  000C12  EC51  F006         	call	_BORRAR_LCD	;wreg free
   497  000C16                     
   498                           ;maincode.c: 35:     CURSOR_HOME();
   499  000C16  EC4D  F006         	call	_CURSOR_HOME	;wreg free
   500  000C1A                     
   501                           ;maincode.c: 36:     CURSOR_ONOFF(1);
   502  000C1A  0E01               	movlw	1
   503  000C1C  ECE5  F005         	call	_CURSOR_ONOFF
   504  000C20  0012               	return		;funcret
   505  000C22                     __end_of_lcd_init:
   506                           	callstack 0
   507                           
   508 ;; *************** function _LCD_CONFIG *****************
   509 ;; Defined at:
   510 ;;		line 72 in file "LCD.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;		None
   513 ;; Auto vars:     Size  Location     Type
   514 ;;		None
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, status,2, status,0, cstack
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   524 ;;      Params:         0       0       0       0       0       0       0       0       0
   525 ;;      Locals:         0       0       0       0       0       0       0       0       0
   526 ;;      Temps:          1       0       0       0       0       0       0       0       0
   527 ;;      Totals:         1       0       0       0       0       0       0       0       0
   528 ;;Total ram usage:        1 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; Hardware stack levels required when called:    3
   531 ;; This function calls:
   532 ;;		_ENVIA_LCD_CMD
   533 ;;		_ENVIA_NIBBLE
   534 ;; This function is called by:
   535 ;;		_lcd_init
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text3
   540  000A8A                     __ptext3:
   541                           	callstack 0
   542  000A8A                     _LCD_CONFIG:
   543                           	callstack 26
   544  000A8A                     
   545                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   546  000A8A  908C               	bcf	140,0,c	;volatile
   547                           
   548                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   549  000A8C  928C               	bcf	140,1,c	;volatile
   550  000A8E                     
   551                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   552  000A8E  0E30               	movlw	48
   553  000A90  EC33  F006         	call	_ENVIA_NIBBLE
   554  000A94                     
   555                           ;LCD.c: 77:         _delay(24000);
   556  000A94  0E20               	movlw	32
   557  000A96  6E05               	movwf	??_LCD_CONFIG^0,c
   558  000A98  0E2A               	movlw	42
   559  000A9A                     u327:
   560  000A9A  2EE8               	decfsz	wreg,f,c
   561  000A9C  D7FE               	bra	u327
   562  000A9E  2E05               	decfsz	??_LCD_CONFIG^0,f,c
   563  000AA0  D7FC               	bra	u327
   564  000AA2                     
   565                           ;LCD.c: 78:         _delay(24000);
   566  000AA2  0E20               	movlw	32
   567  000AA4  6E05               	movwf	??_LCD_CONFIG^0,c
   568  000AA6  0E2A               	movlw	42
   569  000AA8                     u337:
   570  000AA8  2EE8               	decfsz	wreg,f,c
   571  000AAA  D7FE               	bra	u337
   572  000AAC  2E05               	decfsz	??_LCD_CONFIG^0,f,c
   573  000AAE  D7FC               	bra	u337
   574                           
   575                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   576  000AB0  0E30               	movlw	48
   577  000AB2  EC33  F006         	call	_ENVIA_NIBBLE
   578  000AB6                     
   579                           ;LCD.c: 83:  _delay(1200);
   580  000AB6  0EF0               	movlw	240
   581  000AB8                     u347:
   582  000AB8  D000               	nop2	
   583  000ABA  2EE8               	decfsz	wreg,f,c
   584  000ABC  D7FD               	bra	u347
   585  000ABE                     
   586                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   587  000ABE  0E30               	movlw	48
   588  000AC0  EC33  F006         	call	_ENVIA_NIBBLE
   589  000AC4                     
   590                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   591  000AC4  0E20               	movlw	32
   592  000AC6  EC33  F006         	call	_ENVIA_NIBBLE
   593  000ACA                     
   594                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   595  000ACA  0E01               	movlw	1
   596  000ACC  ECB1  F005         	call	_ENVIA_LCD_CMD
   597  000AD0                     
   598                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   599  000AD0  0E28               	movlw	40
   600  000AD2  ECB1  F005         	call	_ENVIA_LCD_CMD
   601  000AD6                     
   602                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   603  000AD6  0E0F               	movlw	15
   604  000AD8  ECB1  F005         	call	_ENVIA_LCD_CMD
   605  000ADC                     
   606                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   607  000ADC  0E06               	movlw	6
   608  000ADE  ECB1  F005         	call	_ENVIA_LCD_CMD
   609  000AE2                     
   610                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   611  000AE2  0E01               	movlw	1
   612  000AE4  ECB1  F005         	call	_ENVIA_LCD_CMD
   613  000AE8  0012               	return		;funcret
   614  000AEA                     __end_of_LCD_CONFIG:
   615                           	callstack 0
   616                           
   617 ;; *************** function _CURSOR_ONOFF *****************
   618 ;; Defined at:
   619 ;;		line 35 in file "LCD.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;  estado          1    wreg     unsigned char 
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  estado          1    4[COMRAM] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, status,2, status,0, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   633 ;;      Params:         0       0       0       0       0       0       0       0       0
   634 ;;      Locals:         1       0       0       0       0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0       0       0
   636 ;;      Totals:         1       0       0       0       0       0       0       0       0
   637 ;;Total ram usage:        1 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:    3
   640 ;; This function calls:
   641 ;;		_ENVIA_LCD_CMD
   642 ;; This function is called by:
   643 ;;		_lcd_init
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           	psect	text4
   648  000BCA                     __ptext4:
   649                           	callstack 0
   650  000BCA                     _CURSOR_ONOFF:
   651                           	callstack 26
   652                           
   653                           ;incstack = 0
   654                           ;CURSOR_ONOFF@estado stored from wreg
   655  000BCA  6E05               	movwf	CURSOR_ONOFF@estado^0,c
   656  000BCC                     
   657                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   658  000BCC  5005               	movf	CURSOR_ONOFF@estado^0,w,c
   659  000BCE  A4D8               	btfss	status,2,c
   660  000BD0  EFEC  F005         	goto	u21
   661  000BD4  EFEE  F005         	goto	u20
   662  000BD8                     u21:
   663  000BD8  EFF1  F005         	goto	l933
   664  000BDC                     u20:
   665  000BDC  0E0E               	movlw	14
   666  000BDE  ECB1  F005         	call	_ENVIA_LCD_CMD
   667  000BE2                     l933:
   668                           
   669                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   670  000BE2  0405               	decf	CURSOR_ONOFF@estado^0,w,c
   671  000BE4  A4D8               	btfss	status,2,c
   672  000BE6  EFF7  F005         	goto	u31
   673  000BEA  EFF9  F005         	goto	u30
   674  000BEE                     u31:
   675  000BEE  EFFC  F005         	goto	l125
   676  000BF2                     u30:
   677  000BF2  0E0C               	movlw	12
   678  000BF4  ECB1  F005         	call	_ENVIA_LCD_CMD
   679  000BF8                     l125:
   680  000BF8  0012               	return		;funcret
   681  000BFA                     __end_of_CURSOR_ONOFF:
   682                           	callstack 0
   683                           
   684 ;; *************** function _CURSOR_HOME *****************
   685 ;; Defined at:
   686 ;;		line 30 in file "LCD.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;		None
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, status,2, status,0, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   700 ;;      Params:         0       0       0       0       0       0       0       0       0
   701 ;;      Locals:         0       0       0       0       0       0       0       0       0
   702 ;;      Temps:          0       0       0       0       0       0       0       0       0
   703 ;;      Totals:         0       0       0       0       0       0       0       0       0
   704 ;;Total ram usage:        0 bytes
   705 ;; Hardware stack levels used:    1
   706 ;; Hardware stack levels required when called:    3
   707 ;; This function calls:
   708 ;;		_ENVIA_LCD_CMD
   709 ;; This function is called by:
   710 ;;		_lcd_init
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text5
   715  000C9A                     __ptext5:
   716                           	callstack 0
   717  000C9A                     _CURSOR_HOME:
   718                           	callstack 26
   719  000C9A                     
   720                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   721  000C9A  0E02               	movlw	2
   722  000C9C  ECB1  F005         	call	_ENVIA_LCD_CMD
   723  000CA0  0012               	return		;funcret
   724  000CA2                     __end_of_CURSOR_HOME:
   725                           	callstack 0
   726                           
   727 ;; *************** function _BORRAR_LCD *****************
   728 ;; Defined at:
   729 ;;		line 67 in file "LCD.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, status,2, status,0, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   743 ;;      Params:         0       0       0       0       0       0       0       0       0
   744 ;;      Locals:         0       0       0       0       0       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0       0       0       0       0
   746 ;;      Totals:         0       0       0       0       0       0       0       0       0
   747 ;;Total ram usage:        0 bytes
   748 ;; Hardware stack levels used:    1
   749 ;; Hardware stack levels required when called:    3
   750 ;; This function calls:
   751 ;;		_ENVIA_LCD_CMD
   752 ;; This function is called by:
   753 ;;		_lcd_init
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text6
   758  000CA2                     __ptext6:
   759                           	callstack 0
   760  000CA2                     _BORRAR_LCD:
   761                           	callstack 26
   762  000CA2                     
   763                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   764  000CA2  0E01               	movlw	1
   765  000CA4  ECB1  F005         	call	_ENVIA_LCD_CMD
   766  000CA8  0012               	return		;funcret
   767  000CAA                     __end_of_BORRAR_LCD:
   768                           	callstack 0
   769                           
   770 ;; *************** function _int_conf *****************
   771 ;; Defined at:
   772 ;;		line 44 in file "maincode.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		None
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   786 ;;      Params:         0       0       0       0       0       0       0       0       0
   787 ;;      Locals:         0       0       0       0       0       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0       0       0
   789 ;;      Totals:         0       0       0       0       0       0       0       0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:    1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text7
   801  000CAA                     __ptext7:
   802                           	callstack 0
   803  000CAA                     _int_conf:
   804                           	callstack 29
   805  000CAA                     
   806                           ;maincode.c: 45:     INTCONbits.GIE = 1;
   807  000CAA  8EF2               	bsf	242,7,c	;volatile
   808                           
   809                           ;maincode.c: 46:     INTCONbits.PEIE = 1;
   810  000CAC  8CF2               	bsf	242,6,c	;volatile
   811                           
   812                           ;maincode.c: 47:     PIE1bits.TMR2IE = 1;
   813  000CAE  829D               	bsf	157,1,c	;volatile
   814  000CB0  0012               	return		;funcret
   815  000CB2                     __end_of_int_conf:
   816                           	callstack 0
   817                           
   818 ;; *************** function _convierte *****************
   819 ;; Defined at:
   820 ;;		line 23 in file "maincode.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  numero          2   13[COMRAM] unsigned int 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, status,2, status,0, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   834 ;;      Params:         2       0       0       0       0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0       0       0       0       0
   836 ;;      Temps:          0       0       0       0       0       0       0       0       0
   837 ;;      Totals:         2       0       0       0       0       0       0       0       0
   838 ;;Total ram usage:        2 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    2
   841 ;; This function calls:
   842 ;;		___lwdiv
   843 ;;		___lwmod
   844 ;; This function is called by:
   845 ;;		_main
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text8
   850  00081A                     __ptext8:
   851                           	callstack 0
   852  00081A                     _convierte:
   853                           	callstack 28
   854  00081A                     
   855                           ;maincode.c: 24:     millar = numero /1000;
   856  00081A  C00E  F007         	movff	convierte@numero,___lwdiv@dividend
   857  00081E  C00F  F008         	movff	convierte@numero+1,___lwdiv@dividend+1
   858  000822  0E03               	movlw	3
   859  000824  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   860  000826  0EE8               	movlw	232
   861  000828  6E09               	movwf	___lwdiv@divisor^0,c
   862  00082A  ECA0  F004         	call	___lwdiv	;wreg free
   863  00082E  C007  F016         	movff	?___lwdiv,_millar
   864  000832  C008  F017         	movff	?___lwdiv+1,_millar+1
   865                           
   866                           ;maincode.c: 25:     centena = (numero % 1000) / 100;
   867  000836  0E03               	movlw	3
   868  000838  6E05               	movwf	(___lwmod@divisor+1)^0,c
   869  00083A  0EE8               	movlw	232
   870  00083C  6E04               	movwf	___lwmod@divisor^0,c
   871  00083E  C00E  F002         	movff	convierte@numero,___lwmod@dividend
   872  000842  C00F  F003         	movff	convierte@numero+1,___lwmod@dividend+1
   873  000846  EC13  F005         	call	___lwmod	;wreg free
   874  00084A  C002  F007         	movff	?___lwmod,___lwdiv@dividend
   875  00084E  C003  F008         	movff	?___lwmod+1,___lwdiv@dividend+1
   876  000852  0E00               	movlw	0
   877  000854  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   878  000856  0E64               	movlw	100
   879  000858  6E09               	movwf	___lwdiv@divisor^0,c
   880  00085A  ECA0  F004         	call	___lwdiv	;wreg free
   881  00085E  C007  F014         	movff	?___lwdiv,_centena
   882  000862  C008  F015         	movff	?___lwdiv+1,_centena+1
   883                           
   884                           ;maincode.c: 26:     decena = (numero % 100) / 10;
   885  000866  0E00               	movlw	0
   886  000868  6E05               	movwf	(___lwmod@divisor+1)^0,c
   887  00086A  0E64               	movlw	100
   888  00086C  6E04               	movwf	___lwmod@divisor^0,c
   889  00086E  C00E  F002         	movff	convierte@numero,___lwmod@dividend
   890  000872  C00F  F003         	movff	convierte@numero+1,___lwmod@dividend+1
   891  000876  EC13  F005         	call	___lwmod	;wreg free
   892  00087A  C002  F007         	movff	?___lwmod,___lwdiv@dividend
   893  00087E  C003  F008         	movff	?___lwmod+1,___lwdiv@dividend+1
   894  000882  0E00               	movlw	0
   895  000884  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   896  000886  0E0A               	movlw	10
   897  000888  6E09               	movwf	___lwdiv@divisor^0,c
   898  00088A  ECA0  F004         	call	___lwdiv	;wreg free
   899  00088E  C007  F012         	movff	?___lwdiv,_decena
   900  000892  C008  F013         	movff	?___lwdiv+1,_decena+1
   901                           
   902                           ;maincode.c: 27:     unidad = numero % 10;
   903  000896  C00E  F002         	movff	convierte@numero,___lwmod@dividend
   904  00089A  C00F  F003         	movff	convierte@numero+1,___lwmod@dividend+1
   905  00089E  0E00               	movlw	0
   906  0008A0  6E05               	movwf	(___lwmod@divisor+1)^0,c
   907  0008A2  0E0A               	movlw	10
   908  0008A4  6E04               	movwf	___lwmod@divisor^0,c
   909  0008A6  EC13  F005         	call	___lwmod	;wreg free
   910  0008AA  C002  F010         	movff	?___lwmod,_unidad
   911  0008AE  C003  F011         	movff	?___lwmod+1,_unidad+1
   912  0008B2  0012               	return		;funcret
   913  0008B4                     __end_of_convierte:
   914                           	callstack 0
   915                           
   916 ;; *************** function ___lwmod *****************
   917 ;; Defined at:
   918 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwmod.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  dividend        2    1[COMRAM] unsigned int 
   921 ;;  divisor         2    3[COMRAM] unsigned int 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  counter         1    5[COMRAM] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  2    1[COMRAM] unsigned int 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   933 ;;      Params:         4       0       0       0       0       0       0       0       0
   934 ;;      Locals:         1       0       0       0       0       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0       0       0
   936 ;;      Totals:         5       0       0       0       0       0       0       0       0
   937 ;;Total ram usage:        5 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_convierte
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text9
   948  000A26                     __ptext9:
   949                           	callstack 0
   950  000A26                     ___lwmod:
   951                           	callstack 28
   952  000A26  5004               	movf	___lwmod@divisor^0,w,c
   953  000A28  1005               	iorwf	(___lwmod@divisor+1)^0,w,c
   954  000A2A  B4D8               	btfsc	status,2,c
   955  000A2C  EF1A  F005         	goto	u241
   956  000A30  EF1C  F005         	goto	u240
   957  000A34                     u241:
   958  000A34  EF40  F005         	goto	l661
   959  000A38                     u240:
   960  000A38  0E01               	movlw	1
   961  000A3A  6E06               	movwf	___lwmod@counter^0,c
   962  000A3C  EF24  F005         	goto	l1123
   963  000A40                     l1121:
   964  000A40  90D8               	bcf	status,0,c
   965  000A42  3604               	rlcf	___lwmod@divisor^0,f,c
   966  000A44  3605               	rlcf	(___lwmod@divisor+1)^0,f,c
   967  000A46  2A06               	incf	___lwmod@counter^0,f,c
   968  000A48                     l1123:
   969  000A48  AE05               	btfss	(___lwmod@divisor+1)^0,7,c
   970  000A4A  EF29  F005         	goto	u251
   971  000A4E  EF2B  F005         	goto	u250
   972  000A52                     u251:
   973  000A52  EF20  F005         	goto	l1121
   974  000A56                     u250:
   975  000A56                     l1125:
   976  000A56  5004               	movf	___lwmod@divisor^0,w,c
   977  000A58  5C02               	subwf	___lwmod@dividend^0,w,c
   978  000A5A  5005               	movf	(___lwmod@divisor+1)^0,w,c
   979  000A5C  5803               	subwfb	(___lwmod@dividend+1)^0,w,c
   980  000A5E  A0D8               	btfss	status,0,c
   981  000A60  EF34  F005         	goto	u261
   982  000A64  EF36  F005         	goto	u260
   983  000A68                     u261:
   984  000A68  EF3A  F005         	goto	l1129
   985  000A6C                     u260:
   986  000A6C  5004               	movf	___lwmod@divisor^0,w,c
   987  000A6E  5E02               	subwf	___lwmod@dividend^0,f,c
   988  000A70  5005               	movf	(___lwmod@divisor+1)^0,w,c
   989  000A72  5A03               	subwfb	(___lwmod@dividend+1)^0,f,c
   990  000A74                     l1129:
   991  000A74  90D8               	bcf	status,0,c
   992  000A76  3205               	rrcf	(___lwmod@divisor+1)^0,f,c
   993  000A78  3204               	rrcf	___lwmod@divisor^0,f,c
   994  000A7A  2E06               	decfsz	___lwmod@counter^0,f,c
   995  000A7C  EF2B  F005         	goto	l1125
   996  000A80                     l661:
   997  000A80  C002  F002         	movff	___lwmod@dividend,?___lwmod
   998  000A84  C003  F003         	movff	___lwmod@dividend+1,?___lwmod+1
   999  000A88  0012               	return		;funcret
  1000  000A8A                     __end_of___lwmod:
  1001                           	callstack 0
  1002                           
  1003 ;; *************** function ___lwdiv *****************
  1004 ;; Defined at:
  1005 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  dividend        2    6[COMRAM] unsigned int 
  1008 ;;  divisor         2    8[COMRAM] unsigned int 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  quotient        2   10[COMRAM] unsigned int 
  1011 ;;  counter         1   12[COMRAM] unsigned char 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  2    6[COMRAM] unsigned int 
  1014 ;; Registers used:
  1015 ;;		wreg, status,2, status,0
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1021 ;;      Params:         4       0       0       0       0       0       0       0       0
  1022 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1024 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1025 ;;Total ram usage:        7 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		_convierte
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text10
  1036  000940                     __ptext10:
  1037                           	callstack 0
  1038  000940                     ___lwdiv:
  1039                           	callstack 28
  1040  000940  0E00               	movlw	0
  1041  000942  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1042  000944  0E00               	movlw	0
  1043  000946  6E0B               	movwf	___lwdiv@quotient^0,c
  1044  000948  5009               	movf	___lwdiv@divisor^0,w,c
  1045  00094A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1046  00094C  B4D8               	btfsc	status,2,c
  1047  00094E  EFAB  F004         	goto	u211
  1048  000952  EFAD  F004         	goto	u210
  1049  000956                     u211:
  1050  000956  EFD5  F004         	goto	l651
  1051  00095A                     u210:
  1052  00095A  0E01               	movlw	1
  1053  00095C  6E0D               	movwf	___lwdiv@counter^0,c
  1054  00095E  EFB5  F004         	goto	l1103
  1055  000962                     l1101:
  1056  000962  90D8               	bcf	status,0,c
  1057  000964  3609               	rlcf	___lwdiv@divisor^0,f,c
  1058  000966  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1059  000968  2A0D               	incf	___lwdiv@counter^0,f,c
  1060  00096A                     l1103:
  1061  00096A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1062  00096C  EFBA  F004         	goto	u221
  1063  000970  EFBC  F004         	goto	u220
  1064  000974                     u221:
  1065  000974  EFB1  F004         	goto	l1101
  1066  000978                     u220:
  1067  000978                     l1105:
  1068  000978  90D8               	bcf	status,0,c
  1069  00097A  360B               	rlcf	___lwdiv@quotient^0,f,c
  1070  00097C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1071  00097E  5009               	movf	___lwdiv@divisor^0,w,c
  1072  000980  5C07               	subwf	___lwdiv@dividend^0,w,c
  1073  000982  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1074  000984  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1075  000986  A0D8               	btfss	status,0,c
  1076  000988  EFC8  F004         	goto	u231
  1077  00098C  EFCA  F004         	goto	u230
  1078  000990                     u231:
  1079  000990  EFCF  F004         	goto	l1113
  1080  000994                     u230:
  1081  000994  5009               	movf	___lwdiv@divisor^0,w,c
  1082  000996  5E07               	subwf	___lwdiv@dividend^0,f,c
  1083  000998  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1084  00099A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1085  00099C  800B               	bsf	___lwdiv@quotient^0,0,c
  1086  00099E                     l1113:
  1087  00099E  90D8               	bcf	status,0,c
  1088  0009A0  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1089  0009A2  3209               	rrcf	___lwdiv@divisor^0,f,c
  1090  0009A4  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1091  0009A6  EFBC  F004         	goto	l1105
  1092  0009AA                     l651:
  1093  0009AA  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1094  0009AE  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1095  0009B2  0012               	return		;funcret
  1096  0009B4                     __end_of___lwdiv:
  1097                           	callstack 0
  1098                           
  1099 ;; *************** function _ad_conf *****************
  1100 ;; Defined at:
  1101 ;;		line 50 in file "maincode.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;		None
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, status,2
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1115 ;;      Params:         0       0       0       0       0       0       0       0       0
  1116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1118 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1119 ;;Total ram usage:        0 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text11
  1130  000C82                     __ptext11:
  1131                           	callstack 0
  1132  000C82                     _ad_conf:
  1133                           	callstack 29
  1134  000C82                     
  1135                           ;maincode.c: 51:     ADCON2 = 0x24;
  1136  000C82  0E24               	movlw	36
  1137  000C84  6EC0               	movwf	192,c	;volatile
  1138                           
  1139                           ;maincode.c: 52:     ADCON1 = 0x0E;
  1140  000C86  0E0E               	movlw	14
  1141  000C88  6EC1               	movwf	193,c	;volatile
  1142                           
  1143                           ;maincode.c: 53:     ADCON0 = 0x01;
  1144  000C8A  0E01               	movlw	1
  1145  000C8C  6EC2               	movwf	194,c	;volatile
  1146  000C8E  0012               	return		;funcret
  1147  000C90                     __end_of_ad_conf:
  1148                           	callstack 0
  1149                           
  1150 ;; *************** function _POS_CURSOR *****************
  1151 ;; Defined at:
  1152 ;;		line 6 in file "LCD.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  fila            1    wreg     unsigned char 
  1155 ;;  columna         1    4[COMRAM] unsigned char 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  fila            1    5[COMRAM] unsigned char 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1167 ;;      Params:         1       0       0       0       0       0       0       0       0
  1168 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1170 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1171 ;;Total ram usage:        2 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    3
  1174 ;; This function calls:
  1175 ;;		_ENVIA_LCD_CMD
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text12
  1182  000B28                     __ptext12:
  1183                           	callstack 0
  1184  000B28                     _POS_CURSOR:
  1185                           	callstack 27
  1186                           
  1187                           ;incstack = 0
  1188                           ;POS_CURSOR@fila stored from wreg
  1189  000B28  6E06               	movwf	POS_CURSOR@fila^0,c
  1190  000B2A                     
  1191                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1192  000B2A  0406               	decf	POS_CURSOR@fila^0,w,c
  1193  000B2C  A4D8               	btfss	status,2,c
  1194  000B2E  EF9B  F005         	goto	u271
  1195  000B32  EF9D  F005         	goto	u270
  1196  000B36                     u271:
  1197  000B36  EFA3  F005         	goto	l1139
  1198  000B3A                     u270:
  1199  000B3A                     
  1200                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1201  000B3A  5005               	movf	POS_CURSOR@columna^0,w,c
  1202  000B3C  0F80               	addlw	128
  1203  000B3E  ECB1  F005         	call	_ENVIA_LCD_CMD
  1204                           
  1205                           ;LCD.c: 11:  }
  1206  000B42  EFB0  F005         	goto	l107
  1207  000B46                     l1139:
  1208  000B46  0E02               	movlw	2
  1209  000B48  1806               	xorwf	POS_CURSOR@fila^0,w,c
  1210  000B4A  A4D8               	btfss	status,2,c
  1211  000B4C  EFAA  F005         	goto	u281
  1212  000B50  EFAC  F005         	goto	u280
  1213  000B54                     u281:
  1214  000B54  EFB0  F005         	goto	l107
  1215  000B58                     u280:
  1216  000B58                     
  1217                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1218  000B58  5005               	movf	POS_CURSOR@columna^0,w,c
  1219  000B5A  0FC0               	addlw	192
  1220  000B5C  ECB1  F005         	call	_ENVIA_LCD_CMD
  1221  000B60                     l107:
  1222  000B60  0012               	return		;funcret
  1223  000B62                     __end_of_POS_CURSOR:
  1224                           	callstack 0
  1225                           
  1226 ;; *************** function _ENVIA_LCD_CMD *****************
  1227 ;; Defined at:
  1228 ;;		line 104 in file "LCD.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  dato            1    wreg     unsigned char 
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;  dato            1    2[COMRAM] unsigned char 
  1233 ;;  aux             1    3[COMRAM] unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1243 ;;      Params:         0       0       0       0       0       0       0       0       0
  1244 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1246 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1247 ;;Total ram usage:        2 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    2
  1250 ;; This function calls:
  1251 ;;		_ENVIA_NIBBLE
  1252 ;;		_LEER_LCD
  1253 ;; This function is called by:
  1254 ;;		_POS_CURSOR
  1255 ;;		_CURSOR_HOME
  1256 ;;		_CURSOR_ONOFF
  1257 ;;		_BORRAR_LCD
  1258 ;;		_LCD_CONFIG
  1259 ;;		_BLINK_CURSOR
  1260 ;;		_DISPLAY_ONOFF
  1261 ;;		_GENERACARACTER
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text13
  1266  000B62                     __ptext13:
  1267                           	callstack 0
  1268  000B62                     _ENVIA_LCD_CMD:
  1269                           	callstack 26
  1270                           
  1271                           ;incstack = 0
  1272                           ;ENVIA_LCD_CMD@dato stored from wreg
  1273  000B62  6E03               	movwf	ENVIA_LCD_CMD@dato^0,c
  1274  000B64                     
  1275                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1276  000B64  908C               	bcf	140,0,c	;volatile
  1277  000B66                     
  1278                           ;LCD.c: 108:  LEER_LCD();
  1279  000B66  ECDA  F004         	call	_LEER_LCD	;wreg free
  1280  000B6A                     
  1281                           ;LCD.c: 109:  TRISD = 0b00000000;
  1282  000B6A  0E00               	movlw	0
  1283  000B6C  6E95               	movwf	149,c	;volatile
  1284  000B6E                     
  1285                           ;LCD.c: 111:         _delay(1200);
  1286  000B6E  0EF0               	movlw	240
  1287  000B70                     u357:
  1288  000B70  D000               	nop2	
  1289  000B72  2EE8               	decfsz	wreg,f,c
  1290  000B74  D7FD               	bra	u357
  1291  000B76                     
  1292                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1293  000B76  928C               	bcf	140,1,c	;volatile
  1294  000B78                     
  1295                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1296  000B78  948C               	bcf	140,2,c	;volatile
  1297  000B7A                     
  1298                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1299  000B7A  908C               	bcf	140,0,c	;volatile
  1300  000B7C                     
  1301                           ;LCD.c: 115:  aux = dato & 0xF0;
  1302  000B7C  5003               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1303  000B7E  0BF0               	andlw	240
  1304  000B80  6E04               	movwf	ENVIA_LCD_CMD@aux^0,c
  1305  000B82                     
  1306                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1307  000B82  5004               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1308  000B84  EC33  F006         	call	_ENVIA_NIBBLE
  1309  000B88                     
  1310                           ;LCD.c: 117:  aux = dato<<4;
  1311  000B88  3803               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1312  000B8A  0BF0               	andlw	240
  1313  000B8C  6E04               	movwf	ENVIA_LCD_CMD@aux^0,c
  1314  000B8E                     
  1315                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1316  000B8E  5004               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1317  000B90  EC33  F006         	call	_ENVIA_NIBBLE
  1318  000B94  0012               	return		;funcret
  1319  000B96                     __end_of_ENVIA_LCD_CMD:
  1320                           	callstack 0
  1321                           
  1322 ;; *************** function _ESCRIBE_MENSAJE *****************
  1323 ;; Defined at:
  1324 ;;		line 41 in file "LCD.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;  cadena          2    4[COMRAM] PTR const unsigned char 
  1327 ;;		 -> STR_2(14), STR_1(10), 
  1328 ;;  tam             1    6[COMRAM] unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  i               1    9[COMRAM] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1340 ;;      Params:         3       0       0       0       0       0       0       0       0
  1341 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1342 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1343 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1344 ;;Total ram usage:        6 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    3
  1347 ;; This function calls:
  1348 ;;		_ENVIA_CHAR
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text14
  1355  000AEA                     __ptext14:
  1356                           	callstack 0
  1357  000AEA                     _ESCRIBE_MENSAJE:
  1358                           	callstack 27
  1359  000AEA                     
  1360                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1361  000AEA  0E00               	movlw	0
  1362  000AEC  6E0A               	movwf	ESCRIBE_MENSAJE@i^0,c
  1363                           
  1364                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1365  000AEE  0E00               	movlw	0
  1366  000AF0  6E0A               	movwf	ESCRIBE_MENSAJE@i^0,c
  1367  000AF2  EF8A  F005         	goto	l1149
  1368  000AF6                     l1145:
  1369                           
  1370                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1371  000AF6  500A               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1372  000AF8  2405               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1373  000AFA  6E08               	movwf	??_ESCRIBE_MENSAJE^0,c
  1374  000AFC  0E00               	movlw	0
  1375  000AFE  2006               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1376  000B00  6E09               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1377  000B02  C008  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1378  000B06  C009  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1379  000B0A                     	if	0	;tblptru may be non-zero
  1380  000B0A                     	endif
  1381  000B0A                     	if	0	;tblptru may be non-zero
  1382  000B0A                     	endif
  1383  000B0A  0008               	tblrd		*
  1384  000B0C  50F5               	movf	tablat,w,c
  1385  000B0E  ECCB  F005         	call	_ENVIA_CHAR
  1386  000B12                     
  1387                           ;LCD.c: 47:  }
  1388  000B12  2A0A               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1389  000B14                     l1149:
  1390  000B14  5007               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1391  000B16  5C0A               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1392  000B18  A0D8               	btfss	status,0,c
  1393  000B1A  EF91  F005         	goto	u291
  1394  000B1E  EF93  F005         	goto	u290
  1395  000B22                     u291:
  1396  000B22  EF7B  F005         	goto	l1145
  1397  000B26                     u290:
  1398  000B26  0012               	return		;funcret
  1399  000B28                     __end_of_ESCRIBE_MENSAJE:
  1400                           	callstack 0
  1401                           
  1402 ;; *************** function _ENVIA_CHAR *****************
  1403 ;; Defined at:
  1404 ;;		line 50 in file "LCD.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  dato            1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  dato            1    2[COMRAM] unsigned char 
  1409 ;;  aux             1    3[COMRAM] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1419 ;;      Params:         0       0       0       0       0       0       0       0       0
  1420 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1422 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1423 ;;Total ram usage:        2 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    2
  1426 ;; This function calls:
  1427 ;;		_ENVIA_NIBBLE
  1428 ;;		_LEER_LCD
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;;		_ESCRIBE_MENSAJE
  1432 ;;		_GENERACARACTER
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text15
  1437  000B96                     __ptext15:
  1438                           	callstack 0
  1439  000B96                     _ENVIA_CHAR:
  1440                           	callstack 27
  1441                           
  1442                           ;incstack = 0
  1443                           ;ENVIA_CHAR@dato stored from wreg
  1444  000B96  6E03               	movwf	ENVIA_CHAR@dato^0,c
  1445  000B98                     
  1446                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1447  000B98  808C               	bsf	140,0,c	;volatile
  1448  000B9A                     
  1449                           ;LCD.c: 54:  LEER_LCD();
  1450  000B9A  ECDA  F004         	call	_LEER_LCD	;wreg free
  1451  000B9E                     
  1452                           ;LCD.c: 55:  TRISD = 0x00;
  1453  000B9E  0E00               	movlw	0
  1454  000BA0  6E95               	movwf	149,c	;volatile
  1455  000BA2                     
  1456                           ;LCD.c: 56:         _delay(1200);
  1457  000BA2  0EF0               	movlw	240
  1458  000BA4                     u367:
  1459  000BA4  D000               	nop2	
  1460  000BA6  2EE8               	decfsz	wreg,f,c
  1461  000BA8  D7FD               	bra	u367
  1462  000BAA                     
  1463                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1464  000BAA  928C               	bcf	140,1,c	;volatile
  1465  000BAC                     
  1466                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1467  000BAC  948C               	bcf	140,2,c	;volatile
  1468  000BAE                     
  1469                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1470  000BAE  808C               	bsf	140,0,c	;volatile
  1471  000BB0                     
  1472                           ;LCD.c: 61:  aux = dato & 0xF0;
  1473  000BB0  5003               	movf	ENVIA_CHAR@dato^0,w,c
  1474  000BB2  0BF0               	andlw	240
  1475  000BB4  6E04               	movwf	ENVIA_CHAR@aux^0,c
  1476  000BB6                     
  1477                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1478  000BB6  5004               	movf	ENVIA_CHAR@aux^0,w,c
  1479  000BB8  EC33  F006         	call	_ENVIA_NIBBLE
  1480  000BBC                     
  1481                           ;LCD.c: 63:  aux = dato << 4;
  1482  000BBC  3803               	swapf	ENVIA_CHAR@dato^0,w,c
  1483  000BBE  0BF0               	andlw	240
  1484  000BC0  6E04               	movwf	ENVIA_CHAR@aux^0,c
  1485  000BC2                     
  1486                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1487  000BC2  5004               	movf	ENVIA_CHAR@aux^0,w,c
  1488  000BC4  EC33  F006         	call	_ENVIA_NIBBLE
  1489  000BC8  0012               	return		;funcret
  1490  000BCA                     __end_of_ENVIA_CHAR:
  1491                           	callstack 0
  1492                           
  1493 ;; *************** function _LEER_LCD *****************
  1494 ;; Defined at:
  1495 ;;		line 121 in file "LCD.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  aux             1    1[COMRAM] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, status,2, status,0
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1509 ;;      Params:         0       0       0       0       0       0       0       0       0
  1510 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1512 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1513 ;;Total ram usage:        1 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    1
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_ENVIA_CHAR
  1520 ;;		_ENVIA_LCD_CMD
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text16
  1525  0009B4                     __ptext16:
  1526                           	callstack 0
  1527  0009B4                     _LEER_LCD:
  1528                           	callstack 26
  1529  0009B4                     
  1530                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1531  0009B4  0EF8               	movlw	248
  1532  0009B6  6E95               	movwf	149,c	;volatile
  1533  0009B8                     
  1534                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1535  0009B8  908C               	bcf	140,0,c	;volatile
  1536  0009BA                     
  1537                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1538  0009BA  828C               	bsf	140,1,c	;volatile
  1539  0009BC                     
  1540                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1541  0009BC  848C               	bsf	140,2,c	;volatile
  1542  0009BE                     
  1543                           ;LCD.c: 128:         _delay(1200);
  1544  0009BE  0EF0               	movlw	240
  1545  0009C0                     u377:
  1546  0009C0  D000               	nop2	
  1547  0009C2  2EE8               	decfsz	wreg,f,c
  1548  0009C4  D7FD               	bra	u377
  1549  0009C6                     
  1550                           ;LCD.c: 130:  aux = PORTD;
  1551  0009C6  CF83 F002          	movff	3971,LEER_LCD@aux	;volatile
  1552  0009CA                     
  1553                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1554  0009CA  948C               	bcf	140,2,c	;volatile
  1555  0009CC                     
  1556                           ;LCD.c: 132:         _delay(1200);
  1557  0009CC  0EF0               	movlw	240
  1558  0009CE                     u387:
  1559  0009CE  D000               	nop2	
  1560  0009D0  2EE8               	decfsz	wreg,f,c
  1561  0009D2  D7FD               	bra	u387
  1562  0009D4                     
  1563                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1564  0009D4  848C               	bsf	140,2,c	;volatile
  1565  0009D6                     
  1566                           ;LCD.c: 135:         _delay(1200);
  1567  0009D6  0EF0               	movlw	240
  1568  0009D8                     u397:
  1569  0009D8  D000               	nop2	
  1570  0009DA  2EE8               	decfsz	wreg,f,c
  1571  0009DC  D7FD               	bra	u397
  1572  0009DE                     
  1573                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1574  0009DE  948C               	bcf	140,2,c	;volatile
  1575  0009E0                     l855:
  1576                           
  1577                           ;LCD.c: 138:  aux = aux & 0x80;
  1578  0009E0  5002               	movf	LEER_LCD@aux^0,w,c
  1579  0009E2  0B80               	andlw	128
  1580  0009E4  6E02               	movwf	LEER_LCD@aux^0,c
  1581                           
  1582                           ;LCD.c: 139:  while(aux == 0x80)
  1583  0009E6  EF09  F005         	goto	l869
  1584  0009EA                     l150:
  1585                           
  1586                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1587  0009EA  848C               	bsf	140,2,c	;volatile
  1588  0009EC                     
  1589                           ;LCD.c: 142:             _delay(1200);
  1590  0009EC  0EF0               	movlw	240
  1591  0009EE                     u407:
  1592  0009EE  D000               	nop2	
  1593  0009F0  2EE8               	decfsz	wreg,f,c
  1594  0009F2  D7FD               	bra	u407
  1595  0009F4                     
  1596                           ;LCD.c: 143:             aux = PORTD;
  1597  0009F4  CF83 F002          	movff	3971,LEER_LCD@aux	;volatile
  1598  0009F8                     
  1599                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1600  0009F8  948C               	bcf	140,2,c	;volatile
  1601                           
  1602                           ;LCD.c: 145:             _delay(1200);
  1603  0009FA  0EF0               	movlw	240
  1604  0009FC                     u417:
  1605  0009FC  D000               	nop2	
  1606  0009FE  2EE8               	decfsz	wreg,f,c
  1607  000A00  D7FD               	bra	u417
  1608  000A02                     
  1609                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1610  000A02  848C               	bsf	140,2,c	;volatile
  1611                           
  1612                           ;LCD.c: 147:             _delay(1200);
  1613  000A04  0EF0               	movlw	240
  1614  000A06                     u427:
  1615  000A06  D000               	nop2	
  1616  000A08  2EE8               	decfsz	wreg,f,c
  1617  000A0A  D7FD               	bra	u427
  1618  000A0C                     
  1619                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1620  000A0C  948C               	bcf	140,2,c	;volatile
  1621  000A0E  EFF0  F004         	goto	l855
  1622  000A12                     l869:
  1623                           
  1624                           ;LCD.c: 139:  while(aux == 0x80)
  1625  000A12  0E80               	movlw	128
  1626  000A14  1802               	xorwf	LEER_LCD@aux^0,w,c
  1627  000A16  B4D8               	btfsc	status,2,c
  1628  000A18  EF10  F005         	goto	u11
  1629  000A1C  EF12  F005         	goto	u10
  1630  000A20                     u11:
  1631  000A20  EFF5  F004         	goto	l150
  1632  000A24                     u10:
  1633  000A24  0012               	return		;funcret
  1634  000A26                     __end_of_LEER_LCD:
  1635                           	callstack 0
  1636                           
  1637 ;; *************** function _ENVIA_NIBBLE *****************
  1638 ;; Defined at:
  1639 ;;		line 93 in file "LCD.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  dato            1    wreg     unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  dato            1    1[COMRAM] unsigned char 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0
  1654 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1656 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1657 ;;Total ram usage:        1 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    1
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_ENVIA_CHAR
  1664 ;;		_LCD_CONFIG
  1665 ;;		_ENVIA_LCD_CMD
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text17
  1670  000C66                     __ptext17:
  1671                           	callstack 0
  1672  000C66                     _ENVIA_NIBBLE:
  1673                           	callstack 27
  1674                           
  1675                           ;incstack = 0
  1676                           ;ENVIA_NIBBLE@dato stored from wreg
  1677  000C66  6E02               	movwf	ENVIA_NIBBLE@dato^0,c
  1678  000C68                     
  1679                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1680  000C68  0E0F               	movlw	15
  1681  000C6A  168C               	andwf	140,f,c	;volatile
  1682                           
  1683                           ;LCD.c: 96:  dato &= 0xF0;
  1684  000C6C  0EF0               	movlw	240
  1685  000C6E  1602               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1686                           
  1687                           ;LCD.c: 97:  LATD|= dato;
  1688  000C70  5002               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1689  000C72  128C               	iorwf	140,f,c	;volatile
  1690  000C74                     
  1691                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1692  000C74  848C               	bsf	140,2,c	;volatile
  1693  000C76                     
  1694                           ;LCD.c: 100:         _delay(1200);
  1695  000C76  0EF0               	movlw	240
  1696  000C78                     u437:
  1697  000C78  D000               	nop2	
  1698  000C7A  2EE8               	decfsz	wreg,f,c
  1699  000C7C  D7FD               	bra	u437
  1700  000C7E                     
  1701                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1702  000C7E  948C               	bcf	140,2,c	;volatile
  1703  000C80  0012               	return		;funcret
  1704  000C82                     __end_of_ENVIA_NIBBLE:
  1705                           	callstack 0
  1706                           
  1707 ;; *************** function _High_ISR *****************
  1708 ;; Defined at:
  1709 ;;		line 79 in file "maincode.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1723 ;;      Params:         0       0       0       0       0       0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1725 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1726 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1727 ;;Total ram usage:        1 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		Interrupt level 2
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	intcode
  1737  000008                     __pintcode:
  1738                           	callstack 0
  1739  000008                     _High_ISR:
  1740                           	callstack 26
  1741                           
  1742                           ;incstack = 0
  1743  000008  821A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1744  00000A  ED11  F006         	call	int_func,f	;refresh shadow registers
  1745                           
  1746                           	psect	intcode_body
  1747  000C22                     __pintcode_body:
  1748                           	callstack 26
  1749  000C22                     int_func:
  1750                           	callstack 26
  1751  000C22  0006               	pop		; remove dummy address from shadow register refresh
  1752  000C24                     
  1753                           ;maincode.c: 80:     LATEbits.LE0 = !LATEbits.LE0;
  1754  000C24  A08D               	btfss	141,0,c	;volatile
  1755  000C26  EF17  F006         	goto	i2u14_41
  1756  000C2A  EF1B  F006         	goto	i2u14_40
  1757  000C2E                     i2u14_41:
  1758  000C2E  6A01               	clrf	??_High_ISR^0,c
  1759  000C30  2A01               	incf	??_High_ISR^0,f,c
  1760  000C32  EF1C  F006         	goto	i2u15_48
  1761  000C36                     i2u14_40:
  1762  000C36  6A01               	clrf	??_High_ISR^0,c
  1763  000C38                     i2u15_48:
  1764  000C38  508D               	movf	141,w,c	;volatile
  1765  000C3A  1801               	xorwf	??_High_ISR^0,w,c
  1766  000C3C  0BFE               	andlw	-2
  1767  000C3E  1801               	xorwf	??_High_ISR^0,w,c
  1768  000C40  6E8D               	movwf	141,c	;volatile
  1769  000C42                     
  1770                           ;maincode.c: 81:     PIR1bits.TMR2IF = 0;
  1771  000C42  929E               	bcf	158,1,c	;volatile
  1772  000C44  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1773  000C46  0011               	retfie		f
  1774  000C48                     __end_of_High_ISR:
  1775                           	callstack 0
  1776                           
  1777                           	psect	rparam
  1778  0000                     
  1779                           	psect	temp
  1780  00001A                     btemp:
  1781                           	callstack 0
  1782  00001A                     	ds	1
  1783  0000                     int$flags	set	btemp
  1784  0000                     wtemp8	set	btemp+1
  1785  0000                     ttemp5	set	btemp+1
  1786  0000                     ttemp6	set	btemp+4
  1787  0000                     ttemp7	set	btemp+8
  1788                           
  1789                           	psect	idloc
  1790                           
  1791                           ;Config register IDLOC0 @ 0x200000
  1792                           ;	unspecified, using default values
  1793  200000                     	org	2097152
  1794  200000  FF                 	db	255
  1795                           
  1796                           ;Config register IDLOC1 @ 0x200001
  1797                           ;	unspecified, using default values
  1798  200001                     	org	2097153
  1799  200001  FF                 	db	255
  1800                           
  1801                           ;Config register IDLOC2 @ 0x200002
  1802                           ;	unspecified, using default values
  1803  200002                     	org	2097154
  1804  200002  FF                 	db	255
  1805                           
  1806                           ;Config register IDLOC3 @ 0x200003
  1807                           ;	unspecified, using default values
  1808  200003                     	org	2097155
  1809  200003  FF                 	db	255
  1810                           
  1811                           ;Config register IDLOC4 @ 0x200004
  1812                           ;	unspecified, using default values
  1813  200004                     	org	2097156
  1814  200004  FF                 	db	255
  1815                           
  1816                           ;Config register IDLOC5 @ 0x200005
  1817                           ;	unspecified, using default values
  1818  200005                     	org	2097157
  1819  200005  FF                 	db	255
  1820                           
  1821                           ;Config register IDLOC6 @ 0x200006
  1822                           ;	unspecified, using default values
  1823  200006                     	org	2097158
  1824  200006  FF                 	db	255
  1825                           
  1826                           ;Config register IDLOC7 @ 0x200007
  1827                           ;	unspecified, using default values
  1828  200007                     	org	2097159
  1829  200007  FF                 	db	255
  1830                           
  1831                           	psect	config
  1832                           
  1833                           ;Config register CONFIG1L @ 0x300000
  1834                           ;	PLL Prescaler Selection bits
  1835                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1836                           ;	System Clock Postscaler Selection bits
  1837                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1838                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1839                           ;	USBDIV = 0x0, unprogrammed default
  1840  300000                     	org	3145728
  1841  300000  00                 	db	0
  1842                           
  1843                           ;Config register CONFIG1H @ 0x300001
  1844                           ;	Oscillator Selection bits
  1845                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1846                           ;	Fail-Safe Clock Monitor Enable bit
  1847                           ;	FCMEN = 0x0, unprogrammed default
  1848                           ;	Internal/External Oscillator Switchover bit
  1849                           ;	IESO = 0x0, unprogrammed default
  1850  300001                     	org	3145729
  1851  300001  02                 	db	2
  1852                           
  1853                           ;Config register CONFIG2L @ 0x300002
  1854                           ;	Power-up Timer Enable bit
  1855                           ;	PWRT = ON, PWRT enabled
  1856                           ;	Brown-out Reset Enable bits
  1857                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1858                           ;	Brown-out Reset Voltage bits
  1859                           ;	BORV = 0x3, unprogrammed default
  1860                           ;	USB Voltage Regulator Enable bit
  1861                           ;	VREGEN = 0x0, unprogrammed default
  1862  300002                     	org	3145730
  1863  300002  18                 	db	24
  1864                           
  1865                           ;Config register CONFIG2H @ 0x300003
  1866                           ;	Watchdog Timer Enable bit
  1867                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1868                           ;	Watchdog Timer Postscale Select bits
  1869                           ;	WDTPS = 0xF, unprogrammed default
  1870  300003                     	org	3145731
  1871  300003  1E                 	db	30
  1872                           
  1873                           ; Padding undefined space
  1874  300004                     	org	3145732
  1875  300004  FF                 	db	255
  1876                           
  1877                           ;Config register CONFIG3H @ 0x300005
  1878                           ;	CCP2 MUX bit
  1879                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1880                           ;	PORTB A/D Enable bit
  1881                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1882                           ;	Low-Power Timer 1 Oscillator Enable bit
  1883                           ;	LPT1OSC = 0x0, unprogrammed default
  1884                           ;	MCLR Pin Enable bit
  1885                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1886  300005                     	org	3145733
  1887  300005  81                 	db	129
  1888                           
  1889                           ;Config register CONFIG4L @ 0x300006
  1890                           ;	Stack Full/Underflow Reset Enable bit
  1891                           ;	STVREN = 0x1, unprogrammed default
  1892                           ;	Single-Supply ICSP Enable bit
  1893                           ;	LVP = OFF, Single-Supply ICSP disabled
  1894                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1895                           ;	ICPRT = 0x0, unprogrammed default
  1896                           ;	Extended Instruction Set Enable bit
  1897                           ;	XINST = 0x0, unprogrammed default
  1898                           ;	Background Debugger Enable bit
  1899                           ;	DEBUG = 0x1, unprogrammed default
  1900  300006                     	org	3145734
  1901  300006  81                 	db	129
  1902                           
  1903                           ; Padding undefined space
  1904  300007                     	org	3145735
  1905  300007  FF                 	db	255
  1906                           
  1907                           ;Config register CONFIG5L @ 0x300008
  1908                           ;	unspecified, using default values
  1909                           ;	Code Protection bit
  1910                           ;	CP0 = 0x1, unprogrammed default
  1911                           ;	Code Protection bit
  1912                           ;	CP1 = 0x1, unprogrammed default
  1913                           ;	Code Protection bit
  1914                           ;	CP2 = 0x1, unprogrammed default
  1915                           ;	Code Protection bit
  1916                           ;	CP3 = 0x1, unprogrammed default
  1917  300008                     	org	3145736
  1918  300008  0F                 	db	15
  1919                           
  1920                           ;Config register CONFIG5H @ 0x300009
  1921                           ;	unspecified, using default values
  1922                           ;	Boot Block Code Protection bit
  1923                           ;	CPB = 0x1, unprogrammed default
  1924                           ;	Data EEPROM Code Protection bit
  1925                           ;	CPD = 0x1, unprogrammed default
  1926  300009                     	org	3145737
  1927  300009  C0                 	db	192
  1928                           
  1929                           ;Config register CONFIG6L @ 0x30000A
  1930                           ;	unspecified, using default values
  1931                           ;	Write Protection bit
  1932                           ;	WRT0 = 0x1, unprogrammed default
  1933                           ;	Write Protection bit
  1934                           ;	WRT1 = 0x1, unprogrammed default
  1935                           ;	Write Protection bit
  1936                           ;	WRT2 = 0x1, unprogrammed default
  1937                           ;	Write Protection bit
  1938                           ;	WRT3 = 0x1, unprogrammed default
  1939  30000A                     	org	3145738
  1940  30000A  0F                 	db	15
  1941                           
  1942                           ;Config register CONFIG6H @ 0x30000B
  1943                           ;	unspecified, using default values
  1944                           ;	Configuration Register Write Protection bit
  1945                           ;	WRTC = 0x1, unprogrammed default
  1946                           ;	Boot Block Write Protection bit
  1947                           ;	WRTB = 0x1, unprogrammed default
  1948                           ;	Data EEPROM Write Protection bit
  1949                           ;	WRTD = 0x1, unprogrammed default
  1950  30000B                     	org	3145739
  1951  30000B  E0                 	db	224
  1952                           
  1953                           ;Config register CONFIG7L @ 0x30000C
  1954                           ;	unspecified, using default values
  1955                           ;	Table Read Protection bit
  1956                           ;	EBTR0 = 0x1, unprogrammed default
  1957                           ;	Table Read Protection bit
  1958                           ;	EBTR1 = 0x1, unprogrammed default
  1959                           ;	Table Read Protection bit
  1960                           ;	EBTR2 = 0x1, unprogrammed default
  1961                           ;	Table Read Protection bit
  1962                           ;	EBTR3 = 0x1, unprogrammed default
  1963  30000C                     	org	3145740
  1964  30000C  0F                 	db	15
  1965                           
  1966                           ;Config register CONFIG7H @ 0x30000D
  1967                           ;	unspecified, using default values
  1968                           ;	Boot Block Table Read Protection bit
  1969                           ;	EBTRB = 0x1, unprogrammed default
  1970  30000D                     	org	3145741
  1971  30000D  40                 	db	64
  1972                           tosu	equ	0xFFF
  1973                           tosh	equ	0xFFE
  1974                           tosl	equ	0xFFD
  1975                           stkptr	equ	0xFFC
  1976                           pclatu	equ	0xFFB
  1977                           pclath	equ	0xFFA
  1978                           pcl	equ	0xFF9
  1979                           tblptru	equ	0xFF8
  1980                           tblptrh	equ	0xFF7
  1981                           tblptrl	equ	0xFF6
  1982                           tablat	equ	0xFF5
  1983                           prodh	equ	0xFF4
  1984                           prodl	equ	0xFF3
  1985                           indf0	equ	0xFEF
  1986                           postinc0	equ	0xFEE
  1987                           postdec0	equ	0xFED
  1988                           preinc0	equ	0xFEC
  1989                           plusw0	equ	0xFEB
  1990                           fsr0h	equ	0xFEA
  1991                           fsr0l	equ	0xFE9
  1992                           wreg	equ	0xFE8
  1993                           indf1	equ	0xFE7
  1994                           postinc1	equ	0xFE6
  1995                           postdec1	equ	0xFE5
  1996                           preinc1	equ	0xFE4
  1997                           plusw1	equ	0xFE3
  1998                           fsr1h	equ	0xFE2
  1999                           fsr1l	equ	0xFE1
  2000                           bsr	equ	0xFE0
  2001                           indf2	equ	0xFDF
  2002                           postinc2	equ	0xFDE
  2003                           postdec2	equ	0xFDD
  2004                           preinc2	equ	0xFDC
  2005                           plusw2	equ	0xFDB
  2006                           fsr2h	equ	0xFDA
  2007                           fsr2l	equ	0xFD9
  2008                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     15      25
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _High_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _High_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _High_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _High_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _High_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _High_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _High_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2917
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                            _ad_conf
                          _convierte
                           _int_conf
                           _lcd_init
                          _tmr2_conf
 ---------------------------------------------------------------------------------
 (1) _tmr2_conf                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              5 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              4 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              4 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _int_conf                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1397
                                             13 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              1 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              6 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _ad_conf                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              4 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              2 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              4 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              2 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _High_ISR                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ad_conf
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _int_conf
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _tmr2_conf

 _High_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      F      19       1       26.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      20        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Oct 20 21:11:57 2020

                      l61 0C98                        l55 08B2                        l64 0CB0  
                      l73 08E2                        l58 0C20                        l67 0C8E  
                      l75 08F0                        u10 0A24                        u11 0A20  
                      u20 0BDC                        u21 0BD8                        u30 0BF2  
                      u31 0BEE             ENVIA_CHAR@aux 0004                       l120 0CA0  
                     l131 0B26                       l107 0B60                       l140 0AE8  
                     l125 0BF8                       l150 09EA                       l134 0BC8  
                     l143 0C80                       l152 0A24                       l137 0CA8  
                     l146 0B94                       l651 09AA                       l661 0A80  
                     l901 0A8A                       l911 0ABE                       l903 0A8E  
                     l841 09BE                       l833 09B4                       l921 0ADC  
                     l913 0AC4                       l905 0A94                       l658 09B2  
                     l851 09D6                       l843 09C6                       l835 09B8  
                     l931 0BDC                       l923 0AE2                       l915 0ACA  
                     l907 0AA2                       l668 0A88                       l861 09F8  
                     l853 09DE                       l845 09CA                       l837 09BA  
                     l941 0B9E                       l925 0CA2                       l933 0BE2  
                     l917 0AD0                       l909 0AB6                       l871 0C68  
                     l863 0A02                       l855 09E0                       l847 09CC  
                     l839 09BC                       l951 0BB0                       l943 0BA2  
                     l927 0C9A                       l935 0BF2                       l919 0AD6  
                     l873 0C74                       l865 0A0C                       l857 09EC  
                     l849 09D4                       l953 0BB6                       l945 0BAA  
                     l937 0B98                       l881 0B66                       l929 0BCC  
                     l875 0C76                       l859 09F4                       l955 0BBC  
                     l947 0BAC                       l939 0B9A                       l891 0B7A  
                     l883 0B6A                       l877 0C7E                       l869 0A12  
                     l957 0BC2                       l949 0BAE                       l893 0B7C  
                     l885 0B6E                       l895 0B82                       l887 0B76  
                     l879 0B64                       l897 0B88                       l889 0B78  
                     l899 0B8E                       l999 0BFA                       u210 095A  
                     u211 0956                       u220 0978                       u300 08F0  
                     u221 0974                       u301 08EC                       u230 0994  
                     u231 0990                       u240 0A38                       u241 0A34  
                     u250 0A56                       u251 0A52                       u260 0A6C  
                     u261 0A68                       u317 0C08                       u270 0B3A  
                     _PR2 000FCB                       u407 09EE                       u271 0B36  
                     u327 0A9A                       u280 0B58                       u417 09FC  
                     u281 0B54                       u337 0AA8                       u290 0B26  
                     u427 0A06                       u291 0B22                       u347 0AB8  
                     u437 0C78                       u357 0B70                       u367 0BA4  
                     u377 09C0                       u387 09CE                       u397 09D8  
             LEER_LCD@aux 0002                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0002            ENVIA_CHAR@dato 0003                      l1001 0BFE  
                    l1003 0C02                      l1011 0C90                      l1101 0962  
                    l1013 0CAA                      l1005 0C12                      l1015 0C82  
                    l1111 099C                      l1103 096A                      l1007 0C16  
                    l1113 099E                      l1105 0978                      l1121 0A40  
                    l1009 0C1A                      l1115 09A4                      l1107 097E  
                    l1131 0A7A                      l1123 0A48                      l1141 0B58  
                    l1109 0994                      l1125 0A56                      l1117 0A26  
                    l1133 081A                      l1143 0AEA                      l1135 0B2A  
                    l1127 0A6C                      l1119 0A38                      l1151 08B4  
                    l1145 0AF6                      l1137 0B3A                      l1129 0A74  
                    l1161 08C6                      l1153 08B8                      l1147 0B12  
                    l1139 0B46                      l1171 0920                      l1163 08D0  
                    l1155 08BC                      l1149 0B14                      l1173 0928  
                    l1165 08E0                      l1157 08C0                      l1095 0940  
                    l1175 0930                      l1167 08FA                      l1159 08C4  
                    l1097 0948                      l1169 0910                      l1099 095A  
                    STR_1 080F                      STR_2 0801                      _LATD 000F8C  
                    i2l83 0C44                      _main 08B4                      btemp 001A  
                    start 000E             ?_CURSOR_ONOFF 0001              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0003          __end_of_LEER_LCD 0A26       __size_of_BORRAR_LCD 0008  
                   ?_main 0001                     _T2CON 000FCA           __end_of_ad_conf 0C90  
         __end_of___lwdiv 09B4           __end_of___lwmod 0A8A                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
             ?_POS_CURSOR 0005                     tablat 000FF5                     ttemp5 001B  
                   ttemp6 001E                     ttemp7 0022                     status 000FD8  
                   wtemp8 001B            ??_CURSOR_ONOFF 0005          __end_of_High_ISR 0C48  
         __initialization 0C48              __end_of_main 0940           _ESCRIBE_MENSAJE 0AEA  
                  ??_main 0010             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  i2l1061 0C42                    i2l1059 0C24          __end_of_lcd_init 0C22  
                  _decena 0012      __end_of_ENVIA_NIBBLE 0C82                 ??_ad_conf 0002  
               ??___lwdiv 000B                 ??___lwmod 0006       __size_of_POS_CURSOR 003A  
                  _millar 0016                    clear_0 0C4E          __end_of_int_conf 0CB2  
                  _unidad 0010              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0005  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0C54              ??_LCD_CONFIG 0005             ___rparam_used 000001  
            ??_ENVIA_CHAR 0003   __end_of_ESCRIBE_MENSAJE 0B28            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0CAA          ENVIA_LCD_CMD@aux 0004      __end_of_CURSOR_ONOFF 0BFA  
      __end_of_LCD_CONFIG 0AEA        __end_of_ENVIA_CHAR 0BCA                 ?_High_ISR 0001  
      __size_of_convierte 009A                ??_LEER_LCD 0002          ENVIA_NIBBLE@dato 0002  
      __size_of_tmr2_conf 000A                   i2u14_40 0C36                   i2u14_41 0C2E  
                 i2u15_48 0C38                ??_High_ISR 0001              ??_POS_CURSOR 0006  
               ?_lcd_init 0001                 ?_int_conf 0001     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0005  
                 _ad_conf 0C82                   ___lwdiv 0940                   ___lwmod 0A26  
            __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0B96         __end_of_convierte 08B4  
                 __pcinit 0C48        __end_of_POS_CURSOR 0B62                   __ramtop 0800  
                 _centena 0014                   __ptext0 08B4                   __ptext1 0C90  
                 __ptext2 0BFA                   __ptext3 0A8A                   __ptext4 0BCA  
                 __ptext5 0C9A                   __ptext6 0CA2                   __ptext7 0CAA  
                 __ptext8 081A                   __ptext9 0A26                   _var_gen 0018  
              ??_lcd_init 0006            __pintcode_body 0C22              _ENVIA_NIBBLE 0C66  
    end_of_initialization 0C54         __end_of_tmr2_conf 0C9A                   int_func 0C22  
              ??_int_conf 0002                   postinc0 000FEE     __size_of_CURSOR_ONOFF 0030  
               _TRISEbits 000F96         __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0BCA  
      CURSOR_ONOFF@estado 0005             ??_CURSOR_HOME 0005       start_initialization 0C48  
       __size_of_High_ISR 0C40         ENVIA_LCD_CMD@dato 0003               __pbssCOMRAM 0010  
     __end_of_CURSOR_HOME 0CA2         __size_of_lcd_init 0028         __size_of_int_conf 0008  
        ___lwdiv@dividend 0007                 __pintcode 0008                  ?_ad_conf 0001  
                ?___lwdiv 0007                  ?___lwmod 0002               __smallconst 0800  
               _convierte 081A           convierte@numero 000E          ___lwdiv@quotient 000B  
                _LEER_LCD 09B4                  _LATDbits 000F8C                  _LATEbits 000F8D  
               _tmr2_conf 0C90                  _PIE1bits 000F9D                  _PIR1bits 000F9E  
        ESCRIBE_MENSAJE@i 000A            POS_CURSOR@fila 0006  __size_of_ESCRIBE_MENSAJE 003E  
              _ADCON0bits 000FC2                ?_convierte 000E               _CURSOR_HOME 0C9A  
                _High_ISR 0008    __size_of_ENVIA_LCD_CMD 0034                ?_tmr2_conf 0001  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of_ad_conf 000E          __size_of___lwdiv 0074          __size_of___lwmod 0064  
         ___lwdiv@divisor 0009           ___lwdiv@counter 000D                  __ptext10 0940  
                __ptext11 0C82                  __ptext12 0B28                  __ptext13 0B62  
                __ptext14 0AEA                  __ptext15 0B96                  __ptext16 09B4  
                __ptext17 0C66                _BORRAR_LCD 0CA2                  _lcd_init 0BFA  
           __size_of_main 008C                  _int_conf 0CAA                _LCD_CONFIG 0A8A  
              _ENVIA_CHAR 0B96                  int$flags 001A             _ENVIA_LCD_CMD 0B62  
             ??_convierte 0010                _INTCONbits 000FF2         ??_ESCRIBE_MENSAJE 0008  
                intlevel2 0000     ESCRIBE_MENSAJE@cadena 0005          ___lwmod@dividend 0002  
             ??_tmr2_conf 0002            ?_ENVIA_LCD_CMD 0001           ___lwmod@divisor 0004  
         ___lwmod@counter 0006               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B28               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0007  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0005  
