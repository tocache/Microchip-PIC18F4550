

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Feb 10 13:08:20 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _ADCON2	set	4032
    71  0000                     _PORTD	set	3971
    72  0000                     _LATD	set	3980
    73  0000                     _TRISD	set	3989
    74  0000                     _LATDbits	set	3980
    75                           
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	callstack 0
    79  000800  00                 	db	0
    80  000801                     STR_2:
    81  000801  43                 	db	67	;'C'
    82  000802  61                 	db	97	;'a'
    83  000803  6E                 	db	110	;'n'
    84  000804  61                 	db	97	;'a'
    85  000805  6C                 	db	108	;'l'
    86  000806  20                 	db	32
    87  000807  30                 	db	48	;'0'
    88  000808  3A                 	db	58	;':'
    89  000809  20                 	db	32
    90  00080A  20                 	db	32
    91  00080B  20                 	db	32
    92  00080C  00                 	db	0
    93  00080D                     STR_1:
    94  00080D  4C                 	db	76	;'L'
    95  00080E  65                 	db	101	;'e'
    96  00080F  63                 	db	99	;'c'
    97  000810  74                 	db	116	;'t'
    98  000811  75                 	db	117	;'u'
    99  000812  72                 	db	114	;'r'
   100  000813  61                 	db	97	;'a'
   101  000814  20                 	db	32
   102  000815  41                 	db	65	;'A'
   103  000816  44                 	db	68	;'D'
   104  000817  43                 	db	67	;'C'
   105  000818  00                 	db	0
   106  000819                     STR_4:
   107  000819  52                 	db	82	;'R'
   108  00081A  65                 	db	101	;'e'
   109  00081B  73                 	db	115	;'s'
   110  00081C  69                 	db	105	;'i'
   111  00081D  73                 	db	115	;'s'
   112  00081E  74                 	db	116	;'t'
   113  00081F  20                 	db	32
   114  000820  30                 	db	48	;'0'
   115  000821  3A                 	db	58	;':'
   116  000822  20                 	db	32
   117  000823  00                 	db	0
   118  000824                     STR_3:
   119  000824  56                 	db	86	;'V'
   120  000825  6F                 	db	111	;'o'
   121  000826  6C                 	db	108	;'l'
   122  000827  74                 	db	116	;'t'
   123  000828  61                 	db	97	;'a'
   124  000829  6A                 	db	106	;'j'
   125  00082A  65                 	db	101	;'e'
   126  00082B  20                 	db	32
   127  00082C  30                 	db	48	;'0'
   128  00082D  3A                 	db	58	;':'
   129  00082E  00                 	db	0
   130  00082F  00                 	db	0	; dummy byte at the end
   131  0000                     
   132                           ; #config settings
   133                           
   134                           	psect	cinit
   135  000DD4                     __pcinit:
   136                           	callstack 0
   137  000DD4                     start_initialization:
   138                           	callstack 0
   139  000DD4                     __initialization:
   140                           	callstack 0
   141                           
   142                           ; Clear objects allocated to COMRAM (18 bytes)
   143  000DD4  EE00  F001         	lfsr	0,__pbssCOMRAM
   144  000DD8  0E12               	movlw	18
   145  000DDA                     clear_0:
   146  000DDA  6AEE               	clrf	postinc0,c
   147  000DDC  06E8               	decf	wreg,f,c
   148  000DDE  E1FD               	bnz	clear_0
   149  000DE0                     end_of_initialization:
   150                           	callstack 0
   151  000DE0                     __end_of__initialization:
   152                           	callstack 0
   153  000DE0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   154  000DE2  6EF8               	movwf	tblptru,c
   155  000DE4  0E08               	movlw	high __Lsmallconst
   156  000DE6  6EF7               	movwf	tblptrh,c
   157  000DE8  0100               	movlb	0
   158  000DEA  EF18  F004         	goto	_main	;jump to C main() function
   159                           
   160                           	psect	bssCOMRAM
   161  000001                     __pbssCOMRAM:
   162                           	callstack 0
   163  000001                     _res_ohm:
   164                           	callstack 0
   165  000001                     	ds	2
   166  000003                     _res_v:
   167                           	callstack 0
   168  000003                     	ds	2
   169  000005                     _resultado:
   170                           	callstack 0
   171  000005                     	ds	2
   172  000007                     _cuenta:
   173                           	callstack 0
   174  000007                     	ds	2
   175  000009                     _unidad:
   176                           	callstack 0
   177  000009                     	ds	2
   178  00000B                     _decena:
   179                           	callstack 0
   180  00000B                     	ds	2
   181  00000D                     _centena:
   182                           	callstack 0
   183  00000D                     	ds	2
   184  00000F                     _millar:
   185                           	callstack 0
   186  00000F                     	ds	2
   187  000011                     _d_millar:
   188                           	callstack 0
   189  000011                     	ds	2
   190                           
   191                           	psect	cstackCOMRAM
   192  000013                     __pcstackCOMRAM:
   193                           	callstack 0
   194  000013                     ?___wmul:
   195                           	callstack 0
   196  000013                     ?___lwmod:
   197                           	callstack 0
   198  000013                     ENVIA_NIBBLE@dato:
   199                           	callstack 0
   200  000013                     LEER_LCD@aux:
   201                           	callstack 0
   202  000013                     ___wmul@multiplier:
   203                           	callstack 0
   204  000013                     ___lwmod@dividend:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x0
   208  000013                     	ds	1
   209  000014                     ENVIA_CHAR@dato:
   210                           	callstack 0
   211  000014                     ENVIA_LCD_CMD@dato:
   212                           	callstack 0
   213                           
   214                           ; 1 bytes @ 0x1
   215  000014                     	ds	1
   216  000015                     ENVIA_CHAR@aux:
   217                           	callstack 0
   218  000015                     ENVIA_LCD_CMD@aux:
   219                           	callstack 0
   220  000015                     ___wmul@multiplicand:
   221                           	callstack 0
   222  000015                     ___lwmod@divisor:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0x2
   226  000015                     	ds	1
   227  000016                     ??_LCD_CONFIG:
   228  000016                     POS_CURSOR@columna:
   229                           	callstack 0
   230  000016                     CURSOR_ONOFF@estado:
   231                           	callstack 0
   232  000016                     ESCRIBE_MENSAJE@cadena:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0x3
   236  000016                     	ds	1
   237  000017                     ??_lcd_init:
   238  000017                     POS_CURSOR@fila:
   239                           	callstack 0
   240  000017                     ___lwmod@counter:
   241                           	callstack 0
   242  000017                     ___wmul@product:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x4
   246  000017                     	ds	1
   247  000018                     ?___lwdiv:
   248                           	callstack 0
   249  000018                     ESCRIBE_MENSAJE@tam:
   250                           	callstack 0
   251  000018                     ___lwdiv@dividend:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x5
   255  000018                     	ds	1
   256  000019                     ??_ESCRIBE_MENSAJE:
   257                           
   258                           ; 1 bytes @ 0x6
   259  000019                     	ds	1
   260  00001A                     ___lwdiv@divisor:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x7
   264  00001A                     	ds	1
   265  00001B                     ESCRIBE_MENSAJE@i:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x8
   269  00001B                     	ds	1
   270  00001C                     ___lwdiv@quotient:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x9
   274  00001C                     	ds	2
   275  00001E                     ___lwdiv@counter:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0xB
   279  00001E                     	ds	1
   280  00001F                     convierte@numero:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0xC
   284  00001F                     	ds	2
   285  000021                     ??_main:
   286                           
   287                           ; 1 bytes @ 0xE
   288  000021                     	ds	2
   289                           
   290 ;;
   291 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   292 ;;
   293 ;; *************** function _main *****************
   294 ;; Defined at:
   295 ;;		line 53 in file "maincode.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;		None
   298 ;; Auto vars:     Size  Location     Type
   299 ;;		None
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   304 ;; Tracked objects:
   305 ;;		On entry : 0/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   309 ;;      Params:         0       0       0       0       0       0       0       0       0
   310 ;;      Locals:         0       0       0       0       0       0       0       0       0
   311 ;;      Temps:          2       0       0       0       0       0       0       0       0
   312 ;;      Totals:         2       0       0       0       0       0       0       0       0
   313 ;;Total ram usage:        2 bytes
   314 ;; Hardware stack levels required when called:    4
   315 ;; This function calls:
   316 ;;		_ENVIA_CHAR
   317 ;;		_ESCRIBE_MENSAJE
   318 ;;		_POS_CURSOR
   319 ;;		___wmul
   320 ;;		_convierte
   321 ;;		_init_conf
   322 ;;		_lcd_init
   323 ;; This function is called by:
   324 ;;		Startup code after reset
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text0
   329  000830                     __ptext0:
   330                           	callstack 0
   331  000830                     _main:
   332                           	callstack 27
   333  000830                     
   334                           ;maincode.c: 54:     init_conf();
   335  000830  ECF7  F006         	call	_init_conf	;wreg free
   336  000834                     
   337                           ;maincode.c: 55:     lcd_init();
   338  000834  ECB5  F006         	call	_lcd_init	;wreg free
   339  000838                     
   340                           ;maincode.c: 56:     ESCRIBE_MENSAJE("Lectura ADC", 11);
   341  000838  0E0D               	movlw	low STR_1
   342  00083A  6E16               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   343  00083C  0E08               	movlw	high STR_1
   344  00083E  6E17               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   345  000840  0E0B               	movlw	11
   346  000842  6E18               	movwf	ESCRIBE_MENSAJE@tam^0,c
   347  000844  EC4A  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   348  000848                     l1210:
   349                           
   350                           ;maincode.c: 58:         ADCON0bits.GODONE = 1;
   351  000848  82C2               	bsf	194,1,c	;volatile
   352  00084A                     l141:
   353  00084A  B2C2               	btfsc	194,1,c	;volatile
   354  00084C  EF2A  F004         	goto	u321
   355  000850  EF2C  F004         	goto	u320
   356  000854                     u321:
   357  000854  EF25  F004         	goto	l141
   358  000858                     u320:
   359  000858                     
   360                           ;maincode.c: 60:         resultado = (ADRESH << 8) + ADRESL;
   361  000858  50C4               	movf	196,w,c	;volatile
   362  00085A  6E22               	movwf	(??_main+1)^0,c
   363  00085C  6A21               	clrf	??_main^0,c
   364  00085E  50C3               	movf	195,w,c	;volatile
   365  000860  2421               	addwf	??_main^0,w,c
   366  000862  6E05               	movwf	_resultado^0,c
   367  000864  0E00               	movlw	0
   368  000866  2022               	addwfc	(??_main+1)^0,w,c
   369  000868  6E06               	movwf	(_resultado+1)^0,c
   370  00086A                     
   371                           ;maincode.c: 61:         convierte(resultado);
   372  00086A  C005  F01F         	movff	_resultado,convierte@numero
   373  00086E  C006  F020         	movff	_resultado+1,convierte@numero+1
   374  000872  ECD3  F004         	call	_convierte	;wreg free
   375  000876                     
   376                           ;maincode.c: 62:         POS_CURSOR(2,0);
   377  000876  0E00               	movlw	0
   378  000878  6E16               	movwf	POS_CURSOR@columna^0,c
   379  00087A  0E02               	movlw	2
   380  00087C  EC38  F005         	call	_POS_CURSOR
   381  000880                     
   382                           ;maincode.c: 63:         ESCRIBE_MENSAJE("Canal 0:   ",11);
   383  000880  0E01               	movlw	low STR_2
   384  000882  6E16               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   385  000884  0E08               	movlw	high STR_2
   386  000886  6E17               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   387  000888  0E0B               	movlw	11
   388  00088A  6E18               	movwf	ESCRIBE_MENSAJE@tam^0,c
   389  00088C  EC4A  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   390  000890                     
   391                           ;maincode.c: 64:         ENVIA_CHAR(millar+0x30);
   392  000890  500F               	movf	_millar^0,w,c
   393  000892  0F30               	addlw	48
   394  000894  EC83  F006         	call	_ENVIA_CHAR
   395  000898                     
   396                           ;maincode.c: 65:         ENVIA_CHAR(centena+0x30);
   397  000898  500D               	movf	_centena^0,w,c
   398  00089A  0F30               	addlw	48
   399  00089C  EC83  F006         	call	_ENVIA_CHAR
   400  0008A0                     
   401                           ;maincode.c: 66:         ENVIA_CHAR(decena+0x30);
   402  0008A0  500B               	movf	_decena^0,w,c
   403  0008A2  0F30               	addlw	48
   404  0008A4  EC83  F006         	call	_ENVIA_CHAR
   405  0008A8                     
   406                           ;maincode.c: 67:         ENVIA_CHAR(unidad+0x30);
   407  0008A8  5009               	movf	_unidad^0,w,c
   408  0008AA  0F30               	addlw	48
   409  0008AC  EC83  F006         	call	_ENVIA_CHAR
   410  0008B0                     
   411                           ;maincode.c: 68:         POS_CURSOR(3,0);
   412  0008B0  0E00               	movlw	0
   413  0008B2  6E16               	movwf	POS_CURSOR@columna^0,c
   414  0008B4  0E03               	movlw	3
   415  0008B6  EC38  F005         	call	_POS_CURSOR
   416  0008BA                     
   417                           ;maincode.c: 69:         ESCRIBE_MENSAJE("Voltaje 0:",10);
   418  0008BA  0E24               	movlw	low STR_3
   419  0008BC  6E16               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   420  0008BE  0E08               	movlw	high STR_3
   421  0008C0  6E17               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   422  0008C2  0E0A               	movlw	10
   423  0008C4  6E18               	movwf	ESCRIBE_MENSAJE@tam^0,c
   424  0008C6  EC4A  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   425  0008CA                     
   426                           ;maincode.c: 70:         res_v = resultado * 5;
   427  0008CA  C005  F013         	movff	_resultado,___wmul@multiplier
   428  0008CE  C006  F014         	movff	_resultado+1,___wmul@multiplier+1
   429  0008D2  0E00               	movlw	0
   430  0008D4  6E16               	movwf	(___wmul@multiplicand+1)^0,c
   431  0008D6  0E05               	movlw	5
   432  0008D8  6E15               	movwf	___wmul@multiplicand^0,c
   433  0008DA  ECC9  F006         	call	___wmul	;wreg free
   434  0008DE  C013  F003         	movff	?___wmul,_res_v
   435  0008E2  C014  F004         	movff	?___wmul+1,_res_v+1
   436  0008E6                     
   437                           ;maincode.c: 71:         convierte(res_v);
   438  0008E6  C003  F01F         	movff	_res_v,convierte@numero
   439  0008EA  C004  F020         	movff	_res_v+1,convierte@numero+1
   440  0008EE  ECD3  F004         	call	_convierte	;wreg free
   441  0008F2                     
   442                           ;maincode.c: 72:         ENVIA_CHAR(millar+0x30);
   443  0008F2  500F               	movf	_millar^0,w,c
   444  0008F4  0F30               	addlw	48
   445  0008F6  EC83  F006         	call	_ENVIA_CHAR
   446  0008FA                     
   447                           ;maincode.c: 73:         ENVIA_CHAR('.');
   448  0008FA  0E2E               	movlw	46
   449  0008FC  EC83  F006         	call	_ENVIA_CHAR
   450  000900                     
   451                           ;maincode.c: 74:         ENVIA_CHAR(centena+0x30);
   452  000900  500D               	movf	_centena^0,w,c
   453  000902  0F30               	addlw	48
   454  000904  EC83  F006         	call	_ENVIA_CHAR
   455  000908                     
   456                           ;maincode.c: 75:         ENVIA_CHAR(decena+0x30);
   457  000908  500B               	movf	_decena^0,w,c
   458  00090A  0F30               	addlw	48
   459  00090C  EC83  F006         	call	_ENVIA_CHAR
   460  000910                     
   461                           ;maincode.c: 76:         ENVIA_CHAR(unidad+0x30);
   462  000910  5009               	movf	_unidad^0,w,c
   463  000912  0F30               	addlw	48
   464  000914  EC83  F006         	call	_ENVIA_CHAR
   465  000918                     
   466                           ;maincode.c: 77:         ENVIA_CHAR(' ');
   467  000918  0E20               	movlw	32
   468  00091A  EC83  F006         	call	_ENVIA_CHAR
   469  00091E                     
   470                           ;maincode.c: 78:         ENVIA_CHAR('V');
   471  00091E  0E56               	movlw	86
   472  000920  EC83  F006         	call	_ENVIA_CHAR
   473  000924                     
   474                           ;maincode.c: 79:         POS_CURSOR(4,0);
   475  000924  0E00               	movlw	0
   476  000926  6E16               	movwf	POS_CURSOR@columna^0,c
   477  000928  0E04               	movlw	4
   478  00092A  EC38  F005         	call	_POS_CURSOR
   479  00092E                     
   480                           ;maincode.c: 80:         ESCRIBE_MENSAJE("Resist 0: ",10);
   481  00092E  0E19               	movlw	low STR_4
   482  000930  6E16               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   483  000932  0E08               	movlw	high STR_4
   484  000934  6E17               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   485  000936  0E0A               	movlw	10
   486  000938  6E18               	movwf	ESCRIBE_MENSAJE@tam^0,c
   487  00093A  EC4A  F006         	call	_ESCRIBE_MENSAJE	;wreg free
   488  00093E                     
   489                           ;maincode.c: 81:         res_ohm = resultado * 10;
   490  00093E  C005  F013         	movff	_resultado,___wmul@multiplier
   491  000942  C006  F014         	movff	_resultado+1,___wmul@multiplier+1
   492  000946  0E00               	movlw	0
   493  000948  6E16               	movwf	(___wmul@multiplicand+1)^0,c
   494  00094A  0E0A               	movlw	10
   495  00094C  6E15               	movwf	___wmul@multiplicand^0,c
   496  00094E  ECC9  F006         	call	___wmul	;wreg free
   497  000952  C013  F001         	movff	?___wmul,_res_ohm
   498  000956  C014  F002         	movff	?___wmul+1,_res_ohm+1
   499  00095A                     
   500                           ;maincode.c: 82:         convierte(res_ohm);
   501  00095A  C001  F01F         	movff	_res_ohm,convierte@numero
   502  00095E  C002  F020         	movff	_res_ohm+1,convierte@numero+1
   503  000962  ECD3  F004         	call	_convierte	;wreg free
   504  000966                     
   505                           ;maincode.c: 83:         ENVIA_CHAR(millar+0x30);
   506  000966  500F               	movf	_millar^0,w,c
   507  000968  0F30               	addlw	48
   508  00096A  EC83  F006         	call	_ENVIA_CHAR
   509  00096E                     
   510                           ;maincode.c: 84:         ENVIA_CHAR('.');
   511  00096E  0E2E               	movlw	46
   512  000970  EC83  F006         	call	_ENVIA_CHAR
   513  000974                     
   514                           ;maincode.c: 85:         ENVIA_CHAR(centena+0x30);
   515  000974  500D               	movf	_centena^0,w,c
   516  000976  0F30               	addlw	48
   517  000978  EC83  F006         	call	_ENVIA_CHAR
   518  00097C                     
   519                           ;maincode.c: 86:         ENVIA_CHAR(decena+0x30);
   520  00097C  500B               	movf	_decena^0,w,c
   521  00097E  0F30               	addlw	48
   522  000980  EC83  F006         	call	_ENVIA_CHAR
   523  000984                     
   524                           ;maincode.c: 87:         ENVIA_CHAR(unidad+0x30);
   525  000984  5009               	movf	_unidad^0,w,c
   526  000986  0F30               	addlw	48
   527  000988  EC83  F006         	call	_ENVIA_CHAR
   528  00098C                     
   529                           ;maincode.c: 88:         ENVIA_CHAR(' ');
   530  00098C  0E20               	movlw	32
   531  00098E  EC83  F006         	call	_ENVIA_CHAR
   532  000992                     
   533                           ;maincode.c: 89:         ENVIA_CHAR('K');
   534  000992  0E4B               	movlw	75
   535  000994  EC83  F006         	call	_ENVIA_CHAR
   536  000998                     
   537                           ;maincode.c: 90:         ENVIA_CHAR(0xF4);
   538  000998  0EF4               	movlw	244
   539  00099A  EC83  F006         	call	_ENVIA_CHAR
   540  00099E  EF24  F004         	goto	l1210
   541  0009A2  EF00  F000         	goto	start
   542  0009A6                     __end_of_main:
   543                           	callstack 0
   544                           
   545 ;; *************** function _lcd_init *****************
   546 ;; Defined at:
   547 ;;		line 29 in file "maincode.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   561 ;;      Params:         0       0       0       0       0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0       0       0       0       0
   563 ;;      Temps:          1       0       0       0       0       0       0       0       0
   564 ;;      Totals:         1       0       0       0       0       0       0       0       0
   565 ;;Total ram usage:        1 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    3
   568 ;; This function calls:
   569 ;;		_BORRAR_LCD
   570 ;;		_CURSOR_HOME
   571 ;;		_CURSOR_ONOFF
   572 ;;		_LCD_CONFIG
   573 ;; This function is called by:
   574 ;;		_main
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           	psect	text1
   579  000D6A                     __ptext1:
   580                           	callstack 0
   581  000D6A                     _lcd_init:
   582                           	callstack 27
   583  000D6A                     
   584                           ;maincode.c: 30:     TRISD = 0x00;
   585  000D6A  0E00               	movlw	0
   586  000D6C  6E95               	movwf	149,c	;volatile
   587  000D6E                     
   588                           ;maincode.c: 31:     LCD_CONFIG();
   589  000D6E  EC1A  F006         	call	_LCD_CONFIG	;wreg free
   590  000D72                     
   591                           ;maincode.c: 32:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   592  000D72  0EEA               	movlw	234
   593  000D74  6E17               	movwf	??_lcd_init^0,c
   594  000D76  0EC3               	movlw	195
   595  000D78                     u337:
   596  000D78  2EE8               	decfsz	wreg,f,c
   597  000D7A  D7FE               	bra	u337
   598  000D7C  2E17               	decfsz	??_lcd_init^0,f,c
   599  000D7E  D7FC               	bra	u337
   600  000D80  F000               	nop	
   601  000D82                     
   602                           ;maincode.c: 33:     BORRAR_LCD();
   603  000D82  EC02  F007         	call	_BORRAR_LCD	;wreg free
   604  000D86                     
   605                           ;maincode.c: 34:     CURSOR_HOME();
   606  000D86  ECFE  F006         	call	_CURSOR_HOME	;wreg free
   607  000D8A                     
   608                           ;maincode.c: 35:     CURSOR_ONOFF(1);
   609  000D8A  0E01               	movlw	1
   610  000D8C  EC9D  F006         	call	_CURSOR_ONOFF
   611  000D90  0012               	return		;funcret
   612  000D92                     __end_of_lcd_init:
   613                           	callstack 0
   614                           
   615 ;; *************** function _LCD_CONFIG *****************
   616 ;; Defined at:
   617 ;;		line 80 in file "LCD.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;		None
   620 ;; Auto vars:     Size  Location     Type
   621 ;;		None
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg, status,2, status,0, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   631 ;;      Params:         0       0       0       0       0       0       0       0       0
   632 ;;      Locals:         0       0       0       0       0       0       0       0       0
   633 ;;      Temps:          1       0       0       0       0       0       0       0       0
   634 ;;      Totals:         1       0       0       0       0       0       0       0       0
   635 ;;Total ram usage:        1 bytes
   636 ;; Hardware stack levels used:    1
   637 ;; Hardware stack levels required when called:    2
   638 ;; This function calls:
   639 ;;		_ENVIA_LCD_CMD
   640 ;;		_ENVIA_NIBBLE
   641 ;; This function is called by:
   642 ;;		_lcd_init
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           	psect	text2
   647  000C34                     __ptext2:
   648                           	callstack 0
   649  000C34                     _LCD_CONFIG:
   650                           	callstack 27
   651  000C34                     
   652                           ;LCD.c: 82:  LATDbits.LATD0 = 0;
   653  000C34  908C               	bcf	140,0,c	;volatile
   654                           
   655                           ;LCD.c: 83:  LATDbits.LATD1 = 0;
   656  000C36  928C               	bcf	140,1,c	;volatile
   657  000C38                     
   658                           ;LCD.c: 84:  ENVIA_NIBBLE(0x30);
   659  000C38  0E30               	movlw	48
   660  000C3A  ECDC  F006         	call	_ENVIA_NIBBLE
   661  000C3E                     
   662                           ;LCD.c: 85:         _delay(24000);
   663  000C3E  0E20               	movlw	32
   664  000C40  6E16               	movwf	??_LCD_CONFIG^0,c
   665  000C42  0E2A               	movlw	42
   666  000C44                     u347:
   667  000C44  2EE8               	decfsz	wreg,f,c
   668  000C46  D7FE               	bra	u347
   669  000C48  2E16               	decfsz	??_LCD_CONFIG^0,f,c
   670  000C4A  D7FC               	bra	u347
   671  000C4C                     
   672                           ;LCD.c: 86:         _delay(24000);
   673  000C4C  0E20               	movlw	32
   674  000C4E  6E16               	movwf	??_LCD_CONFIG^0,c
   675  000C50  0E2A               	movlw	42
   676  000C52                     u357:
   677  000C52  2EE8               	decfsz	wreg,f,c
   678  000C54  D7FE               	bra	u357
   679  000C56  2E16               	decfsz	??_LCD_CONFIG^0,f,c
   680  000C58  D7FC               	bra	u357
   681                           
   682                           ;LCD.c: 89:  ENVIA_NIBBLE(0x30);
   683  000C5A  0E30               	movlw	48
   684  000C5C  ECDC  F006         	call	_ENVIA_NIBBLE
   685  000C60                     
   686                           ;LCD.c: 91:  _delay(1200);
   687  000C60  0EF0               	movlw	240
   688  000C62                     u367:
   689  000C62  D000               	nop2	
   690  000C64  2EE8               	decfsz	wreg,f,c
   691  000C66  D7FD               	bra	u367
   692  000C68                     
   693                           ;LCD.c: 92:         ENVIA_NIBBLE(0x30);
   694  000C68  0E30               	movlw	48
   695  000C6A  ECDC  F006         	call	_ENVIA_NIBBLE
   696  000C6E                     
   697                           ;LCD.c: 93:  ENVIA_NIBBLE(0x20);
   698  000C6E  0E20               	movlw	32
   699  000C70  ECDC  F006         	call	_ENVIA_NIBBLE
   700  000C74                     
   701                           ;LCD.c: 94:  ENVIA_LCD_CMD(0x01);
   702  000C74  0E01               	movlw	1
   703  000C76  EC69  F006         	call	_ENVIA_LCD_CMD
   704  000C7A                     
   705                           ;LCD.c: 95:  ENVIA_LCD_CMD(0x28);
   706  000C7A  0E28               	movlw	40
   707  000C7C  EC69  F006         	call	_ENVIA_LCD_CMD
   708  000C80                     
   709                           ;LCD.c: 96:  ENVIA_LCD_CMD(0x0F);
   710  000C80  0E0F               	movlw	15
   711  000C82  EC69  F006         	call	_ENVIA_LCD_CMD
   712  000C86                     
   713                           ;LCD.c: 97:  ENVIA_LCD_CMD(0x06);
   714  000C86  0E06               	movlw	6
   715  000C88  EC69  F006         	call	_ENVIA_LCD_CMD
   716  000C8C                     
   717                           ;LCD.c: 98:  ENVIA_LCD_CMD(0x01);
   718  000C8C  0E01               	movlw	1
   719  000C8E  EC69  F006         	call	_ENVIA_LCD_CMD
   720  000C92  0012               	return		;funcret
   721  000C94                     __end_of_LCD_CONFIG:
   722                           	callstack 0
   723                           
   724 ;; *************** function _CURSOR_ONOFF *****************
   725 ;; Defined at:
   726 ;;		line 43 in file "LCD.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  estado          1    wreg     unsigned char 
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  estado          1    3[COMRAM] unsigned char 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg, status,2, status,0, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   740 ;;      Params:         0       0       0       0       0       0       0       0       0
   741 ;;      Locals:         1       0       0       0       0       0       0       0       0
   742 ;;      Temps:          0       0       0       0       0       0       0       0       0
   743 ;;      Totals:         1       0       0       0       0       0       0       0       0
   744 ;;Total ram usage:        1 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; Hardware stack levels required when called:    2
   747 ;; This function calls:
   748 ;;		_ENVIA_LCD_CMD
   749 ;; This function is called by:
   750 ;;		_lcd_init
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text3
   755  000D3A                     __ptext3:
   756                           	callstack 0
   757  000D3A                     _CURSOR_ONOFF:
   758                           	callstack 27
   759                           
   760                           ;incstack = 0
   761                           ;CURSOR_ONOFF@estado stored from wreg
   762  000D3A  6E16               	movwf	CURSOR_ONOFF@estado^0,c
   763  000D3C                     
   764                           ;LCD.c: 43: void CURSOR_ONOFF(unsigned char estado);LCD.c: 44: {;LCD.c: 45:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   765  000D3C  5016               	movf	CURSOR_ONOFF@estado^0,w,c
   766  000D3E  A4D8               	btfss	status,2,c
   767  000D40  EFA4  F006         	goto	u21
   768  000D44  EFA6  F006         	goto	u20
   769  000D48                     u21:
   770  000D48  EFA9  F006         	goto	l896
   771  000D4C                     u20:
   772  000D4C  0E0E               	movlw	14
   773  000D4E  EC69  F006         	call	_ENVIA_LCD_CMD
   774  000D52                     l896:
   775                           
   776                           ;LCD.c: 46:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   777  000D52  0416               	decf	CURSOR_ONOFF@estado^0,w,c
   778  000D54  A4D8               	btfss	status,2,c
   779  000D56  EFAF  F006         	goto	u31
   780  000D5A  EFB1  F006         	goto	u30
   781  000D5E                     u31:
   782  000D5E  EFB4  F006         	goto	l46
   783  000D62                     u30:
   784  000D62  0E0C               	movlw	12
   785  000D64  EC69  F006         	call	_ENVIA_LCD_CMD
   786  000D68                     l46:
   787  000D68  0012               	return		;funcret
   788  000D6A                     __end_of_CURSOR_ONOFF:
   789                           	callstack 0
   790                           
   791 ;; *************** function _CURSOR_HOME *****************
   792 ;; Defined at:
   793 ;;		line 38 in file "LCD.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2, status,0, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   807 ;;      Params:         0       0       0       0       0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0       0       0
   810 ;;      Totals:         0       0       0       0       0       0       0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    2
   814 ;; This function calls:
   815 ;;		_ENVIA_LCD_CMD
   816 ;; This function is called by:
   817 ;;		_lcd_init
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text4
   822  000DFC                     __ptext4:
   823                           	callstack 0
   824  000DFC                     _CURSOR_HOME:
   825                           	callstack 27
   826  000DFC                     
   827                           ;LCD.c: 40:  ENVIA_LCD_CMD(0x02);
   828  000DFC  0E02               	movlw	2
   829  000DFE  EC69  F006         	call	_ENVIA_LCD_CMD
   830  000E02  0012               	return		;funcret
   831  000E04                     __end_of_CURSOR_HOME:
   832                           	callstack 0
   833                           
   834 ;; *************** function _BORRAR_LCD *****************
   835 ;; Defined at:
   836 ;;		line 75 in file "LCD.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0, cstack
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   850 ;;      Params:         0       0       0       0       0       0       0       0       0
   851 ;;      Locals:         0       0       0       0       0       0       0       0       0
   852 ;;      Temps:          0       0       0       0       0       0       0       0       0
   853 ;;      Totals:         0       0       0       0       0       0       0       0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    2
   857 ;; This function calls:
   858 ;;		_ENVIA_LCD_CMD
   859 ;; This function is called by:
   860 ;;		_lcd_init
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text5
   865  000E04                     __ptext5:
   866                           	callstack 0
   867  000E04                     _BORRAR_LCD:
   868                           	callstack 27
   869  000E04                     
   870                           ;LCD.c: 77:  ENVIA_LCD_CMD(0x01);
   871  000E04  0E01               	movlw	1
   872  000E06  EC69  F006         	call	_ENVIA_LCD_CMD
   873  000E0A  0012               	return		;funcret
   874  000E0C                     __end_of_BORRAR_LCD:
   875                           	callstack 0
   876                           
   877 ;; *************** function _init_conf *****************
   878 ;; Defined at:
   879 ;;		line 38 in file "maincode.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   893 ;;      Params:         0       0       0       0       0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0       0       0       0       0
   896 ;;      Totals:         0       0       0       0       0       0       0       0       0
   897 ;;Total ram usage:        0 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text6
   907  000DEE                     __ptext6:
   908                           	callstack 0
   909  000DEE                     _init_conf:
   910                           	callstack 30
   911  000DEE                     
   912                           ;maincode.c: 40:     ADCON2 = 0xA4;
   913  000DEE  0EA4               	movlw	164
   914  000DF0  6EC0               	movwf	192,c	;volatile
   915                           
   916                           ;maincode.c: 41:     ADCON1 = 0x0e;
   917  000DF2  0E0E               	movlw	14
   918  000DF4  6EC1               	movwf	193,c	;volatile
   919                           
   920                           ;maincode.c: 42:     ADCON0 = 0x01;
   921  000DF6  0E01               	movlw	1
   922  000DF8  6EC2               	movwf	194,c	;volatile
   923  000DFA  0012               	return		;funcret
   924  000DFC                     __end_of_init_conf:
   925                           	callstack 0
   926                           
   927 ;; *************** function _convierte *****************
   928 ;; Defined at:
   929 ;;		line 45 in file "maincode.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  numero          2   12[COMRAM] unsigned int 
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   943 ;;      Params:         2       0       0       0       0       0       0       0       0
   944 ;;      Locals:         0       0       0       0       0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0
   946 ;;      Totals:         2       0       0       0       0       0       0       0       0
   947 ;;Total ram usage:        2 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; Hardware stack levels required when called:    1
   950 ;; This function calls:
   951 ;;		___lwdiv
   952 ;;		___lwmod
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text7
   959  0009A6                     __ptext7:
   960                           	callstack 0
   961  0009A6                     _convierte:
   962                           	callstack 29
   963  0009A6                     
   964                           ;maincode.c: 46:     d_millar = numero / 10000;
   965  0009A6  C01F  F018         	movff	convierte@numero,___lwdiv@dividend
   966  0009AA  C020  F019         	movff	convierte@numero+1,___lwdiv@dividend+1
   967  0009AE  0E27               	movlw	39
   968  0009B0  6E1B               	movwf	(___lwdiv@divisor+1)^0,c
   969  0009B2  0E10               	movlw	16
   970  0009B4  6E1A               	movwf	___lwdiv@divisor^0,c
   971  0009B6  EC75  F005         	call	___lwdiv	;wreg free
   972  0009BA  C018  F011         	movff	?___lwdiv,_d_millar
   973  0009BE  C019  F012         	movff	?___lwdiv+1,_d_millar+1
   974                           
   975                           ;maincode.c: 47:     millar = (numero %10000) /1000;
   976  0009C2  0E27               	movlw	39
   977  0009C4  6E16               	movwf	(___lwmod@divisor+1)^0,c
   978  0009C6  0E10               	movlw	16
   979  0009C8  6E15               	movwf	___lwmod@divisor^0,c
   980  0009CA  C01F  F013         	movff	convierte@numero,___lwmod@dividend
   981  0009CE  C020  F014         	movff	convierte@numero+1,___lwmod@dividend+1
   982  0009D2  ECE8  F005         	call	___lwmod	;wreg free
   983  0009D6  C013  F018         	movff	?___lwmod,___lwdiv@dividend
   984  0009DA  C014  F019         	movff	?___lwmod+1,___lwdiv@dividend+1
   985  0009DE  0E03               	movlw	3
   986  0009E0  6E1B               	movwf	(___lwdiv@divisor+1)^0,c
   987  0009E2  0EE8               	movlw	232
   988  0009E4  6E1A               	movwf	___lwdiv@divisor^0,c
   989  0009E6  EC75  F005         	call	___lwdiv	;wreg free
   990  0009EA  C018  F00F         	movff	?___lwdiv,_millar
   991  0009EE  C019  F010         	movff	?___lwdiv+1,_millar+1
   992                           
   993                           ;maincode.c: 48:     centena = (numero % 1000) / 100;
   994  0009F2  0E03               	movlw	3
   995  0009F4  6E16               	movwf	(___lwmod@divisor+1)^0,c
   996  0009F6  0EE8               	movlw	232
   997  0009F8  6E15               	movwf	___lwmod@divisor^0,c
   998  0009FA  C01F  F013         	movff	convierte@numero,___lwmod@dividend
   999  0009FE  C020  F014         	movff	convierte@numero+1,___lwmod@dividend+1
  1000  000A02  ECE8  F005         	call	___lwmod	;wreg free
  1001  000A06  C013  F018         	movff	?___lwmod,___lwdiv@dividend
  1002  000A0A  C014  F019         	movff	?___lwmod+1,___lwdiv@dividend+1
  1003  000A0E  0E00               	movlw	0
  1004  000A10  6E1B               	movwf	(___lwdiv@divisor+1)^0,c
  1005  000A12  0E64               	movlw	100
  1006  000A14  6E1A               	movwf	___lwdiv@divisor^0,c
  1007  000A16  EC75  F005         	call	___lwdiv	;wreg free
  1008  000A1A  C018  F00D         	movff	?___lwdiv,_centena
  1009  000A1E  C019  F00E         	movff	?___lwdiv+1,_centena+1
  1010                           
  1011                           ;maincode.c: 49:     decena = (numero % 100) / 10;
  1012  000A22  0E00               	movlw	0
  1013  000A24  6E16               	movwf	(___lwmod@divisor+1)^0,c
  1014  000A26  0E64               	movlw	100
  1015  000A28  6E15               	movwf	___lwmod@divisor^0,c
  1016  000A2A  C01F  F013         	movff	convierte@numero,___lwmod@dividend
  1017  000A2E  C020  F014         	movff	convierte@numero+1,___lwmod@dividend+1
  1018  000A32  ECE8  F005         	call	___lwmod	;wreg free
  1019  000A36  C013  F018         	movff	?___lwmod,___lwdiv@dividend
  1020  000A3A  C014  F019         	movff	?___lwmod+1,___lwdiv@dividend+1
  1021  000A3E  0E00               	movlw	0
  1022  000A40  6E1B               	movwf	(___lwdiv@divisor+1)^0,c
  1023  000A42  0E0A               	movlw	10
  1024  000A44  6E1A               	movwf	___lwdiv@divisor^0,c
  1025  000A46  EC75  F005         	call	___lwdiv	;wreg free
  1026  000A4A  C018  F00B         	movff	?___lwdiv,_decena
  1027  000A4E  C019  F00C         	movff	?___lwdiv+1,_decena+1
  1028                           
  1029                           ;maincode.c: 50:     unidad = numero % 10;
  1030  000A52  C01F  F013         	movff	convierte@numero,___lwmod@dividend
  1031  000A56  C020  F014         	movff	convierte@numero+1,___lwmod@dividend+1
  1032  000A5A  0E00               	movlw	0
  1033  000A5C  6E16               	movwf	(___lwmod@divisor+1)^0,c
  1034  000A5E  0E0A               	movlw	10
  1035  000A60  6E15               	movwf	___lwmod@divisor^0,c
  1036  000A62  ECE8  F005         	call	___lwmod	;wreg free
  1037  000A66  C013  F009         	movff	?___lwmod,_unidad
  1038  000A6A  C014  F00A         	movff	?___lwmod+1,_unidad+1
  1039  000A6E  0012               	return		;funcret
  1040  000A70                     __end_of_convierte:
  1041                           	callstack 0
  1042                           
  1043 ;; *************** function ___lwmod *****************
  1044 ;; Defined at:
  1045 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwmod.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  dividend        2    0[COMRAM] unsigned int 
  1048 ;;  divisor         2    2[COMRAM] unsigned int 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  counter         1    4[COMRAM] unsigned char 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  2    0[COMRAM] unsigned int 
  1053 ;; Registers used:
  1054 ;;		wreg, status,2, status,0
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1060 ;;      Params:         4       0       0       0       0       0       0       0       0
  1061 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1063 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1064 ;;Total ram usage:        5 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; This function calls:
  1067 ;;		Nothing
  1068 ;; This function is called by:
  1069 ;;		_convierte
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           	psect	text8
  1074  000BD0                     __ptext8:
  1075                           	callstack 0
  1076  000BD0                     ___lwmod:
  1077                           	callstack 29
  1078  000BD0  5015               	movf	___lwmod@divisor^0,w,c
  1079  000BD2  1016               	iorwf	(___lwmod@divisor+1)^0,w,c
  1080  000BD4  B4D8               	btfsc	status,2,c
  1081  000BD6  EFEF  F005         	goto	u241
  1082  000BDA  EFF1  F005         	goto	u240
  1083  000BDE                     u241:
  1084  000BDE  EF15  F006         	goto	l650
  1085  000BE2                     u240:
  1086  000BE2  0E01               	movlw	1
  1087  000BE4  6E17               	movwf	___lwmod@counter^0,c
  1088  000BE6  EFF9  F005         	goto	l1162
  1089  000BEA                     l1160:
  1090  000BEA  90D8               	bcf	status,0,c
  1091  000BEC  3615               	rlcf	___lwmod@divisor^0,f,c
  1092  000BEE  3616               	rlcf	(___lwmod@divisor+1)^0,f,c
  1093  000BF0  2A17               	incf	___lwmod@counter^0,f,c
  1094  000BF2                     l1162:
  1095  000BF2  AE16               	btfss	(___lwmod@divisor+1)^0,7,c
  1096  000BF4  EFFE  F005         	goto	u251
  1097  000BF8  EF00  F006         	goto	u250
  1098  000BFC                     u251:
  1099  000BFC  EFF5  F005         	goto	l1160
  1100  000C00                     u250:
  1101  000C00                     l1164:
  1102  000C00  5015               	movf	___lwmod@divisor^0,w,c
  1103  000C02  5C13               	subwf	___lwmod@dividend^0,w,c
  1104  000C04  5016               	movf	(___lwmod@divisor+1)^0,w,c
  1105  000C06  5814               	subwfb	(___lwmod@dividend+1)^0,w,c
  1106  000C08  A0D8               	btfss	status,0,c
  1107  000C0A  EF09  F006         	goto	u261
  1108  000C0E  EF0B  F006         	goto	u260
  1109  000C12                     u261:
  1110  000C12  EF0F  F006         	goto	l1168
  1111  000C16                     u260:
  1112  000C16  5015               	movf	___lwmod@divisor^0,w,c
  1113  000C18  5E13               	subwf	___lwmod@dividend^0,f,c
  1114  000C1A  5016               	movf	(___lwmod@divisor+1)^0,w,c
  1115  000C1C  5A14               	subwfb	(___lwmod@dividend+1)^0,f,c
  1116  000C1E                     l1168:
  1117  000C1E  90D8               	bcf	status,0,c
  1118  000C20  3216               	rrcf	(___lwmod@divisor+1)^0,f,c
  1119  000C22  3215               	rrcf	___lwmod@divisor^0,f,c
  1120  000C24  2E17               	decfsz	___lwmod@counter^0,f,c
  1121  000C26  EF00  F006         	goto	l1164
  1122  000C2A                     l650:
  1123  000C2A  C013  F013         	movff	___lwmod@dividend,?___lwmod
  1124  000C2E  C014  F014         	movff	___lwmod@dividend+1,?___lwmod+1
  1125  000C32  0012               	return		;funcret
  1126  000C34                     __end_of___lwmod:
  1127                           	callstack 0
  1128                           
  1129 ;; *************** function ___lwdiv *****************
  1130 ;; Defined at:
  1131 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  dividend        2    5[COMRAM] unsigned int 
  1134 ;;  divisor         2    7[COMRAM] unsigned int 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  quotient        2    9[COMRAM] unsigned int 
  1137 ;;  counter         1   11[COMRAM] unsigned char 
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  2    5[COMRAM] unsigned int 
  1140 ;; Registers used:
  1141 ;;		wreg, status,2, status,0
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1147 ;;      Params:         4       0       0       0       0       0       0       0       0
  1148 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1150 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1151 ;;Total ram usage:        7 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_convierte
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text9
  1161  000AEA                     __ptext9:
  1162                           	callstack 0
  1163  000AEA                     ___lwdiv:
  1164                           	callstack 29
  1165  000AEA  0E00               	movlw	0
  1166  000AEC  6E1D               	movwf	(___lwdiv@quotient+1)^0,c
  1167  000AEE  0E00               	movlw	0
  1168  000AF0  6E1C               	movwf	___lwdiv@quotient^0,c
  1169  000AF2  501A               	movf	___lwdiv@divisor^0,w,c
  1170  000AF4  101B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1171  000AF6  B4D8               	btfsc	status,2,c
  1172  000AF8  EF80  F005         	goto	u211
  1173  000AFC  EF82  F005         	goto	u210
  1174  000B00                     u211:
  1175  000B00  EFAA  F005         	goto	l640
  1176  000B04                     u210:
  1177  000B04  0E01               	movlw	1
  1178  000B06  6E1E               	movwf	___lwdiv@counter^0,c
  1179  000B08  EF8A  F005         	goto	l1142
  1180  000B0C                     l1140:
  1181  000B0C  90D8               	bcf	status,0,c
  1182  000B0E  361A               	rlcf	___lwdiv@divisor^0,f,c
  1183  000B10  361B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1184  000B12  2A1E               	incf	___lwdiv@counter^0,f,c
  1185  000B14                     l1142:
  1186  000B14  AE1B               	btfss	(___lwdiv@divisor+1)^0,7,c
  1187  000B16  EF8F  F005         	goto	u221
  1188  000B1A  EF91  F005         	goto	u220
  1189  000B1E                     u221:
  1190  000B1E  EF86  F005         	goto	l1140
  1191  000B22                     u220:
  1192  000B22                     l1144:
  1193  000B22  90D8               	bcf	status,0,c
  1194  000B24  361C               	rlcf	___lwdiv@quotient^0,f,c
  1195  000B26  361D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1196  000B28  501A               	movf	___lwdiv@divisor^0,w,c
  1197  000B2A  5C18               	subwf	___lwdiv@dividend^0,w,c
  1198  000B2C  501B               	movf	(___lwdiv@divisor+1)^0,w,c
  1199  000B2E  5819               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1200  000B30  A0D8               	btfss	status,0,c
  1201  000B32  EF9D  F005         	goto	u231
  1202  000B36  EF9F  F005         	goto	u230
  1203  000B3A                     u231:
  1204  000B3A  EFA4  F005         	goto	l1152
  1205  000B3E                     u230:
  1206  000B3E  501A               	movf	___lwdiv@divisor^0,w,c
  1207  000B40  5E18               	subwf	___lwdiv@dividend^0,f,c
  1208  000B42  501B               	movf	(___lwdiv@divisor+1)^0,w,c
  1209  000B44  5A19               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1210  000B46  801C               	bsf	___lwdiv@quotient^0,0,c
  1211  000B48                     l1152:
  1212  000B48  90D8               	bcf	status,0,c
  1213  000B4A  321B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1214  000B4C  321A               	rrcf	___lwdiv@divisor^0,f,c
  1215  000B4E  2E1E               	decfsz	___lwdiv@counter^0,f,c
  1216  000B50  EF91  F005         	goto	l1144
  1217  000B54                     l640:
  1218  000B54  C01C  F018         	movff	___lwdiv@quotient,?___lwdiv
  1219  000B58  C01D  F019         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1220  000B5C  0012               	return		;funcret
  1221  000B5E                     __end_of___lwdiv:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function ___wmul *****************
  1225 ;; Defined at:
  1226 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  multiplier      2    0[COMRAM] unsigned int 
  1229 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  product         2    4[COMRAM] unsigned int 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  2    0[COMRAM] unsigned int 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0, prodl, prodh
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1241 ;;      Params:         4       0       0       0       0       0       0       0       0
  1242 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1244 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1245 ;;Total ram usage:        6 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_main
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text10
  1255  000D92                     __ptext10:
  1256                           	callstack 0
  1257  000D92                     ___wmul:
  1258                           	callstack 30
  1259  000D92  5013               	movf	___wmul@multiplier^0,w,c
  1260  000D94  0215               	mulwf	___wmul@multiplicand^0,c
  1261  000D96  CFF3 F017          	movff	prodl,___wmul@product
  1262  000D9A  CFF4 F018          	movff	prodh,___wmul@product+1
  1263  000D9E  5013               	movf	___wmul@multiplier^0,w,c
  1264  000DA0  0216               	mulwf	(___wmul@multiplicand+1)^0,c
  1265  000DA2  50F3               	movf	243,w,c
  1266  000DA4  2618               	addwf	(___wmul@product+1)^0,f,c
  1267  000DA6  5014               	movf	(___wmul@multiplier+1)^0,w,c
  1268  000DA8  0215               	mulwf	___wmul@multiplicand^0,c
  1269  000DAA  50F3               	movf	243,w,c
  1270  000DAC  2618               	addwf	(___wmul@product+1)^0,f,c
  1271  000DAE  C017  F013         	movff	___wmul@product,?___wmul
  1272  000DB2  C018  F014         	movff	___wmul@product+1,?___wmul+1
  1273  000DB6  0012               	return		;funcret
  1274  000DB8                     __end_of___wmul:
  1275                           	callstack 0
  1276                           
  1277 ;; *************** function _POS_CURSOR *****************
  1278 ;; Defined at:
  1279 ;;		line 6 in file "LCD.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  fila            1    wreg     unsigned char 
  1282 ;;  columna         1    3[COMRAM] unsigned char 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  fila            1    4[COMRAM] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1294 ;;      Params:         1       0       0       0       0       0       0       0       0
  1295 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1297 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1298 ;;Total ram usage:        2 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		_ENVIA_LCD_CMD
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text11
  1309  000A70                     __ptext11:
  1310                           	callstack 0
  1311  000A70                     _POS_CURSOR:
  1312                           	callstack 28
  1313                           
  1314                           ;incstack = 0
  1315                           ;POS_CURSOR@fila stored from wreg
  1316  000A70  6E17               	movwf	POS_CURSOR@fila^0,c
  1317  000A72                     
  1318                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1319  000A72  0417               	decf	POS_CURSOR@fila^0,w,c
  1320  000A74  A4D8               	btfss	status,2,c
  1321  000A76  EF3F  F005         	goto	u271
  1322  000A7A  EF41  F005         	goto	u270
  1323  000A7E                     u271:
  1324  000A7E  EF47  F005         	goto	l1176
  1325  000A82                     u270:
  1326  000A82                     
  1327                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1328  000A82  5016               	movf	POS_CURSOR@columna^0,w,c
  1329  000A84  0F80               	addlw	128
  1330  000A86  EC69  F006         	call	_ENVIA_LCD_CMD
  1331                           
  1332                           ;LCD.c: 11:  }
  1333  000A8A  EF74  F005         	goto	l28
  1334  000A8E                     l1176:
  1335  000A8E  0E02               	movlw	2
  1336  000A90  1817               	xorwf	POS_CURSOR@fila^0,w,c
  1337  000A92  A4D8               	btfss	status,2,c
  1338  000A94  EF4E  F005         	goto	u281
  1339  000A98  EF50  F005         	goto	u280
  1340  000A9C                     u281:
  1341  000A9C  EF56  F005         	goto	l1180
  1342  000AA0                     u280:
  1343  000AA0                     
  1344                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1345  000AA0  5016               	movf	POS_CURSOR@columna^0,w,c
  1346  000AA2  0FC0               	addlw	192
  1347  000AA4  EC69  F006         	call	_ENVIA_LCD_CMD
  1348                           
  1349                           ;LCD.c: 15:  }
  1350  000AA8  EF74  F005         	goto	l28
  1351  000AAC                     l1180:
  1352  000AAC  0E03               	movlw	3
  1353  000AAE  1817               	xorwf	POS_CURSOR@fila^0,w,c
  1354  000AB0  A4D8               	btfss	status,2,c
  1355  000AB2  EF5D  F005         	goto	u291
  1356  000AB6  EF5F  F005         	goto	u290
  1357  000ABA                     u291:
  1358  000ABA  EF65  F005         	goto	l1184
  1359  000ABE                     u290:
  1360  000ABE                     
  1361                           ;LCD.c: 17:  {;LCD.c: 18:   ENVIA_LCD_CMD(0x94+columna);
  1362  000ABE  5016               	movf	POS_CURSOR@columna^0,w,c
  1363  000AC0  0F94               	addlw	148
  1364  000AC2  EC69  F006         	call	_ENVIA_LCD_CMD
  1365                           
  1366                           ;LCD.c: 19:  }
  1367  000AC6  EF74  F005         	goto	l28
  1368  000ACA                     l1184:
  1369  000ACA  0E04               	movlw	4
  1370  000ACC  1817               	xorwf	POS_CURSOR@fila^0,w,c
  1371  000ACE  A4D8               	btfss	status,2,c
  1372  000AD0  EF6C  F005         	goto	u301
  1373  000AD4  EF6E  F005         	goto	u300
  1374  000AD8                     u301:
  1375  000AD8  EF74  F005         	goto	l24
  1376  000ADC                     u300:
  1377  000ADC                     
  1378                           ;LCD.c: 21:  {;LCD.c: 22:   ENVIA_LCD_CMD(0xD4+columna);
  1379  000ADC  5016               	movf	POS_CURSOR@columna^0,w,c
  1380  000ADE  0FD4               	addlw	212
  1381  000AE0  EC69  F006         	call	_ENVIA_LCD_CMD
  1382  000AE4  EF74  F005         	goto	l28
  1383  000AE8                     l24:
  1384  000AE8                     l28:
  1385  000AE8  0012               	return		;funcret
  1386  000AEA                     __end_of_POS_CURSOR:
  1387                           	callstack 0
  1388                           
  1389 ;; *************** function _ENVIA_LCD_CMD *****************
  1390 ;; Defined at:
  1391 ;;		line 112 in file "LCD.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  dato            1    wreg     unsigned char 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  dato            1    1[COMRAM] unsigned char 
  1396 ;;  aux             1    2[COMRAM] unsigned char 
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, status,2, status,0, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1406 ;;      Params:         0       0       0       0       0       0       0       0       0
  1407 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1409 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1410 ;;Total ram usage:        2 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    1
  1413 ;; This function calls:
  1414 ;;		_ENVIA_NIBBLE
  1415 ;;		_LEER_LCD
  1416 ;; This function is called by:
  1417 ;;		_POS_CURSOR
  1418 ;;		_CURSOR_HOME
  1419 ;;		_CURSOR_ONOFF
  1420 ;;		_BORRAR_LCD
  1421 ;;		_LCD_CONFIG
  1422 ;;		_BLINK_CURSOR
  1423 ;;		_DISPLAY_ONOFF
  1424 ;;		_GENERACARACTER
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text12
  1429  000CD2                     __ptext12:
  1430                           	callstack 0
  1431  000CD2                     _ENVIA_LCD_CMD:
  1432                           	callstack 27
  1433                           
  1434                           ;incstack = 0
  1435                           ;ENVIA_LCD_CMD@dato stored from wreg
  1436  000CD2  6E14               	movwf	ENVIA_LCD_CMD@dato^0,c
  1437  000CD4                     
  1438                           ;LCD.c: 112: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 113: {;LCD.c: 114:  unsigned 
      +                          char aux;;LCD.c: 115:  LATDbits.LATD0 = 0;
  1439  000CD4  908C               	bcf	140,0,c	;volatile
  1440  000CD6                     
  1441                           ;LCD.c: 116:  LEER_LCD();
  1442  000CD6  ECAF  F005         	call	_LEER_LCD	;wreg free
  1443  000CDA                     
  1444                           ;LCD.c: 117:  TRISD = 0b00000000;
  1445  000CDA  0E00               	movlw	0
  1446  000CDC  6E95               	movwf	149,c	;volatile
  1447  000CDE                     
  1448                           ;LCD.c: 119:         _delay(1200);
  1449  000CDE  0EF0               	movlw	240
  1450  000CE0                     u377:
  1451  000CE0  D000               	nop2	
  1452  000CE2  2EE8               	decfsz	wreg,f,c
  1453  000CE4  D7FD               	bra	u377
  1454  000CE6                     
  1455                           ;LCD.c: 120:         LATDbits.LATD1 = 0;
  1456  000CE6  928C               	bcf	140,1,c	;volatile
  1457  000CE8                     
  1458                           ;LCD.c: 121:  LATDbits.LATD2 = 0;
  1459  000CE8  948C               	bcf	140,2,c	;volatile
  1460  000CEA                     
  1461                           ;LCD.c: 122:  LATDbits.LATD0 = 0;
  1462  000CEA  908C               	bcf	140,0,c	;volatile
  1463  000CEC                     
  1464                           ;LCD.c: 123:  aux = dato & 0xF0;
  1465  000CEC  5014               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1466  000CEE  0BF0               	andlw	240
  1467  000CF0  6E15               	movwf	ENVIA_LCD_CMD@aux^0,c
  1468  000CF2                     
  1469                           ;LCD.c: 124:  ENVIA_NIBBLE(aux);
  1470  000CF2  5015               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1471  000CF4  ECDC  F006         	call	_ENVIA_NIBBLE
  1472  000CF8                     
  1473                           ;LCD.c: 125:  aux = dato<<4;
  1474  000CF8  3814               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1475  000CFA  0BF0               	andlw	240
  1476  000CFC  6E15               	movwf	ENVIA_LCD_CMD@aux^0,c
  1477  000CFE                     
  1478                           ;LCD.c: 126:  ENVIA_NIBBLE(aux);
  1479  000CFE  5015               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1480  000D00  ECDC  F006         	call	_ENVIA_NIBBLE
  1481  000D04  0012               	return		;funcret
  1482  000D06                     __end_of_ENVIA_LCD_CMD:
  1483                           	callstack 0
  1484                           
  1485 ;; *************** function _ESCRIBE_MENSAJE *****************
  1486 ;; Defined at:
  1487 ;;		line 49 in file "LCD.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1490 ;;		 -> STR_4(11), STR_3(11), STR_2(12), STR_1(12), 
  1491 ;;  tam             1    5[COMRAM] unsigned char 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  i               1    8[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1503 ;;      Params:         3       0       0       0       0       0       0       0       0
  1504 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1505 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1506 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1507 ;;Total ram usage:        6 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    2
  1510 ;; This function calls:
  1511 ;;		_ENVIA_CHAR
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text13
  1518  000C94                     __ptext13:
  1519                           	callstack 0
  1520  000C94                     _ESCRIBE_MENSAJE:
  1521                           	callstack 28
  1522  000C94                     
  1523                           ;LCD.c: 49: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 50: {;LCD.
      +                          c: 51:  unsigned char i = 0;
  1524  000C94  0E00               	movlw	0
  1525  000C96  6E1B               	movwf	ESCRIBE_MENSAJE@i^0,c
  1526                           
  1527                           ;LCD.c: 52:  for(i = 0; i<tam; i++)
  1528  000C98  0E00               	movlw	0
  1529  000C9A  6E1B               	movwf	ESCRIBE_MENSAJE@i^0,c
  1530  000C9C  EF5F  F006         	goto	l1194
  1531  000CA0                     l1190:
  1532                           
  1533                           ;LCD.c: 53:  {;LCD.c: 54:   ENVIA_CHAR(cadena[i]);
  1534  000CA0  501B               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1535  000CA2  2416               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1536  000CA4  6E19               	movwf	??_ESCRIBE_MENSAJE^0,c
  1537  000CA6  0E00               	movlw	0
  1538  000CA8  2017               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1539  000CAA  6E1A               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1540  000CAC  C019  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1541  000CB0  C01A  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1542  000CB4                     	if	0	;tblptru may be non-zero
  1543  000CB4                     	endif
  1544  000CB4                     	if	0	;tblptru may be non-zero
  1545  000CB4                     	endif
  1546  000CB4  0008               	tblrd		*
  1547  000CB6  50F5               	movf	tablat,w,c
  1548  000CB8  EC83  F006         	call	_ENVIA_CHAR
  1549  000CBC                     
  1550                           ;LCD.c: 55:  }
  1551  000CBC  2A1B               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1552  000CBE                     l1194:
  1553  000CBE  5018               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1554  000CC0  5C1B               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1555  000CC2  A0D8               	btfss	status,0,c
  1556  000CC4  EF66  F006         	goto	u311
  1557  000CC8  EF68  F006         	goto	u310
  1558  000CCC                     u311:
  1559  000CCC  EF50  F006         	goto	l1190
  1560  000CD0                     u310:
  1561  000CD0  0012               	return		;funcret
  1562  000CD2                     __end_of_ESCRIBE_MENSAJE:
  1563                           	callstack 0
  1564                           
  1565 ;; *************** function _ENVIA_CHAR *****************
  1566 ;; Defined at:
  1567 ;;		line 58 in file "LCD.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  dato            1    wreg     unsigned char 
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  dato            1    1[COMRAM] unsigned char 
  1572 ;;  aux             1    2[COMRAM] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, status,2, status,0, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0
  1583 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1585 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1586 ;;Total ram usage:        2 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    1
  1589 ;; This function calls:
  1590 ;;		_ENVIA_NIBBLE
  1591 ;;		_LEER_LCD
  1592 ;; This function is called by:
  1593 ;;		_ESCRIBE_MENSAJE
  1594 ;;		_main
  1595 ;;		_GENERACARACTER
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text14
  1600  000D06                     __ptext14:
  1601                           	callstack 0
  1602  000D06                     _ENVIA_CHAR:
  1603                           	callstack 28
  1604                           
  1605                           ;incstack = 0
  1606                           ;ENVIA_CHAR@dato stored from wreg
  1607  000D06  6E14               	movwf	ENVIA_CHAR@dato^0,c
  1608  000D08                     
  1609                           ;LCD.c: 58: void ENVIA_CHAR(unsigned char dato);LCD.c: 59: {;LCD.c: 60:  unsigned char a
      +                          ux;;LCD.c: 61:  LATDbits.LATD0 = 1;
  1610  000D08  808C               	bsf	140,0,c	;volatile
  1611  000D0A                     
  1612                           ;LCD.c: 62:  LEER_LCD();
  1613  000D0A  ECAF  F005         	call	_LEER_LCD	;wreg free
  1614  000D0E                     
  1615                           ;LCD.c: 63:  TRISD = 0x00;
  1616  000D0E  0E00               	movlw	0
  1617  000D10  6E95               	movwf	149,c	;volatile
  1618  000D12                     
  1619                           ;LCD.c: 64:         _delay(1200);
  1620  000D12  0EF0               	movlw	240
  1621  000D14                     u387:
  1622  000D14  D000               	nop2	
  1623  000D16  2EE8               	decfsz	wreg,f,c
  1624  000D18  D7FD               	bra	u387
  1625  000D1A                     
  1626                           ;LCD.c: 66:  LATDbits.LATD1 = 0;
  1627  000D1A  928C               	bcf	140,1,c	;volatile
  1628  000D1C                     
  1629                           ;LCD.c: 67:  LATDbits.LATD2 = 0;
  1630  000D1C  948C               	bcf	140,2,c	;volatile
  1631  000D1E                     
  1632                           ;LCD.c: 68:  LATDbits.LATD0 = 1;
  1633  000D1E  808C               	bsf	140,0,c	;volatile
  1634  000D20                     
  1635                           ;LCD.c: 69:  aux = dato & 0xF0;
  1636  000D20  5014               	movf	ENVIA_CHAR@dato^0,w,c
  1637  000D22  0BF0               	andlw	240
  1638  000D24  6E15               	movwf	ENVIA_CHAR@aux^0,c
  1639  000D26                     
  1640                           ;LCD.c: 70:  ENVIA_NIBBLE(aux);
  1641  000D26  5015               	movf	ENVIA_CHAR@aux^0,w,c
  1642  000D28  ECDC  F006         	call	_ENVIA_NIBBLE
  1643  000D2C                     
  1644                           ;LCD.c: 71:  aux = dato << 4;
  1645  000D2C  3814               	swapf	ENVIA_CHAR@dato^0,w,c
  1646  000D2E  0BF0               	andlw	240
  1647  000D30  6E15               	movwf	ENVIA_CHAR@aux^0,c
  1648  000D32                     
  1649                           ;LCD.c: 72:  ENVIA_NIBBLE(aux);
  1650  000D32  5015               	movf	ENVIA_CHAR@aux^0,w,c
  1651  000D34  ECDC  F006         	call	_ENVIA_NIBBLE
  1652  000D38  0012               	return		;funcret
  1653  000D3A                     __end_of_ENVIA_CHAR:
  1654                           	callstack 0
  1655                           
  1656 ;; *************** function _LEER_LCD *****************
  1657 ;; Defined at:
  1658 ;;		line 129 in file "LCD.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  aux             1    0[COMRAM] unsigned char 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1672 ;;      Params:         0       0       0       0       0       0       0       0       0
  1673 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1675 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1676 ;;Total ram usage:        1 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_ENVIA_CHAR
  1682 ;;		_ENVIA_LCD_CMD
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           	psect	text15
  1687  000B5E                     __ptext15:
  1688                           	callstack 0
  1689  000B5E                     _LEER_LCD:
  1690                           	callstack 27
  1691  000B5E                     
  1692                           ;LCD.c: 131:  unsigned char aux;;LCD.c: 132:  TRISD = 0xF8;
  1693  000B5E  0EF8               	movlw	248
  1694  000B60  6E95               	movwf	149,c	;volatile
  1695  000B62                     
  1696                           ;LCD.c: 133:  LATDbits.LATD0 = 0;
  1697  000B62  908C               	bcf	140,0,c	;volatile
  1698  000B64                     
  1699                           ;LCD.c: 134:  LATDbits.LATD1 = 1;
  1700  000B64  828C               	bsf	140,1,c	;volatile
  1701  000B66                     
  1702                           ;LCD.c: 135:  LATDbits.LATD2 = 1;
  1703  000B66  848C               	bsf	140,2,c	;volatile
  1704  000B68                     
  1705                           ;LCD.c: 136:         _delay(1200);
  1706  000B68  0EF0               	movlw	240
  1707  000B6A                     u397:
  1708  000B6A  D000               	nop2	
  1709  000B6C  2EE8               	decfsz	wreg,f,c
  1710  000B6E  D7FD               	bra	u397
  1711  000B70                     
  1712                           ;LCD.c: 138:  aux = PORTD;
  1713  000B70  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1714  000B74                     
  1715                           ;LCD.c: 139:  LATDbits.LATD2 = 0;
  1716  000B74  948C               	bcf	140,2,c	;volatile
  1717  000B76                     
  1718                           ;LCD.c: 140:         _delay(1200);
  1719  000B76  0EF0               	movlw	240
  1720  000B78                     u407:
  1721  000B78  D000               	nop2	
  1722  000B7A  2EE8               	decfsz	wreg,f,c
  1723  000B7C  D7FD               	bra	u407
  1724  000B7E                     
  1725                           ;LCD.c: 142:  LATDbits.LATD2 = 1;
  1726  000B7E  848C               	bsf	140,2,c	;volatile
  1727  000B80                     
  1728                           ;LCD.c: 143:         _delay(1200);
  1729  000B80  0EF0               	movlw	240
  1730  000B82                     u417:
  1731  000B82  D000               	nop2	
  1732  000B84  2EE8               	decfsz	wreg,f,c
  1733  000B86  D7FD               	bra	u417
  1734  000B88                     
  1735                           ;LCD.c: 145:  LATDbits.LATD2 = 0;
  1736  000B88  948C               	bcf	140,2,c	;volatile
  1737  000B8A                     l844:
  1738                           
  1739                           ;LCD.c: 146:  aux = aux & 0x80;
  1740  000B8A  5013               	movf	LEER_LCD@aux^0,w,c
  1741  000B8C  0B80               	andlw	128
  1742  000B8E  6E13               	movwf	LEER_LCD@aux^0,c
  1743                           
  1744                           ;LCD.c: 147:  while(aux == 0x80)
  1745  000B90  EFDE  F005         	goto	l858
  1746  000B94                     l71:
  1747                           
  1748                           ;LCD.c: 148:         {;LCD.c: 149:             LATDbits.LATD2 = 1;
  1749  000B94  848C               	bsf	140,2,c	;volatile
  1750  000B96                     
  1751                           ;LCD.c: 150:             _delay(1200);
  1752  000B96  0EF0               	movlw	240
  1753  000B98                     u427:
  1754  000B98  D000               	nop2	
  1755  000B9A  2EE8               	decfsz	wreg,f,c
  1756  000B9C  D7FD               	bra	u427
  1757  000B9E                     
  1758                           ;LCD.c: 151:             aux = PORTD;
  1759  000B9E  CF83 F013          	movff	3971,LEER_LCD@aux	;volatile
  1760  000BA2                     
  1761                           ;LCD.c: 152:             LATDbits.LATD2 = 0;
  1762  000BA2  948C               	bcf	140,2,c	;volatile
  1763                           
  1764                           ;LCD.c: 153:             _delay(1200);
  1765  000BA4  0EF0               	movlw	240
  1766  000BA6                     u437:
  1767  000BA6  D000               	nop2	
  1768  000BA8  2EE8               	decfsz	wreg,f,c
  1769  000BAA  D7FD               	bra	u437
  1770  000BAC                     
  1771                           ;LCD.c: 154:             LATDbits.LATD2 = 1;
  1772  000BAC  848C               	bsf	140,2,c	;volatile
  1773                           
  1774                           ;LCD.c: 155:             _delay(1200);
  1775  000BAE  0EF0               	movlw	240
  1776  000BB0                     u447:
  1777  000BB0  D000               	nop2	
  1778  000BB2  2EE8               	decfsz	wreg,f,c
  1779  000BB4  D7FD               	bra	u447
  1780  000BB6                     
  1781                           ;LCD.c: 156:             LATDbits.LATD2 = 0;
  1782  000BB6  948C               	bcf	140,2,c	;volatile
  1783  000BB8  EFC5  F005         	goto	l844
  1784  000BBC                     l858:
  1785                           
  1786                           ;LCD.c: 147:  while(aux == 0x80)
  1787  000BBC  0E80               	movlw	128
  1788  000BBE  1813               	xorwf	LEER_LCD@aux^0,w,c
  1789  000BC0  B4D8               	btfsc	status,2,c
  1790  000BC2  EFE5  F005         	goto	u11
  1791  000BC6  EFE7  F005         	goto	u10
  1792  000BCA                     u11:
  1793  000BCA  EFCA  F005         	goto	l71
  1794  000BCE                     u10:
  1795  000BCE  0012               	return		;funcret
  1796  000BD0                     __end_of_LEER_LCD:
  1797                           	callstack 0
  1798                           
  1799 ;; *************** function _ENVIA_NIBBLE *****************
  1800 ;; Defined at:
  1801 ;;		line 101 in file "LCD.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  dato            1    wreg     unsigned char 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  dato            1    0[COMRAM] unsigned char 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1815 ;;      Params:         0       0       0       0       0       0       0       0       0
  1816 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1818 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1819 ;;Total ram usage:        1 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_ENVIA_CHAR
  1825 ;;		_LCD_CONFIG
  1826 ;;		_ENVIA_LCD_CMD
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text16
  1831  000DB8                     __ptext16:
  1832                           	callstack 0
  1833  000DB8                     _ENVIA_NIBBLE:
  1834                           	callstack 28
  1835                           
  1836                           ;incstack = 0
  1837                           ;ENVIA_NIBBLE@dato stored from wreg
  1838  000DB8  6E13               	movwf	ENVIA_NIBBLE@dato^0,c
  1839  000DBA                     
  1840                           ;LCD.c: 101: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 102: {;LCD.c: 103:  LATD &= 0x
      +                          0F;
  1841  000DBA  0E0F               	movlw	15
  1842  000DBC  168C               	andwf	140,f,c	;volatile
  1843                           
  1844                           ;LCD.c: 104:  dato &= 0xF0;
  1845  000DBE  0EF0               	movlw	240
  1846  000DC0  1613               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1847                           
  1848                           ;LCD.c: 105:  LATD|= dato;
  1849  000DC2  5013               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1850  000DC4  128C               	iorwf	140,f,c	;volatile
  1851  000DC6                     
  1852                           ;LCD.c: 106:  LATDbits.LATD2 = 1;
  1853  000DC6  848C               	bsf	140,2,c	;volatile
  1854  000DC8                     
  1855                           ;LCD.c: 108:         _delay(1200);
  1856  000DC8  0EF0               	movlw	240
  1857  000DCA                     u457:
  1858  000DCA  D000               	nop2	
  1859  000DCC  2EE8               	decfsz	wreg,f,c
  1860  000DCE  D7FD               	bra	u457
  1861  000DD0                     
  1862                           ;LCD.c: 109:  LATDbits.LATD2 = 0;
  1863  000DD0  948C               	bcf	140,2,c	;volatile
  1864  000DD2  0012               	return		;funcret
  1865  000DD4                     __end_of_ENVIA_NIBBLE:
  1866                           	callstack 0
  1867                           
  1868                           	psect	rparam
  1869  0000                     
  1870                           	psect	idloc
  1871                           
  1872                           ;Config register IDLOC0 @ 0x200000
  1873                           ;	unspecified, using default values
  1874  200000                     	org	2097152
  1875  200000  FF                 	db	255
  1876                           
  1877                           ;Config register IDLOC1 @ 0x200001
  1878                           ;	unspecified, using default values
  1879  200001                     	org	2097153
  1880  200001  FF                 	db	255
  1881                           
  1882                           ;Config register IDLOC2 @ 0x200002
  1883                           ;	unspecified, using default values
  1884  200002                     	org	2097154
  1885  200002  FF                 	db	255
  1886                           
  1887                           ;Config register IDLOC3 @ 0x200003
  1888                           ;	unspecified, using default values
  1889  200003                     	org	2097155
  1890  200003  FF                 	db	255
  1891                           
  1892                           ;Config register IDLOC4 @ 0x200004
  1893                           ;	unspecified, using default values
  1894  200004                     	org	2097156
  1895  200004  FF                 	db	255
  1896                           
  1897                           ;Config register IDLOC5 @ 0x200005
  1898                           ;	unspecified, using default values
  1899  200005                     	org	2097157
  1900  200005  FF                 	db	255
  1901                           
  1902                           ;Config register IDLOC6 @ 0x200006
  1903                           ;	unspecified, using default values
  1904  200006                     	org	2097158
  1905  200006  FF                 	db	255
  1906                           
  1907                           ;Config register IDLOC7 @ 0x200007
  1908                           ;	unspecified, using default values
  1909  200007                     	org	2097159
  1910  200007  FF                 	db	255
  1911                           
  1912                           	psect	config
  1913                           
  1914                           ;Config register CONFIG1L @ 0x300000
  1915                           ;	PLL Prescaler Selection bits
  1916                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1917                           ;	System Clock Postscaler Selection bits
  1918                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1919                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1920                           ;	USBDIV = 0x0, unprogrammed default
  1921  300000                     	org	3145728
  1922  300000  00                 	db	0
  1923                           
  1924                           ;Config register CONFIG1H @ 0x300001
  1925                           ;	Oscillator Selection bits
  1926                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1927                           ;	Fail-Safe Clock Monitor Enable bit
  1928                           ;	FCMEN = 0x0, unprogrammed default
  1929                           ;	Internal/External Oscillator Switchover bit
  1930                           ;	IESO = 0x0, unprogrammed default
  1931  300001                     	org	3145729
  1932  300001  02                 	db	2
  1933                           
  1934                           ;Config register CONFIG2L @ 0x300002
  1935                           ;	Power-up Timer Enable bit
  1936                           ;	PWRT = ON, PWRT enabled
  1937                           ;	Brown-out Reset Enable bits
  1938                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1939                           ;	Brown-out Reset Voltage bits
  1940                           ;	BORV = 0x3, unprogrammed default
  1941                           ;	USB Voltage Regulator Enable bit
  1942                           ;	VREGEN = 0x0, unprogrammed default
  1943  300002                     	org	3145730
  1944  300002  18                 	db	24
  1945                           
  1946                           ;Config register CONFIG2H @ 0x300003
  1947                           ;	Watchdog Timer Enable bit
  1948                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1949                           ;	Watchdog Timer Postscale Select bits
  1950                           ;	WDTPS = 0xF, unprogrammed default
  1951  300003                     	org	3145731
  1952  300003  1E                 	db	30
  1953                           
  1954                           ; Padding undefined space
  1955  300004                     	org	3145732
  1956  300004  FF                 	db	255
  1957                           
  1958                           ;Config register CONFIG3H @ 0x300005
  1959                           ;	CCP2 MUX bit
  1960                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1961                           ;	PORTB A/D Enable bit
  1962                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1963                           ;	Low-Power Timer 1 Oscillator Enable bit
  1964                           ;	LPT1OSC = 0x0, unprogrammed default
  1965                           ;	MCLR Pin Enable bit
  1966                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1967  300005                     	org	3145733
  1968  300005  81                 	db	129
  1969                           
  1970                           ;Config register CONFIG4L @ 0x300006
  1971                           ;	Stack Full/Underflow Reset Enable bit
  1972                           ;	STVREN = 0x1, unprogrammed default
  1973                           ;	Single-Supply ICSP Enable bit
  1974                           ;	LVP = OFF, Single-Supply ICSP disabled
  1975                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1976                           ;	ICPRT = 0x0, unprogrammed default
  1977                           ;	Extended Instruction Set Enable bit
  1978                           ;	XINST = 0x0, unprogrammed default
  1979                           ;	Background Debugger Enable bit
  1980                           ;	DEBUG = 0x1, unprogrammed default
  1981  300006                     	org	3145734
  1982  300006  81                 	db	129
  1983                           
  1984                           ; Padding undefined space
  1985  300007                     	org	3145735
  1986  300007  FF                 	db	255
  1987                           
  1988                           ;Config register CONFIG5L @ 0x300008
  1989                           ;	unspecified, using default values
  1990                           ;	Code Protection bit
  1991                           ;	CP0 = 0x1, unprogrammed default
  1992                           ;	Code Protection bit
  1993                           ;	CP1 = 0x1, unprogrammed default
  1994                           ;	Code Protection bit
  1995                           ;	CP2 = 0x1, unprogrammed default
  1996                           ;	Code Protection bit
  1997                           ;	CP3 = 0x1, unprogrammed default
  1998  300008                     	org	3145736
  1999  300008  0F                 	db	15
  2000                           
  2001                           ;Config register CONFIG5H @ 0x300009
  2002                           ;	unspecified, using default values
  2003                           ;	Boot Block Code Protection bit
  2004                           ;	CPB = 0x1, unprogrammed default
  2005                           ;	Data EEPROM Code Protection bit
  2006                           ;	CPD = 0x1, unprogrammed default
  2007  300009                     	org	3145737
  2008  300009  C0                 	db	192
  2009                           
  2010                           ;Config register CONFIG6L @ 0x30000A
  2011                           ;	unspecified, using default values
  2012                           ;	Write Protection bit
  2013                           ;	WRT0 = 0x1, unprogrammed default
  2014                           ;	Write Protection bit
  2015                           ;	WRT1 = 0x1, unprogrammed default
  2016                           ;	Write Protection bit
  2017                           ;	WRT2 = 0x1, unprogrammed default
  2018                           ;	Write Protection bit
  2019                           ;	WRT3 = 0x1, unprogrammed default
  2020  30000A                     	org	3145738
  2021  30000A  0F                 	db	15
  2022                           
  2023                           ;Config register CONFIG6H @ 0x30000B
  2024                           ;	unspecified, using default values
  2025                           ;	Configuration Register Write Protection bit
  2026                           ;	WRTC = 0x1, unprogrammed default
  2027                           ;	Boot Block Write Protection bit
  2028                           ;	WRTB = 0x1, unprogrammed default
  2029                           ;	Data EEPROM Write Protection bit
  2030                           ;	WRTD = 0x1, unprogrammed default
  2031  30000B                     	org	3145739
  2032  30000B  E0                 	db	224
  2033                           
  2034                           ;Config register CONFIG7L @ 0x30000C
  2035                           ;	unspecified, using default values
  2036                           ;	Table Read Protection bit
  2037                           ;	EBTR0 = 0x1, unprogrammed default
  2038                           ;	Table Read Protection bit
  2039                           ;	EBTR1 = 0x1, unprogrammed default
  2040                           ;	Table Read Protection bit
  2041                           ;	EBTR2 = 0x1, unprogrammed default
  2042                           ;	Table Read Protection bit
  2043                           ;	EBTR3 = 0x1, unprogrammed default
  2044  30000C                     	org	3145740
  2045  30000C  0F                 	db	15
  2046                           
  2047                           ;Config register CONFIG7H @ 0x30000D
  2048                           ;	unspecified, using default values
  2049                           ;	Boot Block Table Read Protection bit
  2050                           ;	EBTRB = 0x1, unprogrammed default
  2051  30000D                     	org	3145741
  2052  30000D  40                 	db	64
  2053                           tosu	equ	0xFFF
  2054                           tosh	equ	0xFFE
  2055                           tosl	equ	0xFFD
  2056                           stkptr	equ	0xFFC
  2057                           pclatu	equ	0xFFB
  2058                           pclath	equ	0xFFA
  2059                           pcl	equ	0xFF9
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           prodh	equ	0xFF4
  2065                           prodl	equ	0xFF3
  2066                           indf0	equ	0xFEF
  2067                           postinc0	equ	0xFEE
  2068                           postdec0	equ	0xFED
  2069                           preinc0	equ	0xFEC
  2070                           plusw0	equ	0xFEB
  2071                           fsr0h	equ	0xFEA
  2072                           fsr0l	equ	0xFE9
  2073                           wreg	equ	0xFE8
  2074                           indf1	equ	0xFE7
  2075                           postinc1	equ	0xFE6
  2076                           postdec1	equ	0xFE5
  2077                           preinc1	equ	0xFE4
  2078                           plusw1	equ	0xFE3
  2079                           fsr1h	equ	0xFE2
  2080                           fsr1l	equ	0xFE1
  2081                           bsr	equ	0xFE0
  2082                           indf2	equ	0xFDF
  2083                           postinc2	equ	0xFDE
  2084                           postdec2	equ	0xFDD
  2085                           preinc2	equ	0xFDC
  2086                           plusw2	equ	0xFDB
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8

Data Sizes:
    Strings     46
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      34
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_4(CODE[11]), STR_3(CODE[11]), STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_convierte
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _convierte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4326
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                             ___wmul
                          _convierte
                          _init_conf
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _init_conf                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convierte                                            2     0      2    1875
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     770
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     524
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     819
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   ___wmul
   _convierte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _init_conf
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      22       1       35.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      22      20        0.0%
DATA                 0      0      22       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Feb 10 13:08:20 2021

                      l24 0AE8                        l41 0E02                        l52 0CD0  
                      l28 0AE8                        l61 0C92                        l46 0D68  
                      l71 0B94                        l55 0D38                        l64 0DD2  
                      l73 0BCE                        l58 0E0A                        l67 0D04  
                      u10 0BCE                        u11 0BCA                        u20 0D4C  
                      u21 0D48                        u30 0D62                        u31 0D5E  
     ___wmul@multiplicand 0015             ENVIA_CHAR@aux 0015                       l132 0DFA  
                     l141 084A                       l135 0A6E                       l129 0D90  
                     l149 0DB6                       l640 0B54                       l650 0C2A  
                     l900 0D08                       l830 0B68                       l822 0B5E  
                     l910 0D1C                       l902 0D0A                       l647 0B5C  
                     l840 0B80                       l832 0B70                       l824 0B62  
                     l920 0D32                       l912 0D1E                       l904 0D0E  
                     l657 0C32                       l850 0BA2                       l842 0B88  
                     l834 0B74                       l826 0B64                       l914 0D20  
                     l906 0D12                       l922 0E04                       l930 0C4C  
                     l860 0DBA                       l852 0BAC                       l844 0B8A  
                     l836 0B76                       l828 0B66                       l916 0D26  
                     l908 0D1A                       l940 0C7A                       l932 0C60  
                     l924 0C34                       l862 0DC6                       l854 0BB6  
                     l846 0B96                       l838 0B7E                       l918 0D2C  
                     l870 0CD6                       l942 0C80                       l934 0C68  
                     l926 0C38                       l864 0DC8                       l848 0B9E  
                     l880 0CEA                       l872 0CDA                       l944 0C86  
                     l936 0C6E                       l928 0C3E                       l866 0DD0  
                     l858 0BBC                       l882 0CEC                       l874 0CDE  
                     l890 0DFC                       l946 0C8C                       l938 0C74  
                     l884 0CF2                       l876 0CE6                       l868 0CD4  
                     l892 0D3C                       l886 0CF8                       l878 0CE8  
                     l894 0D4C                       l888 0CFE                       l896 0D52  
                     l898 0D62                       u210 0B04                       u211 0B00  
                     u300 0ADC                       u220 0B22                       u301 0AD8  
                     u221 0B1E                       u310 0CD0                       u230 0B3E  
                     u311 0CCC                       u231 0B3A                       u240 0BE2  
                     u320 0858                       u241 0BDE                       u321 0854  
                     u250 0C00                       u251 0BFC                       u260 0C16  
                     u261 0C12                       u270 0A82                       u407 0B78  
                     u271 0A7E                       u280 0AA0                       u417 0B82  
                     u281 0A9C                       u337 0D78                       u290 0ABE  
                     u427 0B98                       u291 0ABA                       u347 0C44  
                     u437 0BA6                       u357 0C52                       u447 0BB0  
                     u367 0C62                       u457 0DCA                       u377 0CE0  
                     u387 0D14                       u397 0B6A               LEER_LCD@aux 0013  
                     wreg 000FE8              ?_CURSOR_HOME 0013            ??_ENVIA_NIBBLE 0013  
          ENVIA_CHAR@dato 0014                      l1010 0D6A                      l1020 0D8A  
                    l1012 0D6E                      l1022 0DEE                      l1014 0D72  
                    l1200 0DAE                      l1016 0D82                      l1018 0D86  
                    l1210 0848                      l1140 0B0C                      l1220 0890  
                    l1212 0858                      l1204 0830                      l1150 0B46  
                    l1142 0B14                      l1134 0AEA                      l1230 08BA  
                    l1222 0898                      l1214 086A                      l1206 0834  
                    l1152 0B48                      l1144 0B22                      l1136 0AF2  
                    l1160 0BEA                      l1240 0900                      l1232 08CA  
                    l1224 08A0                      l1216 0876                      l1208 0838  
                    l1154 0B4E                      l1146 0B28                      l1138 0B04  
                    l1170 0C24                      l1162 0BF2                      l1250 0924  
                    l1242 0908                      l1234 08E6                      l1226 08A8  
                    l1218 0880                      l1180 0AAC                      l1172 0A72  
                    l1148 0B3E                      l1164 0C00                      l1156 0BD0  
                    l1260 096E                      l1252 092E                      l1244 0910  
                    l1236 08F2                      l1228 08B0                      l1190 0CA0  
                    l1182 0ABE                      l1174 0A82                      l1166 0C16  
                    l1158 0BE2                      l1270 0992                      l1262 0974  
                    l1254 093E                      l1246 0918                      l1238 08FA  
                    l1192 0CBC                      l1184 0ACA                      l1176 0A8E  
                    l1168 0C1E                      l1272 0998                      l1264 097C  
                    l1256 095A                      l1248 091E                      l1194 0CBE  
                    l1186 0ADC                      l1178 0AA0                      l1266 0984  
                    l1258 0966                      l1188 0C94                      l1196 09A6  
                    l1268 098C                      l1198 0D92                      STR_1 080D  
                    STR_2 0801                      STR_3 0824                      STR_4 0819  
                    _LATD 000F8C                      _main 0830                      prodh 000FF4  
                    prodl 000FF3                      start 0000             ?_CURSOR_ONOFF 0013  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0014          __end_of_LEER_LCD 0BD0  
     __size_of_BORRAR_LCD 0008                     ?_main 0013           __end_of___lwdiv 0B5E  
         __end_of___lwmod 0C34                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034                     _res_v 0003  
             ?_POS_CURSOR 0016                     tablat 000FF5                     status 000FD8  
          ??_CURSOR_ONOFF 0016           __initialization 0DD4              __end_of_main 09A6  
         _ESCRIBE_MENSAJE 0C94                    ??_main 0021             __activetblptr 000001  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3          __end_of_lcd_init 0D92  
                  ___wmul 0D92                    _decena 000B      __end_of_ENVIA_NIBBLE 0DD4  
               ??___lwdiv 001C                 ??___lwmod 0017                    _cuenta 0007  
     __size_of_POS_CURSOR 007A                    _millar 000F                    clear_0 0DDA  
                  _unidad 0009              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0016  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0013                __accesstop 0060  
 __end_of__initialization 0DE0              ??_LCD_CONFIG 0016             ___rparam_used 000001  
            ??_ENVIA_CHAR 0014   __end_of_ESCRIBE_MENSAJE 0CD2            __pcstackCOMRAM 0013  
      __end_of_BORRAR_LCD 0E0C          ENVIA_LCD_CMD@aux 0015      __end_of_CURSOR_ONOFF 0D6A  
      __end_of_LCD_CONFIG 0C94        __end_of_ENVIA_CHAR 0D3A        __size_of_convierte 00CA  
              ??_LEER_LCD 0013          ENVIA_NIBBLE@dato 0013        __size_of_init_conf 000E  
                 ?___wmul 0013              ??_POS_CURSOR 0017                 ?_lcd_init 0013  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0016           __size_of___wmul 0026                   ___lwdiv 0AEA  
                 ___lwmod 0BD0              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0D06  
       __end_of_convierte 0A70                   __pcinit 0DD4        __end_of_POS_CURSOR 0AEA  
                 __ramtop 0800                   _centena 000D                   __ptext0 0830  
                 __ptext1 0D6A                   __ptext2 0C34                   __ptext3 0D3A  
                 __ptext4 0DFC                   __ptext5 0E04                   __ptext6 0DEE  
                 __ptext7 09A6                   __ptext8 0BD0                   __ptext9 0AEA  
       __end_of_init_conf 0DFC                   _res_ohm 0001                ??_lcd_init 0017  
            _ENVIA_NIBBLE 0DB8      end_of_initialization 0DE0                   postinc0 000FEE  
   __size_of_CURSOR_ONOFF 0030         __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0D3A  
      CURSOR_ONOFF@estado 0016            __end_of___wmul 0DB8             ??_CURSOR_HOME 0016  
     start_initialization 0DD4         ENVIA_LCD_CMD@dato 0014                  ??___wmul 0017  
             __pbssCOMRAM 0001       __end_of_CURSOR_HOME 0E04         __size_of_lcd_init 0028  
        ___lwdiv@dividend 0018                  ?___lwdiv 0018                  ?___lwmod 0013  
             __smallconst 0800                 _convierte 09A6           convierte@numero 001F  
        ___lwdiv@quotient 001C                 _init_conf 0DEE                  _LEER_LCD 0B5E  
          ___wmul@product 0017                  _LATDbits 000F8C                 _resultado 0005  
        ESCRIBE_MENSAJE@i 001B            POS_CURSOR@fila 0017  __size_of_ESCRIBE_MENSAJE 003E  
              _ADCON0bits 000FC2         ___wmul@multiplier 0013                ?_convierte 001F  
             _CURSOR_HOME 0DFC                ?_init_conf 0013    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___lwdiv 0074          __size_of___lwmod 0064                  _d_millar 0011  
         ___lwdiv@divisor 001A           ___lwdiv@counter 001E                  __ptext10 0D92  
                __ptext11 0A70                  __ptext12 0CD2                  __ptext13 0C94  
                __ptext14 0D06                  __ptext15 0B5E                  __ptext16 0DB8  
              _BORRAR_LCD 0E04                  _lcd_init 0D6A             __size_of_main 0176  
              _LCD_CONFIG 0C34                _ENVIA_CHAR 0D06             _ENVIA_LCD_CMD 0CD2  
             ??_convierte 0021         ??_ESCRIBE_MENSAJE 0019               ??_init_conf 0013  
   ESCRIBE_MENSAJE@cadena 0016          ___lwmod@dividend 0013            ?_ENVIA_LCD_CMD 0013  
         ___lwmod@divisor 0015           ___lwmod@counter 0017               ?_BORRAR_LCD 0013  
           ?_ENVIA_NIBBLE 0013                _POS_CURSOR 0A70               ?_LCD_CONFIG 0013  
      ESCRIBE_MENSAJE@tam 0018               ?_ENVIA_CHAR 0013         POS_CURSOR@columna 0016  
