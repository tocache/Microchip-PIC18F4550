

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Oct 14 15:34:21 2021

Microchip MPLAB XC8 C Compiler v2.32 (Pro license) build 20210201212658 Og9s 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29                           	psect	pa_nodes0,global,class=CODE,delta=1
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADCON0bits	set	4034
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _ADCON2	set	4032
    71  0000                     _PORTD	set	3971
    72  0000                     _LATD	set	3980
    73  0000                     _TRISD	set	3989
    74  0000                     _LATDbits	set	3980
    75                           
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	callstack 0
    79  000800  00                 	db	0
    80  000801                     STR_1:
    81  000801  4C                 	db	76	;'L'
    82  000802  65                 	db	101	;'e'
    83  000803  63                 	db	99	;'c'
    84  000804  74                 	db	116	;'t'
    85  000805  75                 	db	117	;'u'
    86  000806  72                 	db	114	;'r'
    87  000807  61                 	db	97	;'a'
    88  000808  20                 	db	32
    89  000809  41                 	db	65	;'A'
    90  00080A  44                 	db	68	;'D'
    91  00080B  43                 	db	67	;'C'
    92  00080C  3A                 	db	58	;':'
    93  00080D  00                 	db	0
    94  00080E                     STR_2:
    95  00080E  43                 	db	67	;'C'
    96  00080F  61                 	db	97	;'a'
    97  000810  6E                 	db	110	;'n'
    98  000811  61                 	db	97	;'a'
    99  000812  6C                 	db	108	;'l'
   100  000813  20                 	db	32
   101  000814  41                 	db	65	;'A'
   102  000815  4E                 	db	78	;'N'
   103  000816  30                 	db	48	;'0'
   104  000817  3A                 	db	58	;':'
   105  000818  00                 	db	0
   106  000819  00                 	db	0	; dummy byte at the end
   107  0000                     
   108                           ; #config settings
   109                           
   110                           	psect	cinit
   111  000B3A                     __pcinit:
   112                           	callstack 0
   113  000B3A                     start_initialization:
   114                           	callstack 0
   115  000B3A                     __initialization:
   116                           	callstack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (10 bytes)
   119  000B3A  EE00  F011         	lfsr	0,__pbssCOMRAM
   120  000B3E  0E0A               	movlw	10
   121  000B40                     clear_0:
   122  000B40  6AEE               	clrf	postinc0,c
   123  000B42  06E8               	decf	wreg,f,c
   124  000B44  E1FD               	bnz	clear_0
   125  000B46                     end_of_initialization:
   126                           	callstack 0
   127  000B46                     __end_of__initialization:
   128                           	callstack 0
   129  000B46  0E00               	movlw	low (__Lsmallconst shr (0+16))
   130  000B48  6EF8               	movwf	tblptru,c
   131  000B4A  0E08               	movlw	high __Lsmallconst
   132  000B4C  6EF7               	movwf	tblptrh,c
   133  000B4E  0100               	movlb	0
   134  000B50  EF50  F004         	goto	_main	;jump to C main() function
   135                           
   136                           	psect	bssCOMRAM
   137  000011                     __pbssCOMRAM:
   138                           	callstack 0
   139  000011                     _d_unidad:
   140                           	callstack 0
   141  000011                     	ds	2
   142  000013                     _d_decena:
   143                           	callstack 0
   144  000013                     	ds	2
   145  000015                     _d_centena:
   146                           	callstack 0
   147  000015                     	ds	2
   148  000017                     _d_millar:
   149                           	callstack 0
   150  000017                     	ds	2
   151  000019                     _res_ad:
   152                           	callstack 0
   153  000019                     	ds	2
   154                           
   155                           	psect	cstackCOMRAM
   156  000001                     __pcstackCOMRAM:
   157                           	callstack 0
   158  000001                     ?___lwmod:
   159                           	callstack 0
   160  000001                     ENVIA_NIBBLE@dato:
   161                           	callstack 0
   162  000001                     LEER_LCD@aux:
   163                           	callstack 0
   164  000001                     ___lwmod@dividend:
   165                           	callstack 0
   166                           
   167                           ; 2 bytes @ 0x0
   168  000001                     	ds	1
   169  000002                     ENVIA_CHAR@dato:
   170                           	callstack 0
   171  000002                     ENVIA_LCD_CMD@dato:
   172                           	callstack 0
   173                           
   174                           ; 1 bytes @ 0x1
   175  000002                     	ds	1
   176  000003                     ENVIA_CHAR@aux:
   177                           	callstack 0
   178  000003                     ENVIA_LCD_CMD@aux:
   179                           	callstack 0
   180  000003                     ___lwmod@divisor:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x2
   184  000003                     	ds	1
   185  000004                     ??_LCD_CONFIG:
   186  000004                     POS_CURSOR@columna:
   187                           	callstack 0
   188  000004                     CURSOR_ONOFF@estado:
   189                           	callstack 0
   190  000004                     ESCRIBE_MENSAJE@cadena:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x3
   194  000004                     	ds	1
   195  000005                     ??_lcd_init:
   196  000005                     POS_CURSOR@fila:
   197                           	callstack 0
   198  000005                     ESCRIBE_MENSAJE@tam:
   199                           	callstack 0
   200  000005                     ___lwmod@counter:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x4
   204  000005                     	ds	1
   205  000006                     ??_ESCRIBE_MENSAJE:
   206  000006                     ?___lwdiv:
   207                           	callstack 0
   208  000006                     ___lwdiv@dividend:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x5
   212  000006                     	ds	1
   213  000007                     ESCRIBE_MENSAJE@i:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x6
   217  000007                     	ds	1
   218  000008                     ___lwdiv@divisor:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x7
   222  000008                     	ds	2
   223  00000A                     ___lwdiv@quotient:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x9
   227  00000A                     	ds	2
   228  00000C                     ___lwdiv@counter:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0xB
   232  00000C                     	ds	1
   233  00000D                     digbyte@dato:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0xC
   237  00000D                     	ds	2
   238  00000F                     ??_main:
   239                           
   240                           ; 1 bytes @ 0xE
   241  00000F                     	ds	2
   242                           
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 35 in file "maincode4.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : 0/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   262 ;;      Params:         0       0       0       0       0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0       0       0       0       0
   264 ;;      Temps:          2       0       0       0       0       0       0       0       0
   265 ;;      Totals:         2       0       0       0       0       0       0       0       0
   266 ;;Total ram usage:        2 bytes
   267 ;; Hardware stack levels required when called: 4
   268 ;; This function calls:
   269 ;;		_ENVIA_CHAR
   270 ;;		_ESCRIBE_MENSAJE
   271 ;;		_POS_CURSOR
   272 ;;		_configuracion
   273 ;;		_digbyte
   274 ;;		_lcd_init
   275 ;; This function is called by:
   276 ;;		Startup code after reset
   277 ;; This function uses a non-reentrant model
   278 ;;
   279                           
   280                           	psect	text0
   281  0008A0                     __ptext0:
   282                           	callstack 0
   283  0008A0                     _main:
   284                           	callstack 27
   285                           
   286                           ;maincode4.c: 36:     configuracion();
   287                           
   288                           ;incstack = 0
   289  0008A0  ECB6  F005         	call	_configuracion	;wreg free
   290                           
   291                           ;maincode4.c: 37:     lcd_init();
   292  0008A4  EC5D  F005         	call	_lcd_init	;wreg free
   293                           
   294                           ;maincode4.c: 38:     POS_CURSOR(1,0);
   295  0008A8  6A04               	clrf	POS_CURSOR@columna^0,c
   296  0008AA  0E01               	movlw	1
   297  0008AC  EC80  F005         	call	_POS_CURSOR
   298                           
   299                           ;maincode4.c: 39:     ESCRIBE_MENSAJE("Lectura ADC:", 12);
   300  0008B0  0E01               	movlw	low STR_1
   301  0008B2  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   302  0008B4  0E0C               	movlw	12
   303  0008B6  6E05               	movwf	ESCRIBE_MENSAJE@tam^0,c
   304  0008B8  EC6F  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   305  0008BC                     l1096:
   306                           
   307                           ;maincode4.c: 41:         ADCON0bits.GODONE = 1;
   308  0008BC  82C2               	bsf	194,1,c	;volatile
   309  0008BE                     l129:
   310  0008BE  B2C2               	btfsc	194,1,c	;volatile
   311  0008C0  D7FE               	goto	l129
   312                           
   313                           ;maincode4.c: 43:         res_ad = (ADRESH << 8) + ADRESL;
   314  0008C2  50C4               	movf	196,w,c	;volatile
   315  0008C4  6E10               	movwf	(??_main+1)^0,c
   316  0008C6  6A0F               	clrf	??_main^0,c
   317  0008C8  50C3               	movf	195,w,c	;volatile
   318  0008CA  240F               	addwf	??_main^0,w,c
   319  0008CC  6E19               	movwf	_res_ad^0,c
   320  0008CE  0E00               	movlw	0
   321  0008D0  2010               	addwfc	(??_main+1)^0,w,c
   322  0008D2  6E1A               	movwf	(_res_ad+1)^0,c
   323                           
   324                           ;maincode4.c: 44:         POS_CURSOR(2,0);
   325  0008D4  6A04               	clrf	POS_CURSOR@columna^0,c
   326  0008D6  0E02               	movlw	2
   327  0008D8  EC80  F005         	call	_POS_CURSOR
   328                           
   329                           ;maincode4.c: 45:         ESCRIBE_MENSAJE("Canal AN0:",10);
   330  0008DC  0E0E               	movlw	low STR_2
   331  0008DE  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   332  0008E0  0E0A               	movlw	10
   333  0008E2  6E05               	movwf	ESCRIBE_MENSAJE@tam^0,c
   334  0008E4  EC6F  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   335                           
   336                           ;maincode4.c: 46:         digbyte(res_ad);
   337  0008E8  C019  F00D         	movff	_res_ad,digbyte@dato
   338  0008EC  C01A  F00E         	movff	_res_ad+1,digbyte@dato+1
   339  0008F0  EC0D  F004         	call	_digbyte	;wreg free
   340                           
   341                           ;maincode4.c: 47:         ENVIA_CHAR(d_millar+0x30);
   342  0008F4  5017               	movf	_d_millar^0,w,c
   343  0008F6  0F30               	addlw	48
   344  0008F8  EC45  F005         	call	_ENVIA_CHAR
   345                           
   346                           ;maincode4.c: 48:         ENVIA_CHAR(d_centena+0x30);
   347  0008FC  5015               	movf	_d_centena^0,w,c
   348  0008FE  0F30               	addlw	48
   349  000900  EC45  F005         	call	_ENVIA_CHAR
   350                           
   351                           ;maincode4.c: 49:         ENVIA_CHAR(d_decena+0x30);
   352  000904  5013               	movf	_d_decena^0,w,c
   353  000906  0F30               	addlw	48
   354  000908  EC45  F005         	call	_ENVIA_CHAR
   355                           
   356                           ;maincode4.c: 50:         ENVIA_CHAR(d_unidad+0x30);
   357  00090C  5011               	movf	_d_unidad^0,w,c
   358  00090E  0F30               	addlw	48
   359  000910  EC45  F005         	call	_ENVIA_CHAR
   360  000914  D7D3               	goto	l1096
   361  000916                     __end_of_main:
   362                           	callstack 0
   363                           
   364 ;; *************** function _lcd_init *****************
   365 ;; Defined at:
   366 ;;		line 19 in file "maincode4.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2, status,0, cstack
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   380 ;;      Params:         0       0       0       0       0       0       0       0       0
   381 ;;      Locals:         0       0       0       0       0       0       0       0       0
   382 ;;      Temps:          1       0       0       0       0       0       0       0       0
   383 ;;      Totals:         1       0       0       0       0       0       0       0       0
   384 ;;Total ram usage:        1 bytes
   385 ;; Hardware stack levels used: 1
   386 ;; Hardware stack levels required when called: 3
   387 ;; This function calls:
   388 ;;		_BORRAR_LCD
   389 ;;		_CURSOR_HOME
   390 ;;		_CURSOR_ONOFF
   391 ;;		_LCD_CONFIG
   392 ;; This function is called by:
   393 ;;		_main
   394 ;; This function uses a non-reentrant model
   395 ;;
   396                           
   397                           	psect	text1
   398  000ABA                     __ptext1:
   399                           	callstack 0
   400  000ABA                     _lcd_init:
   401                           	callstack 27
   402                           
   403                           ;maincode4.c: 20:     TRISD = 0X00;
   404                           
   405                           ;incstack = 0
   406  000ABA  6A95               	clrf	149,c	;volatile
   407                           
   408                           ;maincode4.c: 21:     LCD_CONFIG();
   409  000ABC  EC8B  F004         	call	_LCD_CONFIG	;wreg free
   410                           
   411                           ;maincode4.c: 22:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   412  000AC0  0EEA               	movlw	234
   413  000AC2  6E05               	movwf	??_lcd_init^0,c
   414  000AC4  0EC3               	movlw	195
   415  000AC6                     u247:
   416  000AC6  2EE8               	decfsz	wreg,f,c
   417  000AC8  D7FE               	bra	u247
   418  000ACA  2E05               	decfsz	??_lcd_init^0,f,c
   419  000ACC  D7FC               	bra	u247
   420  000ACE  F000               	nop	
   421                           
   422                           ;maincode4.c: 23:     BORRAR_LCD();
   423  000AD0  ECC0  F005         	call	_BORRAR_LCD	;wreg free
   424                           
   425                           ;maincode4.c: 24:     CURSOR_HOME();
   426  000AD4  ECBD  F005         	call	_CURSOR_HOME	;wreg free
   427                           
   428                           ;maincode4.c: 25:     CURSOR_ONOFF(1);
   429  000AD8  0E01               	movlw	1
   430  000ADA  EFAA  F005         	goto	_CURSOR_ONOFF
   431  000ADE                     __end_of_lcd_init:
   432                           	callstack 0
   433                           
   434 ;; *************** function _LCD_CONFIG *****************
   435 ;; Defined at:
   436 ;;		line 72 in file "LCD.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2, status,0, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   450 ;;      Params:         0       0       0       0       0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0       0       0       0       0
   452 ;;      Temps:          1       0       0       0       0       0       0       0       0
   453 ;;      Totals:         1       0       0       0       0       0       0       0       0
   454 ;;Total ram usage:        1 bytes
   455 ;; Hardware stack levels used: 1
   456 ;; Hardware stack levels required when called: 2
   457 ;; This function calls:
   458 ;;		_ENVIA_LCD_CMD
   459 ;;		_ENVIA_NIBBLE
   460 ;; This function is called by:
   461 ;;		_lcd_init
   462 ;; This function uses a non-reentrant model
   463 ;;
   464                           
   465                           	psect	text2
   466  000916                     __ptext2:
   467                           	callstack 0
   468  000916                     _LCD_CONFIG:
   469                           	callstack 27
   470                           
   471                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   472                           
   473                           ;incstack = 0
   474  000916  908C               	bcf	140,0,c	;volatile
   475                           
   476                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   477  000918  928C               	bcf	140,1,c	;volatile
   478                           
   479                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   480  00091A  0E30               	movlw	48
   481  00091C  EC8F  F005         	call	_ENVIA_NIBBLE
   482                           
   483                           ;LCD.c: 77:         _delay(24000);
   484  000920  0E20               	movlw	32
   485  000922  6E04               	movwf	??_LCD_CONFIG^0,c
   486  000924  0E2A               	movlw	42
   487  000926                     u257:
   488  000926  2EE8               	decfsz	wreg,f,c
   489  000928  D7FE               	bra	u257
   490  00092A  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   491  00092C  D7FC               	bra	u257
   492                           
   493                           ;LCD.c: 78:         _delay(24000);
   494  00092E  0E20               	movlw	32
   495  000930  6E04               	movwf	??_LCD_CONFIG^0,c
   496  000932  0E2A               	movlw	42
   497  000934                     u267:
   498  000934  2EE8               	decfsz	wreg,f,c
   499  000936  D7FE               	bra	u267
   500  000938  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   501  00093A  D7FC               	bra	u267
   502                           
   503                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   504  00093C  0E30               	movlw	48
   505  00093E  EC8F  F005         	call	_ENVIA_NIBBLE
   506                           
   507                           ;LCD.c: 83:  _delay(1200);
   508  000942  0EF0               	movlw	240
   509  000944                     u277:
   510  000944  D000               	nop2	
   511  000946  2EE8               	decfsz	wreg,f,c
   512  000948  D7FD               	bra	u277
   513                           
   514                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   515  00094A  0E30               	movlw	48
   516  00094C  EC8F  F005         	call	_ENVIA_NIBBLE
   517                           
   518                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   519  000950  0E20               	movlw	32
   520  000952  EC8F  F005         	call	_ENVIA_NIBBLE
   521                           
   522                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   523  000956  0E01               	movlw	1
   524  000958  EC2D  F005         	call	_ENVIA_LCD_CMD
   525                           
   526                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   527  00095C  0E28               	movlw	40
   528  00095E  EC2D  F005         	call	_ENVIA_LCD_CMD
   529                           
   530                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   531  000962  0E0F               	movlw	15
   532  000964  EC2D  F005         	call	_ENVIA_LCD_CMD
   533                           
   534                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   535  000968  0E06               	movlw	6
   536  00096A  EC2D  F005         	call	_ENVIA_LCD_CMD
   537                           
   538                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   539  00096E  0E01               	movlw	1
   540  000970  EF2D  F005         	goto	_ENVIA_LCD_CMD
   541  000974                     __end_of_LCD_CONFIG:
   542                           	callstack 0
   543                           
   544 ;; *************** function _CURSOR_ONOFF *****************
   545 ;; Defined at:
   546 ;;		line 35 in file "LCD.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  estado          1    wreg     unsigned char 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  estado          1    3[COMRAM] unsigned char 
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, status,2, status,0, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   560 ;;      Params:         0       0       0       0       0       0       0       0       0
   561 ;;      Locals:         1       0       0       0       0       0       0       0       0
   562 ;;      Temps:          0       0       0       0       0       0       0       0       0
   563 ;;      Totals:         1       0       0       0       0       0       0       0       0
   564 ;;Total ram usage:        1 bytes
   565 ;; Hardware stack levels used: 1
   566 ;; Hardware stack levels required when called: 2
   567 ;; This function calls:
   568 ;;		_ENVIA_LCD_CMD
   569 ;; This function is called by:
   570 ;;		_lcd_init
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text3
   575  000B54                     __ptext3:
   576                           	callstack 0
   577  000B54                     _CURSOR_ONOFF:
   578                           	callstack 27
   579                           
   580                           ;incstack = 0
   581                           ;CURSOR_ONOFF@estado stored from wreg
   582  000B54  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   583                           
   584                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   585  000B56  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   586  000B58  E103               	bnz	l884
   587  000B5A  0E0E               	movlw	14
   588  000B5C  EC2D  F005         	call	_ENVIA_LCD_CMD
   589  000B60                     l884:
   590                           
   591                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   592  000B60  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   593  000B62  A4D8               	btfss	status,2,c
   594  000B64  0012               	return	
   595  000B66  0E0C               	movlw	12
   596  000B68  EF2D  F005         	goto	_ENVIA_LCD_CMD
   597  000B6C                     __end_of_CURSOR_ONOFF:
   598                           	callstack 0
   599                           
   600 ;; *************** function _CURSOR_HOME *****************
   601 ;; Defined at:
   602 ;;		line 30 in file "LCD.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;		None
   605 ;; Auto vars:     Size  Location     Type
   606 ;;		None
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg, status,2, status,0, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   616 ;;      Params:         0       0       0       0       0       0       0       0       0
   617 ;;      Locals:         0       0       0       0       0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0
   619 ;;      Totals:         0       0       0       0       0       0       0       0       0
   620 ;;Total ram usage:        0 bytes
   621 ;; Hardware stack levels used: 1
   622 ;; Hardware stack levels required when called: 2
   623 ;; This function calls:
   624 ;;		_ENVIA_LCD_CMD
   625 ;; This function is called by:
   626 ;;		_lcd_init
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text4
   631  000B7A                     __ptext4:
   632                           	callstack 0
   633  000B7A                     _CURSOR_HOME:
   634                           	callstack 27
   635                           
   636                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   637                           
   638                           ;incstack = 0
   639  000B7A  0E02               	movlw	2
   640  000B7C  EF2D  F005         	goto	_ENVIA_LCD_CMD
   641  000B80                     __end_of_CURSOR_HOME:
   642                           	callstack 0
   643                           
   644 ;; *************** function _BORRAR_LCD *****************
   645 ;; Defined at:
   646 ;;		line 67 in file "LCD.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;		None
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   660 ;;      Params:         0       0       0       0       0       0       0       0       0
   661 ;;      Locals:         0       0       0       0       0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0       0       0
   663 ;;      Totals:         0       0       0       0       0       0       0       0       0
   664 ;;Total ram usage:        0 bytes
   665 ;; Hardware stack levels used: 1
   666 ;; Hardware stack levels required when called: 2
   667 ;; This function calls:
   668 ;;		_ENVIA_LCD_CMD
   669 ;; This function is called by:
   670 ;;		_lcd_init
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text5
   675  000B80                     __ptext5:
   676                           	callstack 0
   677  000B80                     _BORRAR_LCD:
   678                           	callstack 27
   679                           
   680                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   681                           
   682                           ;incstack = 0
   683  000B80  0E01               	movlw	1
   684  000B82  EF2D  F005         	goto	_ENVIA_LCD_CMD
   685  000B86                     __end_of_BORRAR_LCD:
   686                           	callstack 0
   687                           
   688 ;; *************** function _digbyte *****************
   689 ;; Defined at:
   690 ;;		line 28 in file "maincode4.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  dato            2   12[COMRAM] unsigned int 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   704 ;;      Params:         2       0       0       0       0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0       0       0       0       0
   707 ;;      Totals:         2       0       0       0       0       0       0       0       0
   708 ;;Total ram usage:        2 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; Hardware stack levels required when called: 1
   711 ;; This function calls:
   712 ;;		___lwdiv
   713 ;;		___lwmod
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text6
   720  00081A                     __ptext6:
   721                           	callstack 0
   722  00081A                     _digbyte:
   723                           	callstack 29
   724                           
   725                           ;maincode4.c: 29:     d_millar = dato / 1000;
   726                           
   727                           ;incstack = 0
   728  00081A  C00D  F006         	movff	digbyte@dato,___lwdiv@dividend
   729  00081E  C00E  F007         	movff	digbyte@dato+1,___lwdiv@dividend+1
   730  000822  0E03               	movlw	3
   731  000824  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   732  000826  0EE8               	movlw	232
   733  000828  6E08               	movwf	___lwdiv@divisor^0,c
   734  00082A  ECE9  F004         	call	___lwdiv	;wreg free
   735  00082E  C006  F017         	movff	?___lwdiv,_d_millar
   736  000832  C007  F018         	movff	?___lwdiv+1,_d_millar+1
   737                           
   738                           ;maincode4.c: 30:     d_centena = (dato % 1000) / 100;
   739  000836  0E03               	movlw	3
   740  000838  6E04               	movwf	(___lwmod@divisor+1)^0,c
   741  00083A  0EE8               	movlw	232
   742  00083C  6E03               	movwf	___lwmod@divisor^0,c
   743  00083E  D825               	call	PL2	;call to abstracted procedure
   744  000840  EC0E  F005         	call	___lwmod	;wreg free
   745  000844  D827               	call	PL4	;call to abstracted procedure
   746  000846  0E64               	movlw	100
   747  000848  6E08               	movwf	___lwdiv@divisor^0,c
   748  00084A  ECE9  F004         	call	___lwdiv	;wreg free
   749  00084E  C006  F015         	movff	?___lwdiv,_d_centena
   750  000852  C007  F016         	movff	?___lwdiv+1,_d_centena+1
   751                           
   752                           ;maincode4.c: 31:     d_decena = (dato % 100) / 10;
   753  000856  6A04               	clrf	(___lwmod@divisor+1)^0,c
   754  000858  0E64               	movlw	100
   755  00085A  6E03               	movwf	___lwmod@divisor^0,c
   756  00085C  D816               	call	PL2	;call to abstracted procedure
   757  00085E  EC0E  F005         	call	___lwmod	;wreg free
   758  000862  D818               	call	PL4	;call to abstracted procedure
   759  000864  0E0A               	movlw	10
   760  000866  6E08               	movwf	___lwdiv@divisor^0,c
   761  000868  ECE9  F004         	call	___lwdiv	;wreg free
   762  00086C  C006  F013         	movff	?___lwdiv,_d_decena
   763  000870  C007  F014         	movff	?___lwdiv+1,_d_decena+1
   764                           
   765                           ;maincode4.c: 32:     d_unidad = dato % 10;
   766  000874  D80A               	call	PL2	;call to abstracted procedure
   767  000876  6A04               	clrf	(___lwmod@divisor+1)^0,c
   768  000878  0E0A               	movlw	10
   769  00087A  6E03               	movwf	___lwmod@divisor^0,c
   770  00087C  EC0E  F005         	call	___lwmod	;wreg free
   771  000880  C001  F011         	movff	?___lwmod,_d_unidad
   772  000884  C002  F012         	movff	?___lwmod+1,_d_unidad+1
   773  000888  0012               	return		;funcret
   774  00088A                     __end_of_digbyte:
   775                           	callstack 0
   776  00088A                     PL2:
   777                           	callstack 29
   778  00088A  C00D  F001         	movff	digbyte@dato,___lwmod@dividend
   779  00088E  C00E  F002         	movff	digbyte@dato+1,___lwmod@dividend+1
   780  000892  0012               	return	
   781  000894                     __end_ofPL2:
   782                           	callstack 0
   783  000894                     PL4:
   784                           	callstack 29
   785  000894  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   786  000898  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   787  00089C  6A09               	clrf	(___lwdiv@divisor+1)^0,c
   788  00089E  0012               	return	
   789  0008A0                     __end_ofPL4:
   790                           	callstack 0
   791                           
   792 ;; *************** function ___lwmod *****************
   793 ;; Defined at:
   794 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  dividend        2    0[COMRAM] unsigned int 
   797 ;;  divisor         2    2[COMRAM] unsigned int 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  counter         1    4[COMRAM] unsigned char 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  2    0[COMRAM] unsigned int 
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   809 ;;      Params:         4       0       0       0       0       0       0       0       0
   810 ;;      Locals:         1       0       0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0
   812 ;;      Totals:         5       0       0       0       0       0       0       0       0
   813 ;;Total ram usage:        5 bytes
   814 ;; Hardware stack levels used: 1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_digbyte
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text7
   823  000A1C                     __ptext7:
   824                           	callstack 0
   825  000A1C                     ___lwmod:
   826                           	callstack 29
   827                           
   828                           ;incstack = 0
   829  000A1C  5003               	movf	___lwmod@divisor^0,w,c
   830  000A1E  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   831  000A20  E017               	bz	l638
   832  000A22  0E01               	movlw	1
   833  000A24  6E05               	movwf	___lwmod@counter^0,c
   834  000A26  D004               	goto	l1060
   835  000A28                     l1058:
   836  000A28  90D8               	bcf	status,0,c
   837  000A2A  3603               	rlcf	___lwmod@divisor^0,f,c
   838  000A2C  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   839  000A2E  2A05               	incf	___lwmod@counter^0,f,c
   840  000A30                     l1060:
   841  000A30  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   842  000A32  D7FA               	goto	l1058
   843  000A34                     u180:
   844  000A34  5003               	movf	___lwmod@divisor^0,w,c
   845  000A36  5C01               	subwf	___lwmod@dividend^0,w,c
   846  000A38  5004               	movf	(___lwmod@divisor+1)^0,w,c
   847  000A3A  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   848  000A3C  E304               	bnc	l1066
   849  000A3E  5003               	movf	___lwmod@divisor^0,w,c
   850  000A40  5E01               	subwf	___lwmod@dividend^0,f,c
   851  000A42  5004               	movf	(___lwmod@divisor+1)^0,w,c
   852  000A44  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   853  000A46                     l1066:
   854  000A46  90D8               	bcf	status,0,c
   855  000A48  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   856  000A4A  3203               	rrcf	___lwmod@divisor^0,f,c
   857  000A4C  2E05               	decfsz	___lwmod@counter^0,f,c
   858  000A4E  D7F2               	goto	u180
   859  000A50                     l638:
   860  000A50  C001  F001         	movff	___lwmod@dividend,?___lwmod
   861  000A54  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   862  000A58  0012               	return		;funcret
   863  000A5A                     __end_of___lwmod:
   864                           	callstack 0
   865                           
   866 ;; *************** function ___lwdiv *****************
   867 ;; Defined at:
   868 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  dividend        2    5[COMRAM] unsigned int 
   871 ;;  divisor         2    7[COMRAM] unsigned int 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  quotient        2    9[COMRAM] unsigned int 
   874 ;;  counter         1   11[COMRAM] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  2    5[COMRAM] unsigned int 
   877 ;; Registers used:
   878 ;;		wreg, status,2, status,0
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   884 ;;      Params:         4       0       0       0       0       0       0       0       0
   885 ;;      Locals:         3       0       0       0       0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0       0       0
   887 ;;      Totals:         7       0       0       0       0       0       0       0       0
   888 ;;Total ram usage:        7 bytes
   889 ;; Hardware stack levels used: 1
   890 ;; This function calls:
   891 ;;		Nothing
   892 ;; This function is called by:
   893 ;;		_digbyte
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text8
   898  0009D2                     __ptext8:
   899                           	callstack 0
   900  0009D2                     ___lwdiv:
   901                           	callstack 29
   902                           
   903                           ;incstack = 0
   904  0009D2  6A0A               	clrf	___lwdiv@quotient^0,c
   905  0009D4  6A0B               	clrf	(___lwdiv@quotient+1)^0,c
   906  0009D6  5008               	movf	___lwdiv@divisor^0,w,c
   907  0009D8  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   908  0009DA  E01B               	bz	l628
   909  0009DC  0E01               	movlw	1
   910  0009DE  6E0C               	movwf	___lwdiv@counter^0,c
   911  0009E0  D004               	goto	l1040
   912  0009E2                     l1038:
   913  0009E2  90D8               	bcf	status,0,c
   914  0009E4  3608               	rlcf	___lwdiv@divisor^0,f,c
   915  0009E6  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   916  0009E8  2A0C               	incf	___lwdiv@counter^0,f,c
   917  0009EA                     l1040:
   918  0009EA  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   919  0009EC  D7FA               	goto	l1038
   920  0009EE                     u150:
   921  0009EE  90D8               	bcf	status,0,c
   922  0009F0  360A               	rlcf	___lwdiv@quotient^0,f,c
   923  0009F2  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   924  0009F4  5008               	movf	___lwdiv@divisor^0,w,c
   925  0009F6  5C06               	subwf	___lwdiv@dividend^0,w,c
   926  0009F8  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   927  0009FA  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   928  0009FC  E305               	bnc	l1050
   929  0009FE  5008               	movf	___lwdiv@divisor^0,w,c
   930  000A00  5E06               	subwf	___lwdiv@dividend^0,f,c
   931  000A02  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   932  000A04  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   933  000A06  800A               	bsf	___lwdiv@quotient^0,0,c
   934  000A08                     l1050:
   935  000A08  90D8               	bcf	status,0,c
   936  000A0A  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   937  000A0C  3208               	rrcf	___lwdiv@divisor^0,f,c
   938  000A0E  2E0C               	decfsz	___lwdiv@counter^0,f,c
   939  000A10  D7EE               	goto	u150
   940  000A12                     l628:
   941  000A12  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   942  000A16  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   943  000A1A  0012               	return		;funcret
   944  000A1C                     __end_of___lwdiv:
   945                           	callstack 0
   946                           
   947 ;; *************** function _configuracion *****************
   948 ;; Defined at:
   949 ;;		line 13 in file "maincode4.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;		None
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, status,2
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   963 ;;      Params:         0       0       0       0       0       0       0       0       0
   964 ;;      Locals:         0       0       0       0       0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0       0       0
   966 ;;      Totals:         0       0       0       0       0       0       0       0       0
   967 ;;Total ram usage:        0 bytes
   968 ;; Hardware stack levels used: 1
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text9
   977  000B6C                     __ptext9:
   978                           	callstack 0
   979  000B6C                     _configuracion:
   980                           	callstack 30
   981                           
   982                           ;maincode4.c: 14:     ADCON2 = 0xA4;
   983                           
   984                           ;incstack = 0
   985  000B6C  0EA4               	movlw	164
   986  000B6E  6EC0               	movwf	192,c	;volatile
   987                           
   988                           ;maincode4.c: 15:     ADCON1 = 0x0E;
   989  000B70  0E0E               	movlw	14
   990  000B72  6EC1               	movwf	193,c	;volatile
   991                           
   992                           ;maincode4.c: 16:     ADCON0 = 0x01;
   993  000B74  0E01               	movlw	1
   994  000B76  6EC2               	movwf	194,c	;volatile
   995  000B78  0C01               	retlw	1	;funcret
   996  000B7A                     __end_of_configuracion:
   997                           	callstack 0
   998                           
   999 ;; *************** function _POS_CURSOR *****************
  1000 ;; Defined at:
  1001 ;;		line 6 in file "LCD.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  fila            1    wreg     unsigned char 
  1004 ;;  columna         1    3[COMRAM] unsigned char 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  fila            1    4[COMRAM] unsigned char 
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2, status,0, cstack
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1016 ;;      Params:         1       0       0       0       0       0       0       0       0
  1017 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1019 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1020 ;;Total ram usage:        2 bytes
  1021 ;; Hardware stack levels used: 1
  1022 ;; Hardware stack levels required when called: 2
  1023 ;; This function calls:
  1024 ;;		_ENVIA_LCD_CMD
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text10
  1031  000B00                     __ptext10:
  1032                           	callstack 0
  1033  000B00                     _POS_CURSOR:
  1034                           	callstack 28
  1035                           
  1036                           ;incstack = 0
  1037                           ;POS_CURSOR@fila stored from wreg
  1038  000B00  6E05               	movwf	POS_CURSOR@fila^0,c
  1039                           
  1040                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1041  000B02  0405               	decf	POS_CURSOR@fila^0,w,c
  1042  000B04  E104               	bnz	l1074
  1043                           
  1044                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1045  000B06  5004               	movf	POS_CURSOR@columna^0,w,c
  1046  000B08  0F80               	addlw	128
  1047  000B0A  EF2D  F005         	goto	_ENVIA_LCD_CMD
  1048  000B0E                     l1074:
  1049  000B0E  0E02               	movlw	2
  1050  000B10  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1051  000B12  A4D8               	btfss	status,2,c
  1052  000B14  0012               	return	
  1053                           
  1054                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1055  000B16  5004               	movf	POS_CURSOR@columna^0,w,c
  1056  000B18  0FC0               	addlw	192
  1057  000B1A  EF2D  F005         	goto	_ENVIA_LCD_CMD
  1058  000B1E                     __end_of_POS_CURSOR:
  1059                           	callstack 0
  1060                           
  1061 ;; *************** function _ENVIA_LCD_CMD *****************
  1062 ;; Defined at:
  1063 ;;		line 104 in file "LCD.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  dato            1    wreg     unsigned char 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  dato            1    1[COMRAM] unsigned char 
  1068 ;;  aux             1    2[COMRAM] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1078 ;;      Params:         0       0       0       0       0       0       0       0       0
  1079 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1081 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1082 ;;Total ram usage:        2 bytes
  1083 ;; Hardware stack levels used: 1
  1084 ;; Hardware stack levels required when called: 1
  1085 ;; This function calls:
  1086 ;;		_ENVIA_NIBBLE
  1087 ;;		_LEER_LCD
  1088 ;; This function is called by:
  1089 ;;		_POS_CURSOR
  1090 ;;		_CURSOR_HOME
  1091 ;;		_CURSOR_ONOFF
  1092 ;;		_BORRAR_LCD
  1093 ;;		_LCD_CONFIG
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text11
  1098  000A5A                     __ptext11:
  1099                           	callstack 0
  1100  000A5A                     _ENVIA_LCD_CMD:
  1101                           	callstack 27
  1102                           
  1103                           ;incstack = 0
  1104                           ;ENVIA_LCD_CMD@dato stored from wreg
  1105  000A5A  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1106                           
  1107                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1108  000A5C  908C               	bcf	140,0,c	;volatile
  1109                           
  1110                           ;LCD.c: 108:  LEER_LCD();
  1111  000A5E  ECBA  F004         	call	_LEER_LCD	;wreg free
  1112                           
  1113                           ;LCD.c: 109:  TRISD = 0b00000000;
  1114  000A62  6A95               	clrf	149,c	;volatile
  1115                           
  1116                           ;LCD.c: 111:         _delay(1200);
  1117  000A64  0EF0               	movlw	240
  1118  000A66                     u287:
  1119  000A66  D000               	nop2	
  1120  000A68  2EE8               	decfsz	wreg,f,c
  1121  000A6A  D7FD               	bra	u287
  1122                           
  1123                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1124  000A6C  928C               	bcf	140,1,c	;volatile
  1125                           
  1126                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1127  000A6E  948C               	bcf	140,2,c	;volatile
  1128                           
  1129                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1130  000A70  908C               	bcf	140,0,c	;volatile
  1131                           
  1132                           ;LCD.c: 115:  aux = dato & 0xF0;
  1133  000A72  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1134                           
  1135                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1136  000A74  D806               	call	PL8	;call to abstracted procedure
  1137  000A76  EC8F  F005         	call	_ENVIA_NIBBLE
  1138                           
  1139                           ;LCD.c: 117:  aux = dato<<4;
  1140  000A7A  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1141                           
  1142                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1143  000A7C  D802               	call	PL8	;call to abstracted procedure
  1144  000A7E  EF8F  F005         	goto	_ENVIA_NIBBLE
  1145  000A82                     __end_of_ENVIA_LCD_CMD:
  1146                           	callstack 0
  1147  000A82                     PL8:
  1148                           	callstack 27
  1149  000A82  0BF0               	andlw	240
  1150  000A84  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1151  000A86  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1152  000A88  0012               	return	
  1153  000A8A                     __end_ofPL8:
  1154                           	callstack 0
  1155                           
  1156 ;; *************** function _ESCRIBE_MENSAJE *****************
  1157 ;; Defined at:
  1158 ;;		line 41 in file "LCD.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  cadena          1    3[COMRAM] PTR const unsigned char 
  1161 ;;		 -> STR_2(11), STR_1(13), 
  1162 ;;  tam             1    4[COMRAM] unsigned char 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  i               1    6[COMRAM] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1174 ;;      Params:         2       0       0       0       0       0       0       0       0
  1175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1176 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1177 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1178 ;;Total ram usage:        4 bytes
  1179 ;; Hardware stack levels used: 1
  1180 ;; Hardware stack levels required when called: 2
  1181 ;; This function calls:
  1182 ;;		_ENVIA_CHAR
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text12
  1189  000ADE                     __ptext12:
  1190                           	callstack 0
  1191  000ADE                     _ESCRIBE_MENSAJE:
  1192                           	callstack 28
  1193                           
  1194                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1195                           
  1196                           ;incstack = 0
  1197  000ADE  6A07               	clrf	ESCRIBE_MENSAJE@i^0,c
  1198                           
  1199                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1200  000AE0  6A07               	clrf	ESCRIBE_MENSAJE@i^0,c
  1201  000AE2  D00A               	goto	l1084
  1202  000AE4                     l1080:
  1203                           
  1204                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1205  000AE4  5004               	movf	ESCRIBE_MENSAJE@cadena^0,w,c
  1206  000AE6  2407               	addwf	ESCRIBE_MENSAJE@i^0,w,c
  1207  000AE8  6E06               	movwf	??_ESCRIBE_MENSAJE^0,c
  1208  000AEA  C006  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1209  000AEE                     	if	0	;There is only one active tblptr byte
  1210  000AEE                     	endif
  1211  000AEE                     	if	0	;tblptru may be non-zero
  1212  000AEE                     	endif
  1213  000AEE                     	if	0	;tblptru may be non-zero
  1214  000AEE                     	endif
  1215  000AEE  0008               	tblrd		*
  1216  000AF0  50F5               	movf	tablat,w,c
  1217  000AF2  EC45  F005         	call	_ENVIA_CHAR
  1218                           
  1219                           ;LCD.c: 47:  }
  1220  000AF6  2A07               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1221  000AF8                     l1084:
  1222  000AF8  5005               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1223  000AFA  5C07               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1224  000AFC  E3F3               	bnc	l1080
  1225  000AFE  0012               	return		;funcret
  1226  000B00                     __end_of_ESCRIBE_MENSAJE:
  1227                           	callstack 0
  1228                           
  1229 ;; *************** function _ENVIA_CHAR *****************
  1230 ;; Defined at:
  1231 ;;		line 50 in file "LCD.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  dato            1    wreg     unsigned char 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  dato            1    1[COMRAM] unsigned char 
  1236 ;;  aux             1    2[COMRAM] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0
  1247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1249 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1250 ;;Total ram usage:        2 bytes
  1251 ;; Hardware stack levels used: 1
  1252 ;; Hardware stack levels required when called: 1
  1253 ;; This function calls:
  1254 ;;		_ENVIA_NIBBLE
  1255 ;;		_LEER_LCD
  1256 ;; This function is called by:
  1257 ;;		_ESCRIBE_MENSAJE
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text13
  1263  000A8A                     __ptext13:
  1264                           	callstack 0
  1265  000A8A                     _ENVIA_CHAR:
  1266                           	callstack 28
  1267                           
  1268                           ;incstack = 0
  1269                           ;ENVIA_CHAR@dato stored from wreg
  1270  000A8A  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1271                           
  1272                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1273  000A8C  808C               	bsf	140,0,c	;volatile
  1274                           
  1275                           ;LCD.c: 54:  LEER_LCD();
  1276  000A8E  ECBA  F004         	call	_LEER_LCD	;wreg free
  1277                           
  1278                           ;LCD.c: 55:  TRISD = 0x00;
  1279  000A92  6A95               	clrf	149,c	;volatile
  1280                           
  1281                           ;LCD.c: 56:         _delay(1200);
  1282  000A94  0EF0               	movlw	240
  1283  000A96                     u297:
  1284  000A96  D000               	nop2	
  1285  000A98  2EE8               	decfsz	wreg,f,c
  1286  000A9A  D7FD               	bra	u297
  1287                           
  1288                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1289  000A9C  928C               	bcf	140,1,c	;volatile
  1290                           
  1291                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1292  000A9E  948C               	bcf	140,2,c	;volatile
  1293                           
  1294                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1295  000AA0  808C               	bsf	140,0,c	;volatile
  1296                           
  1297                           ;LCD.c: 61:  aux = dato & 0xF0;
  1298  000AA2  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1299                           
  1300                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1301  000AA4  D806               	call	PL10	;call to abstracted procedure
  1302  000AA6  EC8F  F005         	call	_ENVIA_NIBBLE
  1303                           
  1304                           ;LCD.c: 63:  aux = dato << 4;
  1305  000AAA  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1306                           
  1307                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1308  000AAC  D802               	call	PL10	;call to abstracted procedure
  1309  000AAE  EF8F  F005         	goto	_ENVIA_NIBBLE
  1310  000AB2                     __end_of_ENVIA_CHAR:
  1311                           	callstack 0
  1312  000AB2                     PL10:
  1313                           	callstack 28
  1314  000AB2  0BF0               	andlw	240
  1315  000AB4  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1316  000AB6  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1317  000AB8  0012               	return	
  1318  000ABA                     __end_ofPL10:
  1319                           	callstack 0
  1320                           
  1321 ;; *************** function _LEER_LCD *****************
  1322 ;; Defined at:
  1323 ;;		line 121 in file "LCD.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  aux             1    0[COMRAM] unsigned char 
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, status,0
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1337 ;;      Params:         0       0       0       0       0       0       0       0       0
  1338 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1340 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1341 ;;Total ram usage:        1 bytes
  1342 ;; Hardware stack levels used: 1
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_ENVIA_CHAR
  1347 ;;		_ENVIA_LCD_CMD
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text14
  1352  000974                     __ptext14:
  1353                           	callstack 0
  1354  000974                     _LEER_LCD:
  1355                           	callstack 27
  1356                           
  1357                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1358                           
  1359                           ;incstack = 0
  1360  000974  0EF8               	movlw	248
  1361  000976  6E95               	movwf	149,c	;volatile
  1362                           
  1363                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1364  000978  908C               	bcf	140,0,c	;volatile
  1365                           
  1366                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1367  00097A  828C               	bsf	140,1,c	;volatile
  1368                           
  1369                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1370  00097C  848C               	bsf	140,2,c	;volatile
  1371                           
  1372                           ;LCD.c: 128:         _delay(1200);
  1373  00097E  0EF0               	movlw	240
  1374  000980                     u307:
  1375  000980  D000               	nop2	
  1376  000982  2EE8               	decfsz	wreg,f,c
  1377  000984  D7FD               	bra	u307
  1378                           
  1379                           ;LCD.c: 130:  aux = PORTD;
  1380                           
  1381                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1382  000986  D821               	call	PL6	;call to abstracted procedure
  1383                           
  1384                           ;LCD.c: 132:         _delay(1200);
  1385  000988  0EF0               	movlw	240
  1386  00098A                     u317:
  1387  00098A  D000               	nop2	
  1388  00098C  2EE8               	decfsz	wreg,f,c
  1389  00098E  D7FD               	bra	u317
  1390                           
  1391                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1392  000990  848C               	bsf	140,2,c	;volatile
  1393                           
  1394                           ;LCD.c: 135:         _delay(1200);
  1395  000992  0EF0               	movlw	240
  1396  000994                     u327:
  1397  000994  D000               	nop2	
  1398  000996  2EE8               	decfsz	wreg,f,c
  1399  000998  D7FD               	bra	u327
  1400  00099A                     l830:
  1401                           
  1402                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1403  00099A  948C               	bcf	140,2,c	;volatile
  1404                           
  1405                           ;LCD.c: 138:  aux = aux & 0x80;
  1406  00099C  0E80               	movlw	128
  1407  00099E  1601               	andwf	LEER_LCD@aux^0,f,c
  1408                           
  1409                           ;LCD.c: 139:  while(aux == 0x80)
  1410  0009A0  D010               	goto	l846
  1411  0009A2                     l67:
  1412                           
  1413                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1414  0009A2  848C               	bsf	140,2,c	;volatile
  1415                           
  1416                           ;LCD.c: 142:             _delay(1200);
  1417  0009A4  0EF0               	movlw	240
  1418  0009A6                     u337:
  1419  0009A6  D000               	nop2	
  1420  0009A8  2EE8               	decfsz	wreg,f,c
  1421  0009AA  D7FD               	bra	u337
  1422                           
  1423                           ;LCD.c: 143:             aux = PORTD;
  1424                           
  1425                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1426  0009AC  D80E               	call	PL6	;call to abstracted procedure
  1427                           
  1428                           ;LCD.c: 145:             _delay(1200);
  1429  0009AE  0EF0               	movlw	240
  1430  0009B0                     u347:
  1431  0009B0  D000               	nop2	
  1432  0009B2  2EE8               	decfsz	wreg,f,c
  1433  0009B4  D7FD               	bra	u347
  1434                           
  1435                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1436  0009B6  848C               	bsf	140,2,c	;volatile
  1437                           
  1438                           ;LCD.c: 147:             _delay(1200);
  1439  0009B8  0EF0               	movlw	240
  1440  0009BA                     u357:
  1441  0009BA  D000               	nop2	
  1442  0009BC  2EE8               	decfsz	wreg,f,c
  1443  0009BE  D7FD               	bra	u357
  1444  0009C0  D7EC               	goto	l830
  1445  0009C2                     l846:
  1446                           
  1447                           ;LCD.c: 139:  while(aux == 0x80)
  1448  0009C2  0E80               	movlw	128
  1449  0009C4  1801               	xorwf	LEER_LCD@aux^0,w,c
  1450  0009C6  E0ED               	bz	l67
  1451  0009C8  0012               	return		;funcret
  1452  0009CA                     __end_of_LEER_LCD:
  1453                           	callstack 0
  1454  0009CA                     PL6:
  1455                           	callstack 27
  1456  0009CA  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1457  0009CE  948C               	bcf	140,2,c	;volatile
  1458  0009D0  0012               	return	
  1459  0009D2                     __end_ofPL6:
  1460                           	callstack 0
  1461                           
  1462 ;; *************** function _ENVIA_NIBBLE *****************
  1463 ;; Defined at:
  1464 ;;		line 93 in file "LCD.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  dato            1    wreg     unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  dato            1    0[COMRAM] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0
  1479 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1481 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1482 ;;Total ram usage:        1 bytes
  1483 ;; Hardware stack levels used: 1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_ENVIA_CHAR
  1488 ;;		_LCD_CONFIG
  1489 ;;		_ENVIA_LCD_CMD
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text15
  1494  000B1E                     __ptext15:
  1495                           	callstack 0
  1496  000B1E                     _ENVIA_NIBBLE:
  1497                           	callstack 28
  1498                           
  1499                           ;incstack = 0
  1500                           ;ENVIA_NIBBLE@dato stored from wreg
  1501  000B1E  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1502                           
  1503                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1504  000B20  0E0F               	movlw	15
  1505  000B22  168C               	andwf	140,f,c	;volatile
  1506                           
  1507                           ;LCD.c: 96:  dato &= 0xF0;
  1508  000B24  0EF0               	movlw	240
  1509  000B26  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1510                           
  1511                           ;LCD.c: 97:  LATD|= dato;
  1512  000B28  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1513  000B2A  128C               	iorwf	140,f,c	;volatile
  1514                           
  1515                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1516  000B2C  848C               	bsf	140,2,c	;volatile
  1517                           
  1518                           ;LCD.c: 100:         _delay(1200);
  1519  000B2E  0EF0               	movlw	240
  1520  000B30                     u367:
  1521  000B30  D000               	nop2	
  1522  000B32  2EE8               	decfsz	wreg,f,c
  1523  000B34  D7FD               	bra	u367
  1524                           
  1525                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1526  000B36  948C               	bcf	140,2,c	;volatile
  1527  000B38  0012               	return		;funcret
  1528  000B3A                     __end_of_ENVIA_NIBBLE:
  1529                           	callstack 0
  1530                           
  1531                           	psect	rparam
  1532  0000                     
  1533                           	psect	idloc
  1534                           
  1535                           ;Config register IDLOC0 @ 0x200000
  1536                           ;	unspecified, using default values
  1537  200000                     	org	2097152
  1538  200000  FF                 	db	255
  1539                           
  1540                           ;Config register IDLOC1 @ 0x200001
  1541                           ;	unspecified, using default values
  1542  200001                     	org	2097153
  1543  200001  FF                 	db	255
  1544                           
  1545                           ;Config register IDLOC2 @ 0x200002
  1546                           ;	unspecified, using default values
  1547  200002                     	org	2097154
  1548  200002  FF                 	db	255
  1549                           
  1550                           ;Config register IDLOC3 @ 0x200003
  1551                           ;	unspecified, using default values
  1552  200003                     	org	2097155
  1553  200003  FF                 	db	255
  1554                           
  1555                           ;Config register IDLOC4 @ 0x200004
  1556                           ;	unspecified, using default values
  1557  200004                     	org	2097156
  1558  200004  FF                 	db	255
  1559                           
  1560                           ;Config register IDLOC5 @ 0x200005
  1561                           ;	unspecified, using default values
  1562  200005                     	org	2097157
  1563  200005  FF                 	db	255
  1564                           
  1565                           ;Config register IDLOC6 @ 0x200006
  1566                           ;	unspecified, using default values
  1567  200006                     	org	2097158
  1568  200006  FF                 	db	255
  1569                           
  1570                           ;Config register IDLOC7 @ 0x200007
  1571                           ;	unspecified, using default values
  1572  200007                     	org	2097159
  1573  200007  FF                 	db	255
  1574                           
  1575                           	psect	config
  1576                           
  1577                           ;Config register CONFIG1L @ 0x300000
  1578                           ;	PLL Prescaler Selection bits
  1579                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1580                           ;	System Clock Postscaler Selection bits
  1581                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1582                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1583                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1584  300000                     	org	3145728
  1585  300000  00                 	db	0
  1586                           
  1587                           ;Config register CONFIG1H @ 0x300001
  1588                           ;	Oscillator Selection bits
  1589                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1590                           ;	Fail-Safe Clock Monitor Enable bit
  1591                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1592                           ;	Internal/External Oscillator Switchover bit
  1593                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1594  300001                     	org	3145729
  1595  300001  02                 	db	2
  1596                           
  1597                           ;Config register CONFIG2L @ 0x300002
  1598                           ;	Power-up Timer Enable bit
  1599                           ;	PWRT = ON, PWRT enabled
  1600                           ;	Brown-out Reset Enable bits
  1601                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1602                           ;	Brown-out Reset Voltage bits
  1603                           ;	BORV = 3, Minimum setting 2.05V
  1604                           ;	USB Voltage Regulator Enable bit
  1605                           ;	VREGEN = OFF, USB voltage regulator disabled
  1606  300002                     	org	3145730
  1607  300002  18                 	db	24
  1608                           
  1609                           ;Config register CONFIG2H @ 0x300003
  1610                           ;	Watchdog Timer Enable bit
  1611                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1612                           ;	Watchdog Timer Postscale Select bits
  1613                           ;	WDTPS = 32768, 1:32768
  1614  300003                     	org	3145731
  1615  300003  1E                 	db	30
  1616                           
  1617                           ; Padding undefined space
  1618  300004                     	org	3145732
  1619  300004  FF                 	db	255
  1620                           
  1621                           ;Config register CONFIG3H @ 0x300005
  1622                           ;	CCP2 MUX bit
  1623                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1624                           ;	PORTB A/D Enable bit
  1625                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1626                           ;	Low-Power Timer 1 Oscillator Enable bit
  1627                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1628                           ;	MCLR Pin Enable bit
  1629                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1630  300005                     	org	3145733
  1631  300005  81                 	db	129
  1632                           
  1633                           ;Config register CONFIG4L @ 0x300006
  1634                           ;	Stack Full/Underflow Reset Enable bit
  1635                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1636                           ;	Single-Supply ICSP Enable bit
  1637                           ;	LVP = OFF, Single-Supply ICSP disabled
  1638                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1639                           ;	ICPRT = OFF, ICPORT disabled
  1640                           ;	Extended Instruction Set Enable bit
  1641                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1642                           ;	Background Debugger Enable bit
  1643                           ;	DEBUG = 0x1, unprogrammed default
  1644  300006                     	org	3145734
  1645  300006  81                 	db	129
  1646                           
  1647                           ; Padding undefined space
  1648  300007                     	org	3145735
  1649  300007  FF                 	db	255
  1650                           
  1651                           ;Config register CONFIG5L @ 0x300008
  1652                           ;	Code Protection bit
  1653                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1654                           ;	Code Protection bit
  1655                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1656                           ;	Code Protection bit
  1657                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1658                           ;	Code Protection bit
  1659                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1660  300008                     	org	3145736
  1661  300008  0F                 	db	15
  1662                           
  1663                           ;Config register CONFIG5H @ 0x300009
  1664                           ;	Boot Block Code Protection bit
  1665                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1666                           ;	Data EEPROM Code Protection bit
  1667                           ;	CPD = OFF, Data EEPROM is not code-protected
  1668  300009                     	org	3145737
  1669  300009  C0                 	db	192
  1670                           
  1671                           ;Config register CONFIG6L @ 0x30000A
  1672                           ;	Write Protection bit
  1673                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1674                           ;	Write Protection bit
  1675                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1676                           ;	Write Protection bit
  1677                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1678                           ;	Write Protection bit
  1679                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1680  30000A                     	org	3145738
  1681  30000A  0F                 	db	15
  1682                           
  1683                           ;Config register CONFIG6H @ 0x30000B
  1684                           ;	Configuration Register Write Protection bit
  1685                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1686                           ;	Boot Block Write Protection bit
  1687                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1688                           ;	Data EEPROM Write Protection bit
  1689                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1690  30000B                     	org	3145739
  1691  30000B  E0                 	db	224
  1692                           
  1693                           ;Config register CONFIG7L @ 0x30000C
  1694                           ;	Table Read Protection bit
  1695                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1696                           ;	Table Read Protection bit
  1697                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1698                           ;	Table Read Protection bit
  1699                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1700                           ;	Table Read Protection bit
  1701                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1702  30000C                     	org	3145740
  1703  30000C  0F                 	db	15
  1704                           
  1705                           ;Config register CONFIG7H @ 0x30000D
  1706                           ;	Boot Block Table Read Protection bit
  1707                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1708  30000D                     	org	3145741
  1709  30000D  40                 	db	64
  1710                           tosu	equ	0xFFF
  1711                           tosh	equ	0xFFE
  1712                           tosl	equ	0xFFD
  1713                           stkptr	equ	0xFFC
  1714                           pclatu	equ	0xFFB
  1715                           pclath	equ	0xFFA
  1716                           pcl	equ	0xFF9
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           prodh	equ	0xFF4
  1722                           prodl	equ	0xFF3
  1723                           indf0	equ	0xFEF
  1724                           postinc0	equ	0xFEE
  1725                           postdec0	equ	0xFED
  1726                           preinc0	equ	0xFEC
  1727                           plusw0	equ	0xFEB
  1728                           fsr0h	equ	0xFEA
  1729                           fsr0l	equ	0xFE9
  1730                           wreg	equ	0xFE8
  1731                           indf1	equ	0xFE7
  1732                           postinc1	equ	0xFE6
  1733                           postdec1	equ	0xFE5
  1734                           preinc1	equ	0xFE4
  1735                           plusw1	equ	0xFE3
  1736                           fsr1h	equ	0xFE2
  1737                           fsr1l	equ	0xFE1
  1738                           bsr	equ	0xFE0
  1739                           indf2	equ	0xFDF
  1740                           postinc2	equ	0xFDE
  1741                           postdec2	equ	0xFDD
  1742                           preinc2	equ	0xFDC
  1743                           plusw2	equ	0xFDB
  1744                           fsr2h	equ	0xFDA
  1745                           fsr2l	equ	0xFD9
  1746                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_2(CODE[11]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_digbyte
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _digbyte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2707
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                            _digbyte
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     405
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     105
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     120
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0      90
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0      90
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _digbyte                                              2     0      2    1397
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     330
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0      90
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      4     2      2     485
                                              3 COMRAM     4     2      2
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0      90
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
   _digbyte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Oct 14 15:34:21 2021

                      PL2 088A                        PL4 0894                        PL6 09CA  
                      PL8 0A82                        l67 09A2            ?_configuracion 0001  
                     PL10 0AB2             ENVIA_CHAR@aux 0003                       l129 08BE  
                     l628 0A12                       l830 099A                       l638 0A50  
                     l846 09C2                       l884 0B60                       u150 09EE  
                     u307 0980                       u180 0A34                       u317 098A  
                     u327 0994                       u247 0AC6                       u337 09A6  
                     u257 0926                       u347 09B0                       u267 0934  
                     u357 09BA                       u277 0944                       u367 0B30  
                     u287 0A66                       u297 0A96               LEER_LCD@aux 0001  
                     wreg 000FE8              ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001  
          ENVIA_CHAR@dato 0002                      l1040 09EA                      l1050 0A08  
                    l1060 0A30                      l1038 09E2                      l1080 0AE4  
                    l1074 0B0E                      l1066 0A46                      l1058 0A28  
                    l1084 0AF8                      l1096 08BC                      STR_1 0801  
                    STR_2 080E                      _LATD 000F8C                      _main 08A0  
                    start 0000             ?_CURSOR_ONOFF 0001              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 09CA       __size_of_BORRAR_LCD 0006  
                   ?_main 0001           __end_of___lwdiv 0A1C           __end_of___lwmod 0A5A  
                   _PORTD 000F83       __size_of_LCD_CONFIG 005E                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0028           __end_of_digbyte 088A               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0B3A              __end_of_main 0916           ??_configuracion 0001  
         _ESCRIBE_MENSAJE 0ADE                    ??_main 000F             __activetblptr 000001  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3          __end_of_lcd_init 0ADE  
    __end_of_ENVIA_NIBBLE 0B3A                 ??___lwdiv 000A                 ??___lwmod 0005  
     __size_of_POS_CURSOR 001E                    clear_0 0B40                    _res_ad 0019  
                  isa$std 000001                 ??_digbyte 000F              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0006                 ?_LEER_LCD 0001  
              __accesstop 0060   __end_of__initialization 0B46              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0B00  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0B86                __end_ofPL2 0894  
              __end_ofPL4 08A0                __end_ofPL6 09D2                __end_ofPL8 0A8A  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0B6C        __end_of_LCD_CONFIG 0974  
      __end_of_ENVIA_CHAR 0AB2                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
            ??_POS_CURSOR 0005                 ?_lcd_init 0001     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___lwdiv 09D2                   ___lwmod 0A1C              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0A82                   __pcinit 0B3A        __end_of_POS_CURSOR 0B1E  
                 __ramtop 0800                   _digbyte 081A                   __ptext0 08A0  
                 __ptext1 0ABA                   __ptext2 0916                   __ptext3 0B54  
                 __ptext4 0B7A                   __ptext5 0B80                   __ptext6 081A  
                 __ptext7 0A1C                   __ptext8 09D2                   __ptext9 0B6C  
              ??_lcd_init 0005              _ENVIA_NIBBLE 0B1E      end_of_initialization 0B46  
                 postinc0 000FEE     __end_of_configuracion 0B7A     __size_of_CURSOR_ONOFF 0018  
       __size_of_LEER_LCD 0056              _CURSOR_ONOFF 0B54        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004               __end_ofPL10 0ABA       start_initialization 0B3A  
       ENVIA_LCD_CMD@dato 0002               __pbssCOMRAM 0011                 _d_centena 0015  
     __end_of_CURSOR_HOME 0B80         __size_of_lcd_init 0024          ___lwdiv@dividend 0006  
                ?___lwdiv 0006                  ?___lwmod 0001                  ?_digbyte 000D  
             __smallconst 0800          ___lwdiv@quotient 000A                  _LEER_LCD 0974  
                _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0007            POS_CURSOR@fila 0005  
__size_of_ESCRIBE_MENSAJE 0022                _ADCON0bits 000FC2               _CURSOR_HOME 0B7A  
  __size_of_ENVIA_LCD_CMD 0028                  __Hrparam 0000                  __Lrparam 0000  
            __Lsmallconst 0800          __size_of___lwdiv 004A          __size_of___lwmod 003E  
                _d_decena 0013          __size_of_digbyte 0070                  _d_millar 0017  
                _d_unidad 0011           ___lwdiv@divisor 0008           ___lwdiv@counter 000C  
                __ptext10 0B00                  __ptext11 0A5A                  __ptext12 0ADE  
                __ptext13 0A8A                  __ptext14 0974                  __ptext15 0B1E  
              _BORRAR_LCD 0B80                  _lcd_init 0ABA    __size_of_configuracion 000E  
           __size_of_main 0076                _LCD_CONFIG 0916                _ENVIA_CHAR 0A8A  
                isa$xinst 000000             _ENVIA_LCD_CMD 0A5A         ??_ESCRIBE_MENSAJE 0006  
   ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001               digbyte@dato 000D  
          ?_ENVIA_LCD_CMD 0001             _configuracion 0B6C           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B00               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0005  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
