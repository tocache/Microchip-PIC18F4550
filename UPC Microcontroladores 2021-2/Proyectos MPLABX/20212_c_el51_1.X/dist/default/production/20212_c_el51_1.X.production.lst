

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Oct 12 21:18:14 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _ADRESL	set	4035
    65  0000                     _ADRESH	set	4036
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _ADCON0	set	4034
    68  0000                     _ADCON1	set	4033
    69  0000                     _ADCON2	set	4032
    70  0000                     _PORTD	set	3971
    71  0000                     _LATD	set	3980
    72  0000                     _TRISD	set	3989
    73  0000                     _LATDbits	set	3980
    74                           
    75                           	psect	smallconst
    76  000800                     __psmallconst:
    77                           	callstack 0
    78  000800  00                 	db	0
    79  000801                     STR_1:
    80  000801  48                 	db	72	;'H'
    81  000802  6F                 	db	111	;'o'
    82  000803  6C                 	db	108	;'l'
    83  000804  61                 	db	97	;'a'
    84  000805  20                 	db	32
    85  000806  6D                 	db	109	;'m'
    86  000807  75                 	db	117	;'u'
    87  000808  6E                 	db	110	;'n'
    88  000809  64                 	db	100	;'d'
    89  00080A  6F                 	db	111	;'o'
    90  00080B  20                 	db	32
    91  00080C  55                 	db	85	;'U'
    92  00080D  50                 	db	80	;'P'
    93  00080E  43                 	db	67	;'C'
    94  00080F  21                 	db	33
    95  000810  00                 	db	0
    96  000811                     STR_2:
    97  000811  41                 	db	65	;'A'
    98  000812  4E                 	db	78	;'N'
    99  000813  2D                 	db	45
   100  000814  30                 	db	48	;'0'
   101  000815  3A                 	db	58	;':'
   102  000816  00                 	db	0
   103  000817  00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           ; #config settings
   106                           
   107                           	psect	cinit
   108  000C42                     __pcinit:
   109                           	callstack 0
   110  000C42                     start_initialization:
   111                           	callstack 0
   112  000C42                     __initialization:
   113                           	callstack 0
   114                           
   115                           ; Clear objects allocated to COMRAM (10 bytes)
   116  000C42  EE00  F011         	lfsr	0,__pbssCOMRAM
   117  000C46  0E0A               	movlw	10
   118  000C48                     clear_0:
   119  000C48  6AEE               	clrf	postinc0,c
   120  000C4A  06E8               	decf	wreg,f,c
   121  000C4C  E1FD               	bnz	clear_0
   122  000C4E                     end_of_initialization:
   123                           	callstack 0
   124  000C4E                     __end_of__initialization:
   125                           	callstack 0
   126  000C4E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   127  000C50  6EF8               	movwf	tblptru,c
   128  000C52  0E08               	movlw	high __Lsmallconst
   129  000C54  6EF7               	movwf	tblptrh,c
   130  000C56  0100               	movlb	0
   131  000C58  EF59  F004         	goto	_main	;jump to C main() function
   132                           
   133                           	psect	bssCOMRAM
   134  000011                     __pbssCOMRAM:
   135                           	callstack 0
   136  000011                     _unidad:
   137                           	callstack 0
   138  000011                     	ds	2
   139  000013                     _decena:
   140                           	callstack 0
   141  000013                     	ds	2
   142  000015                     _centena:
   143                           	callstack 0
   144  000015                     	ds	2
   145  000017                     _millar:
   146                           	callstack 0
   147  000017                     	ds	2
   148  000019                     _res_ad:
   149                           	callstack 0
   150  000019                     	ds	2
   151                           
   152                           	psect	cstackCOMRAM
   153  000001                     __pcstackCOMRAM:
   154                           	callstack 0
   155  000001                     ?___lwmod:
   156                           	callstack 0
   157  000001                     ENVIA_NIBBLE@dato:
   158                           	callstack 0
   159  000001                     LEER_LCD@aux:
   160                           	callstack 0
   161  000001                     ___lwmod@dividend:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x0
   165  000001                     	ds	1
   166  000002                     ENVIA_CHAR@dato:
   167                           	callstack 0
   168  000002                     ENVIA_LCD_CMD@dato:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0x1
   172  000002                     	ds	1
   173  000003                     ENVIA_CHAR@aux:
   174                           	callstack 0
   175  000003                     ENVIA_LCD_CMD@aux:
   176                           	callstack 0
   177  000003                     ___lwmod@divisor:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0x2
   181  000003                     	ds	1
   182  000004                     ??_LCD_CONFIG:
   183  000004                     POS_CURSOR@columna:
   184                           	callstack 0
   185  000004                     CURSOR_ONOFF@estado:
   186                           	callstack 0
   187  000004                     ESCRIBE_MENSAJE@cadena:
   188                           	callstack 0
   189                           
   190                           ; 2 bytes @ 0x3
   191  000004                     	ds	1
   192  000005                     ??_lcd_init:
   193  000005                     POS_CURSOR@fila:
   194                           	callstack 0
   195  000005                     ___lwmod@counter:
   196                           	callstack 0
   197                           
   198                           ; 1 bytes @ 0x4
   199  000005                     	ds	1
   200  000006                     ?___lwdiv:
   201                           	callstack 0
   202  000006                     ESCRIBE_MENSAJE@tam:
   203                           	callstack 0
   204  000006                     ___lwdiv@dividend:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x5
   208  000006                     	ds	1
   209  000007                     ??_ESCRIBE_MENSAJE:
   210                           
   211                           ; 1 bytes @ 0x6
   212  000007                     	ds	1
   213  000008                     ___lwdiv@divisor:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x7
   217  000008                     	ds	1
   218  000009                     ESCRIBE_MENSAJE@i:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x8
   222  000009                     	ds	1
   223  00000A                     ___lwdiv@quotient:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x9
   227  00000A                     	ds	2
   228  00000C                     ___lwdiv@counter:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0xB
   232  00000C                     	ds	1
   233  00000D                     digbyte@data_in:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0xC
   237  00000D                     	ds	2
   238  00000F                     ??_main:
   239                           
   240                           ; 1 bytes @ 0xE
   241  00000F                     	ds	2
   242                           
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 33 in file "maincode3.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : 0/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   262 ;;      Params:         0       0       0       0       0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0       0       0       0       0
   264 ;;      Temps:          2       0       0       0       0       0       0       0       0
   265 ;;      Totals:         2       0       0       0       0       0       0       0       0
   266 ;;Total ram usage:        2 bytes
   267 ;; Hardware stack levels required when called: 4
   268 ;; This function calls:
   269 ;;		_ENVIA_CHAR
   270 ;;		_ESCRIBE_MENSAJE
   271 ;;		_POS_CURSOR
   272 ;;		_configuracion
   273 ;;		_digbyte
   274 ;;		_lcd_init
   275 ;; This function is called by:
   276 ;;		Startup code after reset
   277 ;; This function uses a non-reentrant model
   278 ;;
   279                           
   280                           	psect	text0
   281  0008B2                     __ptext0:
   282                           	callstack 0
   283  0008B2                     _main:
   284                           	callstack 27
   285  0008B2                     
   286                           ;maincode3.c: 34:     configuracion();
   287  0008B2  EC2E  F006         	call	_configuracion	;wreg free
   288  0008B6                     
   289                           ;maincode3.c: 35:     lcd_init();
   290  0008B6  ECFF  F005         	call	_lcd_init	;wreg free
   291  0008BA                     
   292                           ;maincode3.c: 36:     POS_CURSOR(1,0);
   293  0008BA  0E00               	movlw	0
   294  0008BC  6E04               	movwf	POS_CURSOR@columna^0,c
   295  0008BE  0E01               	movlw	1
   296  0008C0  EC96  F005         	call	_POS_CURSOR
   297  0008C4                     
   298                           ;maincode3.c: 37:     ESCRIBE_MENSAJE("Hola mundo UPC!",15);
   299  0008C4  0E01               	movlw	low STR_1
   300  0008C6  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   301  0008C8  0E08               	movlw	high STR_1
   302  0008CA  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   303  0008CC  0E0F               	movlw	15
   304  0008CE  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   305  0008D0  EC77  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   306  0008D4                     l1128:
   307                           
   308                           ;maincode3.c: 39:         ADCON0bits.GODONE = 1;
   309  0008D4  82C2               	bsf	194,1,c	;volatile
   310  0008D6                     l129:
   311  0008D6  B2C2               	btfsc	194,1,c	;volatile
   312  0008D8  EF70  F004         	goto	u281
   313  0008DC  EF72  F004         	goto	u280
   314  0008E0                     u281:
   315  0008E0  EF6B  F004         	goto	l129
   316  0008E4                     u280:
   317  0008E4                     
   318                           ;maincode3.c: 41:         res_ad = (ADRESH << 8) + ADRESL;
   319  0008E4  50C4               	movf	196,w,c	;volatile
   320  0008E6  6E10               	movwf	(??_main+1)^0,c
   321  0008E8  6A0F               	clrf	??_main^0,c
   322  0008EA  50C3               	movf	195,w,c	;volatile
   323  0008EC  240F               	addwf	??_main^0,w,c
   324  0008EE  6E19               	movwf	_res_ad^0,c
   325  0008F0  0E00               	movlw	0
   326  0008F2  2010               	addwfc	(??_main+1)^0,w,c
   327  0008F4  6E1A               	movwf	(_res_ad+1)^0,c
   328  0008F6                     
   329                           ;maincode3.c: 42:         digbyte(res_ad);
   330  0008F6  C019  F00D         	movff	_res_ad,digbyte@data_in
   331  0008FA  C01A  F00E         	movff	_res_ad+1,digbyte@data_in+1
   332  0008FE  EC0C  F004         	call	_digbyte	;wreg free
   333  000902                     
   334                           ;maincode3.c: 43:         POS_CURSOR(2,0);
   335  000902  0E00               	movlw	0
   336  000904  6E04               	movwf	POS_CURSOR@columna^0,c
   337  000906  0E02               	movlw	2
   338  000908  EC96  F005         	call	_POS_CURSOR
   339  00090C                     
   340                           ;maincode3.c: 44:         ESCRIBE_MENSAJE("AN-0:",5);
   341  00090C  0E11               	movlw	low STR_2
   342  00090E  6E04               	movwf	ESCRIBE_MENSAJE@cadena^0,c
   343  000910  0E08               	movlw	high STR_2
   344  000912  6E05               	movwf	(ESCRIBE_MENSAJE@cadena+1)^0,c
   345  000914  0E05               	movlw	5
   346  000916  6E06               	movwf	ESCRIBE_MENSAJE@tam^0,c
   347  000918  EC77  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   348  00091C                     
   349                           ;maincode3.c: 45:         ENVIA_CHAR(millar+0x30);
   350  00091C  5017               	movf	_millar^0,w,c
   351  00091E  0F30               	addlw	48
   352  000920  ECCD  F005         	call	_ENVIA_CHAR
   353  000924                     
   354                           ;maincode3.c: 46:         ENVIA_CHAR(centena+0x30);
   355  000924  5015               	movf	_centena^0,w,c
   356  000926  0F30               	addlw	48
   357  000928  ECCD  F005         	call	_ENVIA_CHAR
   358  00092C                     
   359                           ;maincode3.c: 47:         ENVIA_CHAR(decena+0x30);
   360  00092C  5013               	movf	_decena^0,w,c
   361  00092E  0F30               	addlw	48
   362  000930  ECCD  F005         	call	_ENVIA_CHAR
   363  000934                     
   364                           ;maincode3.c: 48:         ENVIA_CHAR(unidad+0x30);
   365  000934  5011               	movf	_unidad^0,w,c
   366  000936  0F30               	addlw	48
   367  000938  ECCD  F005         	call	_ENVIA_CHAR
   368  00093C  EF6A  F004         	goto	l1128
   369  000940  EF00  F000         	goto	start
   370  000944                     __end_of_main:
   371                           	callstack 0
   372                           
   373 ;; *************** function _lcd_init *****************
   374 ;; Defined at:
   375 ;;		line 17 in file "maincode3.c"
   376 ;; Parameters:    Size  Location     Type
   377 ;;		None
   378 ;; Auto vars:     Size  Location     Type
   379 ;;		None
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg, status,2, status,0, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   389 ;;      Params:         0       0       0       0       0       0       0       0       0
   390 ;;      Locals:         0       0       0       0       0       0       0       0       0
   391 ;;      Temps:          1       0       0       0       0       0       0       0       0
   392 ;;      Totals:         1       0       0       0       0       0       0       0       0
   393 ;;Total ram usage:        1 bytes
   394 ;; Hardware stack levels used: 1
   395 ;; Hardware stack levels required when called: 3
   396 ;; This function calls:
   397 ;;		_BORRAR_LCD
   398 ;;		_CURSOR_HOME
   399 ;;		_CURSOR_ONOFF
   400 ;;		_LCD_CONFIG
   401 ;; This function is called by:
   402 ;;		_main
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           	psect	text1
   407  000BFE                     __ptext1:
   408                           	callstack 0
   409  000BFE                     _lcd_init:
   410                           	callstack 27
   411  000BFE                     
   412                           ;maincode3.c: 18:     TRISD = 0x00;
   413  000BFE  0E00               	movlw	0
   414  000C00  6E95               	movwf	149,c	;volatile
   415  000C02                     
   416                           ;maincode3.c: 19:     LCD_CONFIG();
   417  000C02  EC47  F005         	call	_LCD_CONFIG	;wreg free
   418  000C06                     
   419                           ;maincode3.c: 20:     _delay((unsigned long)((15)*(48000000UL/4000.0)));
   420  000C06  0EEA               	movlw	234
   421  000C08  6E05               	movwf	??_lcd_init^0,c
   422  000C0A  0EC3               	movlw	195
   423  000C0C                     u297:
   424  000C0C  2EE8               	decfsz	wreg,f,c
   425  000C0E  D7FE               	bra	u297
   426  000C10  2E05               	decfsz	??_lcd_init^0,f,c
   427  000C12  D7FC               	bra	u297
   428  000C14  F000               	nop	
   429  000C16                     
   430                           ;maincode3.c: 21:     BORRAR_LCD();
   431  000C16  EC39  F006         	call	_BORRAR_LCD	;wreg free
   432  000C1A                     
   433                           ;maincode3.c: 22:     CURSOR_HOME();
   434  000C1A  EC35  F006         	call	_CURSOR_HOME	;wreg free
   435  000C1E                     
   436                           ;maincode3.c: 23:     CURSOR_ONOFF(1);
   437  000C1E  0E01               	movlw	1
   438  000C20  ECE7  F005         	call	_CURSOR_ONOFF
   439  000C24  0012               	return		;funcret
   440  000C26                     __end_of_lcd_init:
   441                           	callstack 0
   442                           
   443 ;; *************** function _LCD_CONFIG *****************
   444 ;; Defined at:
   445 ;;		line 72 in file "LCD.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;		None
   448 ;; Auto vars:     Size  Location     Type
   449 ;;		None
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, status,2, status,0, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : 0/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   459 ;;      Params:         0       0       0       0       0       0       0       0       0
   460 ;;      Locals:         0       0       0       0       0       0       0       0       0
   461 ;;      Temps:          1       0       0       0       0       0       0       0       0
   462 ;;      Totals:         1       0       0       0       0       0       0       0       0
   463 ;;Total ram usage:        1 bytes
   464 ;; Hardware stack levels used: 1
   465 ;; Hardware stack levels required when called: 2
   466 ;; This function calls:
   467 ;;		_ENVIA_LCD_CMD
   468 ;;		_ENVIA_NIBBLE
   469 ;; This function is called by:
   470 ;;		_lcd_init
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text2
   475  000A8E                     __ptext2:
   476                           	callstack 0
   477  000A8E                     _LCD_CONFIG:
   478                           	callstack 27
   479  000A8E                     
   480                           ;LCD.c: 74:  LATDbits.LATD0 = 0;
   481  000A8E  908C               	bcf	140,0,c	;volatile
   482                           
   483                           ;LCD.c: 75:  LATDbits.LATD1 = 0;
   484  000A90  928C               	bcf	140,1,c	;volatile
   485  000A92                     
   486                           ;LCD.c: 76:  ENVIA_NIBBLE(0x30);
   487  000A92  0E30               	movlw	48
   488  000A94  EC13  F006         	call	_ENVIA_NIBBLE
   489  000A98                     
   490                           ;LCD.c: 77:         _delay(24000);
   491  000A98  0E20               	movlw	32
   492  000A9A  6E04               	movwf	??_LCD_CONFIG^0,c
   493  000A9C  0E2A               	movlw	42
   494  000A9E                     u307:
   495  000A9E  2EE8               	decfsz	wreg,f,c
   496  000AA0  D7FE               	bra	u307
   497  000AA2  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   498  000AA4  D7FC               	bra	u307
   499  000AA6                     
   500                           ;LCD.c: 78:         _delay(24000);
   501  000AA6  0E20               	movlw	32
   502  000AA8  6E04               	movwf	??_LCD_CONFIG^0,c
   503  000AAA  0E2A               	movlw	42
   504  000AAC                     u317:
   505  000AAC  2EE8               	decfsz	wreg,f,c
   506  000AAE  D7FE               	bra	u317
   507  000AB0  2E04               	decfsz	??_LCD_CONFIG^0,f,c
   508  000AB2  D7FC               	bra	u317
   509                           
   510                           ;LCD.c: 81:  ENVIA_NIBBLE(0x30);
   511  000AB4  0E30               	movlw	48
   512  000AB6  EC13  F006         	call	_ENVIA_NIBBLE
   513  000ABA                     
   514                           ;LCD.c: 83:  _delay(1200);
   515  000ABA  0EF0               	movlw	240
   516  000ABC                     u327:
   517  000ABC  D000               	nop2	
   518  000ABE  2EE8               	decfsz	wreg,f,c
   519  000AC0  D7FD               	bra	u327
   520  000AC2                     
   521                           ;LCD.c: 84:         ENVIA_NIBBLE(0x30);
   522  000AC2  0E30               	movlw	48
   523  000AC4  EC13  F006         	call	_ENVIA_NIBBLE
   524  000AC8                     
   525                           ;LCD.c: 85:  ENVIA_NIBBLE(0x20);
   526  000AC8  0E20               	movlw	32
   527  000ACA  EC13  F006         	call	_ENVIA_NIBBLE
   528  000ACE                     
   529                           ;LCD.c: 86:  ENVIA_LCD_CMD(0x01);
   530  000ACE  0E01               	movlw	1
   531  000AD0  ECB3  F005         	call	_ENVIA_LCD_CMD
   532  000AD4                     
   533                           ;LCD.c: 87:  ENVIA_LCD_CMD(0x28);
   534  000AD4  0E28               	movlw	40
   535  000AD6  ECB3  F005         	call	_ENVIA_LCD_CMD
   536  000ADA                     
   537                           ;LCD.c: 88:  ENVIA_LCD_CMD(0x0F);
   538  000ADA  0E0F               	movlw	15
   539  000ADC  ECB3  F005         	call	_ENVIA_LCD_CMD
   540  000AE0                     
   541                           ;LCD.c: 89:  ENVIA_LCD_CMD(0x06);
   542  000AE0  0E06               	movlw	6
   543  000AE2  ECB3  F005         	call	_ENVIA_LCD_CMD
   544  000AE6                     
   545                           ;LCD.c: 90:  ENVIA_LCD_CMD(0x01);
   546  000AE6  0E01               	movlw	1
   547  000AE8  ECB3  F005         	call	_ENVIA_LCD_CMD
   548  000AEC  0012               	return		;funcret
   549  000AEE                     __end_of_LCD_CONFIG:
   550                           	callstack 0
   551                           
   552 ;; *************** function _CURSOR_ONOFF *****************
   553 ;; Defined at:
   554 ;;		line 35 in file "LCD.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;  estado          1    wreg     unsigned char 
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  estado          1    3[COMRAM] unsigned char 
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		wreg, status,2, status,0, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   568 ;;      Params:         0       0       0       0       0       0       0       0       0
   569 ;;      Locals:         1       0       0       0       0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0
   571 ;;      Totals:         1       0       0       0       0       0       0       0       0
   572 ;;Total ram usage:        1 bytes
   573 ;; Hardware stack levels used: 1
   574 ;; Hardware stack levels required when called: 2
   575 ;; This function calls:
   576 ;;		_ENVIA_LCD_CMD
   577 ;; This function is called by:
   578 ;;		_lcd_init
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text3
   583  000BCE                     __ptext3:
   584                           	callstack 0
   585  000BCE                     _CURSOR_ONOFF:
   586                           	callstack 27
   587                           
   588                           ;incstack = 0
   589                           ;CURSOR_ONOFF@estado stored from wreg
   590  000BCE  6E04               	movwf	CURSOR_ONOFF@estado^0,c
   591  000BD0                     
   592                           ;LCD.c: 35: void CURSOR_ONOFF(unsigned char estado);LCD.c: 36: {;LCD.c: 37:  if(estado =
      +                          = 0) ENVIA_LCD_CMD(0x0E);
   593  000BD0  5004               	movf	CURSOR_ONOFF@estado^0,w,c
   594  000BD2  A4D8               	btfss	status,2,c
   595  000BD4  EFEE  F005         	goto	u21
   596  000BD8  EFF0  F005         	goto	u20
   597  000BDC                     u21:
   598  000BDC  EFF3  F005         	goto	l884
   599  000BE0                     u20:
   600  000BE0  0E0E               	movlw	14
   601  000BE2  ECB3  F005         	call	_ENVIA_LCD_CMD
   602  000BE6                     l884:
   603                           
   604                           ;LCD.c: 38:  if(estado == 1) ENVIA_LCD_CMD(0x0C);
   605  000BE6  0404               	decf	CURSOR_ONOFF@estado^0,w,c
   606  000BE8  A4D8               	btfss	status,2,c
   607  000BEA  EFF9  F005         	goto	u31
   608  000BEE  EFFB  F005         	goto	u30
   609  000BF2                     u31:
   610  000BF2  EFFE  F005         	goto	l42
   611  000BF6                     u30:
   612  000BF6  0E0C               	movlw	12
   613  000BF8  ECB3  F005         	call	_ENVIA_LCD_CMD
   614  000BFC                     l42:
   615  000BFC  0012               	return		;funcret
   616  000BFE                     __end_of_CURSOR_ONOFF:
   617                           	callstack 0
   618                           
   619 ;; *************** function _CURSOR_HOME *****************
   620 ;; Defined at:
   621 ;;		line 30 in file "LCD.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;		None
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      void 
   628 ;; Registers used:
   629 ;;		wreg, status,2, status,0, cstack
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   635 ;;      Params:         0       0       0       0       0       0       0       0       0
   636 ;;      Locals:         0       0       0       0       0       0       0       0       0
   637 ;;      Temps:          0       0       0       0       0       0       0       0       0
   638 ;;      Totals:         0       0       0       0       0       0       0       0       0
   639 ;;Total ram usage:        0 bytes
   640 ;; Hardware stack levels used: 1
   641 ;; Hardware stack levels required when called: 2
   642 ;; This function calls:
   643 ;;		_ENVIA_LCD_CMD
   644 ;; This function is called by:
   645 ;;		_lcd_init
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text4
   650  000C6A                     __ptext4:
   651                           	callstack 0
   652  000C6A                     _CURSOR_HOME:
   653                           	callstack 27
   654  000C6A                     
   655                           ;LCD.c: 32:  ENVIA_LCD_CMD(0x02);
   656  000C6A  0E02               	movlw	2
   657  000C6C  ECB3  F005         	call	_ENVIA_LCD_CMD
   658  000C70  0012               	return		;funcret
   659  000C72                     __end_of_CURSOR_HOME:
   660                           	callstack 0
   661                           
   662 ;; *************** function _BORRAR_LCD *****************
   663 ;; Defined at:
   664 ;;		line 67 in file "LCD.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, status,2, status,0, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   678 ;;      Params:         0       0       0       0       0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0       0       0
   681 ;;      Totals:         0       0       0       0       0       0       0       0       0
   682 ;;Total ram usage:        0 bytes
   683 ;; Hardware stack levels used: 1
   684 ;; Hardware stack levels required when called: 2
   685 ;; This function calls:
   686 ;;		_ENVIA_LCD_CMD
   687 ;; This function is called by:
   688 ;;		_lcd_init
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text5
   693  000C72                     __ptext5:
   694                           	callstack 0
   695  000C72                     _BORRAR_LCD:
   696                           	callstack 27
   697  000C72                     
   698                           ;LCD.c: 69:  ENVIA_LCD_CMD(0x01);
   699  000C72  0E01               	movlw	1
   700  000C74  ECB3  F005         	call	_ENVIA_LCD_CMD
   701  000C78  0012               	return		;funcret
   702  000C7A                     __end_of_BORRAR_LCD:
   703                           	callstack 0
   704                           
   705 ;; *************** function _digbyte *****************
   706 ;; Defined at:
   707 ;;		line 26 in file "maincode3.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  data_in         2   12[COMRAM] unsigned int 
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, status,2, status,0, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   721 ;;      Params:         2       0       0       0       0       0       0       0       0
   722 ;;      Locals:         0       0       0       0       0       0       0       0       0
   723 ;;      Temps:          0       0       0       0       0       0       0       0       0
   724 ;;      Totals:         2       0       0       0       0       0       0       0       0
   725 ;;Total ram usage:        2 bytes
   726 ;; Hardware stack levels used: 1
   727 ;; Hardware stack levels required when called: 1
   728 ;; This function calls:
   729 ;;		___lwdiv
   730 ;;		___lwmod
   731 ;; This function is called by:
   732 ;;		_main
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text6
   737  000818                     __ptext6:
   738                           	callstack 0
   739  000818                     _digbyte:
   740                           	callstack 29
   741  000818                     
   742                           ;maincode3.c: 27:     millar = data_in / 1000;
   743  000818  C00D  F006         	movff	digbyte@data_in,___lwdiv@dividend
   744  00081C  C00E  F007         	movff	digbyte@data_in+1,___lwdiv@dividend+1
   745  000820  0E03               	movlw	3
   746  000822  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   747  000824  0EE8               	movlw	232
   748  000826  6E08               	movwf	___lwdiv@divisor^0,c
   749  000828  ECA2  F004         	call	___lwdiv	;wreg free
   750  00082C  C006  F017         	movff	?___lwdiv,_millar
   751  000830  C007  F018         	movff	?___lwdiv+1,_millar+1
   752                           
   753                           ;maincode3.c: 28:     centena = (data_in % 1000) / 100;
   754  000834  0E03               	movlw	3
   755  000836  6E04               	movwf	(___lwmod@divisor+1)^0,c
   756  000838  0EE8               	movlw	232
   757  00083A  6E03               	movwf	___lwmod@divisor^0,c
   758  00083C  C00D  F001         	movff	digbyte@data_in,___lwmod@dividend
   759  000840  C00E  F002         	movff	digbyte@data_in+1,___lwmod@dividend+1
   760  000844  EC15  F005         	call	___lwmod	;wreg free
   761  000848  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   762  00084C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   763  000850  0E00               	movlw	0
   764  000852  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   765  000854  0E64               	movlw	100
   766  000856  6E08               	movwf	___lwdiv@divisor^0,c
   767  000858  ECA2  F004         	call	___lwdiv	;wreg free
   768  00085C  C006  F015         	movff	?___lwdiv,_centena
   769  000860  C007  F016         	movff	?___lwdiv+1,_centena+1
   770                           
   771                           ;maincode3.c: 29:     decena = (data_in % 100) / 10;
   772  000864  0E00               	movlw	0
   773  000866  6E04               	movwf	(___lwmod@divisor+1)^0,c
   774  000868  0E64               	movlw	100
   775  00086A  6E03               	movwf	___lwmod@divisor^0,c
   776  00086C  C00D  F001         	movff	digbyte@data_in,___lwmod@dividend
   777  000870  C00E  F002         	movff	digbyte@data_in+1,___lwmod@dividend+1
   778  000874  EC15  F005         	call	___lwmod	;wreg free
   779  000878  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   780  00087C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   781  000880  0E00               	movlw	0
   782  000882  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   783  000884  0E0A               	movlw	10
   784  000886  6E08               	movwf	___lwdiv@divisor^0,c
   785  000888  ECA2  F004         	call	___lwdiv	;wreg free
   786  00088C  C006  F013         	movff	?___lwdiv,_decena
   787  000890  C007  F014         	movff	?___lwdiv+1,_decena+1
   788                           
   789                           ;maincode3.c: 30:     unidad = data_in % 10;
   790  000894  C00D  F001         	movff	digbyte@data_in,___lwmod@dividend
   791  000898  C00E  F002         	movff	digbyte@data_in+1,___lwmod@dividend+1
   792  00089C  0E00               	movlw	0
   793  00089E  6E04               	movwf	(___lwmod@divisor+1)^0,c
   794  0008A0  0E0A               	movlw	10
   795  0008A2  6E03               	movwf	___lwmod@divisor^0,c
   796  0008A4  EC15  F005         	call	___lwmod	;wreg free
   797  0008A8  C001  F011         	movff	?___lwmod,_unidad
   798  0008AC  C002  F012         	movff	?___lwmod+1,_unidad+1
   799  0008B0  0012               	return		;funcret
   800  0008B2                     __end_of_digbyte:
   801                           	callstack 0
   802                           
   803 ;; *************** function ___lwmod *****************
   804 ;; Defined at:
   805 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;  dividend        2    0[COMRAM] unsigned int 
   808 ;;  divisor         2    2[COMRAM] unsigned int 
   809 ;; Auto vars:     Size  Location     Type
   810 ;;  counter         1    4[COMRAM] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  2    0[COMRAM] unsigned int 
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   820 ;;      Params:         4       0       0       0       0       0       0       0       0
   821 ;;      Locals:         1       0       0       0       0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0       0       0
   823 ;;      Totals:         5       0       0       0       0       0       0       0       0
   824 ;;Total ram usage:        5 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_digbyte
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text7
   834  000A2A                     __ptext7:
   835                           	callstack 0
   836  000A2A                     ___lwmod:
   837                           	callstack 29
   838  000A2A  5003               	movf	___lwmod@divisor^0,w,c
   839  000A2C  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   840  000A2E  B4D8               	btfsc	status,2,c
   841  000A30  EF1C  F005         	goto	u221
   842  000A34  EF1E  F005         	goto	u220
   843  000A38                     u221:
   844  000A38  EF42  F005         	goto	l638
   845  000A3C                     u220:
   846  000A3C  0E01               	movlw	1
   847  000A3E  6E05               	movwf	___lwmod@counter^0,c
   848  000A40  EF26  F005         	goto	l1092
   849  000A44                     l1090:
   850  000A44  90D8               	bcf	status,0,c
   851  000A46  3603               	rlcf	___lwmod@divisor^0,f,c
   852  000A48  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   853  000A4A  2A05               	incf	___lwmod@counter^0,f,c
   854  000A4C                     l1092:
   855  000A4C  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   856  000A4E  EF2B  F005         	goto	u231
   857  000A52  EF2D  F005         	goto	u230
   858  000A56                     u231:
   859  000A56  EF22  F005         	goto	l1090
   860  000A5A                     u230:
   861  000A5A                     l1094:
   862  000A5A  5003               	movf	___lwmod@divisor^0,w,c
   863  000A5C  5C01               	subwf	___lwmod@dividend^0,w,c
   864  000A5E  5004               	movf	(___lwmod@divisor+1)^0,w,c
   865  000A60  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   866  000A62  A0D8               	btfss	status,0,c
   867  000A64  EF36  F005         	goto	u241
   868  000A68  EF38  F005         	goto	u240
   869  000A6C                     u241:
   870  000A6C  EF3C  F005         	goto	l1098
   871  000A70                     u240:
   872  000A70  5003               	movf	___lwmod@divisor^0,w,c
   873  000A72  5E01               	subwf	___lwmod@dividend^0,f,c
   874  000A74  5004               	movf	(___lwmod@divisor+1)^0,w,c
   875  000A76  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   876  000A78                     l1098:
   877  000A78  90D8               	bcf	status,0,c
   878  000A7A  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   879  000A7C  3203               	rrcf	___lwmod@divisor^0,f,c
   880  000A7E  2E05               	decfsz	___lwmod@counter^0,f,c
   881  000A80  EF2D  F005         	goto	l1094
   882  000A84                     l638:
   883  000A84  C001  F001         	movff	___lwmod@dividend,?___lwmod
   884  000A88  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   885  000A8C  0012               	return		;funcret
   886  000A8E                     __end_of___lwmod:
   887                           	callstack 0
   888                           
   889 ;; *************** function ___lwdiv *****************
   890 ;; Defined at:
   891 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  dividend        2    5[COMRAM] unsigned int 
   894 ;;  divisor         2    7[COMRAM] unsigned int 
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  quotient        2    9[COMRAM] unsigned int 
   897 ;;  counter         1   11[COMRAM] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  2    5[COMRAM] unsigned int 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   907 ;;      Params:         4       0       0       0       0       0       0       0       0
   908 ;;      Locals:         3       0       0       0       0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0       0       0       0       0
   910 ;;      Totals:         7       0       0       0       0       0       0       0       0
   911 ;;Total ram usage:        7 bytes
   912 ;; Hardware stack levels used: 1
   913 ;; This function calls:
   914 ;;		Nothing
   915 ;; This function is called by:
   916 ;;		_digbyte
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text8
   921  000944                     __ptext8:
   922                           	callstack 0
   923  000944                     ___lwdiv:
   924                           	callstack 29
   925  000944  0E00               	movlw	0
   926  000946  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   927  000948  0E00               	movlw	0
   928  00094A  6E0A               	movwf	___lwdiv@quotient^0,c
   929  00094C  5008               	movf	___lwdiv@divisor^0,w,c
   930  00094E  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   931  000950  B4D8               	btfsc	status,2,c
   932  000952  EFAD  F004         	goto	u191
   933  000956  EFAF  F004         	goto	u190
   934  00095A                     u191:
   935  00095A  EFD7  F004         	goto	l628
   936  00095E                     u190:
   937  00095E  0E01               	movlw	1
   938  000960  6E0C               	movwf	___lwdiv@counter^0,c
   939  000962  EFB7  F004         	goto	l1072
   940  000966                     l1070:
   941  000966  90D8               	bcf	status,0,c
   942  000968  3608               	rlcf	___lwdiv@divisor^0,f,c
   943  00096A  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   944  00096C  2A0C               	incf	___lwdiv@counter^0,f,c
   945  00096E                     l1072:
   946  00096E  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   947  000970  EFBC  F004         	goto	u201
   948  000974  EFBE  F004         	goto	u200
   949  000978                     u201:
   950  000978  EFB3  F004         	goto	l1070
   951  00097C                     u200:
   952  00097C                     l1074:
   953  00097C  90D8               	bcf	status,0,c
   954  00097E  360A               	rlcf	___lwdiv@quotient^0,f,c
   955  000980  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   956  000982  5008               	movf	___lwdiv@divisor^0,w,c
   957  000984  5C06               	subwf	___lwdiv@dividend^0,w,c
   958  000986  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   959  000988  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   960  00098A  A0D8               	btfss	status,0,c
   961  00098C  EFCA  F004         	goto	u211
   962  000990  EFCC  F004         	goto	u210
   963  000994                     u211:
   964  000994  EFD1  F004         	goto	l1082
   965  000998                     u210:
   966  000998  5008               	movf	___lwdiv@divisor^0,w,c
   967  00099A  5E06               	subwf	___lwdiv@dividend^0,f,c
   968  00099C  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   969  00099E  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   970  0009A0  800A               	bsf	___lwdiv@quotient^0,0,c
   971  0009A2                     l1082:
   972  0009A2  90D8               	bcf	status,0,c
   973  0009A4  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   974  0009A6  3208               	rrcf	___lwdiv@divisor^0,f,c
   975  0009A8  2E0C               	decfsz	___lwdiv@counter^0,f,c
   976  0009AA  EFBE  F004         	goto	l1074
   977  0009AE                     l628:
   978  0009AE  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   979  0009B2  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   980  0009B6  0012               	return		;funcret
   981  0009B8                     __end_of___lwdiv:
   982                           	callstack 0
   983                           
   984 ;; *************** function _configuracion *****************
   985 ;; Defined at:
   986 ;;		line 11 in file "maincode3.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;		None
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      void 
   993 ;; Registers used:
   994 ;;		wreg, status,2
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1000 ;;      Params:         0       0       0       0       0       0       0       0       0
  1001 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1003 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1004 ;;Total ram usage:        0 bytes
  1005 ;; Hardware stack levels used: 1
  1006 ;; This function calls:
  1007 ;;		Nothing
  1008 ;; This function is called by:
  1009 ;;		_main
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text9
  1014  000C5C                     __ptext9:
  1015                           	callstack 0
  1016  000C5C                     _configuracion:
  1017                           	callstack 30
  1018  000C5C                     
  1019                           ;maincode3.c: 12:     ADCON2 = 0xA4;
  1020  000C5C  0EA4               	movlw	164
  1021  000C5E  6EC0               	movwf	192,c	;volatile
  1022                           
  1023                           ;maincode3.c: 13:     ADCON1 = 0x0E;
  1024  000C60  0E0E               	movlw	14
  1025  000C62  6EC1               	movwf	193,c	;volatile
  1026                           
  1027                           ;maincode3.c: 14:     ADCON0 = 0x01;
  1028  000C64  0E01               	movlw	1
  1029  000C66  6EC2               	movwf	194,c	;volatile
  1030  000C68  0012               	return		;funcret
  1031  000C6A                     __end_of_configuracion:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _POS_CURSOR *****************
  1035 ;; Defined at:
  1036 ;;		line 6 in file "LCD.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  fila            1    wreg     unsigned char 
  1039 ;;  columna         1    3[COMRAM] unsigned char 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  fila            1    4[COMRAM] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, status,2, status,0, cstack
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1051 ;;      Params:         1       0       0       0       0       0       0       0       0
  1052 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1053 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1054 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1055 ;;Total ram usage:        2 bytes
  1056 ;; Hardware stack levels used: 1
  1057 ;; Hardware stack levels required when called: 2
  1058 ;; This function calls:
  1059 ;;		_ENVIA_LCD_CMD
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text10
  1066  000B2C                     __ptext10:
  1067                           	callstack 0
  1068  000B2C                     _POS_CURSOR:
  1069                           	callstack 28
  1070                           
  1071                           ;incstack = 0
  1072                           ;POS_CURSOR@fila stored from wreg
  1073  000B2C  6E05               	movwf	POS_CURSOR@fila^0,c
  1074  000B2E                     
  1075                           ;LCD.c: 6: void POS_CURSOR(unsigned char fila,unsigned char columna);LCD.c: 7: {;LCD.c: 
      +                          8:  if(fila == 1)
  1076  000B2E  0405               	decf	POS_CURSOR@fila^0,w,c
  1077  000B30  A4D8               	btfss	status,2,c
  1078  000B32  EF9D  F005         	goto	u251
  1079  000B36  EF9F  F005         	goto	u250
  1080  000B3A                     u251:
  1081  000B3A  EFA5  F005         	goto	l1106
  1082  000B3E                     u250:
  1083  000B3E                     
  1084                           ;LCD.c: 9:  {;LCD.c: 10:   ENVIA_LCD_CMD(0x80+columna);
  1085  000B3E  5004               	movf	POS_CURSOR@columna^0,w,c
  1086  000B40  0F80               	addlw	128
  1087  000B42  ECB3  F005         	call	_ENVIA_LCD_CMD
  1088                           
  1089                           ;LCD.c: 11:  }
  1090  000B46  EFB2  F005         	goto	l24
  1091  000B4A                     l1106:
  1092  000B4A  0E02               	movlw	2
  1093  000B4C  1805               	xorwf	POS_CURSOR@fila^0,w,c
  1094  000B4E  A4D8               	btfss	status,2,c
  1095  000B50  EFAC  F005         	goto	u261
  1096  000B54  EFAE  F005         	goto	u260
  1097  000B58                     u261:
  1098  000B58  EFB2  F005         	goto	l24
  1099  000B5C                     u260:
  1100  000B5C                     
  1101                           ;LCD.c: 13:  {;LCD.c: 14:   ENVIA_LCD_CMD(0xC0+columna);
  1102  000B5C  5004               	movf	POS_CURSOR@columna^0,w,c
  1103  000B5E  0FC0               	addlw	192
  1104  000B60  ECB3  F005         	call	_ENVIA_LCD_CMD
  1105  000B64                     l24:
  1106  000B64  0012               	return		;funcret
  1107  000B66                     __end_of_POS_CURSOR:
  1108                           	callstack 0
  1109                           
  1110 ;; *************** function _ENVIA_LCD_CMD *****************
  1111 ;; Defined at:
  1112 ;;		line 104 in file "LCD.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  dato            1    wreg     unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  dato            1    1[COMRAM] unsigned char 
  1117 ;;  aux             1    2[COMRAM] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, status,2, status,0, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1127 ;;      Params:         0       0       0       0       0       0       0       0       0
  1128 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1130 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used: 1
  1133 ;; Hardware stack levels required when called: 1
  1134 ;; This function calls:
  1135 ;;		_ENVIA_NIBBLE
  1136 ;;		_LEER_LCD
  1137 ;; This function is called by:
  1138 ;;		_POS_CURSOR
  1139 ;;		_CURSOR_HOME
  1140 ;;		_CURSOR_ONOFF
  1141 ;;		_BORRAR_LCD
  1142 ;;		_LCD_CONFIG
  1143 ;;		_BLINK_CURSOR
  1144 ;;		_DISPLAY_ONOFF
  1145 ;;		_GENERACARACTER
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text11
  1150  000B66                     __ptext11:
  1151                           	callstack 0
  1152  000B66                     _ENVIA_LCD_CMD:
  1153                           	callstack 27
  1154                           
  1155                           ;incstack = 0
  1156                           ;ENVIA_LCD_CMD@dato stored from wreg
  1157  000B66  6E02               	movwf	ENVIA_LCD_CMD@dato^0,c
  1158  000B68                     
  1159                           ;LCD.c: 104: void ENVIA_LCD_CMD(unsigned char dato);LCD.c: 105: {;LCD.c: 106:  unsigned 
      +                          char aux;;LCD.c: 107:  LATDbits.LATD0 = 0;
  1160  000B68  908C               	bcf	140,0,c	;volatile
  1161  000B6A                     
  1162                           ;LCD.c: 108:  LEER_LCD();
  1163  000B6A  ECDC  F004         	call	_LEER_LCD	;wreg free
  1164  000B6E                     
  1165                           ;LCD.c: 109:  TRISD = 0b00000000;
  1166  000B6E  0E00               	movlw	0
  1167  000B70  6E95               	movwf	149,c	;volatile
  1168  000B72                     
  1169                           ;LCD.c: 111:         _delay(1200);
  1170  000B72  0EF0               	movlw	240
  1171  000B74                     u337:
  1172  000B74  D000               	nop2	
  1173  000B76  2EE8               	decfsz	wreg,f,c
  1174  000B78  D7FD               	bra	u337
  1175  000B7A                     
  1176                           ;LCD.c: 112:         LATDbits.LATD1 = 0;
  1177  000B7A  928C               	bcf	140,1,c	;volatile
  1178  000B7C                     
  1179                           ;LCD.c: 113:  LATDbits.LATD2 = 0;
  1180  000B7C  948C               	bcf	140,2,c	;volatile
  1181  000B7E                     
  1182                           ;LCD.c: 114:  LATDbits.LATD0 = 0;
  1183  000B7E  908C               	bcf	140,0,c	;volatile
  1184  000B80                     
  1185                           ;LCD.c: 115:  aux = dato & 0xF0;
  1186  000B80  5002               	movf	ENVIA_LCD_CMD@dato^0,w,c
  1187  000B82  0BF0               	andlw	240
  1188  000B84  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1189  000B86                     
  1190                           ;LCD.c: 116:  ENVIA_NIBBLE(aux);
  1191  000B86  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1192  000B88  EC13  F006         	call	_ENVIA_NIBBLE
  1193  000B8C                     
  1194                           ;LCD.c: 117:  aux = dato<<4;
  1195  000B8C  3802               	swapf	ENVIA_LCD_CMD@dato^0,w,c
  1196  000B8E  0BF0               	andlw	240
  1197  000B90  6E03               	movwf	ENVIA_LCD_CMD@aux^0,c
  1198  000B92                     
  1199                           ;LCD.c: 118:  ENVIA_NIBBLE(aux);
  1200  000B92  5003               	movf	ENVIA_LCD_CMD@aux^0,w,c
  1201  000B94  EC13  F006         	call	_ENVIA_NIBBLE
  1202  000B98  0012               	return		;funcret
  1203  000B9A                     __end_of_ENVIA_LCD_CMD:
  1204                           	callstack 0
  1205                           
  1206 ;; *************** function _ESCRIBE_MENSAJE *****************
  1207 ;; Defined at:
  1208 ;;		line 41 in file "LCD.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
  1211 ;;		 -> STR_2(6), STR_1(16), 
  1212 ;;  tam             1    5[COMRAM] unsigned char 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  i               1    8[COMRAM] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1224 ;;      Params:         3       0       0       0       0       0       0       0       0
  1225 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1226 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1227 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1228 ;;Total ram usage:        6 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 2
  1231 ;; This function calls:
  1232 ;;		_ENVIA_CHAR
  1233 ;; This function is called by:
  1234 ;;		_main
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text12
  1239  000AEE                     __ptext12:
  1240                           	callstack 0
  1241  000AEE                     _ESCRIBE_MENSAJE:
  1242                           	callstack 28
  1243  000AEE                     
  1244                           ;LCD.c: 41: void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam);LCD.c: 42: {;LCD.
      +                          c: 43:  unsigned char i = 0;
  1245  000AEE  0E00               	movlw	0
  1246  000AF0  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1247                           
  1248                           ;LCD.c: 44:  for(i = 0; i<tam; i++)
  1249  000AF2  0E00               	movlw	0
  1250  000AF4  6E09               	movwf	ESCRIBE_MENSAJE@i^0,c
  1251  000AF6  EF8C  F005         	goto	l1116
  1252  000AFA                     l1112:
  1253                           
  1254                           ;LCD.c: 45:  {;LCD.c: 46:   ENVIA_CHAR(cadena[i]);
  1255  000AFA  5009               	movf	ESCRIBE_MENSAJE@i^0,w,c
  1256  000AFC  2404               	addwf	ESCRIBE_MENSAJE@cadena^0,w,c
  1257  000AFE  6E07               	movwf	??_ESCRIBE_MENSAJE^0,c
  1258  000B00  0E00               	movlw	0
  1259  000B02  2005               	addwfc	(ESCRIBE_MENSAJE@cadena+1)^0,w,c
  1260  000B04  6E08               	movwf	(??_ESCRIBE_MENSAJE+1)^0,c
  1261  000B06  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1262  000B0A  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1263  000B0E                     	if	0	;tblptru may be non-zero
  1264  000B0E                     	endif
  1265  000B0E                     	if	0	;tblptru may be non-zero
  1266  000B0E                     	endif
  1267  000B0E  0008               	tblrd		*
  1268  000B10  50F5               	movf	tablat,w,c
  1269  000B12  ECCD  F005         	call	_ENVIA_CHAR
  1270  000B16                     
  1271                           ;LCD.c: 47:  }
  1272  000B16  2A09               	incf	ESCRIBE_MENSAJE@i^0,f,c
  1273  000B18                     l1116:
  1274  000B18  5006               	movf	ESCRIBE_MENSAJE@tam^0,w,c
  1275  000B1A  5C09               	subwf	ESCRIBE_MENSAJE@i^0,w,c
  1276  000B1C  A0D8               	btfss	status,0,c
  1277  000B1E  EF93  F005         	goto	u271
  1278  000B22  EF95  F005         	goto	u270
  1279  000B26                     u271:
  1280  000B26  EF7D  F005         	goto	l1112
  1281  000B2A                     u270:
  1282  000B2A  0012               	return		;funcret
  1283  000B2C                     __end_of_ESCRIBE_MENSAJE:
  1284                           	callstack 0
  1285                           
  1286 ;; *************** function _ENVIA_CHAR *****************
  1287 ;; Defined at:
  1288 ;;		line 50 in file "LCD.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  dato            1    wreg     unsigned char 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  dato            1    1[COMRAM] unsigned char 
  1293 ;;  aux             1    2[COMRAM] unsigned char 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1303 ;;      Params:         0       0       0       0       0       0       0       0       0
  1304 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1306 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1307 ;;Total ram usage:        2 bytes
  1308 ;; Hardware stack levels used: 1
  1309 ;; Hardware stack levels required when called: 1
  1310 ;; This function calls:
  1311 ;;		_ENVIA_NIBBLE
  1312 ;;		_LEER_LCD
  1313 ;; This function is called by:
  1314 ;;		_ESCRIBE_MENSAJE
  1315 ;;		_main
  1316 ;;		_GENERACARACTER
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text13
  1321  000B9A                     __ptext13:
  1322                           	callstack 0
  1323  000B9A                     _ENVIA_CHAR:
  1324                           	callstack 28
  1325                           
  1326                           ;incstack = 0
  1327                           ;ENVIA_CHAR@dato stored from wreg
  1328  000B9A  6E02               	movwf	ENVIA_CHAR@dato^0,c
  1329  000B9C                     
  1330                           ;LCD.c: 50: void ENVIA_CHAR(unsigned char dato);LCD.c: 51: {;LCD.c: 52:  unsigned char a
      +                          ux;;LCD.c: 53:  LATDbits.LATD0 = 1;
  1331  000B9C  808C               	bsf	140,0,c	;volatile
  1332  000B9E                     
  1333                           ;LCD.c: 54:  LEER_LCD();
  1334  000B9E  ECDC  F004         	call	_LEER_LCD	;wreg free
  1335  000BA2                     
  1336                           ;LCD.c: 55:  TRISD = 0x00;
  1337  000BA2  0E00               	movlw	0
  1338  000BA4  6E95               	movwf	149,c	;volatile
  1339  000BA6                     
  1340                           ;LCD.c: 56:         _delay(1200);
  1341  000BA6  0EF0               	movlw	240
  1342  000BA8                     u347:
  1343  000BA8  D000               	nop2	
  1344  000BAA  2EE8               	decfsz	wreg,f,c
  1345  000BAC  D7FD               	bra	u347
  1346  000BAE                     
  1347                           ;LCD.c: 58:  LATDbits.LATD1 = 0;
  1348  000BAE  928C               	bcf	140,1,c	;volatile
  1349  000BB0                     
  1350                           ;LCD.c: 59:  LATDbits.LATD2 = 0;
  1351  000BB0  948C               	bcf	140,2,c	;volatile
  1352  000BB2                     
  1353                           ;LCD.c: 60:  LATDbits.LATD0 = 1;
  1354  000BB2  808C               	bsf	140,0,c	;volatile
  1355  000BB4                     
  1356                           ;LCD.c: 61:  aux = dato & 0xF0;
  1357  000BB4  5002               	movf	ENVIA_CHAR@dato^0,w,c
  1358  000BB6  0BF0               	andlw	240
  1359  000BB8  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1360  000BBA                     
  1361                           ;LCD.c: 62:  ENVIA_NIBBLE(aux);
  1362  000BBA  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1363  000BBC  EC13  F006         	call	_ENVIA_NIBBLE
  1364  000BC0                     
  1365                           ;LCD.c: 63:  aux = dato << 4;
  1366  000BC0  3802               	swapf	ENVIA_CHAR@dato^0,w,c
  1367  000BC2  0BF0               	andlw	240
  1368  000BC4  6E03               	movwf	ENVIA_CHAR@aux^0,c
  1369  000BC6                     
  1370                           ;LCD.c: 64:  ENVIA_NIBBLE(aux);
  1371  000BC6  5003               	movf	ENVIA_CHAR@aux^0,w,c
  1372  000BC8  EC13  F006         	call	_ENVIA_NIBBLE
  1373  000BCC  0012               	return		;funcret
  1374  000BCE                     __end_of_ENVIA_CHAR:
  1375                           	callstack 0
  1376                           
  1377 ;; *************** function _LEER_LCD *****************
  1378 ;; Defined at:
  1379 ;;		line 121 in file "LCD.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  aux             1    0[COMRAM] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1393 ;;      Params:         0       0       0       0       0       0       0       0       0
  1394 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1396 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1397 ;;Total ram usage:        1 bytes
  1398 ;; Hardware stack levels used: 1
  1399 ;; This function calls:
  1400 ;;		Nothing
  1401 ;; This function is called by:
  1402 ;;		_ENVIA_CHAR
  1403 ;;		_ENVIA_LCD_CMD
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text14
  1408  0009B8                     __ptext14:
  1409                           	callstack 0
  1410  0009B8                     _LEER_LCD:
  1411                           	callstack 27
  1412  0009B8                     
  1413                           ;LCD.c: 123:  unsigned char aux;;LCD.c: 124:  TRISD = 0xF8;
  1414  0009B8  0EF8               	movlw	248
  1415  0009BA  6E95               	movwf	149,c	;volatile
  1416  0009BC                     
  1417                           ;LCD.c: 125:  LATDbits.LATD0 = 0;
  1418  0009BC  908C               	bcf	140,0,c	;volatile
  1419  0009BE                     
  1420                           ;LCD.c: 126:  LATDbits.LATD1 = 1;
  1421  0009BE  828C               	bsf	140,1,c	;volatile
  1422  0009C0                     
  1423                           ;LCD.c: 127:  LATDbits.LATD2 = 1;
  1424  0009C0  848C               	bsf	140,2,c	;volatile
  1425  0009C2                     
  1426                           ;LCD.c: 128:         _delay(1200);
  1427  0009C2  0EF0               	movlw	240
  1428  0009C4                     u357:
  1429  0009C4  D000               	nop2	
  1430  0009C6  2EE8               	decfsz	wreg,f,c
  1431  0009C8  D7FD               	bra	u357
  1432  0009CA                     
  1433                           ;LCD.c: 130:  aux = PORTD;
  1434  0009CA  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1435  0009CE                     
  1436                           ;LCD.c: 131:  LATDbits.LATD2 = 0;
  1437  0009CE  948C               	bcf	140,2,c	;volatile
  1438  0009D0                     
  1439                           ;LCD.c: 132:         _delay(1200);
  1440  0009D0  0EF0               	movlw	240
  1441  0009D2                     u367:
  1442  0009D2  D000               	nop2	
  1443  0009D4  2EE8               	decfsz	wreg,f,c
  1444  0009D6  D7FD               	bra	u367
  1445  0009D8                     
  1446                           ;LCD.c: 134:  LATDbits.LATD2 = 1;
  1447  0009D8  848C               	bsf	140,2,c	;volatile
  1448  0009DA                     
  1449                           ;LCD.c: 135:         _delay(1200);
  1450  0009DA  0EF0               	movlw	240
  1451  0009DC                     u377:
  1452  0009DC  D000               	nop2	
  1453  0009DE  2EE8               	decfsz	wreg,f,c
  1454  0009E0  D7FD               	bra	u377
  1455  0009E2                     
  1456                           ;LCD.c: 137:  LATDbits.LATD2 = 0;
  1457  0009E2  948C               	bcf	140,2,c	;volatile
  1458  0009E4                     l832:
  1459                           
  1460                           ;LCD.c: 138:  aux = aux & 0x80;
  1461  0009E4  5001               	movf	LEER_LCD@aux^0,w,c
  1462  0009E6  0B80               	andlw	128
  1463  0009E8  6E01               	movwf	LEER_LCD@aux^0,c
  1464                           
  1465                           ;LCD.c: 139:  while(aux == 0x80)
  1466  0009EA  EF0B  F005         	goto	l846
  1467  0009EE                     l67:
  1468                           
  1469                           ;LCD.c: 140:         {;LCD.c: 141:             LATDbits.LATD2 = 1;
  1470  0009EE  848C               	bsf	140,2,c	;volatile
  1471  0009F0                     
  1472                           ;LCD.c: 142:             _delay(1200);
  1473  0009F0  0EF0               	movlw	240
  1474  0009F2                     u387:
  1475  0009F2  D000               	nop2	
  1476  0009F4  2EE8               	decfsz	wreg,f,c
  1477  0009F6  D7FD               	bra	u387
  1478  0009F8                     
  1479                           ;LCD.c: 143:             aux = PORTD;
  1480  0009F8  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1481  0009FC                     
  1482                           ;LCD.c: 144:             LATDbits.LATD2 = 0;
  1483  0009FC  948C               	bcf	140,2,c	;volatile
  1484                           
  1485                           ;LCD.c: 145:             _delay(1200);
  1486  0009FE  0EF0               	movlw	240
  1487  000A00                     u397:
  1488  000A00  D000               	nop2	
  1489  000A02  2EE8               	decfsz	wreg,f,c
  1490  000A04  D7FD               	bra	u397
  1491  000A06                     
  1492                           ;LCD.c: 146:             LATDbits.LATD2 = 1;
  1493  000A06  848C               	bsf	140,2,c	;volatile
  1494                           
  1495                           ;LCD.c: 147:             _delay(1200);
  1496  000A08  0EF0               	movlw	240
  1497  000A0A                     u407:
  1498  000A0A  D000               	nop2	
  1499  000A0C  2EE8               	decfsz	wreg,f,c
  1500  000A0E  D7FD               	bra	u407
  1501  000A10                     
  1502                           ;LCD.c: 148:             LATDbits.LATD2 = 0;
  1503  000A10  948C               	bcf	140,2,c	;volatile
  1504  000A12  EFF2  F004         	goto	l832
  1505  000A16                     l846:
  1506                           
  1507                           ;LCD.c: 139:  while(aux == 0x80)
  1508  000A16  0E80               	movlw	128
  1509  000A18  1801               	xorwf	LEER_LCD@aux^0,w,c
  1510  000A1A  B4D8               	btfsc	status,2,c
  1511  000A1C  EF12  F005         	goto	u11
  1512  000A20  EF14  F005         	goto	u10
  1513  000A24                     u11:
  1514  000A24  EFF7  F004         	goto	l67
  1515  000A28                     u10:
  1516  000A28  0012               	return		;funcret
  1517  000A2A                     __end_of_LEER_LCD:
  1518                           	callstack 0
  1519                           
  1520 ;; *************** function _ENVIA_NIBBLE *****************
  1521 ;; Defined at:
  1522 ;;		line 93 in file "LCD.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  dato            1    wreg     unsigned char 
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  dato            1    0[COMRAM] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0
  1537 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1539 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1540 ;;Total ram usage:        1 bytes
  1541 ;; Hardware stack levels used: 1
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_ENVIA_CHAR
  1546 ;;		_LCD_CONFIG
  1547 ;;		_ENVIA_LCD_CMD
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text15
  1552  000C26                     __ptext15:
  1553                           	callstack 0
  1554  000C26                     _ENVIA_NIBBLE:
  1555                           	callstack 28
  1556                           
  1557                           ;incstack = 0
  1558                           ;ENVIA_NIBBLE@dato stored from wreg
  1559  000C26  6E01               	movwf	ENVIA_NIBBLE@dato^0,c
  1560  000C28                     
  1561                           ;LCD.c: 93: void ENVIA_NIBBLE(unsigned char dato);LCD.c: 94: {;LCD.c: 95:  LATD &= 0x0F;
  1562  000C28  0E0F               	movlw	15
  1563  000C2A  168C               	andwf	140,f,c	;volatile
  1564                           
  1565                           ;LCD.c: 96:  dato &= 0xF0;
  1566  000C2C  0EF0               	movlw	240
  1567  000C2E  1601               	andwf	ENVIA_NIBBLE@dato^0,f,c
  1568                           
  1569                           ;LCD.c: 97:  LATD|= dato;
  1570  000C30  5001               	movf	ENVIA_NIBBLE@dato^0,w,c	;volatile
  1571  000C32  128C               	iorwf	140,f,c	;volatile
  1572  000C34                     
  1573                           ;LCD.c: 98:  LATDbits.LATD2 = 1;
  1574  000C34  848C               	bsf	140,2,c	;volatile
  1575  000C36                     
  1576                           ;LCD.c: 100:         _delay(1200);
  1577  000C36  0EF0               	movlw	240
  1578  000C38                     u417:
  1579  000C38  D000               	nop2	
  1580  000C3A  2EE8               	decfsz	wreg,f,c
  1581  000C3C  D7FD               	bra	u417
  1582  000C3E                     
  1583                           ;LCD.c: 101:  LATDbits.LATD2 = 0;
  1584  000C3E  948C               	bcf	140,2,c	;volatile
  1585  000C40  0012               	return		;funcret
  1586  000C42                     __end_of_ENVIA_NIBBLE:
  1587                           	callstack 0
  1588                           
  1589                           	psect	rparam
  1590  0000                     
  1591                           	psect	idloc
  1592                           
  1593                           ;Config register IDLOC0 @ 0x200000
  1594                           ;	unspecified, using default values
  1595  200000                     	org	2097152
  1596  200000  FF                 	db	255
  1597                           
  1598                           ;Config register IDLOC1 @ 0x200001
  1599                           ;	unspecified, using default values
  1600  200001                     	org	2097153
  1601  200001  FF                 	db	255
  1602                           
  1603                           ;Config register IDLOC2 @ 0x200002
  1604                           ;	unspecified, using default values
  1605  200002                     	org	2097154
  1606  200002  FF                 	db	255
  1607                           
  1608                           ;Config register IDLOC3 @ 0x200003
  1609                           ;	unspecified, using default values
  1610  200003                     	org	2097155
  1611  200003  FF                 	db	255
  1612                           
  1613                           ;Config register IDLOC4 @ 0x200004
  1614                           ;	unspecified, using default values
  1615  200004                     	org	2097156
  1616  200004  FF                 	db	255
  1617                           
  1618                           ;Config register IDLOC5 @ 0x200005
  1619                           ;	unspecified, using default values
  1620  200005                     	org	2097157
  1621  200005  FF                 	db	255
  1622                           
  1623                           ;Config register IDLOC6 @ 0x200006
  1624                           ;	unspecified, using default values
  1625  200006                     	org	2097158
  1626  200006  FF                 	db	255
  1627                           
  1628                           ;Config register IDLOC7 @ 0x200007
  1629                           ;	unspecified, using default values
  1630  200007                     	org	2097159
  1631  200007  FF                 	db	255
  1632                           
  1633                           	psect	config
  1634                           
  1635                           ;Config register CONFIG1L @ 0x300000
  1636                           ;	PLL Prescaler Selection bits
  1637                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1638                           ;	System Clock Postscaler Selection bits
  1639                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1640                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1641                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1642  300000                     	org	3145728
  1643  300000  00                 	db	0
  1644                           
  1645                           ;Config register CONFIG1H @ 0x300001
  1646                           ;	Oscillator Selection bits
  1647                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
  1648                           ;	Fail-Safe Clock Monitor Enable bit
  1649                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1650                           ;	Internal/External Oscillator Switchover bit
  1651                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1652  300001                     	org	3145729
  1653  300001  02                 	db	2
  1654                           
  1655                           ;Config register CONFIG2L @ 0x300002
  1656                           ;	Power-up Timer Enable bit
  1657                           ;	PWRT = ON, PWRT enabled
  1658                           ;	Brown-out Reset Enable bits
  1659                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1660                           ;	Brown-out Reset Voltage bits
  1661                           ;	BORV = 3, Minimum setting 2.05V
  1662                           ;	USB Voltage Regulator Enable bit
  1663                           ;	VREGEN = OFF, USB voltage regulator disabled
  1664  300002                     	org	3145730
  1665  300002  18                 	db	24
  1666                           
  1667                           ;Config register CONFIG2H @ 0x300003
  1668                           ;	Watchdog Timer Enable bit
  1669                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1670                           ;	Watchdog Timer Postscale Select bits
  1671                           ;	WDTPS = 32768, 1:32768
  1672  300003                     	org	3145731
  1673  300003  1E                 	db	30
  1674                           
  1675                           ; Padding undefined space
  1676  300004                     	org	3145732
  1677  300004  FF                 	db	255
  1678                           
  1679                           ;Config register CONFIG3H @ 0x300005
  1680                           ;	CCP2 MUX bit
  1681                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1682                           ;	PORTB A/D Enable bit
  1683                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1684                           ;	Low-Power Timer 1 Oscillator Enable bit
  1685                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1686                           ;	MCLR Pin Enable bit
  1687                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1688  300005                     	org	3145733
  1689  300005  81                 	db	129
  1690                           
  1691                           ;Config register CONFIG4L @ 0x300006
  1692                           ;	Stack Full/Underflow Reset Enable bit
  1693                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1694                           ;	Single-Supply ICSP Enable bit
  1695                           ;	LVP = OFF, Single-Supply ICSP disabled
  1696                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1697                           ;	ICPRT = OFF, ICPORT disabled
  1698                           ;	Extended Instruction Set Enable bit
  1699                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1700                           ;	Background Debugger Enable bit
  1701                           ;	DEBUG = 0x1, unprogrammed default
  1702  300006                     	org	3145734
  1703  300006  81                 	db	129
  1704                           
  1705                           ; Padding undefined space
  1706  300007                     	org	3145735
  1707  300007  FF                 	db	255
  1708                           
  1709                           ;Config register CONFIG5L @ 0x300008
  1710                           ;	Code Protection bit
  1711                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1712                           ;	Code Protection bit
  1713                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1714                           ;	Code Protection bit
  1715                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1716                           ;	Code Protection bit
  1717                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1718  300008                     	org	3145736
  1719  300008  0F                 	db	15
  1720                           
  1721                           ;Config register CONFIG5H @ 0x300009
  1722                           ;	Boot Block Code Protection bit
  1723                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1724                           ;	Data EEPROM Code Protection bit
  1725                           ;	CPD = OFF, Data EEPROM is not code-protected
  1726  300009                     	org	3145737
  1727  300009  C0                 	db	192
  1728                           
  1729                           ;Config register CONFIG6L @ 0x30000A
  1730                           ;	Write Protection bit
  1731                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1732                           ;	Write Protection bit
  1733                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1734                           ;	Write Protection bit
  1735                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1736                           ;	Write Protection bit
  1737                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1738  30000A                     	org	3145738
  1739  30000A  0F                 	db	15
  1740                           
  1741                           ;Config register CONFIG6H @ 0x30000B
  1742                           ;	Configuration Register Write Protection bit
  1743                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1744                           ;	Boot Block Write Protection bit
  1745                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1746                           ;	Data EEPROM Write Protection bit
  1747                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1748  30000B                     	org	3145739
  1749  30000B  E0                 	db	224
  1750                           
  1751                           ;Config register CONFIG7L @ 0x30000C
  1752                           ;	Table Read Protection bit
  1753                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1754                           ;	Table Read Protection bit
  1755                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1756                           ;	Table Read Protection bit
  1757                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1758                           ;	Table Read Protection bit
  1759                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1760  30000C                     	org	3145740
  1761  30000C  0F                 	db	15
  1762                           
  1763                           ;Config register CONFIG7H @ 0x30000D
  1764                           ;	Boot Block Table Read Protection bit
  1765                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1766  30000D                     	org	3145741
  1767  30000D  40                 	db	64
  1768                           tosu	equ	0xFFF
  1769                           tosh	equ	0xFFE
  1770                           tosl	equ	0xFFD
  1771                           stkptr	equ	0xFFC
  1772                           pclatu	equ	0xFFB
  1773                           pclath	equ	0xFFA
  1774                           pcl	equ	0xFF9
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           prodh	equ	0xFF4
  1780                           prodl	equ	0xFF3
  1781                           indf0	equ	0xFEF
  1782                           postinc0	equ	0xFEE
  1783                           postdec0	equ	0xFED
  1784                           preinc0	equ	0xFEC
  1785                           plusw0	equ	0xFEB
  1786                           fsr0h	equ	0xFEA
  1787                           fsr0l	equ	0xFE9
  1788                           wreg	equ	0xFE8
  1789                           indf1	equ	0xFE7
  1790                           postinc1	equ	0xFE6
  1791                           postdec1	equ	0xFE5
  1792                           preinc1	equ	0xFE4
  1793                           plusw1	equ	0xFE3
  1794                           fsr1h	equ	0xFE2
  1795                           fsr1l	equ	0xFE1
  1796                           bsr	equ	0xFE0
  1797                           indf2	equ	0xFDF
  1798                           postinc2	equ	0xFDE
  1799                           postdec2	equ	0xFDD
  1800                           preinc2	equ	0xFDC
  1801                           plusw2	equ	0xFDB
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8

Data Sizes:
    Strings     22
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[6]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_digbyte
    _lcd_init->_CURSOR_ONOFF
    _lcd_init->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _digbyte->___lwdiv
    ___lwdiv->___lwmod
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2917
                                             14 COMRAM     2     2      0
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                      _configuracion
                            _digbyte
                           _lcd_init
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     525
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _digbyte                                              2     0      2    1397
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     615
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _configuracion                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     360
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _configuracion
   _digbyte
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _lcd_init
     _BORRAR_LCD
       _ENVIA_LCD_CMD
     _CURSOR_HOME
       _ENVIA_LCD_CMD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
       _ENVIA_NIBBLE

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Oct 12 21:18:14 2021

                      l24 0B64                        l42 0BFC                        l51 0BCC  
                      l60 0C40                        l37 0C70                        l54 0C78  
                      l63 0B98                        l48 0B2A                        l57 0AEC  
                      l67 09EE                        l69 0A28                        u10 0A28  
                      u11 0A24                        u20 0BE0                        u21 0BDC  
                      u30 0BF6                        u31 0BF2            ?_configuracion 0001  
           ENVIA_CHAR@aux 0003                       l120 0C24                       l123 08B0  
                     l117 0C68                       l129 08D6                       l810 09B8  
                     l635 09B6                       l820 09CA                       l812 09BC  
                     l900 0BB2                       l628 09AE                       l645 0A8C  
                     l830 09E2                       l822 09CE                       l814 09BE  
                     l902 0BB4                       l638 0A84                       l910 0C72  
                     l840 0A06                       l832 09E4                       l824 09D0  
                     l816 09C0                       l904 0BBA                       l920 0ABA  
                     l912 0A8E                       l850 0C34                       l842 0A10  
                     l834 09F0                       l826 09D8                       l818 09C2  
                     l906 0BC0                       l930 0ADA                       l922 0AC2  
                     l914 0A92                       l852 0C36                       l836 09F8  
                     l828 09DA                       l908 0BC6                       l860 0B6E  
                     l932 0AE0                       l924 0AC8                       l916 0A98  
                     l854 0C3E                       l838 09FC                       l846 0A16  
                     l870 0B80                       l862 0B72                       l934 0AE6  
                     l926 0ACE                       l918 0AA6                       l848 0C28  
                     l872 0B86                       l864 0B7A                       l856 0B68  
                     l880 0BD0                       l928 0AD4                       l890 0B9E  
                     l874 0B8C                       l866 0B7C                       l858 0B6A  
                     l882 0BE0                       l892 0BA2                       l876 0B92  
                     l868 0B7E                       l884 0BE6                       l894 0BA6  
                     l990 0C5C                       l878 0C6A                       l886 0BF6  
                     l896 0BAE                       l888 0B9C                       l992 0BFE  
                     l898 0BB0                       l994 0C02                       l996 0C06  
                     l998 0C16                       u200 097C                       u201 0978  
                     u210 0998                       u211 0994                       u220 0A3C  
                     u221 0A38                       u230 0A5A                       u231 0A56  
                     u240 0A70                       u241 0A6C                       u250 0B3E  
                     u251 0B3A                       u307 0A9E                       u260 0B5C  
                     u261 0B58                       u317 0AAC                       u270 0B2A  
                     u190 095E                       u407 0A0A                       u271 0B26  
                     u191 095A                       u327 0ABC                       u280 08E4  
                     u417 0C38                       u337 0B74                       u281 08E0  
                     u347 0BA8                       u357 09C4                       u367 09D2  
                     u377 09DC                       u297 0C0C                       u387 09F2  
                     u397 0A00               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001            ENVIA_CHAR@dato 0002  
                    l1000 0C1A                      l1002 0C1E                      l1100 0A7E  
                    l1110 0AEE                      l1102 0B2E                      l1112 0AFA  
                    l1104 0B3E                      l1120 08B2                      l1114 0B16  
                    l1106 0B4A                      l1130 08E4                      l1122 08B6  
                    l1116 0B18                      l1108 0B5C                      l1140 0924  
                    l1132 08F6                      l1124 08BA                      l1070 0966  
                    l1118 0818                      l1142 092C                      l1134 0902  
                    l1126 08C4                      l1080 09A0                      l1072 096E  
                    l1064 0944                      l1144 0934                      l1136 090C  
                    l1128 08D4                      l1082 09A2                      l1074 097C  
                    l1066 094C                      l1090 0A44                      l1138 091C  
                    l1084 09A8                      l1076 0982                      l1068 095E  
                    l1092 0A4C                      l1078 0998                      l1094 0A5A  
                    l1086 0A2A                      l1096 0A70                      l1088 0A3C  
                    l1098 0A78                      STR_1 0801                      STR_2 0811  
                    _LATD 000F8C                      _main 08B2                      start 0000  
           ?_CURSOR_ONOFF 0001              ___param_bank 000000           ??_ENVIA_LCD_CMD 0002  
        __end_of_LEER_LCD 0A2A       __size_of_BORRAR_LCD 0008                     ?_main 0001  
         __end_of___lwdiv 09B8           __end_of___lwmod 0A8E                     _PORTD 000F83  
     __size_of_LCD_CONFIG 0060                     _TRISD 000F95       __size_of_ENVIA_CHAR 0034  
         __end_of_digbyte 08B2               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004           __initialization 0C42  
            __end_of_main 0944           ??_configuracion 0001           _ESCRIBE_MENSAJE 0AEE  
                  ??_main 000F             __activetblptr 000001                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _ADRESH 000FC4  
                  _ADRESL 000FC3          __end_of_lcd_init 0C26                    _decena 0013  
    __end_of_ENVIA_NIBBLE 0C42                 ??___lwdiv 000A                 ??___lwmod 0005  
     __size_of_POS_CURSOR 003A                    _millar 0017                    clear_0 0C48  
                  _res_ad 0019                    isa$std 000001                 ??_digbyte 000F  
                  _unidad 0011              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0C4E              ??_LCD_CONFIG 0004             ___rparam_used 000001  
            ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0B2C            __pcstackCOMRAM 0001  
      __end_of_BORRAR_LCD 0C7A          ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0BFE  
      __end_of_LCD_CONFIG 0AEE        __end_of_ENVIA_CHAR 0BCE                ??_LEER_LCD 0001  
        ENVIA_NIBBLE@dato 0001              ??_POS_CURSOR 0005                 ?_lcd_init 0001  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004            digbyte@data_in 000D                   ___lwdiv 0944  
                 ___lwmod 0A2A              __psmallconst 0800     __end_of_ENVIA_LCD_CMD 0B9A  
                 __pcinit 0C42        __end_of_POS_CURSOR 0B66                   __ramtop 0800  
                 _centena 0015                   _digbyte 0818                   __ptext0 08B2  
                 __ptext1 0BFE                   __ptext2 0A8E                   __ptext3 0BCE  
                 __ptext4 0C6A                   __ptext5 0C72                   __ptext6 0818  
                 __ptext7 0A2A                   __ptext8 0944                   __ptext9 0C5C  
              ??_lcd_init 0005              _ENVIA_NIBBLE 0C26      end_of_initialization 0C4E  
                 postinc0 000FEE     __end_of_configuracion 0C6A     __size_of_CURSOR_ONOFF 0030  
       __size_of_LEER_LCD 0072              _CURSOR_ONOFF 0BCE        CURSOR_ONOFF@estado 0004  
           ??_CURSOR_HOME 0004       start_initialization 0C42         ENVIA_LCD_CMD@dato 0002  
             __pbssCOMRAM 0011       __end_of_CURSOR_HOME 0C72         __size_of_lcd_init 0028  
        ___lwdiv@dividend 0006                  ?___lwdiv 0006                  ?___lwmod 0001  
                ?_digbyte 000D               __smallconst 0800          ___lwdiv@quotient 000A  
                _LEER_LCD 09B8                  _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003E                _ADCON0bits 000FC2  
             _CURSOR_HOME 0C6A    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800          __size_of___lwdiv 0074  
        __size_of___lwmod 0064          __size_of_digbyte 009A           ___lwdiv@divisor 0008  
         ___lwdiv@counter 000C                  __ptext10 0B2C                  __ptext11 0B66  
                __ptext12 0AEE                  __ptext13 0B9A                  __ptext14 09B8  
                __ptext15 0C26                _BORRAR_LCD 0C72                  _lcd_init 0BFE  
  __size_of_configuracion 000E             __size_of_main 0092                _LCD_CONFIG 0A8E  
              _ENVIA_CHAR 0B9A                  isa$xinst 000000             _ENVIA_LCD_CMD 0B66  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004          ___lwmod@dividend 0001  
          ?_ENVIA_LCD_CMD 0001             _configuracion 0C5C           ___lwmod@divisor 0003  
         ___lwmod@counter 0005               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0B2C               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
